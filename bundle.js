(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var franc = require('franc');
var $ = require('jquery');
var ee = require('event-emitter');
var CountryLanguage = require('country-language');

var emitter = ee({}), listener;




var counter = 0;


function Tts() {
    var thisTTS = this;
    this.rate = 1.2;
    this.playing = false;
    this.utterance = null;
    this.text = '';
    this.target = null;
    this.charIndex = 0;
    this.counter = 0 ;

    this.isPlaying= function () {
        return this.playing;
    };

    this.init = function (text,target) {
        this.text= text;
        if (target)
            this.target= target;
        var isoLang = franc(toBeSpoken,3);
        CountryLanguage.getLanguage(isoLang, function (err, data) {
            if(err) console.log(err);
            if(data)
            {
                var utterance = new SpeechSynthesisUtterance(text);
                utterance.rate = thisTTS.rate;
                utterance.voice = window.speechSynthesis.getVoices().filter(function(item){
                    return item.lang.indexOf(data.iso639_1)!=-1
                })[0];
                utterance.onend=function () {
                    thisTTS.playing=false;
                    thisTTS.eject();
                };
                utterance.onboundary = function (e) {
                    emitter.emit('index',e.charIndex);
                };
                thisTTS.utterance = utterance;
            }
        });
    };

    this.inject = function (element) {
        var overlay = $('<div class="ttsoverlay"> ' + element+' </div>');
        overlay.appendTo(document.body)

    };
    this.eject = function () {
        $('.ttsoverlay').remove();
        this.counter = 0;
    };

    this.play = function () {
        if(thisTTS.utterance){
            window.speechSynthesis.speak(thisTTS.utterance);
            thisTTS.playing = true;
        }
        this.inject(this.markDOM(this.text));
    };
    this.stop = function () {
        this.eject();
        window.speechSynthesis.cancel();
        thisTTS.playing = false;
    };
    this.resume = function () {
        window.speechSynthesis.resume();
        thisTTS.playing = true;
    };
    this.pause = function () {
        window.speechSynthesis.pause();
        thisTTS.playing = false;
    };
    this.goFaster = function () {
        this.rate= this.rate+0.1;
        this.init(this.text);
    };
    this.goSlower = function () {
        this.rate= this.rate-0.1;
        this.init(this.text);
    };

    this.markDOM = function (selectedText) {

        var fullElText = this.target.text();
        var sIndex = fullElText.indexOf(selectedText);
        var eIndex = sIndex+selectedText.length;

        var split = selectedText.splitWithIndex(/[ .]+/);
        //console.log(split);
        var marked = "";
        for (var i = 0 ; i<split.length ; i++ ){
            marked += "<span class='w" +split[i][0]+"'>"+split[i][1]+" </span>" ;
        }
        result = fullElText.slice(0,sIndex) + marked +
            fullElText.slice(eIndex);
        return marked;
    }
}

var player = new Tts() ;

$(document).ready(function () {


    emitter.on('index', listener = function (index) {
        var selector=".w0";
        for (var i=1;i<=index;i++) {
            selector += " , .w" + i;
        }
        console.log(selector);
        $(selector)
            .css("background-color","#f7e50a")
            .css("text-decoration", "underline");
    });



    $(document).click(function (event) {
        if (window.getSelection) {
            toBeSpoken = window.getSelection().toString();
        } else if (document.selection && document.selection.type != "Control") {
            toBeSpoken = document.selection.createRange().text;
        }
        var target = $(event.target);
        player.init(toBeSpoken, target);




    }).keydown(function (e) {
        if (e.keyCode == 83 && e.altKey) {
            if (player.isPlaying()) {
                player.stop();
            } else {
                if (player.utterance) {
                    player.play();
                }
            }
        } else if (e.keyCode == 68 && e.altKey) {
            if (player.isPlaying()) {
                player.pause();
            } else {
                player.resume();
            }
        } else if (e.keyCode == 187 && e.altKey) {
            player.goFaster();
        } else if (e.keyCode == 189 && e.altKey) {
            player.goSlower();
        }
    });

});

String.prototype.splitWithIndex=function(delim){
    var ret=[];
    var splits=this.split(delim);
    var index=0;
    for(var i=0;i<splits.length;i++){
        ret.push([index,splits[i]]);
        index+=splits[i].length+1;
    }
    return ret;
};

},{"country-language":3,"event-emitter":19,"franc":20,"jquery":24}],2:[function(require,module,exports){
module.exports={
  "languageFamilies": [
    "Northwest Caucasian",
    "Afro-Asiatic",
    "Indo-European",
    "Niger–Congo",
    "Northeast Caucasian",
    "Aymaran",
    "Turkic",
    "Language isolate",
    "Creole",
    "Sino-Tibetan",
    "Austronesian",
    "Algonquian",
    "Constructed",
    "Uralic",
    "South Caucasian",
    "Tupian",
    "Eskimo–Aleut",
    "Japonic",
    "Dravidian",
    "Nilo-Saharan",
    "Austroasiatic",
    "Koreanic",
    "Tai–Kadai",
    "Mongolic",
    "Dené–Yeniseian",
    "Niger-Congo",
    "Quechuan"
  ],
  "languages": [
    {
      "iso639_1": "ab",
      "iso639_2": "abk",
      "iso639_2en": "abk",
      "iso639_3": "abk",
      "name": [
        "Abkhaz"
      ],
      "nativeName": [
        "аҧсуа бызшәа",
        "аҧсшәа"
      ],
      "direction": "LTR",
      "family": "Northwest Caucasian"
    },
    {
      "iso639_1": "aa",
      "iso639_2": "aar",
      "iso639_2en": "aar",
      "iso639_3": "aar",
      "name": [
        "Afar"
      ],
      "nativeName": [
        "Afaraf"
      ],
      "direction": "LTR",
      "family": "Afro-Asiatic",
      "countries": [
        "DJI"
      ]
    },
    {
      "iso639_1": "af",
      "iso639_2": "afr",
      "iso639_2en": "afr",
      "iso639_3": "afr",
      "name": [
        "Afrikaans"
      ],
      "nativeName": [
        "Afrikaans"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "ZAF"
      ],
      "langCultureMs": [
        {
          "langCultureName": "af-ZA",
          "displayName": "Afrikaans - South Africa",
          "cultureCode": "0x0436"
        }
      ]
    },
    {
      "iso639_1": "ak",
      "iso639_2": "aka",
      "iso639_2en": "aka",
      "iso639_3": "aka",
      "name": [
        "Akan"
      ],
      "nativeName": [
        "Akan"
      ],
      "direction": "LTR",
      "family": "Niger–Congo",
      "countries": [
        "GHA"
      ]
    },
    {
      "iso639_1": "sq",
      "iso639_2": "sqi",
      "iso639_2en": "alb",
      "iso639_3": "sqi",
      "name": [
        "Albanian"
      ],
      "nativeName": [
        "gjuha shqipe"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "ALB"
      ],
      "langCultureMs": [
        {
          "langCultureName": "sq-AL",
          "displayName": "Albanian - Albania",
          "cultureCode": "0x041C"
        }
      ]
    },
    {
      "iso639_1": "am",
      "iso639_2": "amh",
      "iso639_2en": "amh",
      "iso639_3": "amh",
      "name": [
        "Amharic"
      ],
      "nativeName": [
        "አማርኛ"
      ],
      "direction": "LTR",
      "family": "Afro-Asiatic",
      "countries": [
        "ETH"
      ]
    },
    {
      "iso639_1": "ar",
      "iso639_2": "ara",
      "iso639_2en": "ara",
      "iso639_3": "ara",
      "name": [
        "Arabic"
      ],
      "nativeName": [
        "العربية"
      ],
      "direction": "RTL",
      "family": "Afro-Asiatic",
      "countries": [
        "DZA",
        "BHR",
        "TCD",
        "COM",
        "DJI",
        "EGY",
        "ERI",
        "IRQ",
        "ISR",
        "JOR",
        "KWT",
        "LBN",
        "LBY",
        "MRT",
        "MAR",
        "NER",
        "OMN",
        "QAT",
        "SAU",
        "SOM",
        "SDN",
        "SYR",
        "TUN",
        "ARE",
        "YEM"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ar-DZ",
          "displayName": "Arabic - Algeria",
          "cultureCode": "0x1401"
        },
        {
          "langCultureName": "ar-BH",
          "displayName": "Arabic - Bahrain",
          "cultureCode": "0x3C01"
        },
        {
          "langCultureName": "ar-EG",
          "displayName": "Arabic - Egypt",
          "cultureCode": "0x0C01"
        },
        {
          "langCultureName": "ar-IQ",
          "displayName": "Arabic - Iraq",
          "cultureCode": "0x0801"
        },
        {
          "langCultureName": "ar-JO",
          "displayName": "Arabic - Jordan",
          "cultureCode": "0x2C01"
        },
        {
          "langCultureName": "ar-KW",
          "displayName": "Arabic - Kuwait",
          "cultureCode": "0x3401"
        },
        {
          "langCultureName": "ar-LB",
          "displayName": "Arabic - Lebanon",
          "cultureCode": "0x3001"
        },
        {
          "langCultureName": "ar-LY",
          "displayName": "Arabic - Libya",
          "cultureCode": "0x1001"
        },
        {
          "langCultureName": "ar-MA",
          "displayName": "Arabic - Morocco",
          "cultureCode": "0x1801"
        },
        {
          "langCultureName": "ar-OM",
          "displayName": "Arabic - Oman",
          "cultureCode": "0x2001"
        },
        {
          "langCultureName": "ar-QA",
          "displayName": "Arabic - Qatar",
          "cultureCode": "0x4001"
        },
        {
          "langCultureName": "ar-SA",
          "displayName": "Arabic - Saudi Arabia",
          "cultureCode": "0x0401"
        },
        {
          "langCultureName": "ar-SY",
          "displayName": "Arabic - Syria",
          "cultureCode": "0x2801"
        },
        {
          "langCultureName": "ar-TN",
          "displayName": "Arabic - Tunisia",
          "cultureCode": "0x1C01"
        },
        {
          "langCultureName": "ar-AE",
          "displayName": "Arabic - United Arab Emirates",
          "cultureCode": "0x3801"
        },
        {
          "langCultureName": "ar-YE",
          "displayName": "Arabic - Yemen",
          "cultureCode": "0x2401"
        }
      ]
    },
    {
      "iso639_1": "an",
      "iso639_2": "arg",
      "iso639_2en": "arg",
      "iso639_3": "arg",
      "name": [
        "Aragonese"
      ],
      "nativeName": [
        "aragonés"
      ],
      "direction": "LTR",
      "family": "Indo-European"
    },
    {
      "iso639_1": "hy",
      "iso639_2": "hye",
      "iso639_2en": "arm",
      "iso639_3": "hye",
      "name": [
        "Armenian"
      ],
      "nativeName": [
        "Հայերեն"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "ARM"
      ],
      "langCultureMs": [
        {
          "langCultureName": "hy-AM",
          "displayName": "Armenian - Armenia",
          "cultureCode": "0x042B"
        }
      ]
    },
    {
      "iso639_1": "as",
      "iso639_2": "asm",
      "iso639_2en": "asm",
      "iso639_3": "asm",
      "name": [
        "Assamese"
      ],
      "nativeName": [
        "অসমীয়া"
      ],
      "direction": "LTR",
      "family": "Indo-European"
    },
    {
      "iso639_1": "av",
      "iso639_2": "ava",
      "iso639_2en": "ava",
      "iso639_3": "ava",
      "name": [
        "Avaric"
      ],
      "nativeName": [
        "авар мацӀ",
        "магӀарул мацӀ"
      ],
      "direction": "LTR",
      "family": "Northeast Caucasian"
    },
    {
      "iso639_1": "ae",
      "iso639_2": "ave",
      "iso639_2en": "ave",
      "iso639_3": "ave",
      "name": [
        "Avestan"
      ],
      "nativeName": [
        "avesta"
      ],
      "direction": "LTR",
      "family": "Indo-European"
    },
    {
      "iso639_1": "ay",
      "iso639_2": "aym",
      "iso639_2en": "aym",
      "iso639_3": "aym",
      "name": [
        "Aymara"
      ],
      "nativeName": [
        "aymar aru"
      ],
      "direction": "LTR",
      "family": "Aymaran",
      "countries": [
        "BOL",
        "PER"
      ]
    },
    {
      "iso639_1": "az",
      "iso639_2": "aze",
      "iso639_2en": "aze",
      "iso639_3": "aze",
      "name": [
        "Azerbaijani"
      ],
      "nativeName": [
        "azərbaycan dili"
      ],
      "direction": "LTR",
      "family": "Turkic",
      "countries": [
        "AZE"
      ],
      "langCultureMs": [
        {
          "langCultureName": "Cy-az-AZ",
          "displayName": "Azeri (Cyrillic) - Azerbaijan",
          "cultureCode": "0x082C"
        },
        {
          "langCultureName": "Lt-az-AZ",
          "displayName": "Azeri (Latin) - Azerbaijan",
          "cultureCode": "0x042C"
        }
      ]
    },
    {
      "iso639_1": "bm",
      "iso639_2": "bam",
      "iso639_2en": "bam",
      "iso639_3": "bam",
      "name": [
        "Bambara"
      ],
      "nativeName": [
        "bamanankan"
      ],
      "direction": "LTR",
      "family": "Niger–Congo",
      "countries": [
        "MLI"
      ]
    },
    {
      "iso639_1": "ba",
      "iso639_2": "bak",
      "iso639_2en": "bak",
      "iso639_3": "bak",
      "name": [
        "Bashkir"
      ],
      "nativeName": [
        "башҡорт теле"
      ],
      "direction": "LTR",
      "family": "Turkic"
    },
    {
      "iso639_1": "eu",
      "iso639_2": "eus",
      "iso639_2en": "baq",
      "iso639_3": "eus",
      "name": [
        "Basque"
      ],
      "nativeName": [
        "euskara",
        "euskera"
      ],
      "direction": "LTR",
      "family": "Language isolate",
      "langCultureMs": [
        {
          "langCultureName": "eu-ES",
          "displayName": "Basque - Basque",
          "cultureCode": "0x042D"
        }
      ]
    },
    {
      "iso639_1": "be",
      "iso639_2": "bel",
      "iso639_2en": "bel",
      "iso639_3": "bel",
      "name": [
        "Belarusian"
      ],
      "nativeName": [
        "беларуская мова"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "BLR"
      ],
      "langCultureMs": [
        {
          "langCultureName": "be-BY",
          "displayName": "Belarusian - Belarus",
          "cultureCode": "0x0423"
        }
      ]
    },
    {
      "iso639_1": "bn",
      "iso639_2": "ben",
      "iso639_2en": "ben",
      "iso639_3": "ben",
      "name": [
        "Bengali",
        "Bangla"
      ],
      "nativeName": [
        "বাংলা"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "BGD",
        "IND"
      ]
    },
    {
      "iso639_1": "",
      "iso639_2": "ber",
      "iso639_2en": "ber",
      "iso639_3": "ber",
      "name": [
        "Berber"
      ],
      "nativeName": [
        "Tamaziɣt",
        "Tamazight",
        "ⵜⴰⵎⴰⵣⵉⵖⵜ"
      ],
      "direction": "LTR",
      "family": "Afro-Asiatic",
      "countries": [
        "DZA",
        "MAR"
      ]
    },
    {
      "iso639_1": "bh",
      "iso639_2": "bih",
      "iso639_2en": "bih",
      "iso639_3": "",
      "name": [
        "Bihari"
      ],
      "nativeName": [
        "भोजपुरी"
      ],
      "direction": "LTR",
      "family": "Indo-European"
    },
    {
      "iso639_1": "bi",
      "iso639_2": "bis",
      "iso639_2en": "bis",
      "iso639_3": "bis",
      "name": [
        "Bislama"
      ],
      "nativeName": [
        "Bislama"
      ],
      "direction": "LTR",
      "family": "Creole",
      "countries": [
        "VUT"
      ]
    },
    {
      "iso639_1": "bs",
      "iso639_2": "bos",
      "iso639_2en": "bos",
      "iso639_3": "bos",
      "name": [
        "Bosnian"
      ],
      "nativeName": [
        "bosanski jezik"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "BIH"
      ]
    },
    {
      "iso639_1": "br",
      "iso639_2": "bre",
      "iso639_2en": "bre",
      "iso639_3": "bre",
      "name": [
        "Breton"
      ],
      "nativeName": [
        "brezhoneg"
      ],
      "direction": "LTR",
      "family": "Indo-European"
    },
    {
      "iso639_1": "bg",
      "iso639_2": "bul",
      "iso639_2en": "bul",
      "iso639_3": "bul",
      "name": [
        "Bulgarian"
      ],
      "nativeName": [
        "български език"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "BGR"
      ],
      "langCultureMs": [
        {
          "langCultureName": "bg-BG",
          "displayName": "Bulgarian - Bulgaria",
          "cultureCode": "0x0402"
        }
      ]
    },
    {
      "iso639_1": "my",
      "iso639_2": "mya",
      "iso639_2en": "bur",
      "iso639_3": "mya",
      "name": [
        "Burmese"
      ],
      "nativeName": [
        "ဗမာစာ"
      ],
      "direction": "LTR",
      "family": "Sino-Tibetan",
      "countries": [
        "MMR"
      ]
    },
    {
      "iso639_1": "ca",
      "iso639_2": "cat",
      "iso639_2en": "cat",
      "iso639_3": "cat",
      "name": [
        "Catalan",
        "Valencian"
      ],
      "nativeName": [
        "català",
        "valencià"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "AND"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ca-ES",
          "displayName": "Catalan - Catalan",
          "cultureCode": "0x0403"
        }
      ]
    },
    {
      "iso639_1": "ch",
      "iso639_2": "cha",
      "iso639_2en": "cha",
      "iso639_3": "cha",
      "name": [
        "Chamorro"
      ],
      "nativeName": [
        "Chamoru"
      ],
      "direction": "LTR",
      "family": "Austronesian"
    },
    {
      "iso639_1": "ce",
      "iso639_2": "che",
      "iso639_2en": "che",
      "iso639_3": "che",
      "name": [
        "Chechen"
      ],
      "nativeName": [
        "нохчийн мотт"
      ],
      "direction": "LTR",
      "family": "Northeast Caucasian"
    },
    {
      "iso639_1": "ny",
      "iso639_2": "nya",
      "iso639_2en": "nya",
      "iso639_3": "nya",
      "name": [
        "Chichewa",
        "Chewa",
        "Nyanja"
      ],
      "nativeName": [
        "chiCheŵa",
        "chinyanja"
      ],
      "direction": "LTR",
      "family": "Niger–Congo",
      "countries": [
        "MWI"
      ]
    },
    {
      "iso639_1": "zh",
      "iso639_2": "zho",
      "iso639_2en": "chi",
      "iso639_3": "zho",
      "name": [
        "Chinese"
      ],
      "nativeName": [
        "中文 (Zhōngwén)",
        "汉语",
        "漢語"
      ],
      "direction": "LTR",
      "family": "Sino-Tibetan",
      "countries": [
        "HKG",
        "MAC",
        "CHN",
        "TWN",
        "SGP"
      ],
      "langCultureMs": [
        {
          "langCultureName": "zh-CN",
          "displayName": "Chinese - China",
          "cultureCode": "0x0804"
        },
        {
          "langCultureName": "zh-HK",
          "displayName": "Chinese - Hong Kong SAR",
          "cultureCode": "0x0C04"
        },
        {
          "langCultureName": "zh-MO",
          "displayName": "Chinese - Macau SAR",
          "cultureCode": "0x1404"
        },
        {
          "langCultureName": "zh-SG",
          "displayName": "Chinese - Singapore",
          "cultureCode": "0x1004"
        },
        {
          "langCultureName": "zh-TW",
          "displayName": "Chinese - Taiwan",
          "cultureCode": "0x0404"
        },
        {
          "langCultureName": "zh-CHS",
          "displayName": "Chinese (Simplified)",
          "cultureCode": "0x0004"
        },
        {
          "langCultureName": "zh-CHT",
          "displayName": "Chinese (Traditional)",
          "cultureCode": "0x7C04"
        }
      ]
    },
    {
      "iso639_1": "cv",
      "iso639_2": "chv",
      "iso639_2en": "chv",
      "iso639_3": "chv",
      "name": [
        "Chuvash"
      ],
      "nativeName": [
        "чӑваш чӗлхи"
      ],
      "direction": "LTR",
      "family": "Turkic"
    },
    {
      "iso639_1": "kw",
      "iso639_2": "cor",
      "iso639_2en": "cor",
      "iso639_3": "cor",
      "name": [
        "Cornish"
      ],
      "nativeName": [
        "Kernewek"
      ],
      "direction": "LTR",
      "family": "Indo-European"
    },
    {
      "iso639_1": "co",
      "iso639_2": "cos",
      "iso639_2en": "cos",
      "iso639_3": "cos",
      "name": [
        "Corsican"
      ],
      "nativeName": [
        "corsu",
        "lingua corsa"
      ],
      "direction": "LTR",
      "family": "Indo-European"
    },
    {
      "iso639_1": "cr",
      "iso639_2": "cre",
      "iso639_2en": "cre",
      "iso639_3": "cre",
      "name": [
        "Cree"
      ],
      "nativeName": [
        "ᓀᐦᐃᔭᐍᐏᐣ"
      ],
      "direction": "LTR",
      "family": "Algonquian"
    },
    {
      "iso639_1": "hr",
      "iso639_2": "hrv",
      "iso639_2en": "hrv",
      "iso639_3": "hrv",
      "name": [
        "Croatian"
      ],
      "nativeName": [
        "hrvatski jezik"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "HRV",
        "BIH"
      ],
      "langCultureMs": [
        {
          "langCultureName": "hr-HR",
          "displayName": "Croatian - Croatia",
          "cultureCode": "0x041A"
        }
      ]
    },
    {
      "iso639_1": "cs",
      "iso639_2": "ces",
      "iso639_2en": "cze",
      "iso639_3": "ces",
      "name": [
        "Czech"
      ],
      "nativeName": [
        "čeština",
        "český jazyk"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "CZE",
        "SVK"
      ],
      "langCultureMs": [
        {
          "langCultureName": "cs-CZ",
          "displayName": "Czech - Czech Republic",
          "cultureCode": "0x0405"
        }
      ]
    },
    {
      "iso639_1": "da",
      "iso639_2": "dan",
      "iso639_2en": "dan",
      "iso639_3": "dan",
      "name": [
        "Danish"
      ],
      "nativeName": [
        "dansk"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "DNK",
        "FRO"
      ],
      "langCultureMs": [
        {
          "langCultureName": "da-DK",
          "displayName": "Danish - Denmark",
          "cultureCode": "0x0406"
        }
      ]
    },
    {
      "iso639_1": "",
      "iso639_2": "",
      "iso639_2en": "",
      "iso639_3": "prs",
      "name": [
        "Dari"
      ],
      "nativeName": [
        "فارسی دری"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "AFG"
      ]
    },
    {
      "iso639_1": "dv",
      "iso639_2": "div",
      "iso639_2en": "div",
      "iso639_3": "div",
      "name": [
        "Divehi",
        "Dhivehi",
        "Maldivian"
      ],
      "nativeName": [
        "ދިވެހި"
      ],
      "direction": "RTL",
      "family": "Indo-European",
      "countries": [
        "MDV"
      ],
      "langCultureMs": [
        {
          "langCultureName": "div-MV",
          "displayName": "Dhivehi - Maldives",
          "cultureCode": "0x0465"
        }
      ]
    },
    {
      "iso639_1": "nl",
      "iso639_2": "nld",
      "iso639_2en": "dut",
      "iso639_3": "nld",
      "name": [
        "Dutch"
      ],
      "nativeName": [
        "Nederlands",
        "Vlaams"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "BEL",
        "NLD",
        "ABW",
        "CUW",
        "SXM",
        "SUR"
      ],
      "langCultureMs": [
        {
          "langCultureName": "nl-BE",
          "displayName": "Dutch - Belgium",
          "cultureCode": "0x0813"
        },
        {
          "langCultureName": "nl-NL",
          "displayName": "Dutch - The Netherlands",
          "cultureCode": "0x0413"
        }
      ]
    },
    {
      "iso639_1": "dz",
      "iso639_2": "dzo",
      "iso639_2en": "dzo",
      "iso639_3": "dzo",
      "name": [
        "Dzongkha"
      ],
      "nativeName": [
        "རྫོང་ཁ"
      ],
      "direction": "LTR",
      "family": "Sino-Tibetan",
      "countries": [
        "BTN"
      ]
    },
    {
      "iso639_1": "en",
      "iso639_2": "eng",
      "iso639_2en": "eng",
      "iso639_3": "eng",
      "name": [
        "English"
      ],
      "nativeName": [
        "English"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "ATG",
        "AUS",
        "BHS",
        "BRB",
        "BLZ",
        "BWA",
        "CMR",
        "CAN",
        "CUW",
        "DMA",
        "ERI",
        "FJI",
        "GMB",
        "GHA",
        "GRD",
        "GUY",
        "HKG",
        "IND",
        "IRL",
        "JAM",
        "KEN",
        "KIR",
        "LSO",
        "LBR",
        "MWI",
        "MYS",
        "MLT",
        "MHL",
        "MUS",
        "FSM",
        "NAM",
        "NRU",
        "NZL",
        "NGA",
        "PAK",
        "PLW",
        "PNG",
        "PHL",
        "RWA",
        "KNA",
        "LCA",
        "VCT",
        "WSM",
        "SYC",
        "SLE",
        "SGP",
        "SXM",
        "SLB",
        "ZAF",
        "SSD",
        "LKA",
        "SDN",
        "SWZ",
        "TZA",
        "TON",
        "TTO",
        "TUV",
        "UGA",
        "GBR",
        "USA",
        "VUT",
        "ZMB",
        "ZWE"
      ],
      "langCultureMs": [
        {
          "langCultureName": "en-AU",
          "displayName": "English - Australia",
          "cultureCode": "0x0C09"
        },
        {
          "langCultureName": "en-BZ",
          "displayName": "English - Belize",
          "cultureCode": "0x2809"
        },
        {
          "langCultureName": "en-CA",
          "displayName": "English - Canada",
          "cultureCode": "0x1009"
        },
        {
          "langCultureName": "en-CB",
          "displayName": "English - Caribbean",
          "cultureCode": "0x2409"
        },
        {
          "langCultureName": "en-IE",
          "displayName": "English - Ireland",
          "cultureCode": "0x1809"
        },
        {
          "langCultureName": "en-JM",
          "displayName": "English - Jamaica",
          "cultureCode": "0x2009"
        },
        {
          "langCultureName": "en-NZ",
          "displayName": "English - New Zealand",
          "cultureCode": "0x1409"
        },
        {
          "langCultureName": "en-PH",
          "displayName": "English - Philippines",
          "cultureCode": "0x3409"
        },
        {
          "langCultureName": "en-ZA",
          "displayName": "English - South Africa",
          "cultureCode": "0x1C09"
        },
        {
          "langCultureName": "en-TT",
          "displayName": "English - Trinidad and Tobago",
          "cultureCode": "0x2C09"
        },
        {
          "langCultureName": "en-GB",
          "displayName": "English - United Kingdom",
          "cultureCode": "0x0809"
        },
        {
          "langCultureName": "en-US",
          "displayName": "English - United States",
          "cultureCode": "0x0409"
        },
        {
          "langCultureName": "en-ZW",
          "displayName": "English - Zimbabwe",
          "cultureCode": "0x3009"
        }
      ]
    },
    {
      "iso639_1": "eo",
      "iso639_2": "epo",
      "iso639_2en": "epo",
      "iso639_3": "epo",
      "name": [
        "Esperanto"
      ],
      "nativeName": [
        "Esperanto"
      ],
      "direction": "LTR",
      "family": "Constructed"
    },
    {
      "iso639_1": "et",
      "iso639_2": "est",
      "iso639_2en": "est",
      "iso639_3": "est",
      "name": [
        "Estonian"
      ],
      "nativeName": [
        "eesti",
        "eesti keel"
      ],
      "direction": "LTR",
      "family": "Uralic",
      "countries": [
        "EST"
      ],
      "langCultureMs": [
        {
          "langCultureName": "et-EE",
          "displayName": "Estonian - Estonia",
          "cultureCode": "0x0425"
        }
      ]
    },
    {
      "iso639_1": "ee",
      "iso639_2": "ewe",
      "iso639_2en": "ewe",
      "iso639_3": "ewe",
      "name": [
        "Ewe"
      ],
      "nativeName": [
        "Eʋegbe"
      ],
      "direction": "LTR",
      "family": "Niger–Congo",
      "countries": [
        "GHA",
        "TGO"
      ]
    },
    {
      "iso639_1": "fo",
      "iso639_2": "fao",
      "iso639_2en": "fao",
      "iso639_3": "fao",
      "name": [
        "Faroese"
      ],
      "nativeName": [
        "føroyskt"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "langCultureMs": [
        {
          "langCultureName": "fo-FO",
          "displayName": "Faroese - Faroe Islands",
          "cultureCode": "0x0438"
        }
      ]
    },
    {
      "iso639_1": "fj",
      "iso639_2": "fij",
      "iso639_2en": "fij",
      "iso639_3": "fij",
      "name": [
        "Fijian"
      ],
      "nativeName": [
        "vosa Vakaviti"
      ],
      "direction": "LTR",
      "family": "Austronesian",
      "countries": [
        "FJI"
      ]
    },
    {
      "iso639_1": "fi",
      "iso639_2": "fin",
      "iso639_2en": "fin",
      "iso639_3": "fin",
      "name": [
        "Finnish"
      ],
      "nativeName": [
        "suomi",
        "suomen kieli"
      ],
      "direction": "LTR",
      "family": "Uralic",
      "countries": [
        "FIN"
      ],
      "langCultureMs": [
        {
          "langCultureName": "fi-FI",
          "displayName": "Finnish - Finland",
          "cultureCode": "0x040B"
        }
      ]
    },
    {
      "iso639_1": "fr",
      "iso639_2": "fra",
      "iso639_2en": "fre",
      "iso639_3": "fra",
      "name": [
        "French"
      ],
      "nativeName": [
        "français",
        "langue française"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "BEL",
        "BEN",
        "BFA",
        "BDI",
        "CMR",
        "CAN",
        "CAF",
        "TCD",
        "COM",
        "CIV",
        "COD",
        "COG",
        "DJI",
        "GNQ",
        "FRA",
        "GUF",
        "PYF",
        "GLP",
        "MTQ",
        "MYT",
        "NCL",
        "REU",
        "BLM",
        "SPM",
        "WLF",
        "GAB",
        "GIN",
        "HTI",
        "ITA",
        "JEY",
        "LUX",
        "MDG",
        "MLI",
        "MUS",
        "MCO",
        "NER",
        "RWA",
        "SEN",
        "SYC",
        "CHE",
        "TGO",
        "VUT"
      ],
      "langCultureMs": [
        {
          "langCultureName": "fr-BE",
          "displayName": "French - Belgium",
          "cultureCode": "0x080C"
        },
        {
          "langCultureName": "fr-CA",
          "displayName": "French - Canada",
          "cultureCode": "0x0C0C"
        },
        {
          "langCultureName": "fr-FR",
          "displayName": "French - France",
          "cultureCode": "0x040C"
        },
        {
          "langCultureName": "fr-LU",
          "displayName": "French - Luxembourg",
          "cultureCode": "0x140C"
        },
        {
          "langCultureName": "fr-MC",
          "displayName": "French - Monaco",
          "cultureCode": "0x180C"
        },
        {
          "langCultureName": "fr-CH",
          "displayName": "French - Switzerland",
          "cultureCode": "0x100C"
        }
      ]
    },
    {
      "iso639_1": "ff",
      "iso639_2": "ful",
      "iso639_2en": "ful",
      "iso639_3": "ful",
      "name": [
        "Fula",
        "Fulah",
        "Pulaar",
        "Pular"
      ],
      "nativeName": [
        "Fulfulde",
        "Pulaar",
        "Pular"
      ],
      "direction": "LTR",
      "family": "Niger–Congo",
      "countries": [
        "BEN",
        "BFA",
        "MLI",
        "NER",
        "SEN"
      ]
    },
    {
      "iso639_1": "gl",
      "iso639_2": "glg",
      "iso639_2en": "glg",
      "iso639_3": "glg",
      "name": [
        "Galician"
      ],
      "nativeName": [
        "galego"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "langCultureMs": [
        {
          "langCultureName": "gl-ES",
          "displayName": "Galician - Galician",
          "cultureCode": "0x0456"
        }
      ]
    },
    {
      "iso639_1": "ka",
      "iso639_2": "kat",
      "iso639_2en": "geo",
      "iso639_3": "kat",
      "name": [
        "Georgian"
      ],
      "nativeName": [
        "ქართული"
      ],
      "direction": "LTR",
      "family": "South Caucasian",
      "countries": [
        "GEO"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ka-GE",
          "displayName": "Georgian - Georgia",
          "cultureCode": "0x0437"
        }
      ]
    },
    {
      "iso639_1": "de",
      "iso639_2": "deu",
      "iso639_2en": "ger",
      "iso639_3": "deu",
      "name": [
        "German"
      ],
      "nativeName": [
        "Deutsch"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "AUT",
        "BEL",
        "DEU",
        "LIE",
        "LUX",
        "ITA",
        "CHE"
      ],
      "langCultureMs": [
        {
          "langCultureName": "de-AT",
          "displayName": "German - Austria",
          "cultureCode": "0x0C07"
        },
        {
          "langCultureName": "de-DE",
          "displayName": "German - Germany",
          "cultureCode": "0x0407"
        },
        {
          "langCultureName": "de-LI",
          "displayName": "German - Liechtenstein",
          "cultureCode": "0x1407"
        },
        {
          "langCultureName": "de-LU",
          "displayName": "German - Luxembourg",
          "cultureCode": "0x1007"
        },
        {
          "langCultureName": "de-CH",
          "displayName": "German - Switzerland",
          "cultureCode": "0x0807"
        }
      ]
    },
    {
      "iso639_1": "el",
      "iso639_2": "ell",
      "iso639_2en": "gre",
      "iso639_3": "ell",
      "name": [
        "Greek"
      ],
      "nativeName": [
        "ελληνικά"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "GRC",
        "CYP"
      ],
      "langCultureMs": [
        {
          "langCultureName": "el-GR",
          "displayName": "Greek - Greece",
          "cultureCode": "0x0408"
        }
      ]
    },
    {
      "iso639_1": "gn",
      "iso639_2": "grn",
      "iso639_2en": "grn",
      "iso639_3": "grn",
      "name": [
        "Guaraní"
      ],
      "nativeName": [
        "Avañe'ẽ"
      ],
      "direction": "LTR",
      "family": "Tupian",
      "countries": [
        "PRY",
        "BOL"
      ]
    },
    {
      "iso639_1": "gu",
      "iso639_2": "guj",
      "iso639_2en": "guj",
      "iso639_3": "guj",
      "name": [
        "Gujarati"
      ],
      "nativeName": [
        "ગુજરાતી"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "IND"
      ],
      "langCultureMs": [
        {
          "langCultureName": "gu-IN",
          "displayName": "Gujarati - India",
          "cultureCode": "0x0447"
        }
      ]
    },
    {
      "iso639_1": "ht",
      "iso639_2": "hat",
      "iso639_2en": "hat",
      "iso639_3": "hat",
      "name": [
        "Haitian",
        "Haitian Creole"
      ],
      "nativeName": [
        "Kreyòl ayisyen"
      ],
      "direction": "LTR",
      "family": "Creole",
      "countries": [
        "HTI"
      ]
    },
    {
      "iso639_1": "ha",
      "iso639_2": "hau",
      "iso639_2en": "hau",
      "iso639_3": "hau",
      "name": [
        "Hausa"
      ],
      "nativeName": [
        "(Hausa) هَوُسَ"
      ],
      "direction": "LTR",
      "family": "Afro-Asiatic",
      "countries": [
        "NER",
        "NGA"
      ]
    },
    {
      "iso639_1": "he",
      "iso639_2": "heb",
      "iso639_2en": "heb",
      "iso639_3": "heb",
      "name": [
        "Hebrew"
      ],
      "nativeName": [
        "עברית"
      ],
      "direction": "RTL",
      "family": "Afro-Asiatic",
      "countries": [
        "ISR"
      ],
      "langCultureMs": [
        {
          "langCultureName": "he-IL",
          "displayName": "Hebrew - Israel",
          "cultureCode": "0x040D"
        }
      ]
    },
    {
      "iso639_1": "hz",
      "iso639_2": "her",
      "iso639_2en": "her",
      "iso639_3": "her",
      "name": [
        "Herero"
      ],
      "nativeName": [
        "Otjiherero"
      ],
      "direction": "LTR",
      "family": "Niger–Congo"
    },
    {
      "iso639_1": "hi",
      "iso639_2": "hin",
      "iso639_2en": "hin",
      "iso639_3": "hin",
      "name": [
        "Hindi"
      ],
      "nativeName": [
        "हिन्दी",
        "हिंदी"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "IND",
        "FJI"
      ],
      "langCultureMs": [
        {
          "langCultureName": "hi-IN",
          "displayName": "Hindi - India",
          "cultureCode": "0x0439"
        }
      ]
    },
    {
      "iso639_1": "ho",
      "iso639_2": "hmo",
      "iso639_2en": "hmo",
      "iso639_3": "hmo",
      "name": [
        "Hiri Motu"
      ],
      "nativeName": [
        "Hiri Motu"
      ],
      "direction": "LTR",
      "family": "Austronesian",
      "countries": [
        "PNG"
      ]
    },
    {
      "iso639_1": "hu",
      "iso639_2": "hun",
      "iso639_2en": "hun",
      "iso639_3": "hun",
      "name": [
        "Hungarian"
      ],
      "nativeName": [
        "magyar"
      ],
      "direction": "LTR",
      "family": "Uralic",
      "countries": [
        "HUN"
      ],
      "langCultureMs": [
        {
          "langCultureName": "hu-HU",
          "displayName": "Hungarian - Hungary",
          "cultureCode": "0x040E"
        }
      ]
    },
    {
      "iso639_1": "ia",
      "iso639_2": "ina",
      "iso639_2en": "ina",
      "iso639_3": "ina",
      "name": [
        "Interlingua"
      ],
      "nativeName": [
        "Interlingua"
      ],
      "direction": "LTR",
      "family": "Constructed"
    },
    {
      "iso639_1": "id",
      "iso639_2": "ind",
      "iso639_2en": "ind",
      "iso639_3": "ind",
      "name": [
        "Indonesian"
      ],
      "nativeName": [
        "Bahasa Indonesia"
      ],
      "direction": "LTR",
      "family": "Austronesian",
      "countries": [
        "IDN"
      ],
      "langCultureMs": [
        {
          "langCultureName": "id-ID",
          "displayName": "Indonesian - Indonesia",
          "cultureCode": "0x0421"
        }
      ]
    },
    {
      "iso639_1": "ie",
      "iso639_2": "ile",
      "iso639_2en": "ile",
      "iso639_3": "ile",
      "name": [
        "Interlingue"
      ],
      "nativeName": [
        "Interlingue"
      ],
      "direction": "LTR",
      "family": "Constructed"
    },
    {
      "iso639_1": "ga",
      "iso639_2": "gle",
      "iso639_2en": "gle",
      "iso639_3": "gle",
      "name": [
        "Irish"
      ],
      "nativeName": [
        "Gaeilge"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "IRL"
      ]
    },
    {
      "iso639_1": "ig",
      "iso639_2": "ibo",
      "iso639_2en": "ibo",
      "iso639_3": "ibo",
      "name": [
        "Igbo"
      ],
      "nativeName": [
        "Asụsụ Igbo"
      ],
      "direction": "LTR",
      "family": "Niger–Congo",
      "countries": [
        "NGA"
      ]
    },
    {
      "iso639_1": "ik",
      "iso639_2": "ipk",
      "iso639_2en": "ipk",
      "iso639_3": "ipk",
      "name": [
        "Inupiaq"
      ],
      "nativeName": [
        "Iñupiaq",
        "Iñupiatun"
      ],
      "direction": "LTR",
      "family": "Eskimo–Aleut"
    },
    {
      "iso639_1": "io",
      "iso639_2": "ido",
      "iso639_2en": "ido",
      "iso639_3": "ido",
      "name": [
        "Ido"
      ],
      "nativeName": [
        "Ido"
      ],
      "direction": "LTR",
      "family": "Constructed"
    },
    {
      "iso639_1": "is",
      "iso639_2": "isl",
      "iso639_2en": "ice",
      "iso639_3": "isl",
      "name": [
        "Icelandic"
      ],
      "nativeName": [
        "Íslenska"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "ISL"
      ],
      "langCultureMs": [
        {
          "langCultureName": "is-IS",
          "displayName": "Icelandic - Iceland",
          "cultureCode": "0x040F"
        }
      ]
    },
    {
      "iso639_1": "it",
      "iso639_2": "ita",
      "iso639_2en": "ita",
      "iso639_3": "ita",
      "name": [
        "Italian"
      ],
      "nativeName": [
        "italiano"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "ITA",
        "HRV",
        "SMR",
        "SVN",
        "CHE",
        "VAT"
      ],
      "langCultureMs": [
        {
          "langCultureName": "it-IT",
          "displayName": "Italian - Italy",
          "cultureCode": "0x0410"
        },
        {
          "langCultureName": "it-CH",
          "displayName": "Italian - Switzerland",
          "cultureCode": "0x0810"
        }
      ]
    },
    {
      "iso639_1": "iu",
      "iso639_2": "iku",
      "iso639_2en": "iku",
      "iso639_3": "iku",
      "name": [
        "Inuktitut"
      ],
      "nativeName": [
        "ᐃᓄᒃᑎᑐᑦ"
      ],
      "direction": "LTR",
      "family": "Eskimo–Aleut"
    },
    {
      "iso639_1": "ja",
      "iso639_2": "jpn",
      "iso639_2en": "jpn",
      "iso639_3": "jpn",
      "name": [
        "Japanese"
      ],
      "nativeName": [
        "日本語 (にほんご)"
      ],
      "direction": "LTR",
      "family": "Japonic",
      "countries": [
        "JPN"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ja-JP",
          "displayName": "Japanese - Japan",
          "cultureCode": "0x0411"
        }
      ]
    },
    {
      "iso639_1": "jv",
      "iso639_2": "jav",
      "iso639_2en": "jav",
      "iso639_3": "jav",
      "name": [
        "Javanese"
      ],
      "nativeName": [
        "basa Jawa"
      ],
      "direction": "LTR",
      "family": "Austronesian"
    },
    {
      "iso639_1": "kl",
      "iso639_2": "kal",
      "iso639_2en": "kal",
      "iso639_3": "kal",
      "name": [
        "Kalaallisut",
        "Greenlandic"
      ],
      "nativeName": [
        "kalaallisut",
        "kalaallit oqaasii"
      ],
      "direction": "LTR",
      "family": "Eskimo–Aleut"
    },
    {
      "iso639_1": "kn",
      "iso639_2": "kan",
      "iso639_2en": "kan",
      "iso639_3": "kan",
      "name": [
        "Kannada"
      ],
      "nativeName": [
        "ಕನ್ನಡ"
      ],
      "direction": "LTR",
      "family": "Dravidian",
      "langCultureMs": [
        {
          "langCultureName": "kn-IN",
          "displayName": "Kannada - India",
          "cultureCode": "0x044B"
        }
      ]
    },
    {
      "iso639_1": "kr",
      "iso639_2": "kau",
      "iso639_2en": "kau",
      "iso639_3": "kau",
      "name": [
        "Kanuri"
      ],
      "nativeName": [
        "Kanuri"
      ],
      "direction": "LTR",
      "family": "Nilo-Saharan",
      "countries": [
        "NER"
      ]
    },
    {
      "iso639_1": "ks",
      "iso639_2": "kas",
      "iso639_2en": "kas",
      "iso639_3": "kas",
      "name": [
        "Kashmiri"
      ],
      "nativeName": [
        "कश्मीरी",
        "كشميري‎"
      ],
      "direction": "LTR",
      "family": "Indo-European"
    },
    {
      "iso639_1": "kk",
      "iso639_2": "kaz",
      "iso639_2en": "kaz",
      "iso639_3": "kaz",
      "name": [
        "Kazakh"
      ],
      "nativeName": [
        "қазақ тілі"
      ],
      "direction": "LTR",
      "family": "Turkic",
      "countries": [
        "KAZ"
      ],
      "langCultureMs": [
        {
          "langCultureName": "kk-KZ",
          "displayName": "Kazakh - Kazakhstan",
          "cultureCode": "0x043F"
        }
      ]
    },
    {
      "iso639_1": "km",
      "iso639_2": "khm",
      "iso639_2en": "khm",
      "iso639_3": "khm",
      "name": [
        "Khmer"
      ],
      "nativeName": [
        "ខ្មែរ",
        "ខេមរភាសា",
        "ភាសាខ្មែរ"
      ],
      "direction": "LTR",
      "family": "Austroasiatic",
      "countries": [
        "KHM"
      ]
    },
    {
      "iso639_1": "ki",
      "iso639_2": "kik",
      "iso639_2en": "kik",
      "iso639_3": "kik",
      "name": [
        "Kikuyu",
        "Gikuyu"
      ],
      "nativeName": [
        "Gĩkũyũ"
      ],
      "direction": "LTR",
      "family": "Niger–Congo"
    },
    {
      "iso639_1": "rw",
      "iso639_2": "kin",
      "iso639_2en": "kin",
      "iso639_3": "kin",
      "name": [
        "Kinyarwanda"
      ],
      "nativeName": [
        "Ikinyarwanda"
      ],
      "direction": "LTR",
      "family": "Niger–Congo",
      "countries": [
        "RWA"
      ]
    },
    {
      "iso639_1": "ky",
      "iso639_2": "kir",
      "iso639_2en": "kir",
      "iso639_3": "kir",
      "name": [
        "Kyrgyz"
      ],
      "nativeName": [
        "Кыргызча",
        "Кыргыз тили"
      ],
      "direction": "LTR",
      "family": "Turkic",
      "countries": [
        "KGZ"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ky-KZ",
          "displayName": "Kyrgyz - Kazakhstan",
          "cultureCode": "0x0440"
        }
      ]
    },
    {
      "iso639_1": "kv",
      "iso639_2": "kom",
      "iso639_2en": "kom",
      "iso639_3": "kom",
      "name": [
        "Komi"
      ],
      "nativeName": [
        "коми кыв"
      ],
      "direction": "LTR",
      "family": "Uralic"
    },
    {
      "iso639_1": "kg",
      "iso639_2": "kon",
      "iso639_2en": "kon",
      "iso639_3": "kon",
      "name": [
        "Kongo"
      ],
      "nativeName": [
        "Kikongo"
      ],
      "direction": "LTR",
      "family": "Niger–Congo",
      "countries": [
        "AGO",
        "COD",
        "COG"
      ]
    },
    {
      "iso639_1": "ko",
      "iso639_2": "kor",
      "iso639_2en": "kor",
      "iso639_3": "kor",
      "name": [
        "Korean"
      ],
      "nativeName": [
        "한국어",
        "조선어"
      ],
      "direction": "LTR",
      "family": "Koreanic",
      "countries": [
        "PRK",
        "KOR"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ko-KR",
          "displayName": "Korean - Korea",
          "cultureCode": "0x0412"
        }
      ]
    },
    {
      "iso639_1": "ku",
      "iso639_2": "kur",
      "iso639_2en": "kur",
      "iso639_3": "kur",
      "name": [
        "Kurdish"
      ],
      "nativeName": [
        "Kurdî",
        "كوردی‎"
      ],
      "direction": "RTL",
      "family": "Indo-European",
      "countries": [
        "IRQ"
      ]
    },
    {
      "iso639_1": "kj",
      "iso639_2": "kua",
      "iso639_2en": "kua",
      "iso639_3": "kua",
      "name": [
        "Kwanyama",
        "Kuanyama"
      ],
      "nativeName": [
        "Kuanyama"
      ],
      "direction": "LTR",
      "family": "Niger–Congo",
      "countries": [
        "AGO"
      ]
    },
    {
      "iso639_1": "la",
      "iso639_2": "lat",
      "iso639_2en": "lat",
      "iso639_3": "lat",
      "name": [
        "Latin"
      ],
      "nativeName": [
        "latine",
        "lingua latina"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "VAT"
      ]
    },
    {
      "iso639_1": "lb",
      "iso639_2": "ltz",
      "iso639_2en": "ltz",
      "iso639_3": "ltz",
      "name": [
        "Luxembourgish",
        "Letzeburgesch"
      ],
      "nativeName": [
        "Lëtzebuergesch"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "LUX"
      ]
    },
    {
      "iso639_1": "lg",
      "iso639_2": "lug",
      "iso639_2en": "lug",
      "iso639_3": "lug",
      "name": [
        "Ganda"
      ],
      "nativeName": [
        "Luganda"
      ],
      "direction": "LTR",
      "family": "Niger–Congo"
    },
    {
      "iso639_1": "li",
      "iso639_2": "lim",
      "iso639_2en": "lim",
      "iso639_3": "lim",
      "name": [
        "Limburgish",
        "Limburgan",
        "Limburger"
      ],
      "nativeName": [
        "Limburgs"
      ],
      "direction": "LTR",
      "family": "Indo-European"
    },
    {
      "iso639_1": "ln",
      "iso639_2": "lin",
      "iso639_2en": "lin",
      "iso639_3": "lin",
      "name": [
        "Lingala"
      ],
      "nativeName": [
        "Lingála"
      ],
      "direction": "LTR",
      "family": "Niger–Congo",
      "countries": [
        "COD",
        "COG"
      ]
    },
    {
      "iso639_1": "lo",
      "iso639_2": "lao",
      "iso639_2en": "lao",
      "iso639_3": "lao",
      "name": [
        "Lao"
      ],
      "nativeName": [
        "ພາສາລາວ"
      ],
      "direction": "LTR",
      "family": "Tai–Kadai",
      "countries": [
        "LAO"
      ]
    },
    {
      "iso639_1": "lt",
      "iso639_2": "lit",
      "iso639_2en": "lit",
      "iso639_3": "lit",
      "name": [
        "Lithuanian"
      ],
      "nativeName": [
        "lietuvių kalba"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "LTU"
      ],
      "langCultureMs": [
        {
          "langCultureName": "lt-LT",
          "displayName": "Lithuanian - Lithuania",
          "cultureCode": "0x0427"
        }
      ]
    },
    {
      "iso639_1": "lu",
      "iso639_2": "lub",
      "iso639_2en": "lub",
      "iso639_3": "lub",
      "name": [
        "Luba-Katanga"
      ],
      "nativeName": [
        "Tshiluba"
      ],
      "direction": "LTR",
      "family": "Niger–Congo",
      "countries": [
        "COD"
      ]
    },
    {
      "iso639_1": "lv",
      "iso639_2": "lav",
      "iso639_2en": "lav",
      "iso639_3": "lav",
      "name": [
        "Latvian"
      ],
      "nativeName": [
        "latviešu valoda"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "LVA"
      ],
      "langCultureMs": [
        {
          "langCultureName": "lv-LV",
          "displayName": "Latvian - Latvia",
          "cultureCode": "0x0426"
        }
      ]
    },
    {
      "iso639_1": "gv",
      "iso639_2": "glv",
      "iso639_2en": "glv",
      "iso639_3": "glv",
      "name": [
        "Manx"
      ],
      "nativeName": [
        "Gaelg",
        "Gailck"
      ],
      "direction": "LTR",
      "family": "Indo-European"
    },
    {
      "iso639_1": "mk",
      "iso639_2": "mkd",
      "iso639_2en": "mac",
      "iso639_3": "mkd",
      "name": [
        "Macedonian"
      ],
      "nativeName": [
        "македонски јазик"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "MKD"
      ],
      "langCultureMs": [
        {
          "langCultureName": "mk-MK",
          "displayName": "Macedonian (FYROM)",
          "cultureCode": "0x042F"
        }
      ]
    },
    {
      "iso639_1": "mg",
      "iso639_2": "mlg",
      "iso639_2en": "mlg",
      "iso639_3": "mlg",
      "name": [
        "Malagasy"
      ],
      "nativeName": [
        "fiteny malagasy"
      ],
      "direction": "LTR",
      "family": "Austronesian",
      "countries": [
        "MDG"
      ]
    },
    {
      "iso639_1": "ms",
      "iso639_2": "msa",
      "iso639_2en": "may",
      "iso639_3": "msa",
      "name": [
        "Malay"
      ],
      "nativeName": [
        "bahasa Melayu",
        "بهاس ملايو‎"
      ],
      "direction": "LTR",
      "family": "Austronesian",
      "countries": [
        "MYS",
        "BRN",
        "SGP",
        "IDN"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ms-BN",
          "displayName": "Malay - Brunei",
          "cultureCode": "0x083E"
        },
        {
          "langCultureName": "ms-MY",
          "displayName": "Malay - Malaysia",
          "cultureCode": "0x043E"
        }
      ]
    },
    {
      "iso639_1": "ml",
      "iso639_2": "mal",
      "iso639_2en": "mal",
      "iso639_3": "mal",
      "name": [
        "Malayalam"
      ],
      "nativeName": [
        "മലയാളം"
      ],
      "direction": "LTR",
      "family": "Dravidian"
    },
    {
      "iso639_1": "mt",
      "iso639_2": "mlt",
      "iso639_2en": "mlt",
      "iso639_3": "mlt",
      "name": [
        "Maltese"
      ],
      "nativeName": [
        "Malti"
      ],
      "direction": "LTR",
      "family": "Afro-Asiatic",
      "countries": [
        "MLT"
      ]
    },
    {
      "iso639_1": "mi",
      "iso639_2": "mri",
      "iso639_2en": "mao",
      "iso639_3": "mri",
      "name": [
        "Māori"
      ],
      "nativeName": [
        "te reo Māori"
      ],
      "direction": "LTR",
      "family": "Austronesian",
      "countries": [
        "NZL"
      ]
    },
    {
      "iso639_1": "mr",
      "iso639_2": "mar",
      "iso639_2en": "mar",
      "iso639_3": "mar",
      "name": [
        "Marathi (Marāṭhī)"
      ],
      "nativeName": [
        "मराठी"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "langCultureMs": [
        {
          "langCultureName": "mr-IN",
          "displayName": "Marathi - India",
          "cultureCode": "0x044E"
        }
      ]
    },
    {
      "iso639_1": "mh",
      "iso639_2": "mah",
      "iso639_2en": "mah",
      "iso639_3": "mah",
      "name": [
        "Marshallese"
      ],
      "nativeName": [
        "Kajin M̧ajeļ"
      ],
      "direction": "LTR",
      "family": "Austronesian",
      "countries": [
        "MHL"
      ]
    },
    {
      "iso639_1": "mn",
      "iso639_2": "mon",
      "iso639_2en": "mon",
      "iso639_3": "mon",
      "name": [
        "Mongolian"
      ],
      "nativeName": [
        "монгол"
      ],
      "direction": "LTR",
      "family": "Mongolic",
      "countries": [
        "MNG"
      ],
      "langCultureMs": [
        {
          "langCultureName": "mn-MN",
          "displayName": "Mongolian - Mongolia",
          "cultureCode": "0x0450"
        }
      ]
    },
    {
      "iso639_1": "na",
      "iso639_2": "nau",
      "iso639_2en": "nau",
      "iso639_3": "nau",
      "name": [
        "Nauru"
      ],
      "nativeName": [
        "Ekakairũ Naoero"
      ],
      "direction": "LTR",
      "family": "Austronesian"
    },
    {
      "iso639_1": "nv",
      "iso639_2": "nav",
      "iso639_2en": "nav",
      "iso639_3": "nav",
      "name": [
        "Navajo",
        "Navaho"
      ],
      "nativeName": [
        "Diné bizaad",
        "Dinékʼehǰí"
      ],
      "direction": "LTR",
      "family": "Dené–Yeniseian"
    },
    {
      "iso639_1": "nb",
      "iso639_2": "nob",
      "iso639_2en": "nob",
      "iso639_3": "nob",
      "name": [
        "Norwegian Bokmål"
      ],
      "nativeName": [
        "Norsk bokmål"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "NOR"
      ],
      "langCultureMs": [
        {
          "langCultureName": "nb-NO",
          "displayName": "Norwegian (Bokmål) - Norway",
          "cultureCode": "0x0414"
        }
      ]
    },
    {
      "iso639_1": "nd",
      "iso639_2": "nde",
      "iso639_2en": "nde",
      "iso639_3": "nde",
      "name": [
        "Northern Ndebele"
      ],
      "nativeName": [
        "isiNdebele"
      ],
      "direction": "LTR",
      "family": "Niger–Congo",
      "countries": [
        "ZAF",
        "ZWE"
      ]
    },
    {
      "iso639_1": "",
      "iso639_2": "nso",
      "iso639_2en": "nso",
      "iso639_3": "nso",
      "name": [
        "Northern Sotho"
      ],
      "nativeName": [
        "Sesotho sa Leboa"
      ],
      "direction": "LTR",
      "family": "Niger-Congo",
      "countries": [
        "ZAF"
      ]
    },
    {
      "iso639_1": "ne",
      "iso639_2": "nep",
      "iso639_2en": "nep",
      "iso639_3": "nep",
      "name": [
        "Nepali"
      ],
      "nativeName": [
        "नेपाली"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "NPL"
      ]
    },
    {
      "iso639_1": "ng",
      "iso639_2": "ndo",
      "iso639_2en": "ndo",
      "iso639_3": "ndo",
      "name": [
        "Ndonga"
      ],
      "nativeName": [
        "Owambo"
      ],
      "direction": "LTR",
      "family": "Niger–Congo"
    },
    {
      "iso639_1": "nn",
      "iso639_2": "nno",
      "iso639_2en": "nno",
      "iso639_3": "nno",
      "name": [
        "Norwegian Nynorsk"
      ],
      "nativeName": [
        "Norsk nynorsk"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "NOR"
      ],
      "langCultureMs": [
        {
          "langCultureName": "nn-NO",
          "displayName": "Norwegian (Nynorsk) - Norway",
          "cultureCode": "0x0814"
        }
      ]
    },
    {
      "iso639_1": "no",
      "iso639_2": "nor",
      "iso639_2en": "nor",
      "iso639_3": "nor",
      "name": [
        "Norwegian"
      ],
      "nativeName": [
        "Norsk"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "NOR"
      ]
    },
    {
      "iso639_1": "ii",
      "iso639_2": "iii",
      "iso639_2en": "iii",
      "iso639_3": "iii",
      "name": [
        "Nuosu"
      ],
      "nativeName": [
        "Nuosuhxop"
      ],
      "direction": "LTR",
      "family": "Sino-Tibetan"
    },
    {
      "iso639_1": "nr",
      "iso639_2": "nbl",
      "iso639_2en": "nbl",
      "iso639_3": "nbl",
      "name": [
        "Southern Ndebele"
      ],
      "nativeName": [
        "isiNdebele"
      ],
      "direction": "LTR",
      "family": "Niger–Congo",
      "countries": [
        "ZAF"
      ]
    },
    {
      "iso639_1": "oc",
      "iso639_2": "oci",
      "iso639_2en": "oci",
      "iso639_3": "oci",
      "name": [
        "Occitan"
      ],
      "nativeName": [
        "occitan",
        "lenga d'òc"
      ],
      "direction": "LTR",
      "family": "Indo-European"
    },
    {
      "iso639_1": "oj",
      "iso639_2": "oji",
      "iso639_2en": "oji",
      "iso639_3": "oji",
      "name": [
        "Ojibwe",
        "Ojibwa"
      ],
      "nativeName": [
        "ᐊᓂᔑᓈᐯᒧᐎᓐ"
      ],
      "direction": "LTR",
      "family": "Algonquian"
    },
    {
      "iso639_1": "cu",
      "iso639_2": "chu",
      "iso639_2en": "chu",
      "iso639_3": "chu",
      "name": [
        "Old Church Slavonic",
        "Church Slavonic",
        "Old Bulgarian"
      ],
      "nativeName": [
        "ѩзыкъ словѣньскъ"
      ],
      "direction": "LTR",
      "family": "Indo-European"
    },
    {
      "iso639_1": "om",
      "iso639_2": "orm",
      "iso639_2en": "orm",
      "iso639_3": "orm",
      "name": [
        "Oromo"
      ],
      "nativeName": [
        "Afaan Oromoo"
      ],
      "direction": "LTR",
      "family": "Afro-Asiatic"
    },
    {
      "iso639_1": "or",
      "iso639_2": "ori",
      "iso639_2en": "ori",
      "iso639_3": "ori",
      "name": [
        "Oriya"
      ],
      "nativeName": [
        "ଓଡ଼ିଆ"
      ],
      "direction": "LTR",
      "family": "Indo-European"
    },
    {
      "iso639_1": "os",
      "iso639_2": "oss",
      "iso639_2en": "oss",
      "iso639_3": "oss",
      "name": [
        "Ossetian",
        "Ossetic"
      ],
      "nativeName": [
        "ирон æвзаг"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": []
    },
    {
      "iso639_1": "pa",
      "iso639_2": "pan",
      "iso639_2en": "pan",
      "iso639_3": "pan",
      "name": [
        "Panjabi",
        "Punjabi"
      ],
      "nativeName": [
        "ਪੰਜਾਬੀ",
        "پنجابی‎"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "IND"
      ],
      "langCultureMs": [
        {
          "langCultureName": "pa-IN",
          "displayName": "Punjabi - India",
          "cultureCode": "0x0446"
        }
      ]
    },
    {
      "iso639_1": "pi",
      "iso639_2": "pli",
      "iso639_2en": "pli",
      "iso639_3": "pli",
      "name": [
        "Pāli"
      ],
      "nativeName": [
        "पाऴि"
      ],
      "direction": "LTR",
      "family": "Indo-European"
    },
    {
      "iso639_1": "fa",
      "iso639_2": "fas",
      "iso639_2en": "per",
      "iso639_3": "fas",
      "name": [
        "Persian",
        "Farsi"
      ],
      "nativeName": [
        "فارسی"
      ],
      "direction": "RTL",
      "family": "Indo-European",
      "countries": [
        "IRN",
        "AFG",
        "TJK"
      ],
      "langCultureMs": [
        {
          "langCultureName": "fa-IR",
          "displayName": "Farsi - Iran",
          "cultureCode": "0x0429"
        }
      ]
    },
    {
      "iso639_1": "pl",
      "iso639_2": "pol",
      "iso639_2en": "pol",
      "iso639_3": "pol",
      "name": [
        "Polish"
      ],
      "nativeName": [
        "język polski",
        "polszczyzna"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "POL"
      ],
      "langCultureMs": [
        {
          "langCultureName": "pl-PL",
          "displayName": "Polish - Poland",
          "cultureCode": "0x0415"
        }
      ]
    },
    {
      "iso639_1": "ps",
      "iso639_2": "pus",
      "iso639_2en": "pus",
      "iso639_3": "pus",
      "name": [
        "Pashto",
        "Pushto"
      ],
      "nativeName": [
        "پښتو"
      ],
      "direction": "RTL",
      "family": "Indo-European",
      "countries": [
        "AFG"
      ]
    },
    {
      "iso639_1": "pt",
      "iso639_2": "por",
      "iso639_2en": "por",
      "iso639_3": "por",
      "name": [
        "Portuguese"
      ],
      "nativeName": [
        "português"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "AGO",
        "BRA",
        "CPV",
        "TLS",
        "GNQ",
        "GNB",
        "MAC",
        "MOZ",
        "PRT",
        "STP"
      ],
      "langCultureMs": [
        {
          "langCultureName": "pt-BR",
          "displayName": "Portuguese - Brazil",
          "cultureCode": "0x0416"
        },
        {
          "langCultureName": "pt-PT",
          "displayName": "Portuguese - Portugal",
          "cultureCode": "0x0816"
        }
      ]
    },
    {
      "iso639_1": "qu",
      "iso639_2": "que",
      "iso639_2en": "que",
      "iso639_3": "que",
      "name": [
        "Quechua"
      ],
      "nativeName": [
        "Runa Simi",
        "Kichwa"
      ],
      "direction": "LTR",
      "family": "Quechuan",
      "countries": [
        "BOL",
        "PER"
      ]
    },
    {
      "iso639_1": "rm",
      "iso639_2": "roh",
      "iso639_2en": "roh",
      "iso639_3": "roh",
      "name": [
        "Romansh"
      ],
      "nativeName": [
        "rumantsch grischun"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "CHE"
      ]
    },
    {
      "iso639_1": "rn",
      "iso639_2": "run",
      "iso639_2en": "run",
      "iso639_3": "run",
      "name": [
        "Kirundi"
      ],
      "nativeName": [
        "Ikirundi"
      ],
      "direction": "LTR",
      "family": "Niger–Congo",
      "countries": [
        "BDI"
      ]
    },
    {
      "iso639_1": "ro",
      "iso639_2": "ron",
      "iso639_2en": "rum",
      "iso639_3": "ron",
      "name": [
        "Romanian"
      ],
      "nativeName": [
        "limba română"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "ROU",
        "MDA"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ro-RO",
          "displayName": "Romanian - Romania",
          "cultureCode": "0x0418"
        }
      ]
    },
    {
      "iso639_1": "ru",
      "iso639_2": "rus",
      "iso639_2en": "rus",
      "iso639_3": "rus",
      "name": [
        "Russian"
      ],
      "nativeName": [
        "русский язык"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "RUS",
        "BLR",
        "KAZ",
        "KGZ",
        "TJK"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ru-RU",
          "displayName": "Russian - Russia",
          "cultureCode": "0x0419"
        }
      ]
    },
    {
      "iso639_1": "sa",
      "iso639_2": "san",
      "iso639_2en": "san",
      "iso639_3": "san",
      "name": [
        "Sanskrit (Saṁskṛta)"
      ],
      "nativeName": [
        "संस्कृतम्"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "langCultureMs": [
        {
          "langCultureName": "sa-IN",
          "displayName": "Sanskrit - India",
          "cultureCode": "0x044F"
        }
      ]
    },
    {
      "iso639_1": "sc",
      "iso639_2": "srd",
      "iso639_2en": "srd",
      "iso639_3": "srd",
      "name": [
        "Sardinian"
      ],
      "nativeName": [
        "sardu"
      ],
      "direction": "LTR",
      "family": "Indo-European"
    },
    {
      "iso639_1": "sd",
      "iso639_2": "snd",
      "iso639_2en": "snd",
      "iso639_3": "snd",
      "name": [
        "Sindhi"
      ],
      "nativeName": [
        "सिन्धी",
        "سنڌي، سندھی‎"
      ],
      "direction": "RTL",
      "family": "Indo-European"
    },
    {
      "iso639_1": "se",
      "iso639_2": "sme",
      "iso639_2en": "sme",
      "iso639_3": "sme",
      "name": [
        "Northern Sami"
      ],
      "nativeName": [
        "Davvisámegiella"
      ],
      "direction": "LTR",
      "family": "Uralic"
    },
    {
      "iso639_1": "sm",
      "iso639_2": "smo",
      "iso639_2en": "smo",
      "iso639_3": "smo",
      "name": [
        "Samoan"
      ],
      "nativeName": [
        "gagana fa'a Samoa"
      ],
      "direction": "LTR",
      "family": "Austronesian"
    },
    {
      "iso639_1": "sg",
      "iso639_2": "sag",
      "iso639_2en": "sag",
      "iso639_3": "sag",
      "name": [
        "Sango"
      ],
      "nativeName": [
        "yângâ tî sängö"
      ],
      "direction": "LTR",
      "family": "Creole",
      "countries": [
        "CAF"
      ]
    },
    {
      "iso639_1": "sr",
      "iso639_2": "srp",
      "iso639_2en": "srp",
      "iso639_3": "srp",
      "name": [
        "Serbian"
      ],
      "nativeName": [
        "српски језик"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "SRB",
        "BIH"
      ],
      "langCultureMs": [
        {
          "langCultureName": "Cy-sr-SP",
          "displayName": "Serbian (Cyrillic) - Serbia",
          "cultureCode": "0x0C1A"
        },
        {
          "langCultureName": "Lt-sr-SP",
          "displayName": "Serbian (Latin) - Serbia",
          "cultureCode": "0x081A"
        }
      ]
    },
    {
      "iso639_1": "gd",
      "iso639_2": "gla",
      "iso639_2en": "gla",
      "iso639_3": "gla",
      "name": [
        "Scottish Gaelic",
        "Gaelic"
      ],
      "nativeName": [
        "Gàidhlig"
      ],
      "direction": "LTR",
      "family": "Indo-European"
    },
    {
      "iso639_1": "sn",
      "iso639_2": "sna",
      "iso639_2en": "sna",
      "iso639_3": "sna",
      "name": [
        "Shona"
      ],
      "nativeName": [
        "chiShona"
      ],
      "direction": "LTR",
      "family": "Niger–Congo",
      "countries": [
        "ZWE"
      ]
    },
    {
      "iso639_1": "si",
      "iso639_2": "sin",
      "iso639_2en": "sin",
      "iso639_3": "sin",
      "name": [
        "Sinhala",
        "Sinhalese"
      ],
      "nativeName": [
        "සිංහල"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "LKA"
      ]
    },
    {
      "iso639_1": "sk",
      "iso639_2": "slk",
      "iso639_2en": "slo",
      "iso639_3": "slk",
      "name": [
        "Slovak"
      ],
      "nativeName": [
        "slovenčina",
        "slovenský jazyk"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "SVK",
        "CZE"
      ],
      "langCultureMs": [
        {
          "langCultureName": "sk-SK",
          "displayName": "Slovak - Slovakia",
          "cultureCode": "0x041B"
        }
      ]
    },
    {
      "iso639_1": "sl",
      "iso639_2": "slv",
      "iso639_2en": "slv",
      "iso639_3": "slv",
      "name": [
        "Slovene"
      ],
      "nativeName": [
        "slovenski jezik",
        "slovenščina"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "SVN"
      ],
      "langCultureMs": [
        {
          "langCultureName": "sl-SI",
          "displayName": "Slovenian - Slovenia",
          "cultureCode": "0x0424"
        }
      ]
    },
    {
      "iso639_1": "so",
      "iso639_2": "som",
      "iso639_2en": "som",
      "iso639_3": "som",
      "name": [
        "Somali"
      ],
      "nativeName": [
        "Soomaaliga",
        "af Soomaali"
      ],
      "direction": "LTR",
      "family": "Afro-Asiatic",
      "countries": [
        "DJI",
        "SOM"
      ]
    },
    {
      "iso639_1": "st",
      "iso639_2": "sot",
      "iso639_2en": "sot",
      "iso639_3": "sot",
      "name": [
        "Southern Sotho"
      ],
      "nativeName": [
        "Sesotho"
      ],
      "direction": "LTR",
      "family": "Niger–Congo",
      "countries": [
        "LSO",
        "ZAF"
      ]
    },
    {
      "iso639_1": "es",
      "iso639_2": "spa",
      "iso639_2en": "spa",
      "iso639_3": "spa",
      "name": [
        "Spanish",
        "Castilian"
      ],
      "nativeName": [
        "español",
        "castellano"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "ARG",
        "BOL",
        "CHL",
        "COL",
        "CRI",
        "CUB",
        "DOM",
        "ECU",
        "SLV",
        "GNQ",
        "GTM",
        "HND",
        "MEX",
        "NIC",
        "PAN",
        "PRY",
        "PER",
        "PRI",
        "ESP",
        "URY",
        "VEN",
        "ESH"
      ],
      "langCultureMs": [
        {
          "langCultureName": "es-AR",
          "displayName": "Spanish - Argentina",
          "cultureCode": "0x2C0A"
        },
        {
          "langCultureName": "es-BO",
          "displayName": "Spanish - Bolivia",
          "cultureCode": "0x400A"
        },
        {
          "langCultureName": "es-CL",
          "displayName": "Spanish - Chile",
          "cultureCode": "0x340A"
        },
        {
          "langCultureName": "es-CO",
          "displayName": "Spanish - Colombia",
          "cultureCode": "0x240A"
        },
        {
          "langCultureName": "es-CR",
          "displayName": "Spanish - Costa Rica",
          "cultureCode": "0x140A"
        },
        {
          "langCultureName": "es-DO",
          "displayName": "Spanish - Dominican Republic",
          "cultureCode": "0x1C0A"
        },
        {
          "langCultureName": "es-EC",
          "displayName": "Spanish - Ecuador",
          "cultureCode": "0x300A"
        },
        {
          "langCultureName": "es-SV",
          "displayName": "Spanish - El Salvador",
          "cultureCode": "0x440A"
        },
        {
          "langCultureName": "es-GT",
          "displayName": "Spanish - Guatemala",
          "cultureCode": "0x100A"
        },
        {
          "langCultureName": "es-HN",
          "displayName": "Spanish - Honduras",
          "cultureCode": "0x480A"
        },
        {
          "langCultureName": "es-MX",
          "displayName": "Spanish - Mexico",
          "cultureCode": "0x080A"
        },
        {
          "langCultureName": "es-NI",
          "displayName": "Spanish - Nicaragua",
          "cultureCode": "0x4C0A"
        },
        {
          "langCultureName": "es-PA",
          "displayName": "Spanish - Panama",
          "cultureCode": "0x180A"
        },
        {
          "langCultureName": "es-PY",
          "displayName": "Spanish - Paraguay",
          "cultureCode": "0x3C0A"
        },
        {
          "langCultureName": "es-PE",
          "displayName": "Spanish - Peru",
          "cultureCode": "0x280A"
        },
        {
          "langCultureName": "es-PR",
          "displayName": "Spanish - Puerto Rico",
          "cultureCode": "0x500A"
        },
        {
          "langCultureName": "es-ES",
          "displayName": "Spanish - Spain",
          "cultureCode": "0x0C0A"
        },
        {
          "langCultureName": "es-UY",
          "displayName": "Spanish - Uruguay",
          "cultureCode": "0x380A"
        },
        {
          "langCultureName": "es-VE",
          "displayName": "Spanish - Venezuela",
          "cultureCode": "0x200A"
        }
      ]
    },
    {
      "iso639_1": "su",
      "iso639_2": "sun",
      "iso639_2en": "sun",
      "iso639_3": "sun",
      "name": [
        "Sundanese"
      ],
      "nativeName": [
        "Basa Sunda"
      ],
      "direction": "LTR",
      "family": "Austronesian"
    },
    {
      "iso639_1": "sw",
      "iso639_2": "swa",
      "iso639_2en": "swa",
      "iso639_3": "swa",
      "name": [
        "Swahili"
      ],
      "nativeName": [
        "Kiswahili"
      ],
      "direction": "LTR",
      "family": "Niger–Congo",
      "countries": [
        "COD",
        "KEN",
        "TZA",
        "UGA"
      ],
      "langCultureMs": [
        {
          "langCultureName": "sw-KE",
          "displayName": "Swahili - Kenya",
          "cultureCode": "0x0441"
        }
      ]
    },
    {
      "iso639_1": "ss",
      "iso639_2": "ssw",
      "iso639_2en": "ssw",
      "iso639_3": "ssw",
      "name": [
        "Swati"
      ],
      "nativeName": [
        "SiSwati"
      ],
      "direction": "LTR",
      "family": "Niger–Congo",
      "countries": [
        "SWZ",
        "ZAF"
      ]
    },
    {
      "iso639_1": "sv",
      "iso639_2": "swe",
      "iso639_2en": "swe",
      "iso639_3": "swe",
      "name": [
        "Swedish"
      ],
      "nativeName": [
        "Svenska"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "SWE",
        "FIN",
        "ALA"
      ],
      "langCultureMs": [
        {
          "langCultureName": "sv-FI",
          "displayName": "Swedish - Finland",
          "cultureCode": "0x081D"
        },
        {
          "langCultureName": "sv-SE",
          "displayName": "Swedish - Sweden",
          "cultureCode": "0x041D"
        }
      ]
    },
    {
      "iso639_1": "ta",
      "iso639_2": "tam",
      "iso639_2en": "tam",
      "iso639_3": "tam",
      "name": [
        "Tamil"
      ],
      "nativeName": [
        "தமிழ்"
      ],
      "direction": "LTR",
      "family": "Dravidian",
      "countries": [
        "IND",
        "SGP",
        "LKA",
        "MYS",
        "MUS"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ta-IN",
          "displayName": "Tamil - India",
          "cultureCode": "0x0449"
        }
      ]
    },
    {
      "iso639_1": "te",
      "iso639_2": "tel",
      "iso639_2en": "tel",
      "iso639_3": "tel",
      "name": [
        "Telugu"
      ],
      "nativeName": [
        "తెలుగు"
      ],
      "direction": "LTR",
      "family": "Dravidian",
      "countries": [
        "IND"
      ],
      "langCultureMs": [
        {
          "langCultureName": "te-IN",
          "displayName": "Telugu - India",
          "cultureCode": "0x044A"
        }
      ]
    },
    {
      "iso639_1": "tg",
      "iso639_2": "tgk",
      "iso639_2en": "tgk",
      "iso639_3": "tgk",
      "name": [
        "Tajik"
      ],
      "nativeName": [
        "тоҷикӣ",
        "toğikī",
        "تاجیکی‎"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "TJK"
      ]
    },
    {
      "iso639_1": "th",
      "iso639_2": "tha",
      "iso639_2en": "tha",
      "iso639_3": "tha",
      "name": [
        "Thai"
      ],
      "nativeName": [
        "ไทย"
      ],
      "direction": "LTR",
      "family": "Tai–Kadai",
      "countries": [
        "THA"
      ],
      "langCultureMs": [
        {
          "langCultureName": "th-TH",
          "displayName": "Thai - Thailand",
          "cultureCode": "0x041E"
        }
      ]
    },
    {
      "iso639_1": "ti",
      "iso639_2": "tir",
      "iso639_2en": "tir",
      "iso639_3": "tir",
      "name": [
        "Tigrinya"
      ],
      "nativeName": [
        "ትግርኛ"
      ],
      "direction": "LTR",
      "family": "Afro-Asiatic",
      "countries": [
        "ERI"
      ]
    },
    {
      "iso639_1": "bo",
      "iso639_2": "bod",
      "iso639_2en": "tib",
      "iso639_3": "bod",
      "name": [
        "Tibetan Standard",
        "Tibetan",
        "Central"
      ],
      "nativeName": [
        "བོད་ཡིག"
      ],
      "direction": "LTR",
      "family": "Sino-Tibetan"
    },
    {
      "iso639_1": "tk",
      "iso639_2": "tuk",
      "iso639_2en": "tuk",
      "iso639_3": "tuk",
      "name": [
        "Turkmen"
      ],
      "nativeName": [
        "Türkmen",
        "Түркмен"
      ],
      "direction": "LTR",
      "family": "Turkic",
      "countries": [
        "TKM"
      ]
    },
    {
      "iso639_1": "tl",
      "iso639_2": "tgl",
      "iso639_2en": "tgl",
      "iso639_3": "tgl",
      "name": [
        "Tagalog"
      ],
      "nativeName": [
        "Wikang Tagalog"
      ],
      "direction": "LTR",
      "family": "Austronesian",
      "countries": [
        "PHL"
      ]
    },
    {
      "iso639_1": "",
      "iso639_2": "fil",
      "iso639_2en": "fil",
      "iso639_3": "fil",
      "name": [
        "Filipino"
      ],
      "nativeName": [
        "Filipino"
      ],
      "direction": "LTR",
      "family": "Austronesian",
      "countries": [
        "PHL"
      ]
    },
    {
      "iso639_1": "tn",
      "iso639_2": "tsn",
      "iso639_2en": "tsn",
      "iso639_3": "tsn",
      "name": [
        "Tswana"
      ],
      "nativeName": [
        "Setswana"
      ],
      "direction": "LTR",
      "family": "Niger–Congo",
      "countries": [
        "BWA",
        "ZAF"
      ]
    },
    {
      "iso639_1": "to",
      "iso639_2": "ton",
      "iso639_2en": "ton",
      "iso639_3": "ton",
      "name": [
        "Tonga (Tonga Islands)"
      ],
      "nativeName": [
        "faka Tonga"
      ],
      "direction": "LTR",
      "family": "Austronesian"
    },
    {
      "iso639_1": "tr",
      "iso639_2": "tur",
      "iso639_2en": "tur",
      "iso639_3": "tur",
      "name": [
        "Turkish"
      ],
      "nativeName": [
        "Türkçe"
      ],
      "direction": "LTR",
      "family": "Turkic",
      "countries": [
        "TUR",
        "CYP"
      ],
      "langCultureMs": [
        {
          "langCultureName": "tr-TR",
          "displayName": "Turkish - Turkey",
          "cultureCode": "0x041F"
        }
      ]
    },
    {
      "iso639_1": "ts",
      "iso639_2": "tso",
      "iso639_2en": "tso",
      "iso639_3": "tso",
      "name": [
        "Tsonga"
      ],
      "nativeName": [
        "Xitsonga"
      ],
      "direction": "LTR",
      "family": "Niger–Congo",
      "countries": [
        "ZAF"
      ]
    },
    {
      "iso639_1": "tt",
      "iso639_2": "tat",
      "iso639_2en": "tat",
      "iso639_3": "tat",
      "name": [
        "Tatar"
      ],
      "nativeName": [
        "татар теле",
        "tatar tele"
      ],
      "direction": "LTR",
      "family": "Turkic",
      "langCultureMs": [
        {
          "langCultureName": "tt-RU",
          "displayName": "Tatar - Russia",
          "cultureCode": "0x0444"
        }
      ]
    },
    {
      "iso639_1": "tw",
      "iso639_2": "twi",
      "iso639_2en": "twi",
      "iso639_3": "twi",
      "name": [
        "Twi"
      ],
      "nativeName": [
        "Twi"
      ],
      "direction": "LTR",
      "family": "Niger–Congo"
    },
    {
      "iso639_1": "ty",
      "iso639_2": "tah",
      "iso639_2en": "tah",
      "iso639_3": "tah",
      "name": [
        "Tahitian"
      ],
      "nativeName": [
        "Reo Tahiti"
      ],
      "direction": "LTR",
      "family": "Austronesian"
    },
    {
      "iso639_1": "ug",
      "iso639_2": "uig",
      "iso639_2en": "uig",
      "iso639_3": "uig",
      "name": [
        "Uyghur",
        "Uighur"
      ],
      "nativeName": [
        "Uyƣurqə",
        "ئۇيغۇرچە‎"
      ],
      "direction": "RTL",
      "family": "Turkic"
    },
    {
      "iso639_1": "uk",
      "iso639_2": "ukr",
      "iso639_2en": "ukr",
      "iso639_3": "ukr",
      "name": [
        "Ukrainian"
      ],
      "nativeName": [
        "українська мова"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "UKR"
      ],
      "langCultureMs": [
        {
          "langCultureName": "uk-UA",
          "displayName": "Ukrainian - Ukraine",
          "cultureCode": "0x0422"
        }
      ]
    },
    {
      "iso639_1": "ur",
      "iso639_2": "urd",
      "iso639_2en": "urd",
      "iso639_3": "urd",
      "name": [
        "Urdu"
      ],
      "nativeName": [
        "اردو"
      ],
      "direction": "RTL",
      "family": "Indo-European",
      "countries": [
        "PAK",
        "FJI"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ur-PK",
          "displayName": "Urdu - Pakistan",
          "cultureCode": "0x0420"
        }
      ]
    },
    {
      "iso639_1": "uz",
      "iso639_2": "uzb",
      "iso639_2en": "uzb",
      "iso639_3": "uzb",
      "name": [
        "Uzbek"
      ],
      "nativeName": [
        "O‘zbek",
        "Ўзбек",
        "أۇزبېك‎"
      ],
      "direction": "LTR",
      "family": "Turkic",
      "countries": [
        "UZB"
      ],
      "langCultureMs": [
        {
          "langCultureName": "Cy-uz-UZ",
          "displayName": "Uzbek (Cyrillic) - Uzbekistan",
          "cultureCode": "0x0843"
        },
        {
          "langCultureName": "Lt-uz-UZ",
          "displayName": "Uzbek (Latin) - Uzbekistan",
          "cultureCode": "0x0443"
        }
      ]
    },
    {
      "iso639_1": "ve",
      "iso639_2": "ven",
      "iso639_2en": "ven",
      "iso639_3": "ven",
      "name": [
        "Venda"
      ],
      "nativeName": [
        "Tshivenḓa"
      ],
      "direction": "LTR",
      "family": "Niger–Congo",
      "countries": [
        "ZAF"
      ]
    },
    {
      "iso639_1": "vi",
      "iso639_2": "vie",
      "iso639_2en": "vie",
      "iso639_3": "vie",
      "name": [
        "Vietnamese"
      ],
      "nativeName": [
        "Tiếng Việt"
      ],
      "direction": "LTR",
      "family": "Austroasiatic",
      "countries": [
        "VNM"
      ],
      "langCultureMs": [
        {
          "langCultureName": "vi-VN",
          "displayName": "Vietnamese - Vietnam",
          "cultureCode": "0x042A"
        }
      ]
    },
    {
      "iso639_1": "vo",
      "iso639_2": "vol",
      "iso639_2en": "vol",
      "iso639_3": "vol",
      "name": [
        "Volapük"
      ],
      "nativeName": [
        "Volapük"
      ],
      "direction": "LTR",
      "family": "Constructed"
    },
    {
      "iso639_1": "wa",
      "iso639_2": "wln",
      "iso639_2en": "wln",
      "iso639_3": "wln",
      "name": [
        "Walloon"
      ],
      "nativeName": [
        "walon"
      ],
      "direction": "LTR",
      "family": "Indo-European"
    },
    {
      "iso639_1": "cy",
      "iso639_2": "cym",
      "iso639_2en": "wel",
      "iso639_3": "cym",
      "name": [
        "Welsh"
      ],
      "nativeName": [
        "Cymraeg"
      ],
      "direction": "LTR",
      "family": "Indo-European",
      "countries": [
        "GBR"
      ]
    },
    {
      "iso639_1": "wo",
      "iso639_2": "wol",
      "iso639_2en": "wol",
      "iso639_3": "wol",
      "name": [
        "Wolof"
      ],
      "nativeName": [
        "Wollof"
      ],
      "direction": "LTR",
      "family": "Niger–Congo",
      "countries": [
        "SEN"
      ]
    },
    {
      "iso639_1": "fy",
      "iso639_2": "fry",
      "iso639_2en": "fry",
      "iso639_3": "fry",
      "name": [
        "Western Frisian"
      ],
      "nativeName": [
        "Frysk"
      ],
      "direction": "LTR",
      "family": "Indo-European"
    },
    {
      "iso639_1": "xh",
      "iso639_2": "xho",
      "iso639_2en": "xho",
      "iso639_3": "xho",
      "name": [
        "Xhosa"
      ],
      "nativeName": [
        "isiXhosa"
      ],
      "direction": "LTR",
      "family": "Niger–Congo",
      "countries": [
        "ZAF"
      ]
    },
    {
      "iso639_1": "yi",
      "iso639_2": "yid",
      "iso639_2en": "yid",
      "iso639_3": "yid",
      "name": [
        "Yiddish"
      ],
      "nativeName": [
        "ייִדיש"
      ],
      "direction": "RTL",
      "family": "Indo-European"
    },
    {
      "iso639_1": "yo",
      "iso639_2": "yor",
      "iso639_2en": "yor",
      "iso639_3": "yor",
      "name": [
        "Yoruba"
      ],
      "nativeName": [
        "Yorùbá"
      ],
      "direction": "LTR",
      "family": "Niger–Congo",
      "countries": [
        "BEN",
        "NGA"
      ]
    },
    {
      "iso639_1": "za",
      "iso639_2": "zha",
      "iso639_2en": "zha",
      "iso639_3": "zha",
      "name": [
        "Zhuang",
        "Chuang"
      ],
      "nativeName": [
        "Saɯ cueŋƅ",
        "Saw cuengh"
      ],
      "direction": "LTR",
      "family": "Tai–Kadai"
    },
    {
      "iso639_1": "zu",
      "iso639_2": "zul",
      "iso639_2en": "zul",
      "iso639_3": "zul",
      "name": [
        "Zulu"
      ],
      "nativeName": [
        "isiZulu"
      ],
      "direction": "LTR",
      "family": "Niger–Congo",
      "countries": [
        "ZAF"
      ]
    },
    {
      "iso639_1": "",
      "iso639_2": "ace",
      "iso639_2en": "ace",
      "iso639_3": "ace",
      "name": [
        "Achinese"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "ach",
      "iso639_2en": "ach",
      "iso639_3": "ach",
      "name": [
        "Acoli"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "ada",
      "iso639_2en": "ada",
      "iso639_3": "ada",
      "name": [
        "Adangme"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "ady",
      "iso639_2en": "ady",
      "iso639_3": "ady",
      "name": [
        "Adyghe",
        " Adygei"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "afa",
      "iso639_2en": "afa",
      "iso639_3": "afa",
      "name": [
        "Afro-Asiatic languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "afh",
      "iso639_2en": "afh",
      "iso639_3": "afh",
      "name": [
        "Afrihili"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "ain",
      "iso639_2en": "ain",
      "iso639_3": "ain",
      "name": [
        "Ainu"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "akk",
      "iso639_2en": "akk",
      "iso639_3": "akk",
      "name": [
        "Akkadian"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "ale",
      "iso639_2en": "ale",
      "iso639_3": "ale",
      "name": [
        "Aleut"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "alg",
      "iso639_2en": "alg",
      "iso639_3": "alg",
      "name": [
        "Algonquian languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "alt",
      "iso639_2en": "alt",
      "iso639_3": "alt",
      "name": [
        "Southern Altai"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "ang",
      "iso639_2en": "ang",
      "iso639_3": "ang",
      "name": [
        "English, Old (ca.450-1100)"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "anp",
      "iso639_2en": "anp",
      "iso639_3": "anp",
      "name": [
        "Angika"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "apa",
      "iso639_2en": "apa",
      "iso639_3": "apa",
      "name": [
        "Apache languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "arc",
      "iso639_2en": "arc",
      "iso639_3": "arc",
      "name": [
        "Official Aramaic (700-300 BCE)",
        " Imperial Aramaic (700-300 BCE)"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "RTL",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "arn",
      "iso639_2en": "arn",
      "iso639_3": "arn",
      "name": [
        "Mapudungun",
        " Mapuche"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "arp",
      "iso639_2en": "arp",
      "iso639_3": "arp",
      "name": [
        "Arapaho"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "art",
      "iso639_2en": "art",
      "iso639_3": "art",
      "name": [
        "Artificial languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "arw",
      "iso639_2en": "arw",
      "iso639_3": "arw",
      "name": [
        "Arawak"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "ast",
      "iso639_2en": "ast",
      "iso639_3": "ast",
      "name": [
        "Asturian",
        " Bable",
        " Leonese",
        " Asturleonese"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "ath",
      "iso639_2en": "ath",
      "iso639_3": "ath",
      "name": [
        "Athapascan languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "aus",
      "iso639_2en": "aus",
      "iso639_3": "aus",
      "name": [
        "Australian languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "awa",
      "iso639_2en": "awa",
      "iso639_3": "awa",
      "name": [
        "Awadhi"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "bad",
      "iso639_2en": "bad",
      "iso639_3": "bad",
      "name": [
        "Banda languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "bai",
      "iso639_2en": "bai",
      "iso639_3": "bai",
      "name": [
        "Bamileke languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "bal",
      "iso639_2en": "bal",
      "iso639_3": "bal",
      "name": [
        "Baluchi",
        "Balochi"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "RTL",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "ban",
      "iso639_2en": "ban",
      "iso639_3": "ban",
      "name": [
        "Balinese"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "bas",
      "iso639_2en": "bas",
      "iso639_3": "bas",
      "name": [
        "Basa"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "bat",
      "iso639_2en": "bat",
      "iso639_3": "bat",
      "name": [
        "Baltic languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "bej",
      "iso639_2en": "bej",
      "iso639_3": "bej",
      "name": [
        "Beja",
        " Bedawiyet"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "bem",
      "iso639_2en": "bem",
      "iso639_3": "bem",
      "name": [
        "Bemba"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "bho",
      "iso639_2en": "bho",
      "iso639_3": "bho",
      "name": [
        "Bhojpuri"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "bik",
      "iso639_2en": "bik",
      "iso639_3": "bik",
      "name": [
        "Bikol"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "bin",
      "iso639_2en": "bin",
      "iso639_3": "bin",
      "name": [
        "Bini",
        " Edo"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "bla",
      "iso639_2en": "bla",
      "iso639_3": "bla",
      "name": [
        "Siksika"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "bnt",
      "iso639_2en": "bnt",
      "iso639_3": "bnt",
      "name": [
        "Bantu languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "bra",
      "iso639_2en": "bra",
      "iso639_3": "bra",
      "name": [
        "Braj"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "btk",
      "iso639_2en": "btk",
      "iso639_3": "btk",
      "name": [
        "Batak languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "bua",
      "iso639_2en": "bua",
      "iso639_3": "bua",
      "name": [
        "Buriat"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "bug",
      "iso639_2en": "bug",
      "iso639_3": "bug",
      "name": [
        "Buginese"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "byn",
      "iso639_2en": "byn",
      "iso639_3": "byn",
      "name": [
        "Blin",
        " Bilin"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "cad",
      "iso639_2en": "cad",
      "iso639_3": "cad",
      "name": [
        "Caddo"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "cai",
      "iso639_2en": "cai",
      "iso639_3": "cai",
      "name": [
        "Central American Indian languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "car",
      "iso639_2en": "car",
      "iso639_3": "car",
      "name": [
        "Galibi Carib"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "cau",
      "iso639_2en": "cau",
      "iso639_3": "cau",
      "name": [
        "Caucasian languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "ceb",
      "iso639_2en": "ceb",
      "iso639_3": "ceb",
      "name": [
        "Cebuano"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "cel",
      "iso639_2en": "cel",
      "iso639_3": "cel",
      "name": [
        "Celtic languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "chb",
      "iso639_2en": "chb",
      "iso639_3": "chb",
      "name": [
        "Chibcha"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "chg",
      "iso639_2en": "chg",
      "iso639_3": "chg",
      "name": [
        "Chagatai"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "chk",
      "iso639_2en": "chk",
      "iso639_3": "chk",
      "name": [
        "Chuukese"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "chm",
      "iso639_2en": "chm",
      "iso639_3": "chm",
      "name": [
        "Mari"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "chn",
      "iso639_2en": "chn",
      "iso639_3": "chn",
      "name": [
        "Chinook jargon"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "cho",
      "iso639_2en": "cho",
      "iso639_3": "cho",
      "name": [
        "Choctaw"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "chp",
      "iso639_2en": "chp",
      "iso639_3": "chp",
      "name": [
        "Chipewyan",
        " Dene Suline"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "chr",
      "iso639_2en": "chr",
      "iso639_3": "chr",
      "name": [
        "Cherokee"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "chy",
      "iso639_2en": "chy",
      "iso639_3": "chy",
      "name": [
        "Cheyenne"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "cmc",
      "iso639_2en": "cmc",
      "iso639_3": "cmc",
      "name": [
        "Chamic languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "cop",
      "iso639_2en": "cop",
      "iso639_3": "cop",
      "name": [
        "Coptic"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "cpe",
      "iso639_2en": "cpe",
      "iso639_3": "cpe",
      "name": [
        "Creoles and pidgins, English based"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "cpf",
      "iso639_2en": "cpf",
      "iso639_3": "cpf",
      "name": [
        "Creoles and pidgins, French-based"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "cpp",
      "iso639_2en": "cpp",
      "iso639_3": "cpp",
      "name": [
        "Creoles and pidgins, Portuguese-based"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "crh",
      "iso639_2en": "crh",
      "iso639_3": "crh",
      "name": [
        "Crimean Tatar",
        " Crimean Turkish"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "crp",
      "iso639_2en": "crp",
      "iso639_3": "crp",
      "name": [
        "Creoles and pidgins"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "csb",
      "iso639_2en": "csb",
      "iso639_3": "csb",
      "name": [
        "Kashubian"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "cus",
      "iso639_2en": "cus",
      "iso639_3": "cus",
      "name": [
        "Cushitic languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "dak",
      "iso639_2en": "dak",
      "iso639_3": "dak",
      "name": [
        "Dakota"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "dar",
      "iso639_2en": "dar",
      "iso639_3": "dar",
      "name": [
        "Dargwa"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "day",
      "iso639_2en": "day",
      "iso639_3": "day",
      "name": [
        "Land Dayak languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "del",
      "iso639_2en": "del",
      "iso639_3": "del",
      "name": [
        "Delaware"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "den",
      "iso639_2en": "den",
      "iso639_3": "den",
      "name": [
        "Slave (Athapascan)"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "dgr",
      "iso639_2en": "dgr",
      "iso639_3": "dgr",
      "name": [
        "Dogrib"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "din",
      "iso639_2en": "din",
      "iso639_3": "din",
      "name": [
        "Dinka"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "doi",
      "iso639_2en": "doi",
      "iso639_3": "doi",
      "name": [
        "Dogri"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "dra",
      "iso639_2en": "dra",
      "iso639_3": "dra",
      "name": [
        "Dravidian languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "dsb",
      "iso639_2en": "dsb",
      "iso639_3": "dsb",
      "name": [
        "Lower Sorbian"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "dua",
      "iso639_2en": "dua",
      "iso639_3": "dua",
      "name": [
        "Duala"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "dum",
      "iso639_2en": "dum",
      "iso639_3": "dum",
      "name": [
        "Dutch, Middle (ca.1050-1350)"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "dyu",
      "iso639_2en": "dyu",
      "iso639_3": "dyu",
      "name": [
        "Dyula"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "efi",
      "iso639_2en": "efi",
      "iso639_3": "efi",
      "name": [
        "Efik"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "egy",
      "iso639_2en": "egy",
      "iso639_3": "egy",
      "name": [
        "Egyptian (Ancient)"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "eka",
      "iso639_2en": "eka",
      "iso639_3": "eka",
      "name": [
        "Ekajuk"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "elx",
      "iso639_2en": "elx",
      "iso639_3": "elx",
      "name": [
        "Elamite"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "enm",
      "iso639_2en": "enm",
      "iso639_3": "enm",
      "name": [
        "English, Middle (1100-1500)"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "ewo",
      "iso639_2en": "ewo",
      "iso639_3": "ewo",
      "name": [
        "Ewondo"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "fan",
      "iso639_2en": "fan",
      "iso639_3": "fan",
      "name": [
        "Fang"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "fat",
      "iso639_2en": "fat",
      "iso639_3": "fat",
      "name": [
        "Fanti"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "fiu",
      "iso639_2en": "fiu",
      "iso639_3": "fiu",
      "name": [
        "Finno-Ugrian languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "fon",
      "iso639_2en": "fon",
      "iso639_3": "fon",
      "name": [
        "Fon"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "frm",
      "iso639_2en": "frm",
      "iso639_3": "frm",
      "name": [
        "French, Middle (ca.1400-1600)"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "fro",
      "iso639_2en": "fro",
      "iso639_3": "fro",
      "name": [
        "French, Old (842-ca.1400)"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "frr",
      "iso639_2en": "frr",
      "iso639_3": "frr",
      "name": [
        "Northern Frisian"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "frs",
      "iso639_2en": "frs",
      "iso639_3": "frs",
      "name": [
        "Eastern Frisian"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "fur",
      "iso639_2en": "fur",
      "iso639_3": "fur",
      "name": [
        "Friulian"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "gaa",
      "iso639_2en": "gaa",
      "iso639_3": "gaa",
      "name": [
        "Ga"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": "",
      "countries": [
        "GHA"
      ]
    },
    {
      "iso639_1": "",
      "iso639_2": "gay",
      "iso639_2en": "gay",
      "iso639_3": "gay",
      "name": [
        "Gayo"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "gba",
      "iso639_2en": "gba",
      "iso639_3": "gba",
      "name": [
        "Gbaya"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "gem",
      "iso639_2en": "gem",
      "iso639_3": "gem",
      "name": [
        "Germanic languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "gez",
      "iso639_2en": "gez",
      "iso639_3": "gez",
      "name": [
        "Geez"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "gil",
      "iso639_2en": "gil",
      "iso639_3": "gil",
      "name": [
        "Gilbertese"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "gmh",
      "iso639_2en": "gmh",
      "iso639_3": "gmh",
      "name": [
        "German, Middle High (ca.1050-1500)"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "goh",
      "iso639_2en": "goh",
      "iso639_3": "goh",
      "name": [
        "German, Old High (ca.750-1050)"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "gon",
      "iso639_2en": "gon",
      "iso639_3": "gon",
      "name": [
        "Gondi"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "gor",
      "iso639_2en": "gor",
      "iso639_3": "gor",
      "name": [
        "Gorontalo"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "got",
      "iso639_2en": "got",
      "iso639_3": "got",
      "name": [
        "Gothic"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "grb",
      "iso639_2en": "grb",
      "iso639_3": "grb",
      "name": [
        "Grebo"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "grc",
      "iso639_2en": "grc",
      "iso639_3": "grc",
      "name": [
        "Greek, Ancient (to 1453)"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "gsw",
      "iso639_2en": "gsw",
      "iso639_3": "gsw",
      "name": [
        "Swiss German",
        " Alemannic",
        " Alsatian"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "gwi",
      "iso639_2en": "gwi",
      "iso639_3": "gwi",
      "name": [
        "Gwich'in"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "hai",
      "iso639_2en": "hai",
      "iso639_3": "hai",
      "name": [
        "Haida"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "haw",
      "iso639_2en": "haw",
      "iso639_3": "haw",
      "name": [
        "Hawaiian"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "hil",
      "iso639_2en": "hil",
      "iso639_3": "hil",
      "name": [
        "Hiligaynon"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "him",
      "iso639_2en": "him",
      "iso639_3": "him",
      "name": [
        "Himachali languages",
        " Western Pahari languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "hit",
      "iso639_2en": "hit",
      "iso639_3": "hit",
      "name": [
        "Hittite"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "hmn",
      "iso639_2en": "hmn",
      "iso639_3": "hmn",
      "name": [
        "Hmong",
        " Mong"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "hsb",
      "iso639_2en": "hsb",
      "iso639_3": "hsb",
      "name": [
        "Upper Sorbian"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "hup",
      "iso639_2en": "hup",
      "iso639_3": "hup",
      "name": [
        "Hupa"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "iba",
      "iso639_2en": "iba",
      "iso639_3": "iba",
      "name": [
        "Iban"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "ijo",
      "iso639_2en": "ijo",
      "iso639_3": "ijo",
      "name": [
        "Ijo languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "ilo",
      "iso639_2en": "ilo",
      "iso639_3": "ilo",
      "name": [
        "Iloko"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "inc",
      "iso639_2en": "inc",
      "iso639_3": "inc",
      "name": [
        "Indic languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "ine",
      "iso639_2en": "ine",
      "iso639_3": "ine",
      "name": [
        "Indo-European languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "inh",
      "iso639_2en": "inh",
      "iso639_3": "inh",
      "name": [
        "Ingush"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "ira",
      "iso639_2en": "ira",
      "iso639_3": "ira",
      "name": [
        "Iranian languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "iro",
      "iso639_2en": "iro",
      "iso639_3": "iro",
      "name": [
        "Iroquoian languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "jbo",
      "iso639_2en": "jbo",
      "iso639_3": "jbo",
      "name": [
        "Lojban"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "jpr",
      "iso639_2en": "jpr",
      "iso639_3": "jpr",
      "name": [
        "Judeo-Persian"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "jrb",
      "iso639_2en": "jrb",
      "iso639_3": "jrb",
      "name": [
        "Judeo-Arabic"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "kaa",
      "iso639_2en": "kaa",
      "iso639_3": "kaa",
      "name": [
        "Kara-Kalpak"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "kab",
      "iso639_2en": "kab",
      "iso639_3": "kab",
      "name": [
        "Kabyle"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "kac",
      "iso639_2en": "kac",
      "iso639_3": "kac",
      "name": [
        "Kachin",
        " Jingpho"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "kam",
      "iso639_2en": "kam",
      "iso639_3": "kam",
      "name": [
        "Kamba"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "kar",
      "iso639_2en": "kar",
      "iso639_3": "kar",
      "name": [
        "Karen languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "kaw",
      "iso639_2en": "kaw",
      "iso639_3": "kaw",
      "name": [
        "Kawi"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "kbd",
      "iso639_2en": "kbd",
      "iso639_3": "kbd",
      "name": [
        "Kabardian"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "kha",
      "iso639_2en": "kha",
      "iso639_3": "kha",
      "name": [
        "Khasi"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "khi",
      "iso639_2en": "khi",
      "iso639_3": "khi",
      "name": [
        "Khoisan languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "kho",
      "iso639_2en": "kho",
      "iso639_3": "kho",
      "name": [
        "Khotanese",
        " Sakan"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "kmb",
      "iso639_2en": "kmb",
      "iso639_3": "kmb",
      "name": [
        "Kimbundu"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": "",
      "countries": [
        "AGO"
      ]
    },
    {
      "iso639_1": "",
      "iso639_2": "kok",
      "iso639_2en": "kok",
      "iso639_3": "kok",
      "name": [
        "Konkani"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": "",
      "langCultureMs": [
        {
          "langCultureName": "kok-IN",
          "displayName": "Konkani - India",
          "cultureCode": "0x0457"
        }
      ]
    },
    {
      "iso639_1": "",
      "iso639_2": "kos",
      "iso639_2en": "kos",
      "iso639_3": "kos",
      "name": [
        "Kosraean"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "kpe",
      "iso639_2en": "kpe",
      "iso639_3": "kpe",
      "name": [
        "Kpelle"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "krc",
      "iso639_2en": "krc",
      "iso639_3": "krc",
      "name": [
        "Karachay-Balkar"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "krl",
      "iso639_2en": "krl",
      "iso639_3": "krl",
      "name": [
        "Karelian"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "kro",
      "iso639_2en": "kro",
      "iso639_3": "kro",
      "name": [
        "Kru languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "kru",
      "iso639_2en": "kru",
      "iso639_3": "kru",
      "name": [
        "Kurukh"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "kum",
      "iso639_2en": "kum",
      "iso639_3": "kum",
      "name": [
        "Kumyk"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "kut",
      "iso639_2en": "kut",
      "iso639_3": "kut",
      "name": [
        "Kutenai"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "lad",
      "iso639_2en": "lad",
      "iso639_3": "lad",
      "name": [
        "Ladino"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "lah",
      "iso639_2en": "lah",
      "iso639_3": "lah",
      "name": [
        "Lahnda"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "lam",
      "iso639_2en": "lam",
      "iso639_3": "lam",
      "name": [
        "Lamba"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "lez",
      "iso639_2en": "lez",
      "iso639_3": "lez",
      "name": [
        "Lezghian"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "lol",
      "iso639_2en": "lol",
      "iso639_3": "lol",
      "name": [
        "Mongo"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "loz",
      "iso639_2en": "loz",
      "iso639_3": "loz",
      "name": [
        "Lozi"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "lua",
      "iso639_2en": "lua",
      "iso639_3": "lua",
      "name": [
        "Luba-Lulua"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "lui",
      "iso639_2en": "lui",
      "iso639_3": "lui",
      "name": [
        "Luiseno"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "lun",
      "iso639_2en": "lun",
      "iso639_3": "lun",
      "name": [
        "Lunda"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "luo",
      "iso639_2en": "luo",
      "iso639_3": "luo",
      "name": [
        "Luo (Kenya and Tanzania)"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "lus",
      "iso639_2en": "lus",
      "iso639_3": "lus",
      "name": [
        "Lushai"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "mad",
      "iso639_2en": "mad",
      "iso639_3": "mad",
      "name": [
        "Madurese"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "mag",
      "iso639_2en": "mag",
      "iso639_3": "mag",
      "name": [
        "Magahi"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "mai",
      "iso639_2en": "mai",
      "iso639_3": "mai",
      "name": [
        "Maithili"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "mak",
      "iso639_2en": "mak",
      "iso639_3": "mak",
      "name": [
        "Makasar"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "man",
      "iso639_2en": "man",
      "iso639_3": "man",
      "name": [
        "Mandingo"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "map",
      "iso639_2en": "map",
      "iso639_3": "map",
      "name": [
        "Austronesian languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "mas",
      "iso639_2en": "mas",
      "iso639_3": "mas",
      "name": [
        "Masai"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "mdf",
      "iso639_2en": "mdf",
      "iso639_3": "mdf",
      "name": [
        "Moksha"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "mdr",
      "iso639_2en": "mdr",
      "iso639_3": "mdr",
      "name": [
        "Mandar"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "men",
      "iso639_2en": "men",
      "iso639_3": "men",
      "name": [
        "Mende"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "mga",
      "iso639_2en": "mga",
      "iso639_3": "mga",
      "name": [
        "Irish, Middle (900-1200)"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "mic",
      "iso639_2en": "mic",
      "iso639_3": "mic",
      "name": [
        "Mi'kmaq",
        " Micmac"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "min",
      "iso639_2en": "min",
      "iso639_3": "min",
      "name": [
        "Minangkabau"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "mis",
      "iso639_2en": "mis",
      "iso639_3": "mis",
      "name": [
        "Uncoded languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "mkh",
      "iso639_2en": "mkh",
      "iso639_3": "mkh",
      "name": [
        "Mon-Khmer languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "mnc",
      "iso639_2en": "mnc",
      "iso639_3": "mnc",
      "name": [
        "Manchu"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "mni",
      "iso639_2en": "mni",
      "iso639_3": "mni",
      "name": [
        "Manipuri"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "mno",
      "iso639_2en": "mno",
      "iso639_3": "mno",
      "name": [
        "Manobo languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "moh",
      "iso639_2en": "moh",
      "iso639_3": "moh",
      "name": [
        "Mohawk"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "mos",
      "iso639_2en": "mos",
      "iso639_3": "mos",
      "name": [
        "Mossi"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": "",
      "countries": [
        "BFA"
      ]
    },
    {
      "iso639_1": "",
      "iso639_2": "mul",
      "iso639_2en": "mul",
      "iso639_3": "mul",
      "name": [
        "Multiple languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "mun",
      "iso639_2en": "mun",
      "iso639_3": "mun",
      "name": [
        "Munda languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "mus",
      "iso639_2en": "mus",
      "iso639_3": "mus",
      "name": [
        "Creek"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "mwl",
      "iso639_2en": "mwl",
      "iso639_3": "mwl",
      "name": [
        "Mirandese"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "mwr",
      "iso639_2en": "mwr",
      "iso639_3": "mwr",
      "name": [
        "Marwari"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "myn",
      "iso639_2en": "myn",
      "iso639_3": "myn",
      "name": [
        "Mayan languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "myv",
      "iso639_2en": "myv",
      "iso639_3": "myv",
      "name": [
        "Erzya"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "nah",
      "iso639_2en": "nah",
      "iso639_3": "nah",
      "name": [
        "Nahuatl languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "nai",
      "iso639_2en": "nai",
      "iso639_3": "nai",
      "name": [
        "North American Indian languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "nap",
      "iso639_2en": "nap",
      "iso639_3": "nap",
      "name": [
        "Neapolitan"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "nds",
      "iso639_2en": "nds",
      "iso639_3": "nds",
      "name": [
        "Low German",
        " Low Saxon",
        " German, Low",
        " Saxon, Low"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "new",
      "iso639_2en": "new",
      "iso639_3": "new",
      "name": [
        "Nepal Bhasa",
        " Newari"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "nia",
      "iso639_2en": "nia",
      "iso639_3": "nia",
      "name": [
        "Nias"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "nic",
      "iso639_2en": "nic",
      "iso639_3": "nic",
      "name": [
        "Niger-Kordofanian languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "niu",
      "iso639_2en": "niu",
      "iso639_3": "niu",
      "name": [
        "Niuean"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "nog",
      "iso639_2en": "nog",
      "iso639_3": "nog",
      "name": [
        "Nogai"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "non",
      "iso639_2en": "non",
      "iso639_3": "non",
      "name": [
        "Norse, Old"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "nqo",
      "iso639_2en": "nqo",
      "iso639_3": "nqo",
      "name": [
        "N'Ko"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "nub",
      "iso639_2en": "nub",
      "iso639_3": "nub",
      "name": [
        "Nubian languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "nwc",
      "iso639_2en": "nwc",
      "iso639_3": "nwc",
      "name": [
        "Classical Newari",
        " Old Newari",
        " Classical Nepal Bhasa"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "nym",
      "iso639_2en": "nym",
      "iso639_3": "nym",
      "name": [
        "Nyamwezi"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "nyn",
      "iso639_2en": "nyn",
      "iso639_3": "nyn",
      "name": [
        "Nyankole"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "nyo",
      "iso639_2en": "nyo",
      "iso639_3": "nyo",
      "name": [
        "Nyoro"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "nzi",
      "iso639_2en": "nzi",
      "iso639_3": "nzi",
      "name": [
        "Nzima"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "osa",
      "iso639_2en": "osa",
      "iso639_3": "osa",
      "name": [
        "Osage"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "ota",
      "iso639_2en": "ota",
      "iso639_3": "ota",
      "name": [
        "Turkish, Ottoman (1500-1928)"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "oto",
      "iso639_2en": "oto",
      "iso639_3": "oto",
      "name": [
        "Otomian languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "paa",
      "iso639_2en": "paa",
      "iso639_3": "paa",
      "name": [
        "Papuan languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "pag",
      "iso639_2en": "pag",
      "iso639_3": "pag",
      "name": [
        "Pangasinan"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "pal",
      "iso639_2en": "pal",
      "iso639_3": "pal",
      "name": [
        "Pahlavi"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "pam",
      "iso639_2en": "pam",
      "iso639_3": "pam",
      "name": [
        "Pampanga",
        " Kapampangan"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "pap",
      "iso639_2en": "pap",
      "iso639_3": "pap",
      "name": [
        "Papiamento"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": "",
      "countries": [
        "ABW",
        "CUW"
      ]
    },
    {
      "iso639_1": "",
      "iso639_2": "pau",
      "iso639_2en": "pau",
      "iso639_3": "pau",
      "name": [
        "Palauan"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "peo",
      "iso639_2en": "peo",
      "iso639_3": "peo",
      "name": [
        "Persian, Old (ca.600-400 B.C.)"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "phi",
      "iso639_2en": "phi",
      "iso639_3": "phi",
      "name": [
        "Philippine languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "phn",
      "iso639_2en": "phn",
      "iso639_3": "phn",
      "name": [
        "Phoenician"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "pon",
      "iso639_2en": "pon",
      "iso639_3": "pon",
      "name": [
        "Pohnpeian"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "pra",
      "iso639_2en": "pra",
      "iso639_3": "pra",
      "name": [
        "Prakrit languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "pro",
      "iso639_2en": "pro",
      "iso639_3": "pro",
      "name": [
        "Proven�al, Old (to 1500)",
        "Occitan, Old (to 1500)"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "qaa-qtz",
      "iso639_2en": "qaa-qtz",
      "iso639_3": "qaa-qtz",
      "name": [
        "Reserved for local use"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "raj",
      "iso639_2en": "raj",
      "iso639_3": "raj",
      "name": [
        "Rajasthani"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "rap",
      "iso639_2en": "rap",
      "iso639_3": "rap",
      "name": [
        "Rapanui"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "rar",
      "iso639_2en": "rar",
      "iso639_3": "rar",
      "name": [
        "Rarotongan",
        " Cook Islands Maori"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "roa",
      "iso639_2en": "roa",
      "iso639_3": "roa",
      "name": [
        "Romance languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "rom",
      "iso639_2en": "rom",
      "iso639_3": "rom",
      "name": [
        "Romany"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "rup",
      "iso639_2en": "rup",
      "iso639_3": "rup",
      "name": [
        "Aromanian",
        " Arumanian",
        " Macedo-Romanian"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "sad",
      "iso639_2en": "sad",
      "iso639_3": "sad",
      "name": [
        "Sandawe"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "sah",
      "iso639_2en": "sah",
      "iso639_3": "sah",
      "name": [
        "Yakut"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "sai",
      "iso639_2en": "sai",
      "iso639_3": "sai",
      "name": [
        "South American Indian languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "sal",
      "iso639_2en": "sal",
      "iso639_3": "sal",
      "name": [
        "Salishan languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "sam",
      "iso639_2en": "sam",
      "iso639_3": "sam",
      "name": [
        "Samaritan Aramaic"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "sas",
      "iso639_2en": "sas",
      "iso639_3": "sas",
      "name": [
        "Sasak"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "sat",
      "iso639_2en": "sat",
      "iso639_3": "sat",
      "name": [
        "Santali"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "scn",
      "iso639_2en": "scn",
      "iso639_3": "scn",
      "name": [
        "Sicilian"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "sco",
      "iso639_2en": "sco",
      "iso639_3": "sco",
      "name": [
        "Scots"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "sel",
      "iso639_2en": "sel",
      "iso639_3": "sel",
      "name": [
        "Selkup"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "sem",
      "iso639_2en": "sem",
      "iso639_3": "sem",
      "name": [
        "Semitic languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "sga",
      "iso639_2en": "sga",
      "iso639_3": "sga",
      "name": [
        "Irish, Old (to 900)"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "sgn",
      "iso639_2en": "sgn",
      "iso639_3": "sgn",
      "name": [
        "Sign Languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "shn",
      "iso639_2en": "shn",
      "iso639_3": "shn",
      "name": [
        "Shan"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "sid",
      "iso639_2en": "sid",
      "iso639_3": "sid",
      "name": [
        "Sidamo"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "sio",
      "iso639_2en": "sio",
      "iso639_3": "sio",
      "name": [
        "Siouan languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "sit",
      "iso639_2en": "sit",
      "iso639_3": "sit",
      "name": [
        "Sino-Tibetan languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "sla",
      "iso639_2en": "sla",
      "iso639_3": "sla",
      "name": [
        "Slavic languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "sma",
      "iso639_2en": "sma",
      "iso639_3": "sma",
      "name": [
        "Southern Sami"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "smi",
      "iso639_2en": "smi",
      "iso639_3": "smi",
      "name": [
        "Sami languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "smj",
      "iso639_2en": "smj",
      "iso639_3": "smj",
      "name": [
        "Lule Sami"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "smn",
      "iso639_2en": "smn",
      "iso639_3": "smn",
      "name": [
        "Inari Sami"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "sms",
      "iso639_2en": "sms",
      "iso639_3": "sms",
      "name": [
        "Skolt Sami"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "snk",
      "iso639_2en": "snk",
      "iso639_3": "snk",
      "name": [
        "Soninke"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": "",
      "countries": [
        "MLI",
        "SEN"
      ]
    },
    {
      "iso639_1": "",
      "iso639_2": "sog",
      "iso639_2en": "sog",
      "iso639_3": "sog",
      "name": [
        "Sogdian"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "son",
      "iso639_2en": "son",
      "iso639_3": "son",
      "name": [
        "Songhai languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "srn",
      "iso639_2en": "srn",
      "iso639_3": "srn",
      "name": [
        "Sranan Tongo"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "srr",
      "iso639_2en": "srr",
      "iso639_3": "srr",
      "name": [
        "Serer"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": "",
      "countries": [
        "SEN"
      ]
    },
    {
      "iso639_1": "",
      "iso639_2": "ssa",
      "iso639_2en": "ssa",
      "iso639_3": "ssa",
      "name": [
        "Nilo-Saharan languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "suk",
      "iso639_2en": "suk",
      "iso639_3": "suk",
      "name": [
        "Sukuma"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "sus",
      "iso639_2en": "sus",
      "iso639_3": "sus",
      "name": [
        "Susu"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "sux",
      "iso639_2en": "sux",
      "iso639_3": "sux",
      "name": [
        "Sumerian"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "syc",
      "iso639_2en": "syc",
      "iso639_3": "syc",
      "name": [
        "Classical Syriac"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "syr",
      "iso639_2en": "syr",
      "iso639_3": "syr",
      "name": [
        "Syriac"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": "",
      "langCultureMs": [
        {
          "langCultureName": "syr-SY",
          "displayName": "Syriac - Syria",
          "cultureCode": "0x045A"
        }
      ]
    },
    {
      "iso639_1": "",
      "iso639_2": "tai",
      "iso639_2en": "tai",
      "iso639_3": "tai",
      "name": [
        "Tai languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "tem",
      "iso639_2en": "tem",
      "iso639_3": "tem",
      "name": [
        "Timne"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "ter",
      "iso639_2en": "ter",
      "iso639_3": "ter",
      "name": [
        "Tereno"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "tet",
      "iso639_2en": "tet",
      "iso639_3": "tet",
      "name": [
        "Tetum"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": "",
      "countries": [
        "TLS"
      ]
    },
    {
      "iso639_1": "",
      "iso639_2": "tig",
      "iso639_2en": "tig",
      "iso639_3": "tig",
      "name": [
        "Tigre"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "tiv",
      "iso639_2en": "tiv",
      "iso639_3": "tiv",
      "name": [
        "Tiv"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "tkl",
      "iso639_2en": "tkl",
      "iso639_3": "tkl",
      "name": [
        "Tokelau"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "tlh",
      "iso639_2en": "tlh",
      "iso639_3": "tlh",
      "name": [
        "Klingon",
        " tlhIngan-Hol"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "tli",
      "iso639_2en": "tli",
      "iso639_3": "tli",
      "name": [
        "Tlingit"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "tmh",
      "iso639_2en": "tmh",
      "iso639_3": "tmh",
      "name": [
        "Tamashek"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "tog",
      "iso639_2en": "tog",
      "iso639_3": "tog",
      "name": [
        "Tonga (Nyasa)"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "tpi",
      "iso639_2en": "tpi",
      "iso639_3": "tpi",
      "name": [
        "Tok Pisin"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": "",
      "countries": [
        "PNG"
      ]
    },
    {
      "iso639_1": "",
      "iso639_2": "tsi",
      "iso639_2en": "tsi",
      "iso639_3": "tsi",
      "name": [
        "Tsimshian"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "tum",
      "iso639_2en": "tum",
      "iso639_3": "tum",
      "name": [
        "Tumbuka"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "tup",
      "iso639_2en": "tup",
      "iso639_3": "tup",
      "name": [
        "Tupi languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "tut",
      "iso639_2en": "tut",
      "iso639_3": "tut",
      "name": [
        "Altaic languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "tvl",
      "iso639_2en": "tvl",
      "iso639_3": "tvl",
      "name": [
        "Tuvalu"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "tyv",
      "iso639_2en": "tyv",
      "iso639_3": "tyv",
      "name": [
        "Tuvinian"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "udm",
      "iso639_2en": "udm",
      "iso639_3": "udm",
      "name": [
        "Udmurt"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "uga",
      "iso639_2en": "uga",
      "iso639_3": "uga",
      "name": [
        "Ugaritic"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "umb",
      "iso639_2en": "umb",
      "iso639_3": "umb",
      "name": [
        "Umbundu"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": "",
      "countries": [
        "AGO"
      ]
    },
    {
      "iso639_1": "",
      "iso639_2": "und",
      "iso639_2en": "und",
      "iso639_3": "und",
      "name": [
        "Undetermined"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "vai",
      "iso639_2en": "vai",
      "iso639_3": "vai",
      "name": [
        "Vai"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "vot",
      "iso639_2en": "vot",
      "iso639_3": "vot",
      "name": [
        "Votic"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "wak",
      "iso639_2en": "wak",
      "iso639_3": "wak",
      "name": [
        "Wakashan languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "wal",
      "iso639_2en": "wal",
      "iso639_3": "wal",
      "name": [
        "Wolaitta",
        " Wolaytta"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "war",
      "iso639_2en": "war",
      "iso639_3": "war",
      "name": [
        "Waray"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "was",
      "iso639_2en": "was",
      "iso639_3": "was",
      "name": [
        "Washo"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "wen",
      "iso639_2en": "wen",
      "iso639_3": "wen",
      "name": [
        "Sorbian languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "xal",
      "iso639_2en": "xal",
      "iso639_3": "xal",
      "name": [
        "Kalmyk",
        " Oirat"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "yao",
      "iso639_2en": "yao",
      "iso639_3": "yao",
      "name": [
        "Yao"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "yap",
      "iso639_2en": "yap",
      "iso639_3": "yap",
      "name": [
        "Yapese"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "ypk",
      "iso639_2en": "ypk",
      "iso639_3": "ypk",
      "name": [
        "Yupik languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "zap",
      "iso639_2en": "zap",
      "iso639_3": "zap",
      "name": [
        "Zapotec"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "zbl",
      "iso639_2en": "zbl",
      "iso639_3": "zbl",
      "name": [
        "Blissymbols",
        " Blissymbolics",
        " Bliss"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "zen",
      "iso639_2en": "zen",
      "iso639_3": "zen",
      "name": [
        "Zenaga"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "zgh",
      "iso639_2en": "zgh",
      "iso639_3": "zgh",
      "name": [
        "Standard Moroccan Tamazight"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "znd",
      "iso639_2en": "znd",
      "iso639_3": "znd",
      "name": [
        "Zande languages"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "zun",
      "iso639_2en": "zun",
      "iso639_3": "zun",
      "name": [
        "Zuni"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "zxx",
      "iso639_2en": "zxx",
      "iso639_3": "zxx",
      "name": [
        "No linguistic content",
        " Not applicable"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    },
    {
      "iso639_1": "",
      "iso639_2": "zza",
      "iso639_2en": "zza",
      "iso639_3": "zza",
      "name": [
        "Zaza",
        " Dimili",
        " Dimli",
        " Kirdki",
        " Kirmanjki",
        " Zazaki"
      ],
      "nativeName": [
        ""
      ],
      "directrion": "LTR",
      "family": ""
    }
  ],
  "countries": [
    {
      "code_2": "AF",
      "code_3": "AFG",
      "numCode": "004",
      "name": "Afghanistan",
      "languages": [
        "prs",
        "pus",
        "fas"
      ]
    },
    {
      "code_2": "AX",
      "code_3": "ALA",
      "numCode": "248",
      "name": "Åland Islands",
      "languages": [
        "swe"
      ]
    },
    {
      "code_2": "AL",
      "code_3": "ALB",
      "numCode": "008",
      "name": "Albania",
      "languages": [
        "sqi"
      ],
      "langCultureMs": [
        {
          "langCultureName": "sq-AL",
          "displayName": "Albanian - Albania",
          "cultureCode": "0x041C"
        }
      ]
    },
    {
      "code_2": "DZ",
      "code_3": "DZA",
      "numCode": "012",
      "name": "Algeria",
      "languages": [
        "ara",
        "ber"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ar-DZ",
          "displayName": "Arabic - Algeria",
          "cultureCode": "0x1401"
        }
      ]
    },
    {
      "code_2": "AS",
      "code_3": "ASM",
      "numCode": "016",
      "name": "American Samoa"
    },
    {
      "code_2": "AD",
      "code_3": "AND",
      "numCode": "020",
      "name": "Andorra",
      "languages": [
        "cat"
      ]
    },
    {
      "code_2": "AO",
      "code_3": "AGO",
      "numCode": "024",
      "name": "Angola",
      "languages": [
        "kon",
        "kmb",
        "kua",
        "por",
        "umb"
      ]
    },
    {
      "code_2": "AI",
      "code_3": "AIA",
      "numCode": "660",
      "name": "Anguilla"
    },
    {
      "code_2": "AQ",
      "code_3": "ATA",
      "numCode": "010",
      "name": "Antarctica"
    },
    {
      "code_2": "AG",
      "code_3": "ATG",
      "numCode": "028",
      "name": "Antigua and Barbuda",
      "languages": [
        "eng"
      ]
    },
    {
      "code_2": "AR",
      "code_3": "ARG",
      "numCode": "032",
      "name": "Argentina",
      "languages": [
        "spa"
      ],
      "langCultureMs": [
        {
          "langCultureName": "es-AR",
          "displayName": "Spanish - Argentina",
          "cultureCode": "0x2C0A"
        }
      ]
    },
    {
      "code_2": "AM",
      "code_3": "ARM",
      "numCode": "051",
      "name": "Armenia",
      "languages": [
        "hye"
      ],
      "langCultureMs": [
        {
          "langCultureName": "hy-AM",
          "displayName": "Armenian - Armenia",
          "cultureCode": "0x042B"
        }
      ]
    },
    {
      "code_2": "AW",
      "code_3": "ABW",
      "numCode": "533",
      "name": "Aruba",
      "languages": [
        "nld",
        "pap"
      ]
    },
    {
      "code_2": "AU",
      "code_3": "AUS",
      "numCode": "036",
      "name": "Australia",
      "languages": [
        "eng"
      ],
      "langCultureMs": [
        {
          "langCultureName": "en-AU",
          "displayName": "English - Australia",
          "cultureCode": "0x0C09"
        }
      ]
    },
    {
      "code_2": "AT",
      "code_3": "AUT",
      "numCode": "040",
      "name": "Austria",
      "languages": [
        "deu"
      ],
      "langCultureMs": [
        {
          "langCultureName": "de-AT",
          "displayName": "German - Austria",
          "cultureCode": "0x0C07"
        }
      ]
    },
    {
      "code_2": "AZ",
      "code_3": "AZE",
      "numCode": "031",
      "name": "Azerbaijan",
      "languages": [
        "aze"
      ],
      "langCultureMs": [
        {
          "langCultureName": "Cy-az-AZ",
          "displayName": "Azeri (Cyrillic) - Azerbaijan",
          "cultureCode": "0x082C"
        },
        {
          "langCultureName": "Lt-az-AZ",
          "displayName": "Azeri (Latin) - Azerbaijan",
          "cultureCode": "0x042C"
        }
      ]
    },
    {
      "code_2": "BS",
      "code_3": "BHS",
      "numCode": "044",
      "name": "Bahamas",
      "languages": [
        "eng"
      ]
    },
    {
      "code_2": "BH",
      "code_3": "BHR",
      "numCode": "048",
      "name": "Bahrain",
      "languages": [
        "ara"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ar-BH",
          "displayName": "Arabic - Bahrain",
          "cultureCode": "0x3C01"
        }
      ]
    },
    {
      "code_2": "BD",
      "code_3": "BGD",
      "numCode": "050",
      "name": "Bangladesh",
      "languages": [
        "ben"
      ]
    },
    {
      "code_2": "BB",
      "code_3": "BRB",
      "numCode": "052",
      "name": "Barbados",
      "languages": [
        "eng"
      ]
    },
    {
      "code_2": "BY",
      "code_3": "BLR",
      "numCode": "112",
      "name": "Belarus",
      "languages": [
        "bel",
        "rus"
      ],
      "langCultureMs": [
        {
          "langCultureName": "be-BY",
          "displayName": "Belarusian - Belarus",
          "cultureCode": "0x0423"
        }
      ]
    },
    {
      "code_2": "BE",
      "code_3": "BEL",
      "numCode": "056",
      "name": "Belgium",
      "languages": [
        "nld",
        "fra",
        "deu"
      ],
      "langCultureMs": [
        {
          "langCultureName": "nl-BE",
          "displayName": "Dutch - Belgium",
          "cultureCode": "0x0813"
        },
        {
          "langCultureName": "fr-BE",
          "displayName": "French - Belgium",
          "cultureCode": "0x080C"
        }
      ]
    },
    {
      "code_2": "BZ",
      "code_3": "BLZ",
      "numCode": "084",
      "name": "Belize",
      "languages": [
        "eng"
      ],
      "langCultureMs": [
        {
          "langCultureName": "en-BZ",
          "displayName": "English - Belize",
          "cultureCode": "0x2809"
        }
      ]
    },
    {
      "code_2": "BJ",
      "code_3": "BEN",
      "numCode": "204",
      "name": "Benin",
      "languages": [
        "fra",
        "ful",
        "yor"
      ]
    },
    {
      "code_2": "BM",
      "code_3": "BMU",
      "numCode": "060",
      "name": "Bermuda"
    },
    {
      "code_2": "BT",
      "code_3": "BTN",
      "numCode": "064",
      "name": "Bhutan",
      "languages": [
        "dzo"
      ]
    },
    {
      "code_2": "BO",
      "code_3": "BOL",
      "numCode": "068",
      "name": "Bolivia, Plurinational State of",
      "languages": [
        "aym",
        "grn",
        "que",
        "spa"
      ],
      "langCultureMs": [
        {
          "langCultureName": "es-BO",
          "displayName": "Spanish - Bolivia",
          "cultureCode": "0x400A"
        }
      ]
    },
    {
      "code_2": "BQ",
      "code_3": "BES",
      "numCode": "535",
      "name": "Bonaire, Sint Eustatius and Saba"
    },
    {
      "code_2": "BA",
      "code_3": "BIH",
      "numCode": "070",
      "name": "Bosnia and Herzegovina",
      "languages": [
        "bos",
        "hrv",
        "srp"
      ]
    },
    {
      "code_2": "BW",
      "code_3": "BWA",
      "numCode": "072",
      "name": "Botswana",
      "languages": [
        "eng",
        "tsn"
      ]
    },
    {
      "code_2": "BV",
      "code_3": "BVT",
      "numCode": "074",
      "name": "Bouvet Island"
    },
    {
      "code_2": "BR",
      "code_3": "BRA",
      "numCode": "076",
      "name": "Brazil",
      "languages": [
        "por"
      ],
      "langCultureMs": [
        {
          "langCultureName": "pt-BR",
          "displayName": "Portuguese - Brazil",
          "cultureCode": "0x0416"
        }
      ]
    },
    {
      "code_2": "IO",
      "code_3": "IOT",
      "numCode": "086",
      "name": "British Indian Ocean Territory"
    },
    {
      "code_2": "BN",
      "code_3": "BRN",
      "numCode": "096",
      "name": "Brunei Darussalam",
      "languages": [
        "msa"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ms-BN",
          "displayName": "Malay - Brunei",
          "cultureCode": "0x083E"
        }
      ]
    },
    {
      "code_2": "BG",
      "code_3": "BGR",
      "numCode": "100",
      "name": "Bulgaria",
      "languages": [
        "bul"
      ],
      "langCultureMs": [
        {
          "langCultureName": "bg-BG",
          "displayName": "Bulgarian - Bulgaria",
          "cultureCode": "0x0402"
        }
      ]
    },
    {
      "code_2": "BF",
      "code_3": "BFA",
      "numCode": "854",
      "name": "Burkina Faso",
      "languages": [
        "fra",
        "ful",
        "mos"
      ]
    },
    {
      "code_2": "BI",
      "code_3": "BDI",
      "numCode": "108",
      "name": "Burundi",
      "languages": [
        "fra",
        "run"
      ]
    },
    {
      "code_2": "KH",
      "code_3": "KHM",
      "numCode": "116",
      "name": "Cambodia",
      "languages": [
        "khm"
      ]
    },
    {
      "code_2": "CM",
      "code_3": "CMR",
      "numCode": "120",
      "name": "Cameroon",
      "languages": [
        "eng",
        "fra"
      ]
    },
    {
      "code_2": "CA",
      "code_3": "CAN",
      "numCode": "124",
      "name": "Canada",
      "languages": [
        "eng",
        "fra"
      ],
      "langCultureMs": [
        {
          "langCultureName": "en-CA",
          "displayName": "English - Canada",
          "cultureCode": "0x1009"
        },
        {
          "langCultureName": "fr-CA",
          "displayName": "French - Canada",
          "cultureCode": "0x0C0C"
        }
      ]
    },
    {
      "code_2": "CV",
      "code_3": "CPV",
      "numCode": "132",
      "name": "Cape Verde",
      "languages": [
        "por"
      ]
    },
    {
      "code_2": "KY",
      "code_3": "CYM",
      "numCode": "136",
      "name": "Cayman Islands"
    },
    {
      "code_2": "CF",
      "code_3": "CAF",
      "numCode": "140",
      "name": "Central African Republic",
      "languages": [
        "fra",
        "sag"
      ]
    },
    {
      "code_2": "TD",
      "code_3": "TCD",
      "numCode": "148",
      "name": "Chad",
      "languages": [
        "ara",
        "fra"
      ]
    },
    {
      "code_2": "CL",
      "code_3": "CHL",
      "numCode": "152",
      "name": "Chile",
      "languages": [
        "spa"
      ],
      "langCultureMs": [
        {
          "langCultureName": "es-CL",
          "displayName": "Spanish - Chile",
          "cultureCode": "0x340A"
        }
      ]
    },
    {
      "code_2": "CN",
      "code_3": "CHN",
      "numCode": "156",
      "name": "China",
      "languages": [
        "zho"
      ],
      "langCultureMs": [
        {
          "langCultureName": "zh-CN",
          "displayName": "Chinese - China",
          "cultureCode": "0x0804"
        },
        {
          "langCultureName": "zh-CHS",
          "displayName": "Chinese (Simplified)",
          "cultureCode": "0x0004"
        },
        {
          "langCultureName": "zh-CHT",
          "displayName": "Chinese (Traditional)",
          "cultureCode": "0x7C04"
        }
      ]
    },
    {
      "code_2": "CX",
      "code_3": "CXR",
      "numCode": "162",
      "name": "Christmas Island"
    },
    {
      "code_2": "CC",
      "code_3": "CCK",
      "numCode": "166",
      "name": "Cocos (Keeling) Islands"
    },
    {
      "code_2": "CO",
      "code_3": "COL",
      "numCode": "170",
      "name": "Colombia",
      "languages": [
        "spa"
      ],
      "langCultureMs": [
        {
          "langCultureName": "es-CO",
          "displayName": "Spanish - Colombia",
          "cultureCode": "0x240A"
        }
      ]
    },
    {
      "code_2": "KM",
      "code_3": "COM",
      "numCode": "174",
      "name": "Comoros",
      "languages": [
        "ara",
        "fra"
      ]
    },
    {
      "code_2": "CG",
      "code_3": "COG",
      "numCode": "178",
      "name": "Congo",
      "languages": [
        "fra",
        "kon",
        "lin"
      ]
    },
    {
      "code_2": "CD",
      "code_3": "COD",
      "numCode": "180",
      "name": "Congo, the Democratic Republic of the",
      "languages": [
        "fra",
        "kon",
        "lin",
        "swa",
        "lub"
      ]
    },
    {
      "code_2": "CK",
      "code_3": "COK",
      "numCode": "184",
      "name": "Cook Islands"
    },
    {
      "code_2": "CR",
      "code_3": "CRI",
      "numCode": "188",
      "name": "Costa Rica",
      "languages": [
        "spa"
      ],
      "langCultureMs": [
        {
          "langCultureName": "es-CR",
          "displayName": "Spanish - Costa Rica",
          "cultureCode": "0x140A"
        }
      ]
    },
    {
      "code_2": "CI",
      "code_3": "CIV",
      "numCode": "384",
      "name": "Côte d'Ivoire",
      "languages": [
        "fra"
      ]
    },
    {
      "code_2": "HR",
      "code_3": "HRV",
      "numCode": "191",
      "name": "Croatia",
      "languages": [
        "hrv",
        "ita"
      ],
      "langCultureMs": [
        {
          "langCultureName": "hr-HR",
          "displayName": "Croatian - Croatia",
          "cultureCode": "0x041A"
        }
      ]
    },
    {
      "code_2": "CU",
      "code_3": "CUB",
      "numCode": "192",
      "name": "Cuba",
      "languages": [
        "spa"
      ]
    },
    {
      "code_2": "CW",
      "code_3": "CUW",
      "numCode": "531",
      "name": "Curaçao",
      "languages": [
        "nld",
        "eng",
        "pap"
      ]
    },
    {
      "code_2": "CY",
      "code_3": "CYP",
      "numCode": "196",
      "name": "Cyprus",
      "languages": [
        "ell",
        "tur"
      ]
    },
    {
      "code_2": "CZ",
      "code_3": "CZE",
      "numCode": "203",
      "name": "Czech Republic",
      "languages": [
        "ces",
        "slk"
      ],
      "langCultureMs": [
        {
          "langCultureName": "cs-CZ",
          "displayName": "Czech - Czech Republic",
          "cultureCode": "0x0405"
        }
      ]
    },
    {
      "code_2": "DK",
      "code_3": "DNK",
      "numCode": "208",
      "name": "Denmark",
      "languages": [
        "dan"
      ],
      "langCultureMs": [
        {
          "langCultureName": "da-DK",
          "displayName": "Danish - Denmark",
          "cultureCode": "0x0406"
        }
      ]
    },
    {
      "code_2": "DJ",
      "code_3": "DJI",
      "numCode": "262",
      "name": "Djibouti",
      "languages": [
        "aar",
        "ara",
        "fra",
        "som"
      ]
    },
    {
      "code_2": "DM",
      "code_3": "DMA",
      "numCode": "212",
      "name": "Dominica",
      "languages": [
        "eng"
      ]
    },
    {
      "code_2": "DO",
      "code_3": "DOM",
      "numCode": "214",
      "name": "Dominican Republic",
      "languages": [
        "spa"
      ],
      "langCultureMs": [
        {
          "langCultureName": "es-DO",
          "displayName": "Spanish - Dominican Republic",
          "cultureCode": "0x1C0A"
        }
      ]
    },
    {
      "code_2": "EC",
      "code_3": "ECU",
      "numCode": "218",
      "name": "Ecuador",
      "languages": [
        "spa"
      ],
      "langCultureMs": [
        {
          "langCultureName": "es-EC",
          "displayName": "Spanish - Ecuador",
          "cultureCode": "0x300A"
        }
      ]
    },
    {
      "code_2": "EG",
      "code_3": "EGY",
      "numCode": "818",
      "name": "Egypt",
      "languages": [
        "ara"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ar-EG",
          "displayName": "Arabic - Egypt",
          "cultureCode": "0x0C01"
        }
      ]
    },
    {
      "code_2": "SV",
      "code_3": "SLV",
      "numCode": "222",
      "name": "El Salvador",
      "languages": [
        "spa"
      ],
      "langCultureMs": [
        {
          "langCultureName": "es-SV",
          "displayName": "Spanish - El Salvador",
          "cultureCode": "0x440A"
        }
      ]
    },
    {
      "code_2": "GQ",
      "code_3": "GNQ",
      "numCode": "226",
      "name": "Equatorial Guinea",
      "languages": [
        "fra",
        "por",
        "spa"
      ]
    },
    {
      "code_2": "ER",
      "code_3": "ERI",
      "numCode": "232",
      "name": "Eritrea",
      "languages": [
        "ara",
        "eng",
        "tir"
      ]
    },
    {
      "code_2": "EE",
      "code_3": "EST",
      "numCode": "233",
      "name": "Estonia",
      "languages": [
        "est"
      ],
      "langCultureMs": [
        {
          "langCultureName": "et-EE",
          "displayName": "Estonian - Estonia",
          "cultureCode": "0x0425"
        }
      ]
    },
    {
      "code_2": "ET",
      "code_3": "ETH",
      "numCode": "231",
      "name": "Ethiopia",
      "languages": [
        "amh"
      ]
    },
    {
      "code_2": "FK",
      "code_3": "FLK",
      "numCode": "238",
      "name": "Falkland Islands (Malvinas)"
    },
    {
      "code_2": "FO",
      "code_3": "FRO",
      "numCode": "234",
      "name": "Faroe Islands",
      "languages": [
        "dan"
      ],
      "langCultureMs": [
        {
          "langCultureName": "fo-FO",
          "displayName": "Faroese - Faroe Islands",
          "cultureCode": "0x0438"
        }
      ]
    },
    {
      "code_2": "FJ",
      "code_3": "FJI",
      "numCode": "242",
      "name": "Fiji",
      "languages": [
        "eng",
        "fij",
        "hin",
        "urd"
      ]
    },
    {
      "code_2": "FI",
      "code_3": "FIN",
      "numCode": "246",
      "name": "Finland",
      "languages": [
        "fin",
        "swe"
      ],
      "langCultureMs": [
        {
          "langCultureName": "fi-FI",
          "displayName": "Finnish - Finland",
          "cultureCode": "0x040B"
        },
        {
          "langCultureName": "sv-FI",
          "displayName": "Swedish - Finland",
          "cultureCode": "0x081D"
        }
      ]
    },
    {
      "code_2": "FR",
      "code_3": "FRA",
      "numCode": "250",
      "name": "France",
      "languages": [
        "fra"
      ],
      "langCultureMs": [
        {
          "langCultureName": "fr-FR",
          "displayName": "French - France",
          "cultureCode": "0x040C"
        }
      ]
    },
    {
      "code_2": "GF",
      "code_3": "GUF",
      "numCode": "254",
      "name": "French Guiana",
      "languages": [
        "fra"
      ]
    },
    {
      "code_2": "PF",
      "code_3": "PYF",
      "numCode": "258",
      "name": "French Polynesia",
      "languages": [
        "fra"
      ]
    },
    {
      "code_2": "TF",
      "code_3": "ATF",
      "numCode": "260",
      "name": "French Southern Territories"
    },
    {
      "code_2": "GA",
      "code_3": "GAB",
      "numCode": "266",
      "name": "Gabon",
      "languages": [
        "fra"
      ]
    },
    {
      "code_2": "GM",
      "code_3": "GMB",
      "numCode": "270",
      "name": "Gambia",
      "languages": [
        "eng"
      ]
    },
    {
      "code_2": "GE",
      "code_3": "GEO",
      "numCode": "268",
      "name": "Georgia",
      "languages": [
        "kat"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ka-GE",
          "displayName": "Georgian - Georgia",
          "cultureCode": "0x0437"
        }
      ]
    },
    {
      "code_2": "DE",
      "code_3": "DEU",
      "numCode": "276",
      "name": "Germany",
      "languages": [
        "deu"
      ],
      "langCultureMs": [
        {
          "langCultureName": "de-DE",
          "displayName": "German - Germany",
          "cultureCode": "0x0407"
        }
      ]
    },
    {
      "code_2": "GH",
      "code_3": "GHA",
      "numCode": "288",
      "name": "Ghana",
      "languages": [
        "aka",
        "eng",
        "ewe",
        "gaa"
      ]
    },
    {
      "code_2": "GI",
      "code_3": "GIB",
      "numCode": "292",
      "name": "Gibraltar"
    },
    {
      "code_2": "GR",
      "code_3": "GRC",
      "numCode": "300",
      "name": "Greece",
      "languages": [
        "ell"
      ],
      "langCultureMs": [
        {
          "langCultureName": "el-GR",
          "displayName": "Greek - Greece",
          "cultureCode": "0x0408"
        }
      ]
    },
    {
      "code_2": "GL",
      "code_3": "GRL",
      "numCode": "304",
      "name": "Greenland"
    },
    {
      "code_2": "GD",
      "code_3": "GRD",
      "numCode": "308",
      "name": "Grenada",
      "languages": [
        "eng"
      ]
    },
    {
      "code_2": "GP",
      "code_3": "GLP",
      "numCode": "312",
      "name": "Guadeloupe",
      "languages": [
        "fra"
      ]
    },
    {
      "code_2": "GU",
      "code_3": "GUM",
      "numCode": "316",
      "name": "Guam"
    },
    {
      "code_2": "GT",
      "code_3": "GTM",
      "numCode": "320",
      "name": "Guatemala",
      "languages": [
        "spa"
      ],
      "langCultureMs": [
        {
          "langCultureName": "es-GT",
          "displayName": "Spanish - Guatemala",
          "cultureCode": "0x100A"
        }
      ]
    },
    {
      "code_2": "GG",
      "code_3": "GGY",
      "numCode": "831",
      "name": "Guernsey"
    },
    {
      "code_2": "GN",
      "code_3": "GIN",
      "numCode": "324",
      "name": "Guinea",
      "languages": [
        "fra"
      ]
    },
    {
      "code_2": "GW",
      "code_3": "GNB",
      "numCode": "624",
      "name": "Guinea-Bissau",
      "languages": [
        "por"
      ]
    },
    {
      "code_2": "GY",
      "code_3": "GUY",
      "numCode": "328",
      "name": "Guyana",
      "languages": [
        "eng"
      ]
    },
    {
      "code_2": "HT",
      "code_3": "HTI",
      "numCode": "332",
      "name": "Haiti",
      "languages": [
        "fra",
        "hat"
      ]
    },
    {
      "code_2": "HM",
      "code_3": "HMD",
      "numCode": "334",
      "name": "Heard Island and McDonald Islands"
    },
    {
      "code_2": "VA",
      "code_3": "VAT",
      "numCode": "336",
      "name": "Holy See (Vatican City State)",
      "languages": [
        "ita",
        "lat"
      ]
    },
    {
      "code_2": "HN",
      "code_3": "HND",
      "numCode": "340",
      "name": "Honduras",
      "languages": [
        "spa"
      ],
      "langCultureMs": [
        {
          "langCultureName": "es-HN",
          "displayName": "Spanish - Honduras",
          "cultureCode": "0x480A"
        }
      ]
    },
    {
      "code_2": "HK",
      "code_3": "HKG",
      "numCode": "344",
      "name": "Hong Kong",
      "languages": [
        "zho",
        "eng"
      ],
      "langCultureMs": [
        {
          "langCultureName": "zh-HK",
          "displayName": "Chinese - Hong Kong SAR",
          "cultureCode": "0x0C04"
        }
      ]
    },
    {
      "code_2": "HU",
      "code_3": "HUN",
      "numCode": "348",
      "name": "Hungary",
      "languages": [
        "hun"
      ],
      "langCultureMs": [
        {
          "langCultureName": "hu-HU",
          "displayName": "Hungarian - Hungary",
          "cultureCode": "0x040E"
        }
      ]
    },
    {
      "code_2": "IS",
      "code_3": "ISL",
      "numCode": "352",
      "name": "Iceland",
      "languages": [
        "isl"
      ],
      "langCultureMs": [
        {
          "langCultureName": "is-IS",
          "displayName": "Icelandic - Iceland",
          "cultureCode": "0x040F"
        }
      ]
    },
    {
      "code_2": "IN",
      "code_3": "IND",
      "numCode": "356",
      "name": "India",
      "languages": [
        "ben",
        "eng",
        "guj",
        "hin",
        "pan",
        "tam",
        "tel"
      ],
      "langCultureMs": [
        {
          "langCultureName": "gu-IN",
          "displayName": "Gujarati - India",
          "cultureCode": "0x0447"
        },
        {
          "langCultureName": "hi-IN",
          "displayName": "Hindi - India",
          "cultureCode": "0x0439"
        },
        {
          "langCultureName": "kn-IN",
          "displayName": "Kannada - India",
          "cultureCode": "0x044B"
        },
        {
          "langCultureName": "kok-IN",
          "displayName": "Konkani - India",
          "cultureCode": "0x0457"
        },
        {
          "langCultureName": "mr-IN",
          "displayName": "Marathi - India",
          "cultureCode": "0x044E"
        },
        {
          "langCultureName": "pa-IN",
          "displayName": "Punjabi - India",
          "cultureCode": "0x0446"
        },
        {
          "langCultureName": "sa-IN",
          "displayName": "Sanskrit - India",
          "cultureCode": "0x044F"
        },
        {
          "langCultureName": "ta-IN",
          "displayName": "Tamil - India",
          "cultureCode": "0x0449"
        },
        {
          "langCultureName": "te-IN",
          "displayName": "Telugu - India",
          "cultureCode": "0x044A"
        }
      ]
    },
    {
      "code_2": "ID",
      "code_3": "IDN",
      "numCode": "360",
      "name": "Indonesia",
      "languages": [
        "ind",
        "msa"
      ],
      "langCultureMs": [
        {
          "langCultureName": "id-ID",
          "displayName": "Indonesian - Indonesia",
          "cultureCode": "0x0421"
        }
      ]
    },
    {
      "code_2": "IR",
      "code_3": "IRN",
      "numCode": "364",
      "name": "Iran, Islamic Republic of",
      "languages": [
        "fas"
      ],
      "langCultureMs": [
        {
          "langCultureName": "fa-IR",
          "displayName": "Farsi - Iran",
          "cultureCode": "0x0429"
        }
      ]
    },
    {
      "code_2": "IQ",
      "code_3": "IRQ",
      "numCode": "368",
      "name": "Iraq",
      "languages": [
        "ara",
        "kur"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ar-IQ",
          "displayName": "Arabic - Iraq",
          "cultureCode": "0x0801"
        }
      ]
    },
    {
      "code_2": "IE",
      "code_3": "IRL",
      "numCode": "372",
      "name": "Ireland",
      "languages": [
        "eng",
        "gle"
      ],
      "langCultureMs": [
        {
          "langCultureName": "en-IE",
          "displayName": "English - Ireland",
          "cultureCode": "0x1809"
        }
      ]
    },
    {
      "code_2": "IM",
      "code_3": "IMN",
      "numCode": "833",
      "name": "Isle of Man"
    },
    {
      "code_2": "IL",
      "code_3": "ISR",
      "numCode": "376",
      "name": "Israel",
      "languages": [
        "ara",
        "heb"
      ],
      "langCultureMs": [
        {
          "langCultureName": "he-IL",
          "displayName": "Hebrew - Israel",
          "cultureCode": "0x040D"
        }
      ]
    },
    {
      "code_2": "IT",
      "code_3": "ITA",
      "numCode": "380",
      "name": "Italy",
      "languages": [
        "fra",
        "deu",
        "ita"
      ],
      "langCultureMs": [
        {
          "langCultureName": "it-IT",
          "displayName": "Italian - Italy",
          "cultureCode": "0x0410"
        }
      ]
    },
    {
      "code_2": "JM",
      "code_3": "JAM",
      "numCode": "388",
      "name": "Jamaica",
      "languages": [
        "eng"
      ],
      "langCultureMs": [
        {
          "langCultureName": "en-JM",
          "displayName": "English - Jamaica",
          "cultureCode": "0x2009"
        }
      ]
    },
    {
      "code_2": "JP",
      "code_3": "JPN",
      "numCode": "392",
      "name": "Japan",
      "languages": [
        "jpn"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ja-JP",
          "displayName": "Japanese - Japan",
          "cultureCode": "0x0411"
        }
      ]
    },
    {
      "code_2": "JE",
      "code_3": "JEY",
      "numCode": "832",
      "name": "Jersey",
      "languages": [
        "fra"
      ]
    },
    {
      "code_2": "JO",
      "code_3": "JOR",
      "numCode": "400",
      "name": "Jordan",
      "languages": [
        "ara"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ar-JO",
          "displayName": "Arabic - Jordan",
          "cultureCode": "0x2C01"
        }
      ]
    },
    {
      "code_2": "KZ",
      "code_3": "KAZ",
      "numCode": "398",
      "name": "Kazakhstan",
      "languages": [
        "kaz",
        "rus"
      ],
      "langCultureMs": [
        {
          "langCultureName": "kk-KZ",
          "displayName": "Kazakh - Kazakhstan",
          "cultureCode": "0x043F"
        },
        {
          "langCultureName": "ky-KZ",
          "displayName": "Kyrgyz - Kazakhstan",
          "cultureCode": "0x0440"
        }
      ]
    },
    {
      "code_2": "KE",
      "code_3": "KEN",
      "numCode": "404",
      "name": "Kenya",
      "languages": [
        "eng",
        "swa"
      ],
      "langCultureMs": [
        {
          "langCultureName": "sw-KE",
          "displayName": "Swahili - Kenya",
          "cultureCode": "0x0441"
        }
      ]
    },
    {
      "code_2": "KI",
      "code_3": "KIR",
      "numCode": "296",
      "name": "Kiribati",
      "languages": [
        "eng"
      ]
    },
    {
      "code_2": "KP",
      "code_3": "PRK",
      "numCode": "408",
      "name": "Korea, Democratic People's Republic of",
      "languages": [
        "kor"
      ]
    },
    {
      "code_2": "KR",
      "code_3": "KOR",
      "numCode": "410",
      "name": "Korea, Republic of",
      "languages": [
        "kor"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ko-KR",
          "displayName": "Korean - Korea",
          "cultureCode": "0x0412"
        }
      ]
    },
    {
      "code_2": "KW",
      "code_3": "KWT",
      "numCode": "414",
      "name": "Kuwait",
      "languages": [
        "ara"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ar-KW",
          "displayName": "Arabic - Kuwait",
          "cultureCode": "0x3401"
        }
      ]
    },
    {
      "code_2": "KG",
      "code_3": "KGZ",
      "numCode": "417",
      "name": "Kyrgyzstan",
      "languages": [
        "kir",
        "rus"
      ]
    },
    {
      "code_2": "LA",
      "code_3": "LAO",
      "numCode": "418",
      "name": "Lao People's Democratic Republic",
      "languages": [
        "lao"
      ]
    },
    {
      "code_2": "LV",
      "code_3": "LVA",
      "numCode": "428",
      "name": "Latvia",
      "languages": [
        "lav"
      ],
      "langCultureMs": [
        {
          "langCultureName": "lv-LV",
          "displayName": "Latvian - Latvia",
          "cultureCode": "0x0426"
        }
      ]
    },
    {
      "code_2": "LB",
      "code_3": "LBN",
      "numCode": "422",
      "name": "Lebanon",
      "languages": [
        "ara"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ar-LB",
          "displayName": "Arabic - Lebanon",
          "cultureCode": "0x3001"
        }
      ]
    },
    {
      "code_2": "LS",
      "code_3": "LSO",
      "numCode": "426",
      "name": "Lesotho",
      "languages": [
        "eng",
        "sot"
      ]
    },
    {
      "code_2": "LR",
      "code_3": "LBR",
      "numCode": "430",
      "name": "Liberia",
      "languages": [
        "eng"
      ]
    },
    {
      "code_2": "LY",
      "code_3": "LBY",
      "numCode": "434",
      "name": "Libya",
      "languages": [
        "ara"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ar-LY",
          "displayName": "Arabic - Libya",
          "cultureCode": "0x1001"
        }
      ]
    },
    {
      "code_2": "LI",
      "code_3": "LIE",
      "numCode": "438",
      "name": "Liechtenstein",
      "languages": [
        "deu"
      ],
      "langCultureMs": [
        {
          "langCultureName": "de-LI",
          "displayName": "German - Liechtenstein",
          "cultureCode": "0x1407"
        }
      ]
    },
    {
      "code_2": "LT",
      "code_3": "LTU",
      "numCode": "440",
      "name": "Lithuania",
      "languages": [
        "lit"
      ],
      "langCultureMs": [
        {
          "langCultureName": "lt-LT",
          "displayName": "Lithuanian - Lithuania",
          "cultureCode": "0x0427"
        }
      ]
    },
    {
      "code_2": "LU",
      "code_3": "LUX",
      "numCode": "442",
      "name": "Luxembourg",
      "languages": [
        "fra",
        "deu",
        "ltz"
      ],
      "langCultureMs": [
        {
          "langCultureName": "fr-LU",
          "displayName": "French - Luxembourg",
          "cultureCode": "0x140C"
        },
        {
          "langCultureName": "de-LU",
          "displayName": "German - Luxembourg",
          "cultureCode": "0x1007"
        }
      ]
    },
    {
      "code_2": "MO",
      "code_3": "MAC",
      "numCode": "446",
      "name": "Macao",
      "languages": [
        "zho",
        "por"
      ],
      "langCultureMs": [
        {
          "langCultureName": "zh-MO",
          "displayName": "Chinese - Macau SAR",
          "cultureCode": "0x1404"
        }
      ]
    },
    {
      "code_2": "MK",
      "code_3": "MKD",
      "numCode": "807",
      "name": "Macedonia, the former Yugoslav Republic of",
      "languages": [
        "mkd"
      ],
      "langCultureMs": [
        {
          "langCultureName": "mk-MK",
          "displayName": "Macedonian (FYROM)",
          "cultureCode": "0x042F"
        }
      ]
    },
    {
      "code_2": "MG",
      "code_3": "MDG",
      "numCode": "450",
      "name": "Madagascar",
      "languages": [
        "fra",
        "mlg"
      ]
    },
    {
      "code_2": "MW",
      "code_3": "MWI",
      "numCode": "454",
      "name": "Malawi",
      "languages": [
        "nya",
        "eng"
      ]
    },
    {
      "code_2": "MY",
      "code_3": "MYS",
      "numCode": "458",
      "name": "Malaysia",
      "languages": [
        "eng",
        "msa",
        "tam"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ms-MY",
          "displayName": "Malay - Malaysia",
          "cultureCode": "0x043E"
        }
      ]
    },
    {
      "code_2": "MV",
      "code_3": "MDV",
      "numCode": "462",
      "name": "Maldives",
      "languages": [
        "div"
      ],
      "langCultureMs": [
        {
          "langCultureName": "div-MV",
          "displayName": "Dhivehi - Maldives",
          "cultureCode": "0x0465"
        }
      ]
    },
    {
      "code_2": "ML",
      "code_3": "MLI",
      "numCode": "466",
      "name": "Mali",
      "languages": [
        "bam",
        "fra",
        "ful",
        "snk"
      ]
    },
    {
      "code_2": "MT",
      "code_3": "MLT",
      "numCode": "470",
      "name": "Malta",
      "languages": [
        "eng",
        "mlt"
      ]
    },
    {
      "code_2": "MH",
      "code_3": "MHL",
      "numCode": "584",
      "name": "Marshall Islands",
      "languages": [
        "eng",
        "mah"
      ]
    },
    {
      "code_2": "MQ",
      "code_3": "MTQ",
      "numCode": "474",
      "name": "Martinique",
      "languages": [
        "fra"
      ]
    },
    {
      "code_2": "MR",
      "code_3": "MRT",
      "numCode": "478",
      "name": "Mauritania",
      "languages": [
        "ara"
      ]
    },
    {
      "code_2": "MU",
      "code_3": "MUS",
      "numCode": "480",
      "name": "Mauritius",
      "languages": [
        "eng",
        "fra",
        "tam"
      ]
    },
    {
      "code_2": "YT",
      "code_3": "MYT",
      "numCode": "175",
      "name": "Mayotte",
      "languages": [
        "fra"
      ]
    },
    {
      "code_2": "MX",
      "code_3": "MEX",
      "numCode": "484",
      "name": "Mexico",
      "languages": [
        "spa"
      ],
      "langCultureMs": [
        {
          "langCultureName": "es-MX",
          "displayName": "Spanish - Mexico",
          "cultureCode": "0x080A"
        }
      ]
    },
    {
      "code_2": "FM",
      "code_3": "FSM",
      "numCode": "583",
      "name": "Micronesia, Federated States of",
      "languages": [
        "eng"
      ]
    },
    {
      "code_2": "MD",
      "code_3": "MDA",
      "numCode": "498",
      "name": "Moldova, Republic of",
      "languages": [
        "ron"
      ]
    },
    {
      "code_2": "MC",
      "code_3": "MCO",
      "numCode": "492",
      "name": "Monaco",
      "languages": [
        "fra"
      ],
      "langCultureMs": [
        {
          "langCultureName": "fr-MC",
          "displayName": "French - Monaco",
          "cultureCode": "0x180C"
        }
      ]
    },
    {
      "code_2": "MN",
      "code_3": "MNG",
      "numCode": "496",
      "name": "Mongolia",
      "languages": [
        "mon"
      ],
      "langCultureMs": [
        {
          "langCultureName": "mn-MN",
          "displayName": "Mongolian - Mongolia",
          "cultureCode": "0x0450"
        }
      ]
    },
    {
      "code_2": "ME",
      "code_3": "MNE",
      "numCode": "499",
      "name": "Montenegro"
    },
    {
      "code_2": "MS",
      "code_3": "MSR",
      "numCode": "500",
      "name": "Montserrat"
    },
    {
      "code_2": "MA",
      "code_3": "MAR",
      "numCode": "504",
      "name": "Morocco",
      "languages": [
        "ara",
        "ber"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ar-MA",
          "displayName": "Arabic - Morocco",
          "cultureCode": "0x1801"
        }
      ]
    },
    {
      "code_2": "MZ",
      "code_3": "MOZ",
      "numCode": "508",
      "name": "Mozambique",
      "languages": [
        "por"
      ]
    },
    {
      "code_2": "MM",
      "code_3": "MMR",
      "numCode": "104",
      "name": "Myanmar",
      "languages": [
        "mya"
      ]
    },
    {
      "code_2": "NA",
      "code_3": "NAM",
      "numCode": "516",
      "name": "Namibia",
      "languages": [
        "eng"
      ]
    },
    {
      "code_2": "NR",
      "code_3": "NRU",
      "numCode": "520",
      "name": "Nauru",
      "languages": [
        "eng"
      ]
    },
    {
      "code_2": "NP",
      "code_3": "NPL",
      "numCode": "524",
      "name": "Nepal",
      "languages": [
        "nep"
      ]
    },
    {
      "code_2": "NL",
      "code_3": "NLD",
      "numCode": "528",
      "name": "Netherlands",
      "languages": [
        "nld"
      ],
      "langCultureMs": [
        {
          "langCultureName": "nl-NL",
          "displayName": "Dutch - The Netherlands",
          "cultureCode": "0x0413"
        }
      ]
    },
    {
      "code_2": "NC",
      "code_3": "NCL",
      "numCode": "540",
      "name": "New Caledonia",
      "languages": [
        "fra"
      ]
    },
    {
      "code_2": "NZ",
      "code_3": "NZL",
      "numCode": "554",
      "name": "New Zealand",
      "languages": [
        "eng",
        "mri"
      ],
      "langCultureMs": [
        {
          "langCultureName": "en-NZ",
          "displayName": "English - New Zealand",
          "cultureCode": "0x1409"
        }
      ]
    },
    {
      "code_2": "NI",
      "code_3": "NIC",
      "numCode": "558",
      "name": "Nicaragua",
      "languages": [
        "spa"
      ],
      "langCultureMs": [
        {
          "langCultureName": "es-NI",
          "displayName": "Spanish - Nicaragua",
          "cultureCode": "0x4C0A"
        }
      ]
    },
    {
      "code_2": "NE",
      "code_3": "NER",
      "numCode": "562",
      "name": "Niger",
      "languages": [
        "ara",
        "fra",
        "ful",
        "hau",
        "kau"
      ]
    },
    {
      "code_2": "NG",
      "code_3": "NGA",
      "numCode": "566",
      "name": "Nigeria",
      "languages": [
        "eng",
        "hau",
        "ibo",
        "yor"
      ]
    },
    {
      "code_2": "NU",
      "code_3": "NIU",
      "numCode": "570",
      "name": "Niue"
    },
    {
      "code_2": "NF",
      "code_3": "NFK",
      "numCode": "574",
      "name": "Norfolk Island"
    },
    {
      "code_2": "MP",
      "code_3": "MNP",
      "numCode": "580",
      "name": "Northern Mariana Islands"
    },
    {
      "code_2": "NO",
      "code_3": "NOR",
      "numCode": "578",
      "name": "Norway",
      "languages": [
        "nob",
        "nno",
        "nor"
      ],
      "langCultureMs": [
        {
          "langCultureName": "nb-NO",
          "displayName": "Norwegian (Bokmål) - Norway",
          "cultureCode": "0x0414"
        },
        {
          "langCultureName": "nn-NO",
          "displayName": "Norwegian (Nynorsk) - Norway",
          "cultureCode": "0x0814"
        }
      ]
    },
    {
      "code_2": "OM",
      "code_3": "OMN",
      "numCode": "512",
      "name": "Oman",
      "languages": [
        "ara"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ar-OM",
          "displayName": "Arabic - Oman",
          "cultureCode": "0x2001"
        }
      ]
    },
    {
      "code_2": "PK",
      "code_3": "PAK",
      "numCode": "586",
      "name": "Pakistan",
      "languages": [
        "eng",
        "urd"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ur-PK",
          "displayName": "Urdu - Pakistan",
          "cultureCode": "0x0420"
        }
      ]
    },
    {
      "code_2": "PW",
      "code_3": "PLW",
      "numCode": "585",
      "name": "Palau",
      "languages": [
        "eng"
      ]
    },
    {
      "code_2": "PS",
      "code_3": "PSE",
      "numCode": "275",
      "name": "Palestine, State of"
    },
    {
      "code_2": "PA",
      "code_3": "PAN",
      "numCode": "591",
      "name": "Panama",
      "languages": [
        "spa"
      ],
      "langCultureMs": [
        {
          "langCultureName": "es-PA",
          "displayName": "Spanish - Panama",
          "cultureCode": "0x180A"
        }
      ]
    },
    {
      "code_2": "PG",
      "code_3": "PNG",
      "numCode": "598",
      "name": "Papua New Guinea",
      "languages": [
        "eng",
        "hmo",
        "tpi"
      ]
    },
    {
      "code_2": "PY",
      "code_3": "PRY",
      "numCode": "600",
      "name": "Paraguay",
      "languages": [
        "grn",
        "spa"
      ],
      "langCultureMs": [
        {
          "langCultureName": "es-PY",
          "displayName": "Spanish - Paraguay",
          "cultureCode": "0x3C0A"
        }
      ]
    },
    {
      "code_2": "PE",
      "code_3": "PER",
      "numCode": "604",
      "name": "Peru",
      "languages": [
        "aym",
        "que",
        "spa"
      ],
      "langCultureMs": [
        {
          "langCultureName": "es-PE",
          "displayName": "Spanish - Peru",
          "cultureCode": "0x280A"
        }
      ]
    },
    {
      "code_2": "PH",
      "code_3": "PHL",
      "numCode": "608",
      "name": "Philippines",
      "languages": [
        "eng",
        "fil",
        "tgl"
      ],
      "langCultureMs": [
        {
          "langCultureName": "en-PH",
          "displayName": "English - Philippines",
          "cultureCode": "0x3409"
        }
      ]
    },
    {
      "code_2": "PN",
      "code_3": "PCN",
      "numCode": "612",
      "name": "Pitcairn"
    },
    {
      "code_2": "PL",
      "code_3": "POL",
      "numCode": "616",
      "name": "Poland",
      "languages": [
        "pol"
      ],
      "langCultureMs": [
        {
          "langCultureName": "pl-PL",
          "displayName": "Polish - Poland",
          "cultureCode": "0x0415"
        }
      ]
    },
    {
      "code_2": "PT",
      "code_3": "PRT",
      "numCode": "620",
      "name": "Portugal",
      "languages": [
        "por"
      ],
      "langCultureMs": [
        {
          "langCultureName": "pt-PT",
          "displayName": "Portuguese - Portugal",
          "cultureCode": "0x0816"
        }
      ]
    },
    {
      "code_2": "PR",
      "code_3": "PRI",
      "numCode": "630",
      "name": "Puerto Rico",
      "languages": [
        "spa"
      ],
      "langCultureMs": [
        {
          "langCultureName": "es-PR",
          "displayName": "Spanish - Puerto Rico",
          "cultureCode": "0x500A"
        }
      ]
    },
    {
      "code_2": "QA",
      "code_3": "QAT",
      "numCode": "634",
      "name": "Qatar",
      "languages": [
        "ara"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ar-QA",
          "displayName": "Arabic - Qatar",
          "cultureCode": "0x4001"
        }
      ]
    },
    {
      "code_2": "RE",
      "code_3": "REU",
      "numCode": "638",
      "name": "Réunion",
      "languages": [
        "fra"
      ]
    },
    {
      "code_2": "RO",
      "code_3": "ROU",
      "numCode": "642",
      "name": "Romania",
      "languages": [
        "ron"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ro-RO",
          "displayName": "Romanian - Romania",
          "cultureCode": "0x0418"
        }
      ]
    },
    {
      "code_2": "RU",
      "code_3": "RUS",
      "numCode": "643",
      "name": "Russian Federation",
      "languages": [
        "rus"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ru-RU",
          "displayName": "Russian - Russia",
          "cultureCode": "0x0419"
        },
        {
          "langCultureName": "tt-RU",
          "displayName": "Tatar - Russia",
          "cultureCode": "0x0444"
        }
      ]
    },
    {
      "code_2": "RW",
      "code_3": "RWA",
      "numCode": "646",
      "name": "Rwanda",
      "languages": [
        "eng",
        "fra",
        "kin"
      ]
    },
    {
      "code_2": "BL",
      "code_3": "BLM",
      "numCode": "652",
      "name": "Saint Barthélemy",
      "languages": [
        "fra"
      ]
    },
    {
      "code_2": "SH",
      "code_3": "SHN",
      "numCode": "654",
      "name": "Saint Helena, Ascension and Tristan da Cunha"
    },
    {
      "code_2": "KN",
      "code_3": "KNA",
      "numCode": "659",
      "name": "Saint Kitts and Nevis",
      "languages": [
        "eng"
      ]
    },
    {
      "code_2": "LC",
      "code_3": "LCA",
      "numCode": "662",
      "name": "Saint Lucia",
      "languages": [
        "eng"
      ]
    },
    {
      "code_2": "MF",
      "code_3": "MAF",
      "numCode": "663",
      "name": "Saint Martin (French part)"
    },
    {
      "code_2": "PM",
      "code_3": "SPM",
      "numCode": "666",
      "name": "Saint Pierre and Miquelon",
      "languages": [
        "fra"
      ]
    },
    {
      "code_2": "VC",
      "code_3": "VCT",
      "numCode": "670",
      "name": "Saint Vincent and the Grenadines",
      "languages": [
        "eng"
      ]
    },
    {
      "code_2": "WS",
      "code_3": "WSM",
      "numCode": "882",
      "name": "Samoa",
      "languages": [
        "eng"
      ]
    },
    {
      "code_2": "SM",
      "code_3": "SMR",
      "numCode": "674",
      "name": "San Marino",
      "languages": [
        "ita"
      ]
    },
    {
      "code_2": "ST",
      "code_3": "STP",
      "numCode": "678",
      "name": "Sao Tome and Principe",
      "languages": [
        "por"
      ]
    },
    {
      "code_2": "SA",
      "code_3": "SAU",
      "numCode": "682",
      "name": "Saudi Arabia",
      "languages": [
        "ara"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ar-SA",
          "displayName": "Arabic - Saudi Arabia",
          "cultureCode": "0x0401"
        }
      ]
    },
    {
      "code_2": "SN",
      "code_3": "SEN",
      "numCode": "686",
      "name": "Senegal",
      "languages": [
        "fra",
        "ful",
        "srr",
        "snk",
        "wol"
      ]
    },
    {
      "code_2": "RS",
      "code_3": "SRB",
      "numCode": "688",
      "name": "Serbia",
      "languages": [
        "srp"
      ],
      "langCultureMs": [
        {
          "langCultureName": "Cy-sr-SP",
          "displayName": "Serbian (Cyrillic) - Serbia",
          "cultureCode": "0x0C1A"
        },
        {
          "langCultureName": "Lt-sr-SP",
          "displayName": "Serbian (Latin) - Serbia",
          "cultureCode": "0x081A"
        }
      ]
    },
    {
      "code_2": "SC",
      "code_3": "SYC",
      "numCode": "690",
      "name": "Seychelles",
      "languages": [
        "eng",
        "fra"
      ]
    },
    {
      "code_2": "SL",
      "code_3": "SLE",
      "numCode": "694",
      "name": "Sierra Leone",
      "languages": [
        "eng"
      ]
    },
    {
      "code_2": "SG",
      "code_3": "SGP",
      "numCode": "702",
      "name": "Singapore",
      "languages": [
        "zho",
        "eng",
        "msa",
        "tam"
      ],
      "langCultureMs": [
        {
          "langCultureName": "zh-SG",
          "displayName": "Chinese - Singapore",
          "cultureCode": "0x1004"
        }
      ]
    },
    {
      "code_2": "SX",
      "code_3": "SXM",
      "numCode": "534",
      "name": "Sint Maarten (Dutch part)",
      "languages": [
        "nld",
        "eng"
      ]
    },
    {
      "code_2": "SK",
      "code_3": "SVK",
      "numCode": "703",
      "name": "Slovakia",
      "languages": [
        "ces",
        "slk"
      ],
      "langCultureMs": [
        {
          "langCultureName": "sk-SK",
          "displayName": "Slovak - Slovakia",
          "cultureCode": "0x041B"
        }
      ]
    },
    {
      "code_2": "SI",
      "code_3": "SVN",
      "numCode": "705",
      "name": "Slovenia",
      "languages": [
        "ita",
        "slv"
      ],
      "langCultureMs": [
        {
          "langCultureName": "sl-SI",
          "displayName": "Slovenian - Slovenia",
          "cultureCode": "0x0424"
        }
      ]
    },
    {
      "code_2": "SB",
      "code_3": "SLB",
      "numCode": "090",
      "name": "Solomon Islands",
      "languages": [
        "eng"
      ]
    },
    {
      "code_2": "SO",
      "code_3": "SOM",
      "numCode": "706",
      "name": "Somalia",
      "languages": [
        "ara",
        "som"
      ]
    },
    {
      "code_2": "ZA",
      "code_3": "ZAF",
      "numCode": "710",
      "name": "South Africa",
      "languages": [
        "afr",
        "eng",
        "nde",
        "nbl",
        "nso",
        "sot",
        "ssw",
        "tso",
        "tsn",
        "ven",
        "xho",
        "zul"
      ],
      "langCultureMs": [
        {
          "langCultureName": "af-ZA",
          "displayName": "Afrikaans - South Africa",
          "cultureCode": "0x0436"
        },
        {
          "langCultureName": "en-ZA",
          "displayName": "English - South Africa",
          "cultureCode": "0x1C09"
        }
      ]
    },
    {
      "code_2": "GS",
      "code_3": "SGS",
      "numCode": "239",
      "name": "South Georgia and the South Sandwich Islands"
    },
    {
      "code_2": "SS",
      "code_3": "SSD",
      "numCode": "728",
      "name": "South Sudan",
      "languages": [
        "eng"
      ]
    },
    {
      "code_2": "ES",
      "code_3": "ESP",
      "numCode": "724",
      "name": "Spain",
      "languages": [
        "spa"
      ],
      "langCultureMs": [
        {
          "langCultureName": "eu-ES",
          "displayName": "Basque - Basque",
          "cultureCode": "0x042D"
        },
        {
          "langCultureName": "ca-ES",
          "displayName": "Catalan - Catalan",
          "cultureCode": "0x0403"
        },
        {
          "langCultureName": "gl-ES",
          "displayName": "Galician - Galician",
          "cultureCode": "0x0456"
        },
        {
          "langCultureName": "es-ES",
          "displayName": "Spanish - Spain",
          "cultureCode": "0x0C0A"
        }
      ]
    },
    {
      "code_2": "LK",
      "code_3": "LKA",
      "numCode": "144",
      "name": "Sri Lanka",
      "languages": [
        "eng",
        "sin",
        "tam"
      ]
    },
    {
      "code_2": "SD",
      "code_3": "SDN",
      "numCode": "729",
      "name": "Sudan",
      "languages": [
        "ara",
        "eng"
      ]
    },
    {
      "code_2": "SR",
      "code_3": "SUR",
      "numCode": "740",
      "name": "Suriname",
      "languages": [
        "nld"
      ]
    },
    {
      "code_2": "SJ",
      "code_3": "SJM",
      "numCode": "744",
      "name": "Svalbard and Jan Mayen"
    },
    {
      "code_2": "SZ",
      "code_3": "SWZ",
      "numCode": "748",
      "name": "Swaziland",
      "languages": [
        "eng",
        "ssw"
      ]
    },
    {
      "code_2": "SE",
      "code_3": "SWE",
      "numCode": "752",
      "name": "Sweden",
      "languages": [
        "swe"
      ],
      "langCultureMs": [
        {
          "langCultureName": "sv-SE",
          "displayName": "Swedish - Sweden",
          "cultureCode": "0x041D"
        }
      ]
    },
    {
      "code_2": "CH",
      "code_3": "CHE",
      "numCode": "756",
      "name": "Switzerland",
      "languages": [
        "fra",
        "deu",
        "ita",
        "roh"
      ],
      "langCultureMs": [
        {
          "langCultureName": "fr-CH",
          "displayName": "French - Switzerland",
          "cultureCode": "0x100C"
        },
        {
          "langCultureName": "de-CH",
          "displayName": "German - Switzerland",
          "cultureCode": "0x0807"
        },
        {
          "langCultureName": "it-CH",
          "displayName": "Italian - Switzerland",
          "cultureCode": "0x0810"
        }
      ]
    },
    {
      "code_2": "SY",
      "code_3": "SYR",
      "numCode": "760",
      "name": "Syrian Arab Republic",
      "languages": [
        "ara"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ar-SY",
          "displayName": "Arabic - Syria",
          "cultureCode": "0x2801"
        },
        {
          "langCultureName": "syr-SY",
          "displayName": "Syriac - Syria",
          "cultureCode": "0x045A"
        }
      ]
    },
    {
      "code_2": "TW",
      "code_3": "TWN",
      "numCode": "158",
      "name": "Taiwan, Province of China",
      "languages": [
        "zho"
      ],
      "langCultureMs": [
        {
          "langCultureName": "zh-TW",
          "displayName": "Chinese - Taiwan",
          "cultureCode": "0x0404"
        }
      ]
    },
    {
      "code_2": "TJ",
      "code_3": "TJK",
      "numCode": "762",
      "name": "Tajikistan",
      "languages": [
        "fas",
        "rus",
        "tgk"
      ]
    },
    {
      "code_2": "TZ",
      "code_3": "TZA",
      "numCode": "834",
      "name": "Tanzania, United Republic of",
      "languages": [
        "eng",
        "swa"
      ]
    },
    {
      "code_2": "TH",
      "code_3": "THA",
      "numCode": "764",
      "name": "Thailand",
      "languages": [
        "tha"
      ],
      "langCultureMs": [
        {
          "langCultureName": "th-TH",
          "displayName": "Thai - Thailand",
          "cultureCode": "0x041E"
        }
      ]
    },
    {
      "code_2": "TL",
      "code_3": "TLS",
      "numCode": "626",
      "name": "Timor-Leste",
      "languages": [
        "por",
        "tet"
      ]
    },
    {
      "code_2": "TG",
      "code_3": "TGO",
      "numCode": "768",
      "name": "Togo",
      "languages": [
        "ewe",
        "fra"
      ]
    },
    {
      "code_2": "TK",
      "code_3": "TKL",
      "numCode": "772",
      "name": "Tokelau"
    },
    {
      "code_2": "TO",
      "code_3": "TON",
      "numCode": "776",
      "name": "Tonga",
      "languages": [
        "eng"
      ]
    },
    {
      "code_2": "TT",
      "code_3": "TTO",
      "numCode": "780",
      "name": "Trinidad and Tobago",
      "languages": [
        "eng"
      ],
      "langCultureMs": [
        {
          "langCultureName": "en-TT",
          "displayName": "English - Trinidad and Tobago",
          "cultureCode": "0x2C09"
        }
      ]
    },
    {
      "code_2": "TN",
      "code_3": "TUN",
      "numCode": "788",
      "name": "Tunisia",
      "languages": [
        "ara"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ar-TN",
          "displayName": "Arabic - Tunisia",
          "cultureCode": "0x1C01"
        }
      ]
    },
    {
      "code_2": "TR",
      "code_3": "TUR",
      "numCode": "792",
      "name": "Turkey",
      "languages": [
        "tur"
      ],
      "langCultureMs": [
        {
          "langCultureName": "tr-TR",
          "displayName": "Turkish - Turkey",
          "cultureCode": "0x041F"
        }
      ]
    },
    {
      "code_2": "TM",
      "code_3": "TKM",
      "numCode": "795",
      "name": "Turkmenistan",
      "languages": [
        "tuk"
      ]
    },
    {
      "code_2": "TC",
      "code_3": "TCA",
      "numCode": "796",
      "name": "Turks and Caicos Islands"
    },
    {
      "code_2": "TV",
      "code_3": "TUV",
      "numCode": "798",
      "name": "Tuvalu",
      "languages": [
        "eng"
      ]
    },
    {
      "code_2": "UG",
      "code_3": "UGA",
      "numCode": "800",
      "name": "Uganda",
      "languages": [
        "eng",
        "swa"
      ]
    },
    {
      "code_2": "UA",
      "code_3": "UKR",
      "numCode": "804",
      "name": "Ukraine",
      "languages": [
        "ukr"
      ],
      "langCultureMs": [
        {
          "langCultureName": "uk-UA",
          "displayName": "Ukrainian - Ukraine",
          "cultureCode": "0x0422"
        }
      ]
    },
    {
      "code_2": "AE",
      "code_3": "ARE",
      "numCode": "784",
      "name": "United Arab Emirates",
      "languages": [
        "ara"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ar-AE",
          "displayName": "Arabic - United Arab Emirates",
          "cultureCode": "0x3801"
        }
      ]
    },
    {
      "code_2": "GB",
      "code_3": "GBR",
      "numCode": "826",
      "name": "United Kingdom",
      "languages": [
        "eng",
        "cym"
      ],
      "langCultureMs": [
        {
          "langCultureName": "en-GB",
          "displayName": "English - United Kingdom",
          "cultureCode": "0x0809"
        }
      ]
    },
    {
      "code_2": "US",
      "code_3": "USA",
      "numCode": "840",
      "name": "United States",
      "languages": [
        "eng"
      ],
      "langCultureMs": [
        {
          "langCultureName": "en-US",
          "displayName": "English - United States",
          "cultureCode": "0x0409"
        }
      ]
    },
    {
      "code_2": "UM",
      "code_3": "UMI",
      "numCode": "581",
      "name": "United States Minor Outlying Islands"
    },
    {
      "code_2": "UY",
      "code_3": "URY",
      "numCode": "858",
      "name": "Uruguay",
      "languages": [
        "spa"
      ],
      "langCultureMs": [
        {
          "langCultureName": "es-UY",
          "displayName": "Spanish - Uruguay",
          "cultureCode": "0x380A"
        }
      ]
    },
    {
      "code_2": "UZ",
      "code_3": "UZB",
      "numCode": "860",
      "name": "Uzbekistan",
      "languages": [
        "uzb"
      ],
      "langCultureMs": [
        {
          "langCultureName": "Cy-uz-UZ",
          "displayName": "Uzbek (Cyrillic) - Uzbekistan",
          "cultureCode": "0x0843"
        },
        {
          "langCultureName": "Lt-uz-UZ",
          "displayName": "Uzbek (Latin) - Uzbekistan",
          "cultureCode": "0x0443"
        }
      ]
    },
    {
      "code_2": "VU",
      "code_3": "VUT",
      "numCode": "548",
      "name": "Vanuatu",
      "languages": [
        "bis",
        "eng",
        "fra"
      ]
    },
    {
      "code_2": "VE",
      "code_3": "VEN",
      "numCode": "862",
      "name": "Venezuela, Bolivarian Republic of",
      "languages": [
        "spa"
      ],
      "langCultureMs": [
        {
          "langCultureName": "es-VE",
          "displayName": "Spanish - Venezuela",
          "cultureCode": "0x200A"
        }
      ]
    },
    {
      "code_2": "VN",
      "code_3": "VNM",
      "numCode": "704",
      "name": "Viet Nam",
      "languages": [
        "vie"
      ],
      "langCultureMs": [
        {
          "langCultureName": "vi-VN",
          "displayName": "Vietnamese - Vietnam",
          "cultureCode": "0x042A"
        }
      ]
    },
    {
      "code_2": "VG",
      "code_3": "VGB",
      "numCode": "092",
      "name": "Virgin Islands, British"
    },
    {
      "code_2": "VI",
      "code_3": "VIR",
      "numCode": "850",
      "name": "Virgin Islands, U.S."
    },
    {
      "code_2": "WF",
      "code_3": "WLF",
      "numCode": "876",
      "name": "Wallis and Futuna",
      "languages": [
        "fra"
      ]
    },
    {
      "code_2": "EH",
      "code_3": "ESH",
      "numCode": "732",
      "name": "Western Sahara",
      "languages": [
        "spa"
      ]
    },
    {
      "code_2": "YE",
      "code_3": "YEM",
      "numCode": "887",
      "name": "Yemen",
      "languages": [
        "ara"
      ],
      "langCultureMs": [
        {
          "langCultureName": "ar-YE",
          "displayName": "Arabic - Yemen",
          "cultureCode": "0x2401"
        }
      ]
    },
    {
      "code_2": "ZM",
      "code_3": "ZMB",
      "numCode": "894",
      "name": "Zambia",
      "languages": [
        "eng"
      ]
    },
    {
      "code_2": "ZW",
      "code_3": "ZWE",
      "numCode": "716",
      "name": "Zimbabwe",
      "languages": [
        "eng",
        "nde",
        "sna"
      ],
      "langCultureMs": [
        {
          "langCultureName": "en-ZW",
          "displayName": "English - Zimbabwe",
          "cultureCode": "0x3009"
        }
      ]
    }
  ],
  "locales": [
    [
      "af",
      "ZA"
    ],
    [
      "am",
      "ET"
    ],
    [
      "ar",
      "AE"
    ],
    [
      "ar",
      "BH"
    ],
    [
      "ar",
      "DZ"
    ],
    [
      "ar",
      "EG"
    ],
    [
      "ar",
      "IQ"
    ],
    [
      "ar",
      "JO"
    ],
    [
      "ar",
      "KW"
    ],
    [
      "ar",
      "LB"
    ],
    [
      "ar",
      "LY"
    ],
    [
      "ar",
      "MA"
    ],
    [
      "arn",
      "CL"
    ],
    [
      "ar",
      "OM"
    ],
    [
      "ar",
      "QA"
    ],
    [
      "ar",
      "SA"
    ],
    [
      "ar",
      "SY"
    ],
    [
      "ar",
      "TN"
    ],
    [
      "ar",
      "YE"
    ],
    [
      "as",
      "IN"
    ],
    [
      "az",
      "Cyrl",
      "AZ"
    ],
    [
      "az",
      "Latn",
      "AZ"
    ],
    [
      "ba",
      "RU"
    ],
    [
      "be",
      "BY"
    ],
    [
      "bg",
      "BG"
    ],
    [
      "bn",
      "BD"
    ],
    [
      "bn",
      "IN"
    ],
    [
      "bo",
      "CN"
    ],
    [
      "br",
      "FR"
    ],
    [
      "bs",
      "Cyrl",
      "BA"
    ],
    [
      "bs",
      "Latn",
      "BA"
    ],
    [
      "ca",
      "ES"
    ],
    [
      "co",
      "FR"
    ],
    [
      "cs",
      "CZ"
    ],
    [
      "cy",
      "GB"
    ],
    [
      "da",
      "DK"
    ],
    [
      "de",
      "AT"
    ],
    [
      "de",
      "CH"
    ],
    [
      "de",
      "DE"
    ],
    [
      "de",
      "LI"
    ],
    [
      "de",
      "LU"
    ],
    [
      "dsb",
      "DE"
    ],
    [
      "dv",
      "MV"
    ],
    [
      "el",
      "GR"
    ],
    [
      "en",
      "029"
    ],
    [
      "en",
      "AU"
    ],
    [
      "en",
      "BZ"
    ],
    [
      "en",
      "CA"
    ],
    [
      "en",
      "GB"
    ],
    [
      "en",
      "IE"
    ],
    [
      "en",
      "IN"
    ],
    [
      "en",
      "JM"
    ],
    [
      "en",
      "MY"
    ],
    [
      "en",
      "NZ"
    ],
    [
      "en",
      "PH"
    ],
    [
      "en",
      "SG"
    ],
    [
      "en",
      "TT"
    ],
    [
      "en",
      "US"
    ],
    [
      "en",
      "ZA"
    ],
    [
      "en",
      "ZW"
    ],
    [
      "es",
      "AR"
    ],
    [
      "es",
      "BO"
    ],
    [
      "es",
      "CL"
    ],
    [
      "es",
      "CO"
    ],
    [
      "es",
      "CR"
    ],
    [
      "es",
      "DO"
    ],
    [
      "es",
      "EC"
    ],
    [
      "es",
      "ES"
    ],
    [
      "es",
      "GT"
    ],
    [
      "es",
      "HN"
    ],
    [
      "es",
      "MX"
    ],
    [
      "es",
      "NI"
    ],
    [
      "es",
      "PA"
    ],
    [
      "es",
      "PE"
    ],
    [
      "es",
      "PR"
    ],
    [
      "es",
      "PY"
    ],
    [
      "es",
      "SV"
    ],
    [
      "es",
      "US"
    ],
    [
      "es",
      "UY"
    ],
    [
      "es",
      "VE"
    ],
    [
      "et",
      "EE"
    ],
    [
      "eu",
      "ES"
    ],
    [
      "fa",
      "IR"
    ],
    [
      "fi",
      "FI"
    ],
    [
      "fil",
      "PH"
    ],
    [
      "fo",
      "FO"
    ],
    [
      "fr",
      "BE"
    ],
    [
      "fr",
      "CA"
    ],
    [
      "fr",
      "CH"
    ],
    [
      "fr",
      "FR"
    ],
    [
      "fr",
      "LU"
    ],
    [
      "fr",
      "MC"
    ],
    [
      "fy",
      "NL"
    ],
    [
      "ga",
      "IE"
    ],
    [
      "gd",
      "GB"
    ],
    [
      "gl",
      "ES"
    ],
    [
      "gsw",
      "FR"
    ],
    [
      "gu",
      "IN"
    ],
    [
      "ha",
      "Latn",
      "NG"
    ],
    [
      "he",
      "IL"
    ],
    [
      "hi",
      "IN"
    ],
    [
      "hr",
      "BA"
    ],
    [
      "hr",
      "HR"
    ],
    [
      "hsb",
      "DE"
    ],
    [
      "hu",
      "HU"
    ],
    [
      "hy",
      "AM"
    ],
    [
      "id",
      "ID"
    ],
    [
      "ig",
      "NG"
    ],
    [
      "ii",
      "CN"
    ],
    [
      "is",
      "IS"
    ],
    [
      "it",
      "CH"
    ],
    [
      "it",
      "IT"
    ],
    [
      "iu",
      "Cans",
      "CA"
    ],
    [
      "iu",
      "Latn",
      "CA"
    ],
    [
      "ja",
      "JP"
    ],
    [
      "ka",
      "GE"
    ],
    [
      "kk",
      "KZ"
    ],
    [
      "kl",
      "GL"
    ],
    [
      "km",
      "KH"
    ],
    [
      "kn",
      "IN"
    ],
    [
      "kok",
      "IN"
    ],
    [
      "ko",
      "KR"
    ],
    [
      "ky",
      "KG"
    ],
    [
      "lb",
      "LU"
    ],
    [
      "lo",
      "LA"
    ],
    [
      "lt",
      "LT"
    ],
    [
      "lv",
      "LV"
    ],
    [
      "mi",
      "NZ"
    ],
    [
      "mk",
      "MK"
    ],
    [
      "ml",
      "IN"
    ],
    [
      "mn",
      "MN"
    ],
    [
      "mn",
      "Mong",
      "CN"
    ],
    [
      "moh",
      "CA"
    ],
    [
      "mr",
      "IN"
    ],
    [
      "ms",
      "BN"
    ],
    [
      "ms",
      "MY"
    ],
    [
      "mt",
      "MT"
    ],
    [
      "nb",
      "NO"
    ],
    [
      "ne",
      "NP"
    ],
    [
      "nl",
      "BE"
    ],
    [
      "nl",
      "NL"
    ],
    [
      "nn",
      "NO"
    ],
    [
      "nso",
      "ZA"
    ],
    [
      "oc",
      "FR"
    ],
    [
      "or",
      "IN"
    ],
    [
      "pa",
      "IN"
    ],
    [
      "pl",
      "PL"
    ],
    [
      "prs",
      "AF"
    ],
    [
      "ps",
      "AF"
    ],
    [
      "pt",
      "BR"
    ],
    [
      "pt",
      "PT"
    ],
    [
      "qut",
      "GT"
    ],
    [
      "quz",
      "BO"
    ],
    [
      "quz",
      "EC"
    ],
    [
      "quz",
      "PE"
    ],
    [
      "rm",
      "CH"
    ],
    [
      "ro",
      "RO"
    ],
    [
      "ru",
      "RU"
    ],
    [
      "rw",
      "RW"
    ],
    [
      "sah",
      "RU"
    ],
    [
      "sa",
      "IN"
    ],
    [
      "se",
      "FI"
    ],
    [
      "se",
      "NO"
    ],
    [
      "se",
      "SE"
    ],
    [
      "si",
      "LK"
    ],
    [
      "sk",
      "SK"
    ],
    [
      "sl",
      "SI"
    ],
    [
      "sma",
      "NO"
    ],
    [
      "sma",
      "SE"
    ],
    [
      "smj",
      "NO"
    ],
    [
      "smj",
      "SE"
    ],
    [
      "smn",
      "FI"
    ],
    [
      "sms",
      "FI"
    ],
    [
      "sq",
      "AL"
    ],
    [
      "sr",
      "Cyrl",
      "BA"
    ],
    [
      "sr",
      "Cyrl",
      "CS"
    ],
    [
      "sr",
      "Cyrl",
      "ME"
    ],
    [
      "sr",
      "Cyrl",
      "RS"
    ],
    [
      "sr",
      "Latn",
      "BA"
    ],
    [
      "sr",
      "Latn",
      "CS"
    ],
    [
      "sr",
      "Latn",
      "ME"
    ],
    [
      "sr",
      "Latn",
      "RS"
    ],
    [
      "sv",
      "FI"
    ],
    [
      "sv",
      "SE"
    ],
    [
      "sw",
      "KE"
    ],
    [
      "syr",
      "SY"
    ],
    [
      "ta",
      "IN"
    ],
    [
      "te",
      "IN"
    ],
    [
      "tg",
      "Cyrl",
      "TJ"
    ],
    [
      "th",
      "TH"
    ],
    [
      "tk",
      "TM"
    ],
    [
      "tn",
      "ZA"
    ],
    [
      "tr",
      "TR"
    ],
    [
      "tt",
      "RU"
    ],
    [
      "tzm",
      "Latn",
      "DZ"
    ],
    [
      "ug",
      "CN"
    ],
    [
      "uk",
      "UA"
    ],
    [
      "ur",
      "PK"
    ],
    [
      "uz",
      "Cyrl",
      "UZ"
    ],
    [
      "uz",
      "Latn",
      "UZ"
    ],
    [
      "vi",
      "VN"
    ],
    [
      "wo",
      "SN"
    ],
    [
      "xh",
      "ZA"
    ],
    [
      "yo",
      "NG"
    ],
    [
      "zh",
      "CN"
    ],
    [
      "zh",
      "HK"
    ],
    [
      "zh",
      "MO"
    ],
    [
      "zh",
      "SG"
    ],
    [
      "zh",
      "TW"
    ],
    [
      "zu",
      "ZA"
    ]
  ]
}
},{}],3:[function(require,module,exports){
var _ = require('underscore')
  , _d = require('underscore.deep')
  , utils = require('./utils')
  , data = require('./data.json');

_.mixin(_d);

var noop = function(err, value) {
  if (err) return err;
  return value;
};

exports.getCountries = function () {
  return data.countries;
};

exports.getLanguages = function () {
  return data.languages;
};

exports.getLanguageFamilies = function () {
  return data.languageFamilies;
};

exports.getLanguageCodes = function (codeType, cb) {
  var languages = data.languages
    , cType
    , cTypeNames = [ 'iso639_1', 'iso639_2en', 'iso639_3']
    , codes = [];

  cb = cb || utils.isFunction(codeType) ? codeType : noop;

  codeType = (codeType && !utils.isFunction(codeType)) ? codeType : 1;
  codeType = Math.floor(Number(codeType));
  if (isNaN(codeType) || codeType < 1 || codeType > cTypeNames.length) {
    return cb('Wrong language code type provided. Valid values: 1, 2, 3 for iso639-1, iso639-2, iso639-3 respectively');
  }
  cType = cTypeNames[codeType - 1];
  _.each(languages, function (language) {
    if (language[cType]) codes.push(language[cType]);
  });

  return cb(null, codes);
};

exports.getCountryCodes = function (codeType, cb) {
  var countries = data.countries
    , cType
    , cTypeNames = [ 'numCode', 'code_2', 'code_3' ]
    , codes = [];

  cb = cb || utils.isFunction(codeType) ? codeType : noop;

  codeType = (codeType && !utils.isFunction(codeType)) ? codeType : 2;
  codeType = Math.floor(Number(codeType));
  if (isNaN(codeType) || codeType < 1 || codeType > cTypeNames.length) {
    return cb('Wrong country code type provided. Valid values: 1, 2, 3 for numeric code, alpha-2, alpha-3 respectively');
  }
  cType = cTypeNames[codeType - 1];
  _.each(countries, function (country) {
    if (country[cType]) codes.push(country[cType]);
  });

  return cb(null, codes);
};

exports.languageCodeExists = function (code) {
  var codes
    , exists;

  if (!code) return false;
  code = code.toLowerCase();
  for (var i = 1; i < 4; i++) {
    codes = exports.getLanguageCodes(i);
    exists = _.indexOf(codes, code) != -1;
    if (exists) break;
  }

  return exists;
};

exports.countryCodeExists = function (code) {
  var codes
    , exists;

  if (!code) return false;
  code = code.toUpperCase();
  for (var i = 1; i < 4; i++) {
    codes = exports.getCountryCodes(i);
    exists = _.indexOf(codes, code) != -1;
    if (exists) break;
  }

  return exists;
};

exports.getCountry  = function (code, cb, noLangInfo) {
  var countries = data.countries
    , country
    , codeFld
    , langs;

  if ('string' !== typeof code) {
    return cb('No country code provided');
  }
  cb = cb || noop;
  code = code.toUpperCase();

  if (code.length == 2) {
    codeFld = 'code_2';
  } else if (code.length == 3) {
    codeFld = 'code_3';
  }

  if (codeFld) {
    country = _.find(countries, function (c) {
      return c[codeFld] == code;
    });
    if (!country) {
      return cb('There is no country with code "' + code + '"');
    }
    country = _.deepClone(country);
    if (!noLangInfo) {
      langs = country.languages;
      country.languages = [];
      _.each(langs, function (l) {
        country.languages.push(exports.getLanguage(l, null, true));
      });
    }
    return cb(null, country);
  } else {
    return cb('Wrong type of country code provided');
  }
};

exports.getLanguage = function (code, cb, noCountryInfo) {
  var languages = data.languages
    , language
    , codeFld = []
    , countrs;

  cb = cb || noop;

  if ('string' !== typeof code) {
    return cb('No language code provided');
  }
  code = code.toLowerCase();

  if (code.length == 2) {
    codeFld.push('iso639_1');
  } else if (code.length == 3) {
    codeFld.push('iso639_2');
    codeFld.push('iso639_2en');
    codeFld.push('iso639_3');
  }

  if (codeFld) {
    for (var i = 0; i < codeFld.length; i++) {
      language = _.find(languages, function (l) {
        return l[codeFld[i]] == code;
      });
      if (language) break;
    }
    if (!language) {
      return cb('There is no language with code "' + code + '"');
    }
    language = _.deepClone(language);
    if (!noCountryInfo) {
      countrs = language.countries;
      language.countries = [];
      _.each(countrs, function (c) {
        language.countries.push(exports.getCountry(c, null, true));
      });
    }
    return cb(null, language);
  } else {
    return cb('Wrong type of language code provided');
  }
};

exports.getCountryLanguages = function (code, cb) {
  var codes = [];

  cb = cb || noop;

  exports.getCountry(code, function (err, country) {
    if (err) return cb(err);
    _.each(country.languages, function (l) {
      codes.push({
          iso639_1: l.iso639_1
        , iso639_2: l.iso639_2en
        , iso639_3: l.iso639_3
      });
    });
  });
  return cb(null, codes);
};

exports.getLanguageCountries = function (code, cb) {
  var codes = [];

  cb = cb || noop;

  exports.getLanguage(code, function (err, language) {
    if (err) return cb(err);
    _.each(language.countries, function (c) {
      codes.push({
          code_2: c.code_2
        , code_3: c.code_3
        , numCode: c.numCode
      });
    });
  });
  return cb(null, codes);
};

exports.getCountryMsLocales = function (code, cb) {
  var codes = [];

  cb = cb || noop;

  exports.getCountry(code, function (err, country) {
    if (err) return cb(err);
    codes = country.langCultureMs;
  });
  return cb(null, codes);
};

exports.getLanguageMsLocales = function (code, cb) {
  var codes = [];

  cb = cb || noop;

  exports.getLanguage(code, function (err, language) {
    if (err) return cb(err);
    codes = language.langCultureMs;
  });
  return cb(null, codes);
};

exports.getLanguageFamilyMembers = function (family, cb) {
  var languages = data.languages
    , check
    , members
    , ret = [];

  cb = cb || noop;

  if ('string' !== typeof family) {
    return cb('No language family provided');
  }
  family = family.toLowerCase();

  check = _.find(data.languageFamilies, function (f) {
    return f.toLowerCase() == family;
  });
  if (!check) {
    return cb('There is no language family "' + family + '"');
  }

  members = _.filter(languages, function (l) {
    return l.family.toLowerCase() == family;
  });
  _.each(members, function (l) {
    ret.push(exports.getLanguage(l.iso639_3));
  });
  return cb(null, ret);
};

exports.getLocales = function (mode) {
  var locales = data.locales
    , ret = []
    , loc2;
  locales.forEach(function (loc) {
    loc2 = loc[2] ? '-' + loc[2] : '';
    if (mode) {
      ret.push(loc[0] + loc2 + '-' + loc[1]);
    } else {
      ret.push(loc[0] + '-' + loc[1] + loc2);
    }
  });
  return ret;
}
},{"./data.json":2,"./utils":4,"underscore":28,"underscore.deep":27}],4:[function(require,module,exports){
exports.isFunction = function (fn) {
  var getType = {};
  return fn && getType.toString.call(fn) === '[object Function]';
};

},{}],5:[function(require,module,exports){
'use strict';

var assign        = require('es5-ext/object/assign')
  , normalizeOpts = require('es5-ext/object/normalize-options')
  , isCallable    = require('es5-ext/object/is-callable')
  , contains      = require('es5-ext/string/#/contains')

  , d;

d = module.exports = function (dscr, value/*, options*/) {
	var c, e, w, options, desc;
	if ((arguments.length < 2) || (typeof dscr !== 'string')) {
		options = value;
		value = dscr;
		dscr = null;
	} else {
		options = arguments[2];
	}
	if (dscr == null) {
		c = w = true;
		e = false;
	} else {
		c = contains.call(dscr, 'c');
		e = contains.call(dscr, 'e');
		w = contains.call(dscr, 'w');
	}

	desc = { value: value, configurable: c, enumerable: e, writable: w };
	return !options ? desc : assign(normalizeOpts(options), desc);
};

d.gs = function (dscr, get, set/*, options*/) {
	var c, e, options, desc;
	if (typeof dscr !== 'string') {
		options = set;
		set = get;
		get = dscr;
		dscr = null;
	} else {
		options = arguments[3];
	}
	if (get == null) {
		get = undefined;
	} else if (!isCallable(get)) {
		options = get;
		get = set = undefined;
	} else if (set == null) {
		set = undefined;
	} else if (!isCallable(set)) {
		options = set;
		set = undefined;
	}
	if (dscr == null) {
		c = true;
		e = false;
	} else {
		c = contains.call(dscr, 'c');
		e = contains.call(dscr, 'e');
	}

	desc = { get: get, set: set, configurable: c, enumerable: e };
	return !options ? desc : assign(normalizeOpts(options), desc);
};

},{"es5-ext/object/assign":6,"es5-ext/object/is-callable":9,"es5-ext/object/normalize-options":13,"es5-ext/string/#/contains":16}],6:[function(require,module,exports){
'use strict';

module.exports = require('./is-implemented')()
	? Object.assign
	: require('./shim');

},{"./is-implemented":7,"./shim":8}],7:[function(require,module,exports){
'use strict';

module.exports = function () {
	var assign = Object.assign, obj;
	if (typeof assign !== 'function') return false;
	obj = { foo: 'raz' };
	assign(obj, { bar: 'dwa' }, { trzy: 'trzy' });
	return (obj.foo + obj.bar + obj.trzy) === 'razdwatrzy';
};

},{}],8:[function(require,module,exports){
'use strict';

var keys  = require('../keys')
  , value = require('../valid-value')

  , max = Math.max;

module.exports = function (dest, src/*, …srcn*/) {
	var error, i, l = max(arguments.length, 2), assign;
	dest = Object(value(dest));
	assign = function (key) {
		try { dest[key] = src[key]; } catch (e) {
			if (!error) error = e;
		}
	};
	for (i = 1; i < l; ++i) {
		src = arguments[i];
		keys(src).forEach(assign);
	}
	if (error !== undefined) throw error;
	return dest;
};

},{"../keys":10,"../valid-value":15}],9:[function(require,module,exports){
// Deprecated

'use strict';

module.exports = function (obj) { return typeof obj === 'function'; };

},{}],10:[function(require,module,exports){
'use strict';

module.exports = require('./is-implemented')()
	? Object.keys
	: require('./shim');

},{"./is-implemented":11,"./shim":12}],11:[function(require,module,exports){
'use strict';

module.exports = function () {
	try {
		Object.keys('primitive');
		return true;
	} catch (e) { return false; }
};

},{}],12:[function(require,module,exports){
'use strict';

var keys = Object.keys;

module.exports = function (object) {
	return keys(object == null ? object : Object(object));
};

},{}],13:[function(require,module,exports){
'use strict';

var forEach = Array.prototype.forEach, create = Object.create;

var process = function (src, obj) {
	var key;
	for (key in src) obj[key] = src[key];
};

module.exports = function (options/*, …options*/) {
	var result = create(null);
	forEach.call(arguments, function (options) {
		if (options == null) return;
		process(Object(options), result);
	});
	return result;
};

},{}],14:[function(require,module,exports){
'use strict';

module.exports = function (fn) {
	if (typeof fn !== 'function') throw new TypeError(fn + " is not a function");
	return fn;
};

},{}],15:[function(require,module,exports){
'use strict';

module.exports = function (value) {
	if (value == null) throw new TypeError("Cannot use null or undefined");
	return value;
};

},{}],16:[function(require,module,exports){
'use strict';

module.exports = require('./is-implemented')()
	? String.prototype.contains
	: require('./shim');

},{"./is-implemented":17,"./shim":18}],17:[function(require,module,exports){
'use strict';

var str = 'razdwatrzy';

module.exports = function () {
	if (typeof str.contains !== 'function') return false;
	return ((str.contains('dwa') === true) && (str.contains('foo') === false));
};

},{}],18:[function(require,module,exports){
'use strict';

var indexOf = String.prototype.indexOf;

module.exports = function (searchString/*, position*/) {
	return indexOf.call(this, searchString, arguments[1]) > -1;
};

},{}],19:[function(require,module,exports){
'use strict';

var d        = require('d')
  , callable = require('es5-ext/object/valid-callable')

  , apply = Function.prototype.apply, call = Function.prototype.call
  , create = Object.create, defineProperty = Object.defineProperty
  , defineProperties = Object.defineProperties
  , hasOwnProperty = Object.prototype.hasOwnProperty
  , descriptor = { configurable: true, enumerable: false, writable: true }

  , on, once, off, emit, methods, descriptors, base;

on = function (type, listener) {
	var data;

	callable(listener);

	if (!hasOwnProperty.call(this, '__ee__')) {
		data = descriptor.value = create(null);
		defineProperty(this, '__ee__', descriptor);
		descriptor.value = null;
	} else {
		data = this.__ee__;
	}
	if (!data[type]) data[type] = listener;
	else if (typeof data[type] === 'object') data[type].push(listener);
	else data[type] = [data[type], listener];

	return this;
};

once = function (type, listener) {
	var once, self;

	callable(listener);
	self = this;
	on.call(this, type, once = function () {
		off.call(self, type, once);
		apply.call(listener, this, arguments);
	});

	once.__eeOnceListener__ = listener;
	return this;
};

off = function (type, listener) {
	var data, listeners, candidate, i;

	callable(listener);

	if (!hasOwnProperty.call(this, '__ee__')) return this;
	data = this.__ee__;
	if (!data[type]) return this;
	listeners = data[type];

	if (typeof listeners === 'object') {
		for (i = 0; (candidate = listeners[i]); ++i) {
			if ((candidate === listener) ||
					(candidate.__eeOnceListener__ === listener)) {
				if (listeners.length === 2) data[type] = listeners[i ? 0 : 1];
				else listeners.splice(i, 1);
			}
		}
	} else {
		if ((listeners === listener) ||
				(listeners.__eeOnceListener__ === listener)) {
			delete data[type];
		}
	}

	return this;
};

emit = function (type) {
	var i, l, listener, listeners, args;

	if (!hasOwnProperty.call(this, '__ee__')) return;
	listeners = this.__ee__[type];
	if (!listeners) return;

	if (typeof listeners === 'object') {
		l = arguments.length;
		args = new Array(l - 1);
		for (i = 1; i < l; ++i) args[i - 1] = arguments[i];

		listeners = listeners.slice();
		for (i = 0; (listener = listeners[i]); ++i) {
			apply.call(listener, this, args);
		}
	} else {
		switch (arguments.length) {
		case 1:
			call.call(listeners, this);
			break;
		case 2:
			call.call(listeners, this, arguments[1]);
			break;
		case 3:
			call.call(listeners, this, arguments[1], arguments[2]);
			break;
		default:
			l = arguments.length;
			args = new Array(l - 1);
			for (i = 1; i < l; ++i) {
				args[i - 1] = arguments[i];
			}
			apply.call(listeners, this, args);
		}
	}
};

methods = {
	on: on,
	once: once,
	off: off,
	emit: emit
};

descriptors = {
	on: d(on),
	once: d(once),
	off: d(off),
	emit: d(emit)
};

base = defineProperties({}, descriptors);

module.exports = exports = function (o) {
	return (o == null) ? create(base) : defineProperties(Object(o), descriptors);
};
exports.methods = methods;

},{"d":5,"es5-ext/object/valid-callable":14}],20:[function(require,module,exports){
'use strict';

module.exports = require('./lib/franc');

},{"./lib/franc":23}],21:[function(require,module,exports){
module.exports={
  "Latin": {
    "spa": " de|os |de | la|la | y | a |es |ón |ión|rec|ere|der| co|e l|el |en |ien|cho|ent|ech|ció|aci|o a|a p| el|a l|al |as |e d| en|na |ona|s d|da |nte| to|ad |ene|con| pr| su|tod| se|ho |los| pe|per|ers| lo|o d| ti|cia|n d|cio| es|ida|res|a t|tie|ion|rso|te |do | in|son| re| li|to |dad|tad|e s|est|pro|que|men| po|a e|oda|nci| qu| un|ue |ne |n e|s y|lib|su | na|s e|nac|ia |e e|tra| pa|or |ado|a d|nes|ra |se |ual|a c|er |por|com|nal|rta|a s|ber| o |one|s p|dos|rá |sta|les|des|ibe|ser|era|ar |ert|ter| di|ale|l d|nto|hos|del|ica|a a|s n|n c|oci|imi|io |o e|re |y l|e c|ant|cci| as|las|par|ame| cu|ici|ara|enc|s t|ndi| so|o s|mie|tos|una|bre|dic|cla|s l|e a|l p|pre|ntr|o t|ial|y a|nid|n p|a y|man|omo|so |n l| al|ali|s a|no | ig|s s|e p|nta|uma|ten|gua|ade|y e|soc|mo | fu|igu|o p|n t|hum|d d|ran|ria|y d|ada|tiv|l e|cas| ca|vid|l t|s c|ido|das|dis|s i| hu|s o|nad|fun| ma|rac|nda|eli|sar|und| ac|uni|mbr|a u|die|e i|qui|a i| ha|lar| tr|odo|ca |tic|o y|cti|lid|ori|ndo|ari| me|ta |ind|esa|cua|un |ier|tal|esp|seg|ele|ons|ito|ont|iva|s h|d y|nos|ist|rse| le|cie|ide|edi|ecc|ios|l m|r e|med|tor|sti|n a|rim|uie|ple|tri|ibr|sus|lo |ect|pen|y c|an |e h|n s|ern|tar|l y|egu|gur|ura|int|ond|mat|l r|r a|isf|ote",
    "eng": " th|the| an|he |nd |and|ion| of|of |tio| to|to |on | in|al |ati|igh|ght|rig| ri|or |ent|as |ed |is |ll |in | be|e r|ne |one|ver|all|s t|eve|t t| fr|s a| ha| re|ty |ery| or|d t| pr|ht | co| ev|e h|e a|ng |ts |his|ing|be |yon| sh|ce |ree|fre|ryo|n t|her|men|nat|sha|pro|nal|y a|has|es |for| hi|hal|f t|n a|n o|nt | pe|s o| fo|d i|nce|er |ons|res|e s|ect|ity|ly |l b|ry |e e|ers|e i|an |e o| de|cti|dom|edo|eed|hts|ter|ona|re | no| wh| a | un|d f| as|ny |l a|e p|ere| en| na| wi|nit|nte|d a|any|ted| di|ns |sta|th |per|ith|e t|st |e c|y t|om |soc| ar|ch |t o|d o|nti|s e|equ|ve |oci|man| fu|ote|oth|ess| al| ac|wit|ial| ma|uni| se|rea| so| on|lit|int|r t|y o|enc|thi|ual|t a| eq|tat|qua|ive| st|ali|e w|l o|are|f h|con|te |led| is|und|cia|e f|le | la|y i|uma|by | by|hum|f a|ic | hu|ave|ge |r a| wo|o a|ms |com| me|eas|s d|tec| li|n e|en |rat|tit|ple|whe|ate|o t|s r|t f|rot| ch|cie|dis|age|ary|o o|anc|eli|no | fa| su|son|inc|at |nda|hou|wor|t i|nde|rom|oms| ot|g t|eme|tle|iti|gni|s w|itl|duc|d w|whi|act|hic|aw |law| he|ich|min|imi|ort|o s|se |e b|ntr|tra|edu|oun|tan|e d|nst|l p|d n|ld |nta|s i|ble|n p| pu|n s| at|ily|rth|tho|ful|ssi|der|o e|cat|uca|unt|ien| ed|o p|h a|era|ind|pen|sec|n w|omm|r s",
    "por": "os |de | de| a | e |o d|to |ão | di|ent|da |ito|em | co|eit|as |dir|es |ire|rei| se|ção|ade|a p|dad|e d|s d|men|nte|do |s e| pr| pe|dos| to| da|a a|o e| o |o a|ess|con|tod|que| qu|te |e a| do|al |res|ida|m d| in| ou|er |sso| na| re| po|a s| li|uma|cia|ar |pro|e e|a d| te|açã|a t| es| su|ou |ue |s p|tos|a e|des|ra |com|no |ame|ia |e p|tem|nto| pa|is |est|tra|ões|na |s o|oda|das|ser|soa|s n|pes|o p|s a|o s|e o| em| as| à |o o|ais|ber|ado|oa |o t|e s|man|sua|ua | no| os|a c|ter|çõe|erd|lib|rda|s s|nci|ibe|e n|ica|odo|so |nal|ntr|s t|hum|ura| ao|ona|ual| so|or |ma |sta|o c|a n|pre|ara|era|ons|e t|r a|par|o à| hu|ind|por|cio|ria|m a|s c| um|a l|gua|ran| en|ndi|o i|e c|raç|ion|nid|aci|ano|soc|e r|oci| ac|und|sen|nos|nsi|rec|ime|ali|int|um |per|nac| al|m o|r p| fu|ndo|ont|açõ| ig|igu|fun|nta| ma|uni|cçã|ere| ex|a i| me|ese|rio|l d|a o|s h|pel|ada|pri|ide|am |m p|pod|s f|ém |a f|io |ode|ca |ita|lid|tiv|e f|vid|r e|esp|nda|omo|e l|naç|o r|ant|a q|tad|lic|iva| fa|ver|s l|ial|cla|ngu|ing| ca|mo |der| vi|eli|ist|ta |se |ati|ios|ido|r o|eci|dis| un|e i|r d|ecç|o q|s i|qua|ênc|a m|seu|sti|nin|uer|rar|cas|aos|ens|gué|ias|sid|uém|tur|dam|sse|ao |ela|l e|for|tec|ote| pl|ena| tr|m c|tro| ni|ico|rot",
    "ind": "an |ang| da|ng | pe|ak | ke| me|ata| se|dan|kan| di| be|hak|ber|per|ran|nga|yan|eng| ya| ha|asa|gan|men|ara|nya|n p|n d|n k|a d|tan| at|at |ora|ala|san| ba|ap |erh|n b|rha|ya | ma|g b|a s|pen|eba|as |aan|uk |ntu| or|eti|tas|aka|tia|ban|set| un|n s|ter|n y| te|k m|tuk|bas|iap|lam|beb|am | de|k a|keb|n m|i d|unt|ama|dal|ah |ika|dak|ebe|p o|sa |pun|mem|n h|end|den|ra |ela|ri |nda| sa|di |ma |a m|n t|k d|n a|ngg|tau|man|gar|eri|asi| ti|un |al |ada|um |a p|lak|ari|au | ne|neg|a b|ngs|ta |ole|leh|ert|ers|ida|k h|ana|gsa|dar|uka|tid|bat|sia|era|eh |dap|ila|dil|h d|atu|sam|ia |i m| in|lan|aha|uan|tu |ai |t d|a a|g d|har|sem|na |apa|ser|ena|kat|uat|erb|erl|mas|rta|ega|ung|nan|emp|n u|kum|l d|g s| hu|ka |ent|pat|mba|aga|nta|adi| su|eni|uku|n i|huk|ind|ar |rga|i s|aku|ndi|sua|ni |rus|han|si |car|nny| la|in |u d|ik |ua |lah|rik|usi|emb|ann|mer|ian|gga|lai|min|a u|lua|ema|emu|arg|dun|dip|a t|mat|aya|rbu|aru|erk|rka|ini|eka|a k|rak|kes|yat|iba|nas|rma|ern|ese|s p|nus| pu|anu|ina| ta|mel|mua|kel|k s|us |ndu|nak|da |sya|das|pem|lin|ut |yar|ami|upu|seo|aik|eor|iny|aup|tak|ipe|ing|tin| an|dik|uar|ili|g t|rse|sar|ant|g p|a n|aks|ain| ja|t p| um|g m|dir|ksa|umu|kep|mum|i k|eca|rat|m p|h p|aba|ses|m m",
    "fra": " de|es |de |ion|nt |et |tio| et|ent| la|la |e d|on |ne |oit|e l|le | le|s d|e p|t d|ati|roi| dr|dro|it | à | co|té |ns |te |e s|men|re | to|con| l’|tou|que| qu|les| so|des|son| pe|ons| un|s l|s e| pr|ue | pa|e c|t l|ts |onn| au|e a|eme|e e| li|ont|ant|out|ute|t à|res|ers| sa|ce | a |tre|per|a d|cti|er |lib|ité| en|ux | re|en |rso|à l| ou| in|lle|un |nat|ou |nne|n d|une| d’| se|par|nte|us |ur |s s|ans|dan|a p|r l|pro|its|és |t p|ire|e t|s p|sa | dé|ond|é d|a l|nce|ert|aux|omm|nal|me | na| fo|iqu| ce|rté|ect|ale|ber|t a|s a| da|mme|ibe|san|e r| po|com|al |s c|qui|our|t e| ne|e n|ous|r d|ali|ter| di|fon|e o|au | ch|air|ui |ell| es|lit|s n|iss|éra|tes|soc|aut|oci|êtr|ien|int|du |est|été|tra|pou| pl|rat|ar |ran|rai|s o|ona|ain|cla|éga|anc|rs |eur|pri|n c|e m|s t|à u| do|ure|bre|ut | êt|age| ét|nsi|sur|ein|sen|ser|ndi|ens|ess|ntr|ir | ma|cia|n p|st |a c| du|l e| su|bli|ge |rés| ré|e q|ass|nda|peu|ée |l’a| te|a s|tat|il |tés|ais|u d|ine|ind|é e|qu’| ac|s i|n t|t c|n a|l’h|t q|soi|t s|cun|rit| ég|oir|’en|nta|hom| on|n e| mo|ie |ign|rel|nna|t i|l n| tr|ill|ple|s é|l’e|rec|a r|ote|sse|uni|idé|ive|s u|t ê|ins|act| fa|n s| vi|gal| as|lig|ssa|pré|leu|e f|lic|dis|ver| nu|ten|ssi|rot|tec|s m|abl",
    "deu": "en |er |der| un|nd |und|ein|ung|cht| de|ich|sch|ng | ge|ie |che|ech| di|die|rec|gen|ine|eit| re|ch | da|n d|ver|hen| zu|t d| au|ht | ha|lic|it |ten|rei| be|in | ve| in| ei|nde|auf|den|ede|zu |n s|uf |fre|ne |ter|es | je|jed|n u| an|sei|and| fr|run|at | se|e u|das|hei|s r|hte|hat|nsc|nge|r h|as |ens| al|ere|lle|t a| we|n g|rde|nte|ese|men| od|ode|ner|g d|all|t u|ers|te |nen| so|d d|n a|ben|lei| gr| vo|wer|e a|ege|ion| st|ige|le |cha| me|haf|aft|n j|ren| er|erk|ent|bei| si|eih|ihe|kei|erd|tig|n i|on |lun|r d|len|gem|ies|gru|tli|unt|chu|ern|ges|end|e s|ft |st |ist|tio|ati| gl|sta|gun|mit|sen|n n| na|n z|ite| wi|r g|eic|e e|ei |lie|r s|n w|gle|mei|de |uch|em |chl|nat|rch|t w|des|n e|hre|ale|spr|d f|ach|sse|r e| sc|urc|r m|nie|e f|fen|e g|e d| ni|dur|dar|int| du|geh|ied|t s| mi|alt|her|hab|f g|sic|ste|taa|aat|he |ang|ruc|hli|tz |eme|abe|h a|n v|nun|geg|arf|rf |ehe|pru| is|erf|e m|ans|ndl|e b|tun|n o|d g|n r|r v|wie|ber|r a|arb|bes|t i|h d|r w|r b| ih|d s|igk|gke|nsp|dig|ema|ell|eru|n f|ins|rbe|ffe|esc|igu|ger|str|ken|e v|gew|han|ind|rt | ar|ieß|n h|rn |man|r i|hut|utz|d a|ls |ebe|von|lte|r o|rli|etz|tra|aus|det|hul|e i|one|nne|isc|son|sel|et |ohn|t g|sam| fa|rst|rkl|ser|iem|g v|t z|err",
    "jav": "ng |an |ang| ka|ing|kan| sa|ak |lan| la|hak| ha| pa| ma|ngg|ara|sa |abe|ne | in|n k|ant| ng|tan|nin| an|nga|ata|en |ran| ba|man|ban|ane|hi |n u|ong|ra |nth|ake|ke |thi| da|won|uwo|ung|ngs| uw|asa|gsa|ben|sab|ana|aka|beb|a k|g p|nan|nda|adi|at |awa|san|ni |dan|g k|pan|eba| be|e k|g s|ani|bas| pr|dha|aya|gan|ya |wa |di |mar|n s| wa|ta |a s|g u| na|e h|arb|a n|a b|a l|n n| ut|yan|n p|asi|g d|han|ah |g n| tu| um|as |wen|dak|rbe|dar| di|ggo|sar|mat|k h|a a|iya| un|und|eni|kab|be |art|ka |uma|ora|n b|ala|n m|ngk|rta|i h| or|gar|yat|kar|al |a m|n i|na |g b|ega|pra|ina|kak|g a|a p|tum|nya|kal|ger|gge| ta|kat|i k|ena|oni|kas| pe|dad|aga|g m|duw|k k|uta|uwe| si| ne|adh|pa |n a|go |and|i l| ke|nun|nal|ngu|uju|apa|a d|t m|i p|min|iba|er | li|anu|sak|per|ama|gay|war|pad|ggu|ha |ind|taw|ras|n l|ali|eng|awi|a u| bi|we |bad|ndu|uwa|awe|bak|ase|eh | me|neg|pri| ku|ron|ih |g t|bis|iji|i t|e p| pi|aba|isa|mba|ini|a w|g l|ika|n t|ebu|ndh|ar |sin|lak|ur |mra|men|ku | we|e s|a i|liy| ik|ayo|rib|ngl|ami|arg|nas|yom|wae|ut |kon|ae |rap|aku| te|dil|tin|rga|jud|umu| as|rak|bed|k b|il |kap|h k|jin|k a| nd|e d|i s| lu|i w|eka|mum|um |uha|ate| mi|k p|gon|eda| ti|but|n d|r k|ona|uto|tow|wat|gka|si |umr|k l|oma",
    "vie": "ng |̣c |́c | qu| th|à |nh | ng|̣i | nh|và| va|̀n |uyê| ph| ca|quy|ền|yề|̀i | ch|̀nh| tr| cu|ngư|i n|gươ|ườ|́t |ời| gi|ác| co|̣t |ó |c t|ự |n t|cá|ông| kh|ượ|ợc| tư| đư|iệ|đươ|ìn|́i | ha|có|i đ|gia| đê|pha| mo|ọi|mọ|như|n n|củ| ba|̣n |̉a |ủa|n c|̀u |̃ng|ân |ều|ất| bi|tự|hôn| vi|g t| la|n đ|đề|nhâ| ti|t c| đô|ên |bả|hiê|u c| tô|do |hân| do|ch |́ q|̀ t| na|́n |ay | hi|àn|̣ d|ới|há| đi|hay|g n| mô|ốc|uố|n v|ội|hữ|thư|́p |quô| ho|̣p |nà|ào|̀ng|̉n |ị |́ch|ôn |̀o |khô|c h|i c|c đ| hô|i v|tro| đa|́ng|mộ|i t|ột|g v|ia |̣ng|ản|ướ|ữn|̉ng|h t|hư |ện|n b|ộc|ả |là|c c|g c| đo|̉ c|n h|hà|hộ| bâ|ã |̀y | vơ|̣ t|̉i |iế| cô|t t|g đ|ức|iên| vê|viê|vớ|h v|ớc|ực|ật|tha|̉m |ron|ong|áp|g b|hươ| sư|a c|sự|̉o |ảo|h c|ể |o v|uậ|a m|ế |iá|̀ c|cho|qua|hạ|ục| mi|̀ n|phâ|c q|côn|o c|á |i h|ại| hơ|̃ h| cư|n l|bị| lu|bấ|cả|ín|h đ| xa|độ|g h|c n|c p|thu|ải|ệ | hư|́ c|o n| nư|ốn|́o |áo|xã|oà|y t|hả|tộ|̣ c| tâ|thô| du|m v|mì|ho |hứ|ệc|́ t|hợ|án|n p|cũ|ũn|iể|ối|tiê|ề |hấ|ợp|hoa|y đ|chi|o h|ở |ày|̉ t|đó|c l|về|̀ đ|i b|kha|c b| đâ|luâ|ai |̉ n|đố|ết|hự|tri|p q|nươ|dụ|hí|g q|yên|họ|́nh| ta| bă|c g|n g|thê|o t|c v|am |c m|an ",
    "ita": " di|to | de|ion| in|la |e d|di |ne | e |zio|re |le |ni |ell|one|lla|rit|a d|o d|del|itt|iri|dir| co|ti |ess|ent| al|azi|tto|te |i d|i i|ere|tà | pr|ndi|e l|ale|o a|ind|e e|e i|gni|nte|con|i e|li |a s| un|men|ogn| ne|uo | og|idu|e a|ivi|duo|vid| es|tti| ha|div| li|a p|no |all|pro|za |ato|per|sse|ser| so|i s| la| su|e p| pe|ibe|na |a l| il|ber|e n|il |ali|lib|ha |che|in |o s|e s| qu|o e|ia |e c| ri|nza|ta |nto|he |oni|o i| o |sta|o c|nel| a |o p|naz|e o|so | po|o h|gli|i u|ond|i c|ers|ame|i p|lle|un |era|ri |ver|ro |el |una|a c| ch|ert|ua |i a|ssi|rtà|a e|ei |dis|ant| l |tat|a a|ona|ual| le|ità|are|ter| ad|nit| da|pri|dei|à e|cia| st| si|nal|est|tut|ist|com|uni| ed|ono| na|sua|al |si |anz| pa| re|raz|gua|ita|res|der|soc|man|o o|ad |i o|ese|que|enz|ed | se|io |ett|on | tu|dic|à d|sia|i r|rso|oci|rio|ari|qua|ial|pre|ich|rat|ien|tra|ani|uma|se |ll |eri|a n|o n| um|do |ara|a t|zza|er |tri|att|ico|pos|sci|i l|son|nda|par|e u|fon| fo|nti|uzi|str|utt|ati|sen|int|nes|iar| i |hia|n c|sti|chi|ann|ra | eg|egu|isp|bil|ont|a r| no|rop| me|opr|ost| ma|ues|ica|sso|tal|cie|sun|lit|ore|ina|ite|tan| ra|non|gio|d a|e r|dev|i m|l i|ezz|izi| cu|nno|rà |a i|tta|ria|lia|cos|ssu|dal|l p| as|ass|opo|ve |eve",
    "tur": " ve| ha|ve |ler|lar|ir |in |hak| he|her|bir|er |an |arı|eri|ya | bi|ak |r h|eti|ın |iye|yet| ka|ası|ını| ol|tle|eya|kkı|ara|akk|etl|sın|esi|na |de |ek | ta|nda|ini| bu|ile|rın|rin|vey|ne |kla|e h|ine|ır |ere|ama|dır|n h| sa|ına|sin|e k|le | ge|mas|ınd|nın|ı v| va|lan|lma|erk|rke|nma|tin|rle| te|nin|akl|a v|da | de|let|ill|e m|ard|en |riy|aya|nı | hü| şa|e b|k v|kın|k h| me|mil|san| il|si |rdı|e d|dan|hür|var|ana|e a|kes|et |mes|şah|dir| mi|ret|rri| se|ola|ürr|irl|bu |mak| ma|mek|n e|kı |n v|n i|lik|lle| ed| hi|n b|a h| ba|nsa| iş|eli|kar| iç|ı h|ala|li |ulu|rak|evl|e i|ni |re |r ş|eme|etm|e t|ik |e s|a b|iş |n k|hai|nde|aiz| eş|izd|un |olm|hiç|zdi|ar |unm|ma | gö|ilm|lme|im |n t|tir|dil|mal|e g|i v| ko|lun|e e|mel|ket|ık |n s|ele|la |el |r v|ede|şit|ili|eşi|yla|a i| an|anı| et|rı |ahs| ya|sı |edi|siy|t v|i b|se |içi|çin|bul|ame| da|miş|may|tim|a k|tme|r b|ins|yan|nla|mle| di|eye|ger|ye |uğu|erd|din|ser| mü|mem|vle| ke|nam|ind|len|eke|es | ki|n m|it | in| ku|rşı|a s|arş| ay|eml|lek|oru|rme|kor|rde|i m| so|tür|al |lam|eni|nun| uy|ken|hsı|i i|a d|ri |dev|ün |a m|r a|mey|cak|ıyl|maz|e v|ece|ade|iç |şma|mse|te |tün|ims|kim|e y|şı |end|k g|ndi|alı| ce|lem|öğr|ütü|k i|r t| öğ|büt|anl| bü",
    "pol": " pr|nie| i |ie |pra| po|ani|raw|ia |nia|wie|go | do|ch |ego|iek|owi| ni|ści|ci |a p|do |awo| cz|ośc|ych| ma|ek |rze| na|prz| w |wo |ej | za|noś|czł|zło|eni|wa | je|łow|i p|wol|oln| lu|rod| ka| wo|lno|wsz|y c|ma |ny |każ|ażd|o d|stw|owa|dy |żdy| wy|rzy|sta|ecz| sw|dzi|i w|e p|czn|twa|na |zys|ów |szy|ub |lub|a w|est|kie|k m|wan| sp|ają| ws|e w|pow|pos|nyc|rac|spo|ać |a i|cze|sze|neg|yst|jak| ja|o p|pod|acj|ne |ńst|aro|mi | z |i i|nar| ko|obo|awa| ro|i n|jąc|zec|zne|zan|dow| ró|iej|zy |zen|nic|ony|aw |i z|czy|no |nej|o s|rów|odn|cy |ówn|odz|o w|o z|jeg|edn|o o|aki|mie|ien|kol| in|zie|bez|ami|eńs|owo|dno| ob| or| st|a s|ni |orz|o u|ym |stę|tęp|łec|jed|i k| os|w c|lwi|ez |olw|ołe|poł|cji|y w|o n|wia| be|któ|a j|zna|zyn|owe|wob|ka |wyc|owy|ji | od|aln|inn|jes|icz|h p|i s|się|a o|ją |ost|kra|st |sza|swo|war|cza|roz|y s|raz|nik|ara|ora|lud|i o|a z|zes| kr|ran|ows|ech|w p|dów|ą p|pop|a n|tki|stk|gan|zon|raj|e o|iec|i l| si|że |eka| kt| de|em |tór|ię |wni|lni|ejs|ini|odo|dni|ełn|kow|peł|a d|ron|dek|pie|udz|bod|nan|h i|dst|ieg|taw|z p|z w|zeń|god|iu |ano|lar| to|y z|a k|ale|kla|trz|zaw|ich|e i|ier|iko|dzy|chn|w z|by |ków|adz|ekl|ywa|ju |och|kor|sob|ocz|oso|u p|du |tyc|tan|ędz| mi|e s| ta|ki ",
    "gax": "aa |an |uu | ka|ni |aan|umm|ii |mma|maa| wa|ti |nam| fi|ta |tti| na|saa|fi | mi|rga|i k|a n| qa|dha|iyy|oot|in |mir|irg|raa|qab|a i|a k|kan|akk|isa|chu|amu|a f|huu|aba|kka| ta|kam|a a| is|amn|ami|att|ach|mni|yaa| bi|yuu|yyu|ee |wal|miy|waa|ga |ata|aat|tii|oo |a e|moo| ni| ee|ba | ak|ota|a h|i q| ga| dh|daa|haa|a m|ama|yoo|a b|i a|ka |kaa| hi|sum|aas|arg|man| hu| uu|u n| yo| ar| ke| ha|ees| ba|uf |i i|taa|uuf|iin|ada|a w|i f|ani|rra|na |isu| ad|i w|a u|nya|irr|da |hun|hin|ess| ho| ma|i m|und|i b|bar|ana|een|mu |is |bu |f m| ir| sa|u a|add|aad| la|i d|n h|eeg|i h|sa |hoj|abu| ya|kee|al |udh|ook|goo|ala|ira|nda|itt|gac|as |n k|mum|see|rgo|uum|ra |n t|n i|ara|muu|ums|mat|nii|sii|ssa|a d|a q| da|haw|a g|yya|asu|eef|u h|tum|biy| mo|a t|ati|eny|gam|abs|awa|roo|uma|n b|n m|u y|a s|sat|baa|gar|n a|mmo|nis| qo|nna| ku|eer| to|kko|bil|ili|lis|bir|otu|tee|ya |msa|aaf|suu|n d|jii|n w|okk|rka|gaa|ald|un |rum| ye|ame| fu|mee|yer|ero|amm|era|kun|i y|oti|tok|ant|ali|nni| am|lda|lii|n u|lee|ura|lab|aal|tan|laa|i g|ila|ddu|aru|u m|oji|gum|han|ega| se|ffa|dar|faa|ark|n y|hii|qix|gal|ndi| qi|asa|art|ef |uud| bu|jir| ji|arb|n g|chi|tam|u b|dda|bat|di |kar|lam|a l| go|bsi|sad|oka|a j|egu|u t|bee|u f|uun",
    "swh": "a k|wa |na | ya| ku|ya | na| wa|a m| ha|i y|a h|a n|ana|ki |aki|kwa| kw|hak| ka| ma|la |a w|tu |li |a u|ni |i k|a a|ila| ki|ali|a y|ati|za |ili|ifa| mt|ke | an|kil|kat|mtu|ake|ote|te |ka |ika|ma |we |a s|yo |fa |i n|ata|e k|ama|zi |amb|u a|ia |u w| yo|azi|kut|ina|i z|asi| za|o y|uhu|yak|au |ish|mba|e a|u k|hur|ha |tik|wat| au|uru| bi|sha|mu |ara|u n| as|hi | hi|ru |aif|tai|cha|ayo|a b|hal| uh| ch|yot|i h| zi|awa|chi|atu|e n|ngi|u y|mat|shi|ani|eri| am|uli|ele|sa |ja |e y|a t|oja|o k|nch|i a|a j| nc|ima| sh|ami| ta|end|any|moj|i w|ari|ham|uta|ii |iki|ra |ada|wan|wak|nay|ye |uwa| la|ti |eza|o h|iri|iwa|kuw|iwe| wo|fan| sa|she|bu |kan|ao |jam|wen|lim|i m|her|uto|ria| ja| ni|kam|di | hu|zo |a l|da |kaz|ahi|amu|wot|o w|si |dha|bin|ing|adh|a z|bil|e w|nya|kup|har|ri |ang|aka|sta|aji|ne |kus|e m|zim|ini|ind|lin|kul|agu|kuf|ita|bar|o n|uu |iyo|u h|nad|maa|mwe|ine|gin|nye|nde|dam|ta | nd|ndi|rik|asa| ba|rif|uni|nga|hii|lez|bo |azo|uzi|mbo|sil|ush|tah|wam|ibu|uba|imu| ye|esh| ut|taa|aar|wez|i s|e b| si|ala|dhi|eng|aza|tak|hir|saw|izo|kos|tok|oka|yan|a c|wal|del|i b|pat| um|ndo|zwa|mam|a i|guz|ais|eli|mai|laz|ian|aba|man|ten|zin|ba |nda|oa |u m|uku|ufu| mw|liw|aha|ndw|kuh|ua |upa| el|umi|sia",
    "sun": "an |na |eun| ka|ng | sa|ana|ang| di|ak | ha|nga|hak|un |ung|keu|anu| ba| an|nu |a b| bo| je|a h|ata|asa|jeu|ina| ng|ara|nan|awa|gan|ah |sa |a k| na|n k|kan|aha|a p|a s|ga |ban| ma|a n|ing|oga|bog|sar| pa| ku|man|a a|ha |san|ae |bae|din|g s|aga|sah|ra |tan|n s| pe|ala| si|kat|ma |per| ti|aya|sin| at| pi| te|n a|aan|lah|pan|gar|n n|u d|ta |eu |ari|kum|ngs|a m|n b|n d|ran|a d|gsa|wa |taw|k h|ama|ku |ike|n p|eba|bas| ja|al |a t|ika|at |beb|kab|pik|asi|atu|nda|una|a j|nag|e b|n h|en |g k|oh |aba|ila|rta|aku|boh|ngg|abe|art|ar |n j|di |ima|um |ola|geu|usa|aca|sak|adi|k a|udu|teu|car|tin| me| ay|h k| po|eh |u s|aka|rim|ti |sac|k n|ngt|jen|awe|ent|u a|uma|teh|law|ur |h s|dan|bar|uku|gaw|aru|ate|iba|dil|pol|aja|ieu|ere|jal|nar| hu|n t|nya|pa |are|upa|mas|ake|ut |wan| ge|kal|nus| so|ngk|ya |yan|huk| du|tun| mi|mpa|isa|lan|ura|u m|uan|ern|ena|nte|rup|tay|n m| ke|ka |han|und|us |h b|kud|ula|tut| tu| ie|hna|kaw|u k|lak|gam|mna|umn|g d| nu|yun|ri |ayu|wat| wa|eri|g n|a u|i m|u p| ta|du |dit|umu|k k|ren|mba|rik|gta| be|ali|h p|h a|eus|u n|alm|il | da|sas|ami|min|lma|ngu|nas|yat|rak|amp|mer|k j|sab|mum| ra|rua|ame|ua |ter|sal|ksa|men|kas|nge|k d|ona| bi|bis|sio|ion|nal|taa| de|uh |gal|dip|we |bad",
    "ron": " de|și | și|re | în|are|te |de |ea |ul |rep|le |ept|dre|e d| dr|ie |în |e a|ate|ptu| sa|tul| pr|or |e p| pe|la |e s|ori| la| co|lor| or|ii |rea|ce |au |tat|ați| a | ca|ent| fi|ale|ă a|a s| ar|ers|per|ice| li|uri|a d|al | re|e c|ric|nă |i s|e o|ei |tur| să|lib|con|men|ibe|ber|rso|să |tăț|sau| ac|ilo|pri|ăți|i a|i l|car|l l|ter| in|ție|că |soa|oan|ții|lă |tea|ri |a p| al|ril|e ș|ană|in |nal|pre|i î|uni|ui |se |e f|ere|i d|e î|ita| un|ert|ile|tă |a o| se|i ș|pen|ia |ele|fie|i c|a l|ace|nte|ntr|eni| că|ală| ni|ire|ă d|pro|est|a c| cu| nu|n c|lui|eri|ona| as|sal|ând|naț|ecu|i p|rin|inț| su|ră |e n| om|ici|nu |i n|oat|ări|l d| to|tor| di| na|iun| po|oci|tre|ni |ste|soc|ega|i o|gal| so| tr|ă p|a a|n m|sta|va |ă î|fi |res|rec|ulu|nic|din|sa |cla|nd | mo| ce| au|ara|lit|int|i e|ces|uie|at |rar|rel|iei|ons|e e|leg|nit|ă f| îm|a î|act|e l|ru |u d|nta|a f|ial|ra |ă c| eg|ță | fa|i f|rtă|tru|tar|ți |ă ș|ion|ntu|dep|ame|i i|reb|ect|ali|l c|eme|nde|n a|ite|ebu|bui|ât |ili|toa|dec| o |pli|văț|nt |e r|u c|ța |t î|l ș|cu |rta|cia|ane|țio|ca |ită|poa|cți|împ|bil|r ș| st|omu|ăță|țiu|rie|uma|mân| ma|ani|nța|cur|era|u a|tra|oar| ex|t s|iil|ta |rit|rot|mod|tri|riv|od |lic|rii|eze|man|înv|ne |nvă|a ș|cti",
    "hau": "da | da|in |a k|ya |an |a d|a a| ya| ko| wa| a |sa |na | ha|a s|ta |kin|wan|wa | ta| ba|a y|a h|n d|n a|iya|ko |a t|ma |ar | na|yan|ba | sa|asa| za| ma|a w|hak|ata| ka|ama|akk|i d|a m| mu|su |owa|a z|iki|a b|nci| ƙa| ci| sh|ai |kow|anc|nsa|a ƙ|a c| su|shi|ka | ku| ga|ci |ne |ani|e d|uma|‘ya|cik|kum|uwa|ana| du| ‘y|ɗan|ali|i k| yi|ada|ƙas|aka|kki|utu|n y|a n|hi | ra|mut| do| ad|tar| ɗa|nda| ab|man|a g|nan|ars|and|cin|ane|i a|yi |n k|min|sam|ke |a i|ins|yin|ki |nin|aɗa|ann|ni |tum|za |e m|ami|dam|kan|yar|en |um |n h|oka|duk|mi | ja|ewa|abi|kam|i y|dai|mat|nna|waɗ|n s|ash|ga |kok|oki|re |am |ida|sar|awa|mas|abu|uni|n j|una|ra |i b| ƙu|dun|a ‘|cew|a r|aba|ƙun|ce |e s|a ɗ|san|she|ara|li |kko|ari|n w|m n|buw|aik|u d|kar| ai|niy| ne|hal|rin|bub|zam|omi| la|rsa|ubu|han|are|aya|a l|i m|zai|ban|o n|add|n m|i s| fa|bin|r d|ake|n ‘|uns|sas|tsa|dom| ce|ans| hu|me |kiy|ƙar| am|ɗin| an|ika|jam|i w|wat|n t|yya|ame|n ƙ|abb|bay|har|din|hen|dok|yak|n b|nce|ray|gan|fa |on | ki|aid| ts|rsu| al|aye| id|n r|u k|ili|nsu|bba|aur|kka|ayu|ant|aci|dan|ukk|ayi|tun|aga|fan|unc| lo|o d|lok|sha|un |lin|kac|aɗi|fi |gam|i i|yuw|sun|aif|aja| ir|yay|imi|war| iy|riy|ace|nta|uka|o a|bat|mar|bi |sak|n i| ak|tab|afi|sab",
    "bos": " pr| i |je |rav| na|pra|na |da |ma |ima| sv|a s|nje|a p| da| po|anj|a i|vo |va |ko |ja | u |ako|o i|no | za|e s|ju |avo| im|ti |sva|ava|i p|o n|li |ili|i s|van|ost| ko|vak|ih |ne |a u| sl|nja|koj| dr| ne|jed| bi|i d|ije|stv|u s|lob|im |slo| il|bod|obo| ra|sti|pri| je| su|vje|om |a d|se |e i| ob|a n|i i| se|dru|enj| os|voj|cij|e p|a b|su |o d|uje|u p|raz|i n|a o| od|lo |u o|ova|u i|edn|i u| nj|ovo|jen|lju|ni |oje|nos|a k|ran|dje|iti|o p|aci|žav|a j|i o|e o|pre|pro|bra|nih|ji | ka|e d|jeg|og |sta| tr|tre|bud|u n|drž|u z|rža|bit|svo|ija|elj|reb|e b|mij|jem|avn|pos| bu|ka |aju| iz|ba |ve |rod|de |aro|e u|iva|a z|em |šti|ilo|eni|lje|ći |red|bil|jel|jer| ni|odn|m i|du |tva|nar|gov| sa|oji| do|tu |vim|u d| st|o k|e n|a t|za |nim| dj| sm|ući|ičn|dna|i m|oda|vno|eba|ist|nac|e k|čno|nak|ave|tiv|eđu|nov|olj|sno|ani|aln|an |nom|i b|stu|nst|eno|oj |osn|a r|ovj|nap|smi|nog|čov|oja|nju|ara|nu |dno|ans|ovi|jan|edi|m s| kr|h p|tup| op| čo|iko|jek|tvo| vj| mi|tel|vu |obr|živ|tit|o o|una|odu| mo| ov|kri|ego|din|rug|nik|rad|pod|nji|sam|sto|lja|dst|rim|ite|riv| te|m n|vol|i v|e t|vni|akv|itu|g p| ta|ašt|zaš|svi|ao |te |o s|ak |mje|a č|odr|udu|kla|i t|avi|tno|nič| vr|nic|dni|u u|ina| de|oba|od |jih|st ",
    "hrv": " pr| i |je |rav|pra|ma | na|ima| sv|na |ti |a p|nje| po|a s|anj|a i|vo |ko |da |vat|va |no | za|i s|o i|ja |avo| u | im|sva|i p| bi|e s|ju |tko|o n|li |ili|van|ava| sl|ih |ne |ost| dr|ije| ne|jed|slo| ra|u s|lob|obo| os|bod| da| ko|ova|nja|koj|i d|atk|iti| il|stv|pri|om |im | je| ob| su| ka|i i|i n|e i|vje|i u|se |dru|bit|voj|ati|i o|ćen|a o|o p|a b|a n|ući| se|enj|sti|a u|edn|dje|lo |ćav| mo|raz|u p| od|ran|ni |rod|a k|su |aro|drć|svo|ako|u i|rća|a j|mij|ji |nih|eni|e n|e o| nj|pre|pos|ćiv|oje|eno|e p|nar|oda|nim|ovo|aju|ra |ći |og |nov|iva|a d|nos|bra|bil|i b|avn|a z|jen|e d|ve |ora|tva|jel|sta|mor|u o|cij|pro|ovi|za |jer|ka |sno|ilo|jem|red|em |lju|osn|oji| iz|aci| do|lje|i m| ni|odn|nom|jeg| dj|vno|vim|elj|u z|o d|rad|o o|m i|du |uje| sa|nit|e b| st|oj |tit|a ć|dno|e u|o s|u d|eću|ani|dna|nak|nst|stu| sm|e k|u u|an |gov|nju|juć|aln|m s|tu |a r|ćov|jan|u n|o k|ist|ću |te |tvo|ans|šti|nu |ara|nap|m p|nić|olj|bud| bu|edi|ovj|i v|pod|sam|obr|tel| mi|ina|zaš|e m|ašt| vj|ona|nji|jek| ta|duć|ija| ćo|tup|h p|oja|smi|ada| op|oso|una|sob|odu|dni|rug|udu|ao |di |avi|tno|jim|itu|itk|će |odr|ave|meć|nog|din|svi| ći|kak|kla|rim|akv|elo|štv|ite|vol|jet|opć|pot|tan|ak |nic|nac|uće| sk| me|ven",
    "nld": "en |de |an | de|van| va| en| he|ing|cht|der|ng |n d|n v|et |een| ge|ech|n e|ver|rec|nde| ee| re| be|ede|er |e v|gen|den|het|ten| te| in| op|n i| ve|lij| zi|ere|eli|zij|ijk|te |oor|ht |ens|n o|and|t o|ijn|ied|ke | on|eid|op | vo|jn |id |ond|in |sch| vr|aar|n z|aan| ie|rde|rij|men|ren|ord|hei|hte| we|eft|n g|ft |n w|or |n h|eef|vri|wor| me|hee|al |t r|of |le | of|ati|g v|e b|eni| aa|lle| wo|n a|e o|nd |r h|voo| al|ege|n t|erk| da| na|t h|sta|jke|at |nat|nge|e e|end| st|om |e g|tie|n b|ste|die|e r|erw|wel|e s|r d| om|ij |dig|t e|ige|ter|ie |gel|re |jhe|t d| za|e m|ers|ijh|nig|zal|nie|d v|ns |d e|e w|e n|est|ele|bes| do|g e|che|vol|ge |eze|e d|ig |gin|dat|hap|cha|eke| di|ona|e a|lke|nst|ard| gr|tel|min| to|waa|len|elk|lin|eme|jk |n s|del|str|han|eve|gro|ich|ven|doo| wa|t v|it |ove|rin|aat|n n|wet|uit|ijd|ze | zo|ion| ov|dez|gem|met|tio|bbe|ach| ni|hed|st |all|ies|per|heb|ebb|e i|toe|es |taa|n m|nte|ien|el |nin|ale|ben|daa|sti| ma|mee|kin|pen|e h|wer|ont|iet|tig|g o|s e| er|igd|ete|ang|lan|nsc|ema|man|t g|is |beg|her|esc|bij|d o|ron|tin|nal|eer|p v|edi|erm|ite|t w|t a| hu|rwi|wij|ijs|r e|weg|js |rmi|naa|t b|app|rwe| bi|t z|ker|ame|eri|ken| an|ar | la|tre|ger|rdi|tan|eit|gde|g i|d z|oep",
    "srp": " pr| i |rav|pra| na|na |ma | po|je | sv|da |a p|ima|ja |a i|vo |nje|va |ko |anj|ti |i p| u |ako|a s| da|avo|i s|ju |ost| za|sva|o i|vak| im|e s|o n|ava| sl|nja| ko|no |ne |li |om | ne|ili| dr|u s|slo|koj|a n|obo|ih |lob|bod|im |sti|stv|a o| bi| il| ra|pri|a u|og | je|jed|e p|enj|ni |van|u p|nos|a d|iti|a k|edn|i u|pro|o d|ova| su|ran|cij|i i|sta|se | os|e i|dru| ob|i o|rod|aju|ove| de|i n| ka|aci|e o| ni| od|ovo|i d|ve | se|eni|voj|ija|su |u i|žav|avn|uje| st|red|m i|dna|a b|odi|ara|drž|ji |nov|lju|e b|rža|tva|što|u o|oja| ov|a j|odn|u u|jan|poš|jen| nj|nim|ka |ošt|du |raz|a z| iz|sno|o p|vu |u n|u d|šti|osn|e d|pre|u z|de |ave|nih|bit|aro|oji|bez|tu |gov|lje|ičn| sa|lja|svo|lo |za |vno|e n|eđu| tr|nar| me|vim|čno|oda|ani|đen|nac|nak|an |to |tre|ašt| kr|stu|nog|o k|m s|tit|aln|nom|oj |pos|e u|reb| vr|olj|dno|iko|ku |me |nik| do|ika|e k|jeg|nst|tav|em |i m|sme|o s|dni|bra|nju|šen|ovi|tan|te |avi|vol| li|zaš|ilo|rug|var|kao|ao |riv|tup|st |živ|ans|eno|čov|štv|kla|vre|bud|ena| ve|ver|odu|međ|oju|ušt| bu|kom|kri|pod|ruš|m n|i b|ba |a t|ugi|edi| mo|la |u v|kak| sm|ego|akv|o j|rad|dst|jav|del|tvo| op|nu |por|vlj|avl|m p|od |jem|oje| čo|a r|sam|i v|ere|pot|o o|šte|rem|vek|svi| on|rot|e r",
    "ckb": " he| û |ên | bi| ma|in |na | di|maf|an |ku | de| ku| ji|xwe|her| xw|iya|ya |kes|kir|rin|iri| ne|ji |bi |yên|afê|e b|de |tin|e h|iyê|ke |es |ye | we|er |di |we |ê d|i b| be|erk|ina| na| an|î û|yê |eye|î y|kî |rke|nê |diy|ete|eke|ber|hem|hey| li| ci|wek|li |n d|fê | bê| te|ne |yî | se|net|rî |tew|yek|sti|af | ki|re |yan|n b|kar|hev|e k|aza|n û|wî | ew|i h|n k|û b|î b| mi| az|dan| wî|ekî|î a|a m|zad|e d|mir|bin|est|ara|iro|nav|ser|a w|adi|rov|n h|anê|tê |ewe|be |ewl|ev |mû | ya|tî |ta |emû| yê|ast|wle| tê|n m| bo|wey|s m|bo | tu|n j|ras| da| me|din|î d|ê h|n n|n w|ing|st | ke| ge|în |ar | pê|iye|îna|bat|r k|ema|cih|ê b|wed|û m|dî |û a|vak|ê t|ekh|par| ye|vî |civ|n e|ana|î h|ê k|khe|geh|nge|ûna|fên|ane|av |î m|bik|eyê|eyî|e û| re|man|erb|a x|vê |ê m|iva|e n|hî |bûn|kê | pa|erî|jî |end| ta|ela|nên|n x|a k|ika|f û|f h|î n|ari|mî |a s|e j|eza|tên|nek| ni|ra |ehî|tiy|n a|bes|rbe|û h|rwe|zan| a |erw|ov |inê|ama|ek |nîn|bê |ovî|ike|a n| ra|riy|i d|anî|û d|e e|etê|ê x|yet|aye|ê j|tem|e t|erd|i n|eta|ibe|a g|u d|xeb|atê|i m|tu | wi|dew|mal|let|nda|ewa| ên|awa|e m|a d|mam|han|u h|a b|pêş|ere| ba|lat|ist| za|bib|uke|tuk|are|asî|rti|arî|i a|hîn| hî|edi|nûn|anû|qan| qa| hi| şe|ine|n l|mên|ûn |e a",
    "yor": "ti | ní|ó̩ | è̩|ní | lá|̩n |o̩n|é̩ |wo̩|àn | e̩|kan|an |tí | tí|tó̩| kò|ò̩ |̩tó| àw| àt|è̩ |è̩t|e̩n|bí |àti|lát|áti| gb|lè̩|s̩e| ló| ó |àwo|gbo|̩nì|n l| a | tó|í è|ra | s̩|n t|ò̩k|sí |tó |̩ka|kò̩|ìyà|o̩ | sí|ílè|orí|ni |yàn|dè |̩‐è|ì k|̩ à|èdè| or|ún |ríl|è̩‐|í à|jé̩|‐èd|àbí|̩ò̩|ò̩ò|tàb|nì |í ó|n à| tà|̩ l|jo̩| ti|̩e |̩ t| wo|nìy|í ì|ó n| jé| sì|ló |kò |n è|wó̩| bá|n n|sì | fú|̩ s|í a|rè̩|fún| pé| òm|̩ni|gbà| kí| èn|ènì|in |òmì|ìí |ba |nir|pé |ira|mìn|ìni|n o|ràn|ìgb| ìg|bá |e̩ | rè|̩ n|kí |n e|un |gba|̩ p|í ò|nú | o̩|nín|gbé|yé | ka|ínú|a k|fi | fi|mo̩|bé̩|o̩d|dò̩|̩dò|ó s|i l|̩ o|̩ ì|wà |í i|i ì|hun|bò |i ò|dá |bo̩|o̩m|̩mo|̩wó|bo |áà |̩ k|ó j|ló̩|àgb|ohu| oh| bí| ò̩|bà |ara|yìí|ogb|írà|n s|ú ì| ìb|pò̩|í k| lè|bog|i t|à t|óò |yóò|kó̩|gé̩|à l|ó̩n|rú |lè | yó|̩ ò|̩ e|a w|̩ y|ò̩r|̩ f| wà|ò l|í t|ó b|i n|ó̩w|̩gb|yí |í w|ìké|̩ a|láà|wùj|àbò|i è|ùjo|fin|é̩n|n k|í e|i j|ú à| ìk|òfi| òf| ar|i s|mìí|ìír| mì| ir|rin|náà| ná|jú |̩ b| yì|ó t|̩é̩| i |̩ m|fé̩|kàn|rí |ú è|à n|wù |s̩é|é à| mú| èt|áyé|í g|̩kó|̩dá|è̩d|àwù|è̩k| ìd|irú|í o|i o|i à|láì|í n|ípa| kú|níp| ìm|a l|ké̩|bé |i g|de |ábé|ìn |báy|̩è̩|ígb|wò̩|níg|mú |láb| àà|n f|è̩s|̩ w|ùn |i a|ayé|èyí| èy|mó̩|á è| ni|n b| wó|je̩| ìj|gbá|ò̩n|ó̩g",
    "uzn": "lar|ish|an |ga |ar | va| bi|da |va |ir | hu|iga|sh |uqu|shi|bir|quq|huq|gan| bo| ha|ini|ng |a e|r b| ta|lis|ni |ing|lik|ida|oʻl|ili|ari|nin|on |ins| in|adi|nso|son|iy | oʻ|lan| ma|dir|hi |kin|har|i b|ash| yo|boʻ| mu|dan|uqi|ila|ega|qla|r i|qig|oʻz| eg|kla|a b|qil|erk|ki | er|oli|nli|at | ol|gad|lga|rki|oki|i h|a o| qa|yok|lig|osh|igi|ib |las|n b|atl|n m| ba|ara| qi|ri | sh|iya|ala|lat|in |ham|bil|a t|a y|bos|r h|siy|n o|yat|inl|ik |a q|cha|a h| et|eti|nis|a s|til|ani|h h|i v|mas|tla|osi|asi| qo|ʻli|ati|i m|rni|im |uql|arn|ris|qar|a i|gi | da|n h|ha |sha|i t|mla|rch| xa|i o|li |hun|bar|lin|ʻz |arc|rla| bu|a m|a a| as|mum| be| tu|aro|r v|ikl|lib|taʼ|h v|tga|tib|un |lla|mda| ke|shg| to|n q|sid|n e|mat|amd|shu|hga| te|tas|ali|umk|oya|hla|ola|aml|iro|ill|tis|iri|rga|mki|irl| ya|xal|dam| de|gin|eng|rda|tar|ush|rak|ayo| eʼ| so|ten|alq| sa|ur | is|imo|r t| ki|mil| mi|era|zar|hqa|aza|k b| si|nda|hda|kat|ak |oʻr|n v|a k|or |rat|ada|ʻlg|miy|tni|i q|shq|oda|shl|bu |dav|nid|y t|ch |asl|sos|ilg|aso|n t|atn|sin|am |ti |as |ana|rin|siz|yot|lim|uni|nga|lak|n i|a u|qon|i a|h k|vla|avl|ami|dek| ja|ema|a d|na | em|ekl|gʻi|si |i e|ino| ka|uch|bor|ker| ch|lma|liy|a v|ʼti|lli|aka|muh|rig|ech|i y|uri|ror",
    "ibo": "a n|e n|ke | na|na | ọ | bụ| n |nwe|ere|ọ b|re |nye| nk|ya |la | nw| ik| ma|ye |e ọ|ike|a o|nke|a m|ụ n| ya|a ọ|ma |bụl|ụla| on| a |e i|kik|iki|ka |ony|ta |bụ |kwa| nd|a i|i n|di |a a|wa |wer|do | mm|dụ |e a|ha | ga|any| ob|ndi| ok|he |e m|e o|a e|ọ n|ite|rụ |hi |mma|ga‐|wu |ara| dị|aka|che|oke|we |o n| ih|n o|adụ|mad|obo|bod|a g|odo| ka| ez|te |hị |be |ụta|dị | an|zi | oh|a‐e|akw|gba|i m|me | ak|u n|nya|ihe|ala|ohe|ghi|ri | ọz|her|ra |weg| nt| iw| mb|ba |pụt| si|ro |oro|iwu|chi|a‐a|rị |ụ i|ụ ọ| eb|iri|ebe|ụrụ|zọ | in|a y|ezi|e ị|kpa|le |ile|ịrị|n e|kpe|mba| ha|bi |sit|e e|inw|nil|asị| en|mak|a u| ni|apụ|chị|i i|ghị|i ọ|i o|si | e |ide|o i|e y|ụ m|a s|u o|kwu|ozu|yer|ru |enw|ụ o|ọzọ|gid|hụ |n a|ahụ|nkw|sor|egh|edo|a ụ|tar|n i|toz|ị o|pa |i a| me|ime|uru|kwe| mk|tu |ama|eny|uso|de | im|ọ d|osi|hed|a d| kw|mkp|wet| ọr| ọn|obi|ọrụ| ịk| to|gas| ch|ịch|nha|ọnọ|nọd| nc| al|n ụ|ị m| us|nọ |u ọ|nch| o |eta|n u| ot|otu|sir|sịr| nh|a k|ali|o m| ag| gb|e s|ọta|nwa|ị n|lit|ega|ji |ọdụ|e k|ban|e g|ị k|esi|agb|eme|hu |ikp|zu |pe |nta|na‐|chọ|u a|a b|uch|n ọ|onw|ram|kwụ|ekọ|i e| nọ| ug|ọch|u m|gwu|a h|zụz|ugw|meg|ị e|nat|e h|dịg|o y|kpu|pụr|cha|zụ |hịc|ich| ng|ach| og|wap|wan|ịgh|uwa| di| nn|i ị",
    "ceb": "sa | sa|ng |ang| ka|an | pa|ga | ma|nga|pag| ng|a p|on |kat|a k|ug |od | ug|g m| an|ana|n s|ay |ung|ata|ngo|a m|atu|ala|san|ag |tun|g s|g k|god|d s|a s|ong|mga| mg|g p|n u|yon|a a|pan|ing|usa|tan|tag|una|aga|mat|ali|g u|han|nan| us|man|y k|ina|non|kin| na|syo|lan|a b|asa|nay|n n|a i|awa| ta|taw|gaw|nsa|a n|nas| o |ban|agp|isa|dun|was|iya| gi|asy|adu|ini|bis| ad|ili|o s| bi|g a|nah|nag|a t| ki|lin|lay|ahi|sam|al |wal| di|nal|asu| ba|ano|agt| wa|ama|yan|a u| iy|kan|him|n k|gan|ags|n a|kag| un|ya |kas|gpa|g t| su|aha|wha|agk|awh|gka|a g|kal|l n|gla|gsa|sud|gal|imo|ud |d u|ran|uka|ig |aka|aba|ika|g d|ara|ipo|ngl|g n|uns|n o|kau|i s|y s|og |uta|d n|li | si|gik|g i|mta|ot |iin| la| og|o a|ayo|ok |awo|aki|kab|aho|n m|hat|o p|gpi|a w|apa|lip|ip | hu| ga|a h|uba|na | ti|bal|gon|la |ati|wo |ad |hin|sal|gba|buh| bu| ub|uha|agb|hon|ma |nin|uga|t n|ihi| pi|may| pu|mak|ni | ni|d a|pin|abu|agh|ahu|uma|as |dil|say| in|at |ins|lak|hun|ila|mo |s s|sak|amt|o u|pod|ngp|tin|a d|but|ura|lam|aod|t s|bah|ami|aug|mal|sos|os |k s| il|tra| at|gta|bat|aan|ulo|iha|ha |n p| al|g b|lih|kar|lao|agi|amb|mah|ho |sya|ona|aya|ngb|in |inu|a l| hi|mag|iko|it |agl|mbo|oon|tar|o n|til|ghi|rab|y p| re|yal|aw |nab|osy|dan",
    "tgl": "ng |ang| pa|an |sa | sa|at | ka| ng| ma|ala|g p|apa| na|ata|pag|pan| an| at|ay |ara|ga |a p|tan|g m|mga| mg|n n|pat| ba|n a|aya|na |ama|g k|awa|kar|a k|lan|rap|gka|nga|n s|g n|aha|g b|a a| ta|agk|gan|tao|asa|aka|yan|ao |a m|may|man|kal|ing|a s|nan|aga| la|ban|ali|g a|ana|y m|kat|san|kan|g i|ong|pam|mag|a n|o a|baw|isa|wat| y |lay|g s|y k|in |ila|t t| ay|aan|o y|kas|ina|t n|ag |t p|wal|una|yon| o | it|nag|lal|tay|pin|ili|ans|ito|nsa|lah|kak|any|a i|nta|nya|to |hay|gal|mam|aba|ran|ant|agt|on |t s|agp| wa| ga|gaw|han|kap|o m|lip|ya |as |g t|hat|y n|ngk|ung|no |g l|gpa|wa |lag|gta|t m|kai|yaa|sal|ari|lin|a l|pap|ahi| is| di|ita| pi|pun|agi|ipi|mak|a b|y s|bat|yag|ags|o n|aki|tat|pah|la |gay|hin| si|di |i n|sas|iti|a t|t k|mal|ais|s n|t a|al |ipu|ika|lit|gin| ip|ano|gsa|alo|nin|uma|hal|ira|ap |ani|od |i a|gga|y p|par|tas|ig |sap|ihi|nah|ini| bu|ngi|syo|o s|nap|o p|a g| ha|uka|a h|aru|a o|mah|iba|asy|li |usa|g e|uha|ipa|mba|lam|kin|kil|duk|n o|iga| da|dai|aig|igd|gdi|pil|dig|pak| tu|d n|sam|nas|nak|ba |ad |lim|sin|buh|ri |lab|it |tag|g g|lun|ain|and|nda|pas|kab|aho|lig|nar|ula| ed|edu| ib|git|ma |mas|agb|ami|agg|gi |sar|i m|siy|g w|api|pul|iya|amb|nil|agl|sta|uli|ino|abu|aun|ayu| al|iyo",
    "hun": " sz| a |en | va|és | és|min|ek | mi| jo|jog|ind|an |nek|sze|ság| az|gy |sza|nde|ala|az |den|a v|val|ele| el|oga|mél|egy| eg|n a|ga |zab| me|zem|emé|aba|int|van|bad|tel|tet| te|ak |tás|ény|t a| ne|gye|ély|tt |n s|ben|ség|zet|lam|meg|nak|ni | se|ete|sen|agy|let|lyn|s a|yne|ra |z e|et | al|mel|kin|k j|eté|ok |tek| ki|vag|re |n m|oz |hoz|ez |s s|ett|gok|ogy| kö|mbe|es |em |nem|ely| le|ell|emb|hog|k a|atá|köz|nt | ho|yen|hez|el |z a|len|dsá|ásá|tés|ads|k m| ál| em|a s|nte|a m|szt|a t|áll|ás |y a|ogo|sem|a h|enk|nye|ese|nki|ágo|t s|lap|ame|ber|ló |k é|nyi|ban|mén|s e|i m|t m| vé|lla|ly |ébe|lat|ág |ami|on |mze|n v|emz|fel|a n|lő |a a|eki|eri|yes| cs|lle|tat|elő|nd |i é|ég |ésé|lis|yil|vet|át |kül|ért| ke|éte|rés|l a|het|szo|art|alá| ny|tar|koz| am|a j|ész|enl|elé|ól |s k|tár|s é|éle|s t|lem|sít|ges|ott| fe|n k|tko|zás|t é|kel|ja | ha|aló|zés|nlő|ése|ot |ri |lek|más|tő |vel|i j|se |ehe|tes|eve|ssá|tot|t k|olg|eze|i v|áza|leh|n e|ül |tte|os |ti |atk|zto|e a|tos|ány|ána|zte|fej|del|árs|k k|kor|ége|szá|t n| bi|zat|véd|nev|elm|éde|zer|téb|biz|rra|ife|izt|ere|at |ll |k e|ny |sel| né|ába|lt |ai |sül|ház|kif|t e| ar|leg|d a|is |i e|arr|t t|áso|it |ető|al | má|t v| bá|bár|a é|esü|lye|m l| es|nyo",
    "azj": " və|və |ər |lar| hə|in |ir | ol| hü| bi|hüq|üqu|quq|na |lər|də |hər| şə|bir|an |lik| tə|r b|mal|lma|ası|ini|r h|əxs|şəx|ən |arı|qla|a m|dir|aq |uqu|ali| ma|una|ilə|ın |yət| ya|ara|ikd|əri|ar |əsi|əti|r ş|rin|yyə|n h| az|dən|nin|ərə|tin|iyy|mək|zad| mü|sin| mə|ni |nda|ət |ndə|aza|rın|ün |ını|ə a|i v|nın|olu|qun| qa| et|ilm|lıq|ə y|ək |lmə|lə |kdi|ind|ına|olm|lun|mas|xs |sın|ə b| in|n m|q v|nə |əmi|n t|ya |da | bə|tmə|dlı|adl|bər| on|əya|ə h|sı |nun|maq|dan|inə|etm|un |ə v|rlə|n b|si |raq| va|ə m|n a|ınd|rı |anı| öz|əra|nma|n i|ama|a b|irl|ala|li |ins|bil|ik | al| di|ığı|ə d|lət|il |ələ|ə i|ıq |nı |nla|dil|müd|n v|ə e|unm|alı| sə|xsi|ə o|uq |uql|nsa|ətl| də|ili|üda|asi| he|ola|san|əni|məs| da|lan| bu|tər|həm|dır|kil|iş |u v| ki|min|eyn|mi |yin| ha|sos|heç|bu |eç | ed|kim|lığ|alq|xal| as|sia|osi|r v|q h|rə |yan|i s| əs|daf|afi| iş|ı h|fiə| ta|ə q|ıql|a q|yar|sas|lı |ill|mil|əsa|liy|tlə|siy|a h|məz|tün|ə t| is|ist|iyi| so|n ə|al |ifa|ina|lıd|ı o|ıdı|əmə|ır |ədə|ial| mi|əyi|miy|çün|n e|iya|edi| cə| bü|büt|ütü|xil|üçü|mən|adə|t v|a v|axi|dax|r a|onu| üç|seç| nə| se|man|ril|sil|əz |iə |öz |ılı|aya|qan|i t|şər|təm|ulm|rəf|məh| xa|ğın| dö| ni|sti|ild|amə|qu |nam|n o|n d|var|ad |zam|tam|təh",
    "ces": " pr| a |ní | ne|prá|ráv|ost| sv| po|na |ch |ho | na|nos|o n| ro|ání|ti |vo |neb|ávo|má |bo |ebo| má|kaž| ka|ou |ažd| za| je|dý |svo|ždý| př|a s| st|sti|á p| v |obo|vob| sp|bod| zá|ých|pro|rod|ván|ení|né |ý m|ého| by| ná|spo|ně |o p|mi |í a|ter|roz|ová|to | ja| li|áro|nár|by |jak|a p|a z|ny | vš|kte|i a|lid|ím |o v|í p|u p|mu |at | vy|odn| so| ma|a v| kt|í n|zák|li |oli|ví |kla|tní|pod|stá|en |do |t s|mí |je |em |áva| do|byl| se|být|í s|rov| k |čin| ve|ýt |í b|it |dní|vše|pol|o s| bý|tví|nýc|stn|nou|ejn|sou|ran|ci |vol|se |nes|a n|pří|eho|ným|tát|va |ním|mez|ají|i s|stv|ké |ích|ečn|žen|e s|vé |ova|své|ým |kol|du |u s|jeh|kon|ave|ech|eré|nu | ze|i v|o d|í v|hra|ids|m p|ému|ole|y s| i |maj|o z| to|aby|sta| ab|m a|pra| ta|chn| ni|že |ovn|ako|néh|len|dsk|rac|lad|chr| že|vat| os|sob|aké|i p|smí|esm|st |i n|m n|a m|lně|lní|při|bez|dy |áln|ens|zem|t v|čen|leč|kdo|ými| ji|oci|i k| s |í m|jí | či|áv |ste|och| oc|vou|ákl| vz|rav|odu|nez|inn|ský|nit|ivo|a j|u k|iál| me|ezi|ské|ven|stu|u a|tej|oln|slu|zen|í z|y b|oko|zac|níc|jin|ky |a o|řís|obe|u v|tak|věd|oje| vý|ikd|h n| od|čno|oso|ciá|h p| de|a t|ům |soc|jíc|odů|něn|adn|tup|dů |děl|jno|kéh|por|ože|hov|aci|nem|é v|rok|i j|u o|od |ího|vin|odi",
    "plt": "ny |na |ana| ny|y f|a n|sy |aha|ra |a a| fa|n n|y n|a m|an | fi|tra|any| ma|han|nan|ara|y a| am|ka |in |y m|ami|olo| ts|lon|min| mi| sy| na|a t| ol|fan| ha|a i|man|iza| iz|ina|ona|y h|aka|o a|ian|a h|reh|etr|a s|het|on |a f|ire|fah|tsy|mba| ar| hi|zan|ay |ndr|y o|ira|y t| an|ehe|o h|afa|y i|ren|ran| zo|ena|amb|dia|ala|amp|zo |ika| di|tan|y s|y z| az|ia |m p|rin|jo |n j| jo| dr|zy |ry |a d|ao |and|dre|haf|nen|mpi|rah| ka|eo |n d| ir|ho |am |rai|fa |elo|ene|oan|omb| ta| pi| ho|ava|azo|dra|itr|iny|ant|tsi|zon|asa|tsa| to|ari|ha |a k|van|n i|fia|ray| fo|mbe|ony|sa |isy|azy|o f|lal|ly |ova|lom| vo|nat|fir|sam|oto|zay|mis|ham|bel| ra|a r|ban|kan|iha|nin|a e|ary|ito| he| re| no|ita|voa|nam|fit|iar| ko|tok|isa|fot|no |otr|mah|aly|har|y v|y r| sa|o n|ain|kam|aza|n o|oka|ial|ila|ano|atr|oa | la|y l|eri|y d|ata|hev|sia|pia|its|reo| ao|pan|anj|aro|tov|nja|o s|fam|pir| as|ty |nto|oko|y k|sir|air|tin|hia|ais|mit|ba | it| eo|o t|mpa|kon|a z|a v|ity|ton|rak|era|ani|ive|mik|ati|tot|vy |hit|hoa|aho|ank|ame|ver|vah|tao|o m|ino|dy |dri|oni|ori| mo|hah|nao|koa|ato|end|n t| za|eha|nga|jak|bar|lah|mia|lna|aln|va | mb|lan| pa|aov|ama|eve|za |dro|ria|to |nar|izy|ifa|adi|via|aja| va|ind|n k|idi|fiv|rov|vel",
    "mad": "an |eng|ban|ng | sa| ka|dha| ba|ren|ak |ang| se| ha|hak| dh|na | pa|se |adh|a s|aba|n s|ara|ngg|are|ha |aga|sa | or|ore|asa|sar|ana| ma|aan|a k|ale|gi | ag|gad|a b|n o|n k|eba|ala|ra |gan| ke|dhu|ota|aja|bas|n b|ka |man|tab|dhi|beb|sab|ama|ako|abb|at |ggu|nga| ta|pan|wi |huw|uwi|eka|ata|a d|san| ot|agi|lak|hal|ba |bba|i h|ong|em |kab|g a|lem|a o| pe| na|ane|par|ngs|nge|gar|a a|tan|gsa|a p|ran|i s|k h|n p|uy |guy|ken|n a|al |ada| ga|apa|pon|e d| e |nek| an|g s|ta |kaa|on |kal|a m|ssa|ona|abe|kat| la|a e|e e|sal|ate|jan|ri |nan|lab|asi|sad|i p|e a|lan|aka|a h|ari| bi|ena|si |daj| ng|ton|e k|har|oss|gen|i k|g k|car|ase|ano|era|kon| be|nya|n d|nag|bad|ar |epo| da|mas| kl| al|n t|mat|nos|n n|ela|g e|a n|k k|uwa|adi|pad|ggi|uan|i d|ne | so|hi |sae|oan|wan|as |le |gap|ter|yat|om |kla|k a|e b|ina|ah |k s|koa|i a|ega|neg|n h|m p|aha| as| ja|abi|ma |kas|bi | mo|aon| di|one| ep|per|aya|e s|nto|te |bat|epa|nda|n e| ca|int|pam|di |ann| ra|aen|k d|amp|a t|nta|and|e p|rga|pen|yar|mpo|ste|dra|ok |oko|ila|g p|k b|i b|set|to |isa|nao|nna|n m|ett| a |bis|hid|bin|i m|nas| ho|kar|t s| po|dil| to|aju|ika|kom|arg|ant|raj|a l|das|tto|ost|mos|lae|ga |rek|idh|tad|hig|en |rny|arn|ndh|eta|adu| dr|jat|jua|gam",
    "nya": "ndi|ali|a k|a m| ku| nd|wa |na |nth| mu| al|yen|thu|se |ra |nse|hu |di |a n|la | pa|mun| wa|nga|unt| la|a u|u a|e a|ons|za | ma| lo|iye|ace|ce |a l|idw|ang| ka|kha|liy|ens|li |ala|ira|ene|pa |i n|we |e m|ana|dwa|era|hal|ulu|lo |ko |dzi| ci|yo |o w|iko|ga |a p|chi| mo|lu |o l|o m|oyo|ufu| um|moy|zik| an|ner|and|umo|ena| uf|dan|iri|ful|a a|ka |to |hit|nch| nc|a c|ito|fun|dwe| da|kuk|wac| dz|e l|a z|ape|kap|u w|e k|ere|ti |lir| za|pen|tha|aye|kut|mu |ro |ofu|ing|lid| zo|amu|o c|i m|mal|kwa|mwa|o a|eza|i p|o n|so |i d|lin|nso| mw|iro|zo | a |ati| li|i l|a d|ri |edw|kul|una|uti|lan|a b|iki|i c|alo|i k| ca|lam|o k|dza|ung|o z|mul|ulo|uni|gan|ant|nzi| na|nkh|e n|san|oli|wir|tsa|u k|ome|ca |gwi|unz|lon|dip|ipo|yan|gwe|pon|akh|uli|aku|mer|ngw|cit| po| ko|kir|mba|ukh|tsi|bun|iya|ope|kup|bvo|han| bu|pan|ame|vom|ama| ya|siy| am|rez|u n|zid|men|osa|ao |pez|i a| kw| on|u o|lac|ezo|aka|nda|hun|u d|ank|diz|ina|its|adz| kh|ne |nik|e p|o o|ku |phu|eka| un|eze|mol|ma | ad|pat|oma|ets|wez|kwe|kho|ya |izo|sa |o p|kus|oci|khu|okh|ans|awi|izi|zi |ndu|iza|no |say| si|i u|aik|jir|ats|ogw|du |mak|ukw|nji|mai|ja |sam|ika|aph|sid|isa|amb|ula|osi|haw|u m| zi|oye|lok|win|lal|ani| ba|si | yo|e o|opa|ha |map|emb",
    "qug": "una|ta | ka|na |ka |ash|cha|a k|ari|ish|kun|kta|ana|pak|hka|shk|apa|mi |ach|hay|akt|shp|man|ak | ch| ha|rin|ata|tak|lla|ita|ami|ama|aku|har| pa|pas|ayñ|yñi|ina| ma| ru|uku|sh |hpa|run|all|kuy|aka|an | tu|tuk|yta|chi|chu|a c|ñit|in |nak|a h|nka|ris|tap|kan| ki|ayt|pi | sh|pa |i k|a p|nap|kam|kaw|pay|nam|ayp|aws|iri|wsa|a s|ank|nta|uy |a t|hin|a m|ay | li|ant|lia|kay|nat|a r|shi|iak|lak|uya| wa|yuy|say|kis|y r|ypa|hun|a a| yu|n t|tam| ti|yay|n k| ya|a w|hpi|lli| al|api|yku|un |ipa|a i|iku|ayk|shu| sa|ush|pir|ich|kat|hu |huk| il|ill|kas|a y|rik|yac|a l| ku|kac|hik|tan|wan|ypi|ink|ika| ni|ila|ima|i c|yll|ayl| wi|mac|nis| ta|i y|kus|tin|n s|i p|yan|llu|la |iks|tik|kpi| pi|awa|may|lan|li | ri|kll|yas|kin|kak|aya|ksi|k h|aym|war|ura| ay|lat|ukt|i t|iya|ull|mas|sha|kir|uch|h k|nch|akp|uma|pip|han|kik|iki|riy|aki| ii|i s|n p|h m|kar|nal|y h|tac| su|nac|mak|n m|nki|k a|mam|iwa|k t|k k|i m|yma| ña|wil|asi|nmi|kap|pal|sam|pam|k i|k l|i i|pan|sum|i w| hu|his| mu|iia|mun|k m|u t|pik|was|ik |ma |hat|k r|akl|huc| im|mal|uyk|imi|n y|anc|y k|a n|iñi| iñ|wak|unk|yka| mi|iña|a u|has|ywa| ak|llp|ian|ha |tar|rmi|i a|arm|las|ati|pur|sak|ayw|hap|yar|uti|si |iyt|uri|kim| ar|san|h p|akk|iy |wat|wpa|y i|u k",
    "kin": "ra | ku| mu|se |a k|ntu|nga|tu |umu|ye |li | um|mun|unt|a n|ira| n |ere|wa |we | gu|mu |ko |a b|e n|o k|e a|a u|a a|u b|e k|ose|uli|aba|ro | ab|gom|e b|ba |ugu| ag|omb|ang| ib|eng|mba|o a|gu | ub|ama| by| bu|za |ihu|ga |e u|o b| ba|kwi|hug|ash|ren|yo |ndi|e i| ka| ak| cy|iye| bi|ora|re |gih|igi|ban|ubu| nt| kw|di |gan|a g|a m|aka|nta|aga| am|a i|ku |iro|i m|ta |ka |ago|byo|ali|and|ibi|na |uba|ili| bw|sha|cya|u m|yan|o n| ig|ese|no |obo|ana|ish|kan|sho| we|era|ya |aci|wes|ura|i a|uko|e m|n a|o i|kub|uru|hob|ber|ran|bor| im|ure|u w|wo |cir|gac|ani|bur|u a|o m|ush| no|e y| y |rwa|eke|nge|ara|wiy|uga|zo |ne |ho |bwa|yos|anz|aha|ind|mwe|teg|ege|are|ze |n i|rag|ane|u n|ge |mo |u k|bul| uk|bwo|bye|iza|age|ngo|u g|gir|ger|zir|kug|ite|bah| al| ki|uha|go |mul|ugo|n u|tan|guh|y i| ry|gar|bih|iki|atu|ha |mbe|bat|o g|akw|iby|imi|kim|ate|abo|e c|aho|o u|eye|tur|kir| ni|je |bo |ata|u u| ng|shy|a s|gek| ru|iko| bo|bos|i i| gi|nir|i n|gus|eza|nzi|i b|kur| ya|o r|ung|rez|ugi|ngi|nya| se|mat|eko|o y| in|uki| as|any|bis|ako|gaz|imw|rer|bak|ige|mug|ing|byi|kor|eme|nu | at|bit| ik|hin|ire|kar|shi|yem|yam| yi|gen|tse|ets|ihe|hak|ubi|key|rek|icy| na|bag|yer| ic|eze|awe|but|irw| ur|fit|ruk|ubw|rya|uka|afi",
    "zul": "nge|oku|lo | ng|a n|ung|nga|le |lun| no|elo|wa |la |e n|ele|ntu|gel|tu |we |ngo| um|e u|thi|uth|ke |hi |lek|ni |ezi| ku|ma |nom|o n|pha|gok|nke|onk|a u|nel|ulu|oma|o e|o l|kwe|unt|ang|lul|kul| uk|a k|eni|uku|hla| ne| wo|mun| lo|kel|ama|ath|umu|ho |ela|lwa|won|zwe|ban|elw|ule|a i| un|ana|une|lok|ing|elu|wen|aka|tho|aba| kw|gan|ko |ala|enz|o y|khe|akh|thu|u u|na |enk|kho|a e|zin|gen|i n|kun|alu|mal|lel|e k|nku|e a|eko| na|kat|lan|he |hak| ez|o a|kwa|o o|ayo|okw|kut|kub|lwe| em|yo |nzi|ane|obu| ok|eth|het|ise|so |ile|nok| ba|ben|eki|nye|ike|i k|isi| is|aph|esi|nhl|mph| ab|fan|e i|isa| ye|nen|ini|ga |zi |fut| fu|uba|ukh|ka |ant|uhl|hol|ba |and|do |kuk|abe|za |nda| ya|e w|kil|the| im|eke|a a|olo|sa |olu|ith|kuh|o u|ye |nis| in|ekh|e e| ak|i w|any|khu|eng|eli|yok|ne |no |ume|ndl|iph|amb|emp| ko|i i| le|isw|zo |a o|emi|uny|mel|eka|mth|uph|ndo|vik| yo|hlo|alo|kuf|yen|enh|o w|nay|lin|hul|ezw|ind|eze|ebe|kan|kuz|phe|kug|nez|ake|nya|wez|wam|seb|ufa|bo |din|ahl|azw|fun|yez|und|a l|li |bus|ale|ula|kuq|ola|izi|ink|i e|da |nan|ase|phi|ano|nem|hel|a y|hut|kis|kup|swa|han|ili|mbi|kuv|o k|kek|omp|pho|kol|i u|oko|izw|lon|e l| el|uke|kus|kom|ulo|zis|hun|nje|lak|u n|huk|sek|ham| ol|ani|o i|ubu|mba| am",
    "swe": " oc|och|ch |er |ing|för|tt |ar |en |ätt|nde| fö|rät|ill|et |and| rä| en| ti| de|til|het|ll |de |om |var|lig|gen| fr|ell|ska|nin|ng |ter| ha|as | in|ka |att|lle|der|sam| i |und|lla|ghe|fri|all|ens|ete|na |ler| at|ör |den| el|av | av| so|igh|r h|nva|ga |r r|env|la |tig|nsk|iga|har|t a|som|tti| ut|ion|t t|a s|nge|ns |a f|r s|män|a o| sk| si|rna|isk|an | st|är |ra | vi| al|t f| sa|a r|ati| är| me| be|n s| an|tio|nna|lan|ern|t e|med| va|ig |äns| åt|sta|ta |nat| un|kli|ten| gr|vis|äll| la|one|han|änd|t s|stä|t i|ner|ans|gru| ge|ver| må| li|lik|ihe|ers|rih|r a| re|må |sni|n f|t o| mä| na|r e|ri |ad |ent|kla|det| vä|run|rkl|da |h r|upp|dra|rin|igt|dig|n e|erk|kap|tta|ed |d f|ran|e s|tan|uta|nom|lar|gt |s f| på| om|kte|lin|r u|vid|g o|änn|erv|ika|ari|a i|lag|rvi|id |r o|s s|vil|r m|örk|ot |ndl|str|els|ro |a m|mot| mo|i o|på |r d|on |del|isn|sky|e m|ras| hä|r f|i s|a n|nad|n o|gan|tni|era|ärd|a d|täl|ber|nga|r i|enn|nd |n a| up|sin|dd |örs|je |itt|kal|n m|amt|n i|kil|lse|ski|nas|end|s e| så|inn|tat|per|t v|arj|e f|l a|rel|t b|int|tet|g a|öra|l v|kyd|ydd|rje| fa|bet|se |t l|lit|sa |när|häl|l s|ndr|nis|yck|h a|llm|lke|h f|arb|lmä|nda|bar|ckl|v s|rän|gar|tra|re |ege|r g|ara|ess|d e|vär|mt |ap ",
    "lin": "na | na| ya|ya |a m| mo|a b|to | ko| bo|li |o n| li|i n| pe|i y|a y|a n|ngo|ki | ba| ma|kok|pe |la |a l|zal|oki|ali|nso|oto|ala|ons|so |mot|a k|nyo|eng|kol|go |nge| ny|yon|o e|ang|eko|te |o y|oko|olo|ma |iko|a e|e m|e b|lik|ko |o a|ako|ong| ye|mak|ye |isa| ek|si |lo |aza|sal|ama| te|bat|o p|oyo|e n| az|a p|ani|sen|o m|ela|ta |amb|i k|ban|ni | es|yo |mi |mba|osa| oy|aka|lis|i p|eli|a t|mok|i m|ba |mbo| to| mi|isi|bok|lon|ato|ing|o b| nd|ota|bot| ez|ge |nga|eza|o t|nde|ka |bo |gel|kan|e k|lam|sa |ese|koz| po|den|ga |oba|omb|oli|yan|kop|bon|mos|e e|kob|oka|kos|bik|lin|po |e a| lo| bi|kot|‘te|ngi|sam| ‘t|omi|e y|ti |i b| el|elo|som|lok|esa|gom|ate|kam|i t|ika|a s|ata|kat|ati|wa |ope|oza|iki|i e| ka|bom|tal|o l|bek|zwa|oke|pes| se|bos|o o|ola|bak|lak|mis|omo|oso|nza| at|nda|bal|ndi|mu |mob|osu|e t|asi|bis|ase|i l|ele|sus|usu|su |ozw|and|mol|tel|lib|mbi|ami| nz|ne |ene|kel|aye|emb|yeb|nis|gi |obo|le |kum|mal|wan|a ‘|pon| ep|baz|tan|sem|nya|e l| ta|gis|opo|ana|ina|tin|obe| ti|san| ak|mab|bol|oku|u y|mat|oti|bas|ote|mib|ebi|a o|da |bi | mb|lel|tey|ibe|eta|boy|umb|e p|eni|za |be |mbe|bwa|ike|se | et|ibo|eba|ale|yok|kom| en|i a|mik|ben|i o| so|gob|bu |son|sol|sik|ime|eso|abo| as|kon|eya|mel",
    "som": " ka|ay |ka |an |uu |oo |da |yo |aha| iy|ada|aan|iyo|a i| wa| in|sha| ah| u |a a| qo|ama| la|hay|ga |ma |aad| dh| xa|ah |qof|in | da|a d|aa |iya|a s|a w| si| oo|isa|yah|eey|xaq|ku | le|lee| ku|u l|la |taa| ma|q u|dha|y i|ta |aq |eya|sta|ast|a k|of |ha |u x|kas|wux| wu|doo|sa |ara|wax|uxu| am|xuu|inu|nuu|a x|iis|ala|a q|ro |maa|o a| qa|nay|o i| sh| aa|kal|loo| lo|le |a u| xo| xu|o x|f k| ba|ana|o d| uu|iga|a l|yad|dii|yaa|si |a m|gu |ale|u d|ash|ima|adk|do |aas| ca|o m|lag|san|dka|xor|adi|add| so|o k| is|lo | mi|aqa|na | fa|soo|baa| he|kar|mid|dad|rka|had|iin|a o|aro|ado|aar|u k|qaa| ha|ad |nta|o h|har|axa|quu| sa|n k| ay|mad|u s| ga|eed|aga|dda|hii|aal|haa|n l|daa|xuq|o q|o s|uqu|uuq|aya|i k|hel|id |n i| ee|nka| ho|ina|waa|dan|nim|elo|agu|ihi|naa|mar|ark|saa|riy|rri|qda|uqd| bu|ax |a h|o w|ya |ays|gga|ee |ank| no|n s|oon|u h|n a|ab |haq|iri|o l| gu|uur|lka|laa|u a|ida|int|lad|aam|ood|ofk|dhi|dah|orr|eli| xi|ysa|arc|rci|to |yih|ool|kii|h q|a f| ug|ayn|asa| ge|sho|n x|siy|ido|a g|gel|ami|hoo|i a|jee|n q|agg|al | di| ta|e u|o u| ji|goo|a c|sag|alk|aba|sig| mu|caa|aqo|u q|ooc|oob|bar|ii |ra |a b|ago|xir|aaq| ci|dal|oba|mo |iir|hor|fal|qan| du|dar|ari|uma|d k|ban|y d|qar|ugu| ya|xay|a j",
    "hms": "ang|gd |ngd|ib | na|nan|ex |id | ji|ad |eb |nl |b n|d n| li|ud |jid| le|leb| ga|ot |anl|aot|d g|l l|b l| me|ob |x n|gs |ngs|mex|nd |d d| ne|jan|ul | ni|nja| nj| gu| zh|lib|l n|ong| gh|gao|b j|b g|nb |l g|end|gan| ad| je|jex|ngb|gb |han|el | sh| da|ub |d j|d l|t n| nh|nha|b m|is |d z|x g| ya|oul|l j| wu|she|il |nex| ch|b y|d s|gue|gho|uel|wud|d y| gi|d b|hob|nis|s g| zi| yo|lie|es |nx |it |aob|gia|ies| de|eib|you| ba| hu|ian|zib|d m|s j|oud|b d|chu|ol |ut | do|t j|nen|hud|at |s n|hen|iad|ab |enl| go|dao| mi|t g|zha|b z|enb|x j| ze|eit|hei|d c|nt |b s| se|al | xi|inl|hao| re| fa|d h|gua|yad|ren| ho|anb|gx |ngx|ix |nib|x z|and|b h|b w|fal| xa|d x|t l|x m|don|gou|bao|ant|s z|had|d p|yan|anx|l d|zhe|hib| pu|ox | du|hui|sen|uib|uan|lil|dan|s m| di| we|gha|xin|b x|od |zhi|pud| ju| ng|oub|xan| ge|t z|hub|t h|hol|t m|jil|hea|x l| ma|eud|jul|enx|l z|l s|b a| lo| he|nga|d r|zen| yi|did|hon|zho|gt |heb|ngt|os |d a|s l|aos| si|dei|dud|b b|geu|wei|d w|x c|x b|d k|dou|l h|lou| bi|x a|x d|b c| sa|s a| bo|eut|blo| bl|nia|lol|t w|bad|aod| qi|ax |deb| ja|eab| nd|x s|can|pao| pa|gl |ngl|che|sat|s y|l m|t s|b f|heu|s w| to|lia| ca|aox|unb|ghu|ux | cu|d f|inb|iel| pi|jib|t p|x x|zei|eul|l t|l y|min|dad",
    "ilo": "ti |iti|an |nga|ga | ng| pa| it|en | ka| ke| ma|ana| a | ti|pan|ken|agi|ang|a n|a k|aya|gan|n a|int|lin|ali|n t|a m|dag|git|a a|i p|teg|a p| na|nte|man|awa|kal|da |ng |ega|ada|way|nag|n i| da|na |i k|sa |n k|ysa|n n|no |a i|al |add|aba| me|i a|eys|nna|dda|ngg|mey| sa|pag|ann|ya |gal| ba|mai| tu|gga|kad|i s|yan|ung|nak|tun|wen|aan|nan|aka| ad|enn| ag|asa| we|yaw|i n|wan|nno|ata| ta|l m|i t|ami|a t| si|ong|apa|kas|li |i m|ina| an|aki|ay |n d|ala|gpa|a s|g k|ara|et |n p|at |ili|eng|mak|ika|ama|dad|nai|g i|ipa|in | aw|toy|oy |ao |yon|ag |on |aen|ta |ani|ily|bab|tao|ket|lya|sin|aik| ki|bal|oma|agp|ngi|a d|y n|iwa|o k|kin|naa|uma|daa|o t|gil|bae|i i|g a|mil| am| um|aga|kab|pad|ram|ags|syo|ar |ida|yto|i b|gim|sab|ino|n w| wa| de|a b|nia|dey|n m|o n|min|nom|asi|tan|aar|eg |agt|san|pap|eyt|iam|i e|saa|sal|pam|bag|nat|ak |sap|ed |gsa|lak|t n|ari|i u| gi|o p|nay|kan|t k|sia|aw |g n|day|i l|kit|uka|lan|i d|aib|pak|imo|y a|ias|mon|ma | li|den|i g|to |dum|sta|apu|o i|ubo|ged|lub|agb|pul|bia|i w|ita|asy|mid|umi|abi|akd|kar|kap|kai| ar|gin|kni| id|ban|bas|ad |bon|agk|nib|o m|ibi|ing|ran|kda|din|abs|iba|akn|nnu|t i|isu|o a|aip|as |inn|sar| la|maa|nto|amm|idi|g t|ulo|lal|bsa|waw|kip|w k|ura|d n|y i",
    "uig": "ish| he|ini|ing|nin|gha|ng |ili| we|we |sh |in | bo|quq|oqu|ni |hoq| ho|ush|shi|lik|qil|bol|shq|en |lis|qa |hqa|n b|hem| qi|ki |dem|iy | ad|ade|igh|e a|em |han|liq|et |ge |uq |nda|din| te| bi|idi|let|qan|nli|ige|ash|tin|ha |kin|iki|her|de | er| ba|and|iti|olu|an | dö|döl|aq |luq| ya|me |lus|öle|mme|emm| qa|daq|rki|lgh|erq|erk|shk|esh|rqa|iq |uqi|ile|rim|i w|er |ik |yak|aki|ara|a h| be|men| ar|du |shu|uql|hri|hi |qlu|q h|inl|lar|da |i b|ime| as|ler|etl|nis| öz|ehr|lin|e q|ar |ila| mu|len| me|qi |asi|beh|a b|ayd|q a|bir|bil| sh|che|rli|ke |bar|hke|yet|éli|shl|tni|u h|ek |may|e b| ké|h h| ig|ydu|isi|ali|hli|k h| qo|iri|emd|ari|e h|ida|e t|tle|rni| al|siy|lid|olm|iye|anl| tu|iqi|lma|ip |mde|e e|tur|a i|uru|i k|raw|hu |mus|kil| is|i a|ir |éti|r b|özi|ris|asa|i h|sas| je|he | ch|qig|bas|n q|alg|ett|les| xi|tid| él|tes|ti |awa|ima|nun|a a| xe| bu|hil|n h| xa|adi|dig|anu|uni|mni| sa|arl|rek|ére| hö|kér| ji|min|i q|tis|rqi| iy|elq|xel|p q| qe|y i|i s|lig| ma|iya|i y|siz|ani| ki|qti| de|q w|emn|met|jin|niy|i i|tim|irl| ti|rin|éri|i d|ati|si |tew|i t|tli|eli|e m|rus|oli|ami|gen|ide|ina|chi|dil|nay|ken|ern|n w| to|ayi| ij|elg|she|tti|arq|hek|e i|n a|zin|r a|ijt|g b|atn|qar|his|uch|lim|hki|dik",
    "hat": "ou |an | li|on |wa |yon| po|li |pou|te | yo|oun| mo|un |mou|ak | na|en |n p|nan|tou|syo| dw| to|yo | fè|dwa| ak| ki|ki | pa| sa|out| la| ko| ge|ut |n s|gen| de|se |asy|èt |i p|n d| a | so|n l|a a|fè |n k| se|pa |e d|u l| re|ite|sa | ch|kon|n n|e l|t p|ni |cha|a p|nn |ans|pi |t m| ka| an|nm |fèt|i s|son|man| me|n m|n a|e p|swa|sou|e k|hak|òt |n y|men|i l|epi| pe|ote|san| ep|i k| si|yen|eyi|a l| ap|i a|yi |pey|je |n t|e a|k m|e s| ni|lib|e n|i t|lit|ran|lè |enn|al |a s| pr|a f|ns | lò|ap |lòt|enm|k l|n e|t l|kla|anm|e y|a k| ma|e t|ay |i m|ali| lè|è a|ye |a y|ant| os| ba|i g| tè|aso|u t|a n| pw|ras| pè|n f|nas|ka |n g|osw| ta|dek|i d|pwo|e m| di| vi|la |i n|u s|sos|bli| te|o t| tr|lwa|ète|a t|le |u y|i f|tan|a c|lar|a m|ete|ara|t k| pi|ibè|bèt|re |osy|de |ati|ke |res|tis|i y|tè |nen| fa|ekl|ze |nal|ons|ksy|ini|che| le|e r|a d| en|aye|he |o p|alw| kò|lal| no|esp|a g|ava|kou|las|way|u f|isy| za| ok|oke|kal|ken|sye|ta |onn|k k|nje|pra|van|esi|pès|kot|ret|sya|n v|lek|jan|ik |a b|eks|wot|è n|di |òl |tra|u k|i r|nou| as|k a|u d|ist|èso|ib | ne|iti|ti |is |y a|des|è l|a r|ont| ke|nsa|pat|rit|sit|pòt|ona|ab |è s| sw|ond|ide| ja|rav|t a|ri |bon|viv| sè|pre|vay|k p|l l|kòm|i o| ra|era|fan|dev",
    "aka": "sɛ |a a| sɛ|ne |ra |a n| wɔ| a |ara|an |eɛ |no | ne| bi| no| as|iar|bia|yɛ |mu |aa | an|ɛ s|e a|ma | ho|bi |man|deɛ| mu|ho |ɛ a|na |a ɛ| ob|obi|e n|a b|n a|so |o n|pa |ama|ɛ o|o a|ipa|nip|ɛ n|naa| na|a w|ana| so| ad| nn|ɛ ɔ|ɛde|asɛ|kwa| on|oni|wan| am|a ɔ|sɛd|wɔ | ah|ɛyɛ| ny|oɔ | n |mma|i a| mm|nni| kw|ie |wɔn|ɛ w|de | ɛy| ba|ase|ɔ n|o b|i m|ɔ a|uo |n n|a m|o s|iri| yi|ni |e s|nyi|di |u n|a o|aho| de|tum| ɛn|ɔn |nya|i n|ɔma|e m|adw| yɛ|umi|die|mi |ɛ ɛ|o k| ab|ɛm |a s| ma|nam| ɔm| ɛs|yin| at| bɔ|o d|ina|pɛ |sɛm|ua |n s|bɔ |adi|ya |e h|aso|mar|ani|kuo|rɛ |fa |a k|ɔde|a h|ba |n b|re |uma|wum|om |ɔ h|m n|yi |u a| sa|se |dwu|ɔ b| nt|m a|erɛ| kɔ|a y|orɔ| nk| bɛ| ɔd|ten|rɔ |hyɛ|saa|ka |ɛ b|e b|i s|ade|am |nka|kor|i ɛ|ene|ena| ns|ban|ɛns| ku|ɛsɛ|ane|nsɛ|fof|ɛɛ | fi|gye|ɔtu| di|ano|i k|o m| ɔt| ko|yɛɛ|bir| ak|im |kye| pɛ|a d|yie|ko |nti|i b|ete|ofo|amm|ye |ri |foɔ|kɔ |bom|abo|ɔ s|ɔne| ɛb|soɔ|for|isɛ|m k|asa|nod|ɛ m|fir|ti | da|e y|sua| be|nii|seɛ|wa |ber| aw|dwe|n f| fo|o ɛ|i h|u b|ɔ m| mf|hɔ |kab|wɛ |to |rib|hwɛ|ibi| dw|dis|nso|ans|tir|u ɛ| ti| hɔ|sa |e o| tu|odi|ɛ y|ia |ofa| ɔn|o w|ɛbɛ|aba| ka|ii |wen|ɛsi|m m|sia|ada|yer|ian|da |set| gy|dua|i d|som|mfa|ɔ w| af|i y|any|ora|rim|wɔd|dwa|nsi",
    "hil": "nga|ang| ka|ga |ng | sa|an |sa | ng| pa| ma|ag |on |san|pag| an|ung|kag|a p|n s|a k|n n|a m|ata|kat| ta|gan|g p|ay |tar|g k|ags|run|ala|aru|gsa|tag|a s|g m| mg|mga|n k|a t|od |kon|g s|a n|ing|a i|man|g t|agp|tan| si|n a|y k|mag|gpa|may|hil|pan|ya |ahi|la |g a|sin|gin|ina|aya|ana|ili| pu|han|g i|yon|nan| in|way|uko|gka| gi|aha| uk|ilw|lwa|asa|apa|kas|syo|at |ban|lin|iya|kah|n p| na|o n|lan|a a|in |ngk|g n|ini|aba|pat|pun|a g|ali|o s| iy|yan|agt|tao|ngs|gba|kab|wal|ngo|al |nag|agk|o m|ni |i s|aga|ano| wa|isa|abu|kal|a h|dap|ong|a d|mat| tu|gso|no |aho|aki|sod|agb| da|asy|ila|d k|pas| hi|agh|d s|n m|na |lal|yo |di |til| la|o k|s n|non|gay|sal|a b|god|ao |ati|aan|uha| is|ka |aka|asu|ngb|o a|ama|ato|atu|uga|paa|but|una|n u|bah|uan|iba| di| ba|pah|bat| du|ulo|os |y s|nah| ko|aag|agi|sil|gi |i m|hay|yag|gon|y n|sta|n d|ot |oha|tun|ida| pr| su|a l|uta|m s| al|do |uli|sug|n t|as |lon|sul|og |pam|pro|him|gua|alo|lig| bi|bis|asi|ula|ton|ksy|gtu|a e|k s| ib|n b|maa|ugu|ko |lib|ron|i a|hi |hin|tek|lab|abi|ika|mak|bot|aoh|ok | hu|ghi|ind|ote|tok|i n|t n|g e|eks|dal|uma|ubo|tum|hat|to |ado|kin| ed|rot|ho |ndi|inu|ibu|y a|nta|ad |gko|lah|duk|abo|iko|nda|aro|gal|mo |g o| bu|int| o |n o|aay|da |gsu",
    "sna": "wa |a k|ana|ro |na | ku| mu|nhu|dze|hu |a m| zv|mun|oku|chi|a n|aka|dzi|ka |zer|ero| ch|che|se |unh|odz|rwa|ra |kod|zvi| ne| pa|kan| we| dz| no|ika|va |iri| an|kut|nyi|o y|yik|van|nek|ese|eko|zva|idz|e a| ka|ane|ano|ngu|eku|cha|ung| yo|ri |ake|ke |ach|udz|iro|a z|u w| va|ira|wes|ang|ech|nge|i p|eng|yok|nok|edz|o i|irw|ani|ino|uva|ich|nga|ti |zir|anh|rir|ko |dza|o n|wan|wo |tan|sun|ipi|dzw|eny|asi|hen|zve|kur|vak|a p|sha|unu|zwa|ita|kwa|e k|rud|nun|uru|guk|a c|a d| ya|a y|bat|pas|ezv|ta |e n|uti| kw|o k|o c|o m|ara| ma|si |ga |uko|ata|ose|ema|dzo|uch|hip|kuv|no |rus|hec|omu|i z|wak|o r|kus|kwe|ere|re | rw| po|o a|mwe|yak|mo |usu|isi|za |sa |e z|uta|gar| in|hin|nem|pac|kuc|we |ete| ye|twa|pos|o d|a i|hur|get|ari|ong|pan|erw|uka|rwo|vo | ak|tem|zo |emu|emo|oru| ha|uit|wen|uye|kui| uy|vin|hak|kub|i m|a a|kud| se| ko|yo |and|da |nor|sin|uba|a s|a u| ic|zvo|mut|mat|nez|e m|a w|adz|ura|eva|ava|pi |a r|era|ute|oko|vis| iy|ha |u a|han|cho|aru|asa|fan|aan|pir|ina|guv|ush|ton| hu|uny|enz|ran|yor|ted|ait|hek| ny|uri|hok|nen|osh| ac|ngi|muk|ngo|o z|azv|kun|nid|uma|i h|vem|a h|mir|usa|o p|i n|a v|i k|amb|zan|nza|kuz|zi |kak|ing|u v|ngw|mum|mba|nir|sar|ewo|e p|uwa|vic|i i|gwa|aga|ama|go |yew|pam",
    "xho": "lo |lun|oku|nge|elo|ntu|tu |e n|ele| ku|nye|ye |nga|ung|la | ng|lek|a n|o n|yo |o l|e u|nel|gel|a k|ko |ho |ulu|ke | ne| na|lul|we |le |wa |ngo| kw|ule|kub| no|a u|onk| um|nke|o e| lo|ela|kun|ama|any|unt|ang|eko|uba|elu|ezi|mnt| wo|a i|eyo|alu|lel|umn|lwa|kwe|olu|ba | uk|kuk|won|ukh|une|uku|gok|nok|enz| un|khu| ok|the|e k|zwe|kan|eki|aph|ane|uny|ile|o z|aku|ley|lok| ez|het|eth|ath|oka|pha|sel|ala|o y|kul|akh|kil|enk| in|esi|o k| yo|use|hul|u u|tho|obu|wen|ana|nku|khe|o o|e a|na |kho|ban|a e|ise|ent|gan|uth|ni |kel| zo|he |izw|o w|hi |elw|nam|ing|eli|fun|za |lwe|eng|ya |kwa|fan|isa|o a|ndl|ntl|ayo|eni|gen|hus|uhl|iph|tha|nzi|isw|sa |phi|aba|ben|und|ume|thi|ha |alo|ka |ink|hla|lal|wan|i k| lw|i n|bel| ba|o u|azi|e o|swa|ngu|bal|pho| ab|man|kut|emf|e i|mfa|a a|e e|een|int|uph|eka|ebe|seb|lan|nee|zi |o i|mal|sha|sek|dle|ziz|mth|nen|zel| se|okw|tya|ike|lin|tla|ene|sis|ima|ase|yal|ubu| ak|ant|sen|olo|wak| ko|a o|mfu|ezo|sid|nay|oko| ub|ulo|zo |do |isi|wez|iso|han|nte| ph|zim| ya|ga |li | le|iba|ham|ube|kup|aza|jik| ul| en|eem|phu| ol|and|imf| es|o s| im|kuf|u k|kwi|nak|ma |nan|ety|kuh|kus|yol| am|hel|idi| so|lis| nj|nje|jen|tsh|aka|zin|kuz|‐ji|no |ufu|ale|ong| el|bo |a y|e l|men|yen|lum",
    "min": "an |ak |ang| ma| da| ka| sa|ara| ha|yo |nyo|hak| ba|ran|dan|man|nan|ng | pa| di|kan|ura| na|ata|asa|ok |nda|ala| pu|pun|uak|ntu|n d|k m| ti|ah |o h|n s|k u|n k| ur| un|tua|n b|and|unt| ta|uny|n p|tio|iok|ama|pan|ek |ban|jo |n m|k h|k d|ado|nga|aan|g p|tan|aka|ind|at |dak|dap|o p|tau|pek|uan| at|amo|mar|ape|au |kat|mo |sas|ari|asi|di |o s|ia |ngg|bas|ika|sam|am |lia|o d|san|gan|sia|tar|n n| jo| su|anu|lam|gar|o t| in|par|sua|dek|sar|k s|ri |o m|ana|bat|asu|ko |ai | la|ant|dal|lak|aga|alu|iah|o u|n a|tu |k a|adi|rad|i m|mal|dok|usi|aku|i d|k k|al |aro|eka|neg|ega|ato|to | ne|mam|o b|eba|ian|beb|n u|um |si |aba|rat|uah|ro |mas|ila|a d|ali|uka|ard|kam|ti |atu|nus|dar|ami|n t|sa |in |amp|kal|car|lan|aha|kab|so |rde|un |i k|gsa|das|ngs|aca|yar|ka |ati|ar | an|uku|ras| ko|sya|mat|k n|aya|nta|lo |any|sur|kaa|dil|kar|o a|u d|k t|pam|dia|ra |iba|lai|i t|lah| bu|mpa|kum|abe|n h|ili|nny| as|u p|aki|amb|sac|as |k b|h d|uli|ajo|a n|raj|n i|dua|ndu|k p|i p|itu|lin|han|huk|o k|rik|a b| li|ik |ggu|jam|bai|a a|i a|nia| ad|i j| hu|gam|sal|aso|ngk|sad|apa|ann| mu|ony|dik|bad|ain|did|min|l d|ada|bul|rga|tin|ga |ani|alo| de|arg|ahn|sio|hny|n l|sti|awa|uju|per|bak| pe|tik|ans| pi|a s| um|bag|ndi|anj|mba",
    "afr": "ie |die|en | di| en|an |ing|ng |van| va|te |e v|reg| re|n d| ge|ens|et |e r|e e| te| be|le |ver|een| in|ke | ve| he|eg |het|lke|lik|n h|de |nie|aan|t d|id |men| vr|nde|eid|e o| aa|in |of |der|hei|om |g v| op| ni|e b| el|al |and|elk|er | me|ord|e w|g t| to| of|ers| we| sa| vo|ot |erk|n v|vry|ge |kee|asi|tot| wa|sie|ere| om|aar|sal|dig|wor|egt|gte|rdi|rd |at |nd |e s|ede|ige| de| ’n|n a|eni| wo|e g| on|n s|’n |e t|erd|ns |oor|bes|ond|se |ska|aak|nig|lle|yhe|ryh|is |eli|esk|ien|sta|vol|ele|e m| vi|ik |r d|vir|edi|kap|g e|ir |es |sy |ang|din| st|ewe|gem|gel|g o| is|el |e i|op |ker|ak |uit|ike|nse|hie|ur |eur| al|e a|nas|e n|nge|ier|n o|wer|e d|ap | hu|ale|rin| hi|eme|deu|min|wat|n e|s o| as| so|as |e h|del|d v|ter|ten|gin|end|kin|it | da| sy|per|re |n w|ges|wet|ger|e k|oed|s v|nte|s e|ona|nal|waa|d t|ees|soo| ma|d s|ies|tel|ema|d e|red|ite| na|ske|ely|lyk|ren|nsk|d o|oon|t e|eke|esi|ese|eri|hul| gr|ig |sio|man|rde|ion|n b|n g|voo|hed|ind|tee| pe|rso|t v|s d|all|n t|rse|n i|eem|d w|ort|ndi|daa|maa|t g|erm|ont|ent|ans|ame|yke|ari|n m|lan|voe|n ’|nli|rkl|r m|sia|ods|ard|iem|g s|wee|r e|l g|taa|sek|bar|gti|n n|lin|sen|t o|t a|raa|ene|opv|pvo|ete| ty|arb| sl|igh|dee|g a|str|nsl|sel|ern|ste",
    "lua": "ne |wa | ne|a m| ku|a k| mu|di | bu|a b| di|e b|tu |nga|bwa|ntu| bw|udi|a d|e m|i b| ba| ma|shi|adi|u b|a n|la |ons|mun|i n|ung|nsu|ga |yi |ya |na |unt| dy|idi|e k|buk|mu |ika|esh|su |u m|ku |nde|any| bi|lu |nyi|end|yon|dik|ba | ci| ka|ang|u n|u y| mw|ka |i m| yo|we |oke|tun|de |kes|hi |kok|mwa| kw|e n|ban|dya|sha|u d|ken|kwa|ji |ha |wen|dit| ud|a a| an|mwe|itu| pa|le | a | wa|nji|kan|kum|ibw|bwe|a c|ant|ena|yen|mba|did|e d|ala|u u|ish|mak|bul|i a|nda|enj|u a|ila|pa |ako|ans|uke|ana|nso|amb|hin|umw|kal|uko|i k|bad|aka|ela|ele|u w|u k|du |ja |bu | mi|ind|ndu|kwi| ns|mbu|atu|bud|dil|ile|sun|eng|ula|enz|nan|nsh|kad|alu| cy|bis|kud|lon|u c|gan|dib|da |dye|bid| by|ukw|i d|aa |ngu|a p|sam|isa| aa|ilu| na|aba|lel|ye |dim|cya|kub|so |ond|kus|mat|nge|e c| bo|aku|bak|mus|ta |umb|ulo|elu|man|iki|mon|ngi|abu|mud|kuk|omb| mo|und|diy|kwe|umu|mal| ke|ush|gil|uba|imu|dis|wil|wu |san|gad|uka|bon|ma |aci|mik|wik| me|pan|iku|nza|ben|ulu|ifu|iba|kak|ata|som|ong|e a|apa| tu|o b|umo|bya|utu|uja|yan| be|ke |akw|ale|ilo|uku|cil|tup|kul|cik|kup|upe|bel|amw|ona| um|iko|awu|and|za |ike|a u|ima|muk| ya|mum|me |map|ita|iye|ole|lum|wab|ane| lu|nu |kis|mbe|kab|ine|bum|lam|pet| ad|fun|ama| mb|isu|upa|ame|u p|ubi",
    "fin": "en |ise|ja |ist| ja|on |ta |sta|an |n j|ais|sen|n o|keu|ike|oik|lis| va|ell|lla|n t|uks| on|ksi| oi|n k| ka|aan|een|la |lli|kai|a j| ta|sa |in |mis| jo|a o|ään|än |sel|n s|kse|a t|a k|tai|us |tta|ans|ssa|kun|den|tä |eus|nen|kan|nsa|apa|all|est| se|eis|ill|ien|see|taa| yh|jok|n y|vap|a v|ttä|oka|n v|ai |itt|aa |aik|ett|tuk|ti |ust| ku|isi|stä|ses| tä| tu|lai|n p|sti|ast|n e|n m|tää|sia|unn|ä j|ude|ä o|ste|si |tei|ine|per|a s|ia |kä |äne| mi|maa| pe|a p|ess|a m|ain|ämä|tam|yht| ju|jul|yks|hän|ä t| hä|utt|ide|et |llä|val|sek|stu|n a|lä |ami|hmi| ke|ikk|lle|iin|sä |euk|täm|ihm|tee| ih|lta|pau| sa|isk|mää|ois|un |tav|ten|dis|hte|n h|iss|ssä|a h|ava| ma|a y| ei| te| si| ol|ekä|sty|alt|toi|att|oll|tet| jä| ra|vat| mu|iel| to|mai|sal|isu|a a|kki|at |suu|n l|väl|ää |uli|tun|tie|eru| yk|etu|vaa|rus|muk| he|ei |a e|kie|sku|eid|iit| su|nna|sil|oma|min| yl|lin|aut|uut|sko| ko|tti|le |sie|kaa|a r| ri|sii|nno|eli|tur|saa|aat|lei|oli|na | la|oon|urv|lma|rva|ite|mie|vas|ä m| ed|tus|iaa|itä|ä v|uol|yle| al|lit|suo|ama|joi|unt|ute|i o|tyk|n r|ali|lii|nee|paa|avi|omi|oit|jen|kää|voi|yhd|ä k| ki|eet|eks| sy|ity|ilö|ilm|oim|ole|sit|ita|uom|vai|usk|ala|hen|ope| pu|auk|pet|oja|i s|rii|uud|hdi|äli|va | om",
    "run": "ra |we |wa | mu|e a|se | n |a k|ira|ntu|tu | ku| um|ko |a i|mu |iri|mun|hir|ye |unt|ing|ash|ere|shi|a n|umu|zwa| bi|gu |ege|a a|za |teg|ama|e k|go |uba|aba|ngo|ora|o a|ish| ba| ar|ung|a m| we|e n|na |sho|ese|nga| ab|e m|mwe|ugu| kw|ndi| gu|ate|kwi|wes|riz|ger|u w| at|di |gih|iza|n u|ngi|ban|yo |ka |e b|a b| am| ca|ara|e i|obo|hob|ri |u b|can|nke|ro |bor| in|bah|ahi|ezw|a u|gir|ke |igi|iki|iwe|rez|ihu|hug|aku|ari|ang|a g|ank|ose|u n|o n|rwa|kan| ak|nta|and|ngu| vy|aka|n i|ran| nt| ub|kun|ata|i n|kur|ana|e u| ko|gin|nye|re | ka|any|ta |uko|amw|iye| zi|ga |ite| ib|aha| ng|era|o b|ako|o i| bu|o k|o u|o z| ig|o m|ho |mak|sha| as| iv|ivy|n a|i b|izw|o y| uk|ubu|aga|ba |kir|vyi|aho| is|nya|gan|uri| it| im|u m|kub|rik|hin|guk|ene|bat|nge|jwe|imi| y |vyo|imw|ani|kug|u a|ina|gek|ham|i i|e c|ze |ush|e y|uru|bur|amb|ibi|agi|uza|zi |eye|u g|gus|i a| nk|no |abi|ha |rah|ber|eme|ras|ura|kiz|ne |tun|ron| zu|ma |gen|wo |zub|w i|kor|zin|wub|ind| gi|y i|ugi|je |iro|mbe| mw|bak| ma|ryo|eka|mat| ic|onk|a z| bo|ika|eko|ihe|ukw|wir|bwa| ry| ha|bwo| ag|umw|yiw|tse| ya|he |eng| ki|nka|bir|ant|aro|gis|ury|twa| yo|bik|rek|ni | ah| bw|uro|mw |tan|i y|nde|ejw| no|zam|puz|ku |y a|a c|bih|ya |mur|utu|eny|uki|bos",
    "slk": " pr| a |prá|ráv| po|ie |ch |ost| ro|ho | na|vo |ani|na | ne|nos|ažd|kto|kaž| ka|má |né |ávo|om | má|ebo|ti | v | al|ale|leb|bo | je| za|ých|o n|ždý|dý |ia | sl|mi |ova|sti|nie|van|to |eni|ne |áva|lob|ého|slo|rod|tor|rov| sp| zá|á p|o v|a p| kt|ý m| sv|voj|bod|obo|nia| ná| vy|ej |je |ať |o p|a v|a s|áro|a z| sa| ma|a n|e a|e s|mu |mie|kla|nár|svo|spo| by|ovn|by |roz|sa |ľud|iť |odn| vš|ov |i a|néh|vše|o s|va |o a| ľu|oci|pre|nu |a m|u a|ený|e v|ný |nes|a k|zák|pod|ným| do|u p| k |u s|áci|ajú|byť|yť |nýc|eho|ran|pol|tát|stn|jeh|a r|šet|ými|lad|čin|ému|a o|edz|ť s|kon|stv|oré| sú| ni|e z|pri|och|ny |štá|sť |oje|vna|tre|u k| či|ko |é p|maj|smi|a a|etk|nak|ým |med|dov|prí| ob|iu |uds|osť|esm|e b|m a|hra|i s|rác|bez|vať|chr|e p| ab|jú | št|žen| ho|čen| de|i p|ť v| vo|dsk|pro|nom| in|ou |du |že |aby|est| bo|ré |bol| so|nú |olo|kej|áln| oc|obe|ky |dzi|dom|áv |por|lne|rav|aké|ens|pra|ok | že|tné| ta|ako|res| vz|i k|ami| tr| ak|ní |len|o d|del|ský|cho|ach|ivo|h p|ože|iál|inn|slu|kra|loč|očn|ju | os|anu|oju|voľ|ákl|str|é s|ené| ži|niu|sta| st|ved|tvo| me|dno|m p|de |ké |kým|ikt|stu|é v|i v|vyh| to|v a|odu|hoc|a t|ím |ly |hov|y s|soc|júc|ú p|odi|vod|liv|aní|ciá| ve|rej|ku |ci |ske|sob|čno|oso",
    "tuk": "lar| we|we | bi|yň |ary|ada|da | he| ha|an |yny|kla|dam|de | ad|yna|er |na | ýa|ir |dyr|iň |bir|r b|ydy|ler|ara|am |yr |ini|lan|r a|kly|lyd| öz|mag|nyň|öz |her|gyn|aga|en |ryn|akl|ala|dan|hak|eri|ne |uku|ar |r h|ga |ny |huk| de|ili|ygy|li |kuk|a h|nda|asy|len| ed|bil|atl|ine|edi|niň|lyg| hu| ga|e h|nde|dil|ryň|aza|zat|a g|‐da|a‐d|eti|ukl| gö|ly | bo|tly|gin| az|lma|ama|hem|dir|ykl|‐de|e d|ile|ýan|a d|ýet|ýa‐|ynd|lyk|aýy|e a|ünd|ge | go|egi|ilm|sy |ni |etm|em‐|lme|m‐d|aly|any| be|tle|syn|rin|y b|let|mak|a w|a ý|den|äge|ra | äh|mäg| du|n e|bol|meg|ele|ň h| et|igi|ň w|im |iýa| ýe| di|r e|ek | ba|ak |esi|ril|a b|in |p b|deň|etl|agy| bu| je|bu |e ö|y d| hi|mez| es|ard| sa|ähl|e b|yly| ka|esa|mek| gu|n a|e t|lik| do|e g|sas|ill|nma|ň a|ram|ola|hal|y w|ýar| ar|anm|mel|iri|siý|ndi|ede|gal|end|mil|rla|göz| ma|n b|e ý|öňü|ňün|n h| tu|hiç|yýe| ge|my |iç | öň|n ý|tla|ň ý|lin|rda|al |lig|gar| mi|i g|dal|rle|mal|kan|gat|tme|sin|and|ň g|gor| ta|öwl|ýle|y g|e w|ora|tiň|ekl| yn|alk|döw| dö|ere|m h| me|dur| er|asi|tut|at |çin|irl|umy|eli|erk|nme|wle|gur|a ö|aýa| çä|nun| ki|ras|aml|up |ýaş|tyn| aý|ry |ň d|baş|ip |gi |z h|kin|z ö|n w|ter|inm|eýl|i ý|kim|nam|eň |beý|dol| se| te|r d|utu|gyý|ez |umu|mum",
    "dan": "er |og | og|der| de|for|en |et |til| fo| ti|ing|de |nde|ret| re|hed|il |lig| ha|lle|den| en|ed |ver|els|und|ar | fr| me|se |lse|and|har|gen|ede|ge |ell|ng |at | af|nne|le |nge|e f|ghe|e o|igh|es |af |enn| at|ler| i |ske|hve|e e|r h|ne |enh|t t|ige|esk| el| be|ig |tig|fri|or |ska|nin|e s|ion| er|nhv|re |men|r o|e a| st|ati| sk| in|l a|tio| på|ett|ens|al |tti|med|r f|om |end|r e|del|g f|ke | so|på |eli|g o| an|r r|ns | al|nat|han| ve|r s|r a| un| he|t f|lin| si|r d|ter|ere|nes|det|e r| ud|ale|sam|ihe|lan|tte|rin|rih|ent|ndl|e m|isk|erk|ans|t s|kal| na|som|hol|lde|ind|e n|ren|n s|ner|kel|old|dig|te |ors|e i| hv|sni|sky|ene|vær| li| sa|s f|d d|ers|ste|nte|mme|ove|e h|nal|ona|ger| gr|age|g a|vil|all|e d|fre|tel|s o|g h|t o|t d|r i|e t| om|arb|d e|ern|r u| væ|d o|res|g t|klæ|øre|n f| vi| må|ven|sk | la|gte|kab|str|n m|rel|e b|run|rbe|bej|t i|ejd|kke|t e|g d|rkl|ilk|gru|ved|bes| da|nd | fu|lær|æri|rdi|ærd|ld |t m|dli|fun|sig| mo|sta|nst|rt |od | ar| op|vis|igt|ære|tet|t a|emm|g e|mod|rho|ie |g u|ker|rem| no|n h| fa|rsk|orm|e u|s s|em |d h| ge|ets|e g|g s|per| et|lem| tr|i s|da |dre|n a|des|dt |kyt|rde|ytt|eri|hen|erv|l e|rvi|ffe|off|isn|r t| of|ken|l h|rke|g i|tal|må |r k|lke|gt |t v|t b",
    "als": "të | të|dhe|he | dh|në |ë d|e t| e |et |ë t|imi|për|ejt|dre|rej| pë| dr| në|it |gji|sht|ve |jit|ë p| gj|ith| sh| i | li|het|e p| nj|t t|ër |ë n|in | ve|me |jtë|e n| ka|ara|e d|ush|n e|tet| pa|jer|hku|a t|re |ën |ë s|sh | ku|së |t d|ë m|kus|mit|lir|ka |ë k|jë |se | si| që| ba|etë|që |ë b|si |ë g|eri|thk|nje|eve|e k|e s|jet|ose|bas|ohe| os|ra | mb|iri|h k|min|shk|ash|rim|ndë| nd|një|jta|e m| me|eti|do | du|es |rë |e l|mi |anë|tar|t n| as|dër|hte|end|tën|vet|uar|und|ësi|kom|tje|duh|ndi|at |ave| ko|ri |ta |ë v|shm| de|ar |omb|i d| kë|i p|jes| ng|uhe|nga|i n|en |ë e|ga | ar|e a|ës |hme|bar| pe|htë|ë l|ur |ë i|isë|ime|sim|ris|tës|art|ëm |cil|tim|tyr|ësh| ma|shë|or |t a|kët|gje| ci|r n|e v|par|nuk|ëta|rgj|i i|ish|uk | nu|ë r|are| je|ë c| pu|atë|lim|lli| ës|ë a|i t|mar|ore| së|tit|lar|per|t p|rat|ite|inë|t s|riu|ke |ërg|a n|edh| pr|esi|irë|ërk| po|hë |ë j|i s|a e|ht |mba|roh|im |ari|e b|lit|ti |asn|tav|snj|t e|ik |tij|k d|qër|hëm|ras|res|otë|nal|mun| an|kla|ven|e q|tat|t i| fa|ij | tj|igj|te |ali|bro| di|roj| ti|uri|ojë|ë q|çdo|det|n p| pl|ekl|ind|erë|vep|dek|nim|ive|ror|sho|hoq|oqë|ëri|pri|r d|shp|esë|le |a d|shi| mu|dis|r t|ete| t |ë f|ëzo|zim| çd|mbr| re|e f|jen|i m|iut|n k|tha|s s|lot",
    "nob": "er | og|og |en | de|for|til|ing|ett| ti|et | ha| fo| re|ret|il |het|lle|ver|tt |ar |nne| en|om |ell|ng |har| me|enn|ter|de |lig| fr| so|r h|ler|av |le |den|and| i | er|som| å |hve|or |t t|ne | el|els|re | av|se |esk|enh|nge|ska|nde|e o|ete|gen|ke |lse|ghe|ten|men| st|r s|fri|igh|ig | be|e e|nhv|r r|tte|ske|te | på| ut| sk|al | in|sjo|på |der|e s|ner|rin|jon|t o|unn|e f|han|asj|tig|ed |es |g f|sam|ent|tti|ene|nes|med|ge | al|r o|ens|r e|eli|isk|lin| ve|nin|g o| sa| an|t f|itt|lik|end|kal|r f|t s|rih|ihe|nas|nte|e r|ns | si|lan|g s|mme|ige|l å|erk|dig| gr|n s|ren|r a|all| na|kte|erd|ere|e m|und|r u|res|tel|ste|gru|inn|lær|ers| un|det|t e|arb|ale|del|ekt|ven|t i|g e|bei|eid|e a|n m|e d| ar|rbe|e g| bl|ans|klæ| li| he|g t|æri|sky|run|rkl| la|sta|sni|kke|m e|rt |mot| mo|e n|tat|at |e h|e b|ove|e t|jen|t d|str| må|r m|n e|ors|rel|ker| et|n a|bes|one| vi|nn |g r|e i|kap|sk |ot |ndi|nnl|i s| da|s o| no|id |ger|g h|vis|n o|bar|s f|ndl|t m|g a|opp|t a|dis|nal|r d|per|dre|ona|ære|rdi|da |ute|nse|bli|ore|tet|rit| op|kra|eri|hol|old| kr|ytt|kyt|ffe|emm|g d|l f| om|isn| gj|å d|ser|r b| di| fa|n t|r k|lt |set| sl|dom|rvi|me |l e|gre|å s|må | tr|nd |m s|g i|ikk|n h| at|tes|vil|dli|g b|d d| hv|rav",
    "suk": "na | mu| bu| na|a b|ya |hu |a n|we | gu|nhu|a g| ba|a m|ili|wa | ya|li |unh| bo|mun|ali|bul|han|bo |i m|ilw|uli|ang|lil|la |i b|e n|ga | wi|kil|mu | al| se|u a|ge |kge|ekg|sek|lwe|ose|le |lo |bi |ulu|e y|kwe|ila|and|e b|i n|yo |ng’|a s|nga| ns|si |abi|nsi|ina|lin|aki|se |ban| ly| gw|dak|lu |ngi|gil|a w|o g|akw|u b|ile|anh|ka |ilo|a l|ubi|e g| nu|o n|ja |gan| ng| ma|lya|nul|g’w|ani|ndi|u m|iya|wiy| ji|jo | ka|yab|lwa|ada|o b|e k| ad|gwi|ho |gub| ku|ing|o a|o l|ula|ika|a i|u n|dik|iha|shi|ayo|gun| ja|ha |biz|o j|lag|ma |wen| sh|ele|ung|o s|gi |gul|mo |lan|iwa|a k|ala|iki|jil|ola|ji |a a|yak| li|nil|iza|agi|aha|man|bos|iga|kuj| ha|ana| lu| gi|iti| mh|uga|uyo|win| ga|za |a y|ki | nd|oma|ene|o w|a u|mah|yos|sol|hay| mi|iko|ong|aga|iku|gwa|i a|ndu|pan|u g|e i| ab|ujo|ida|nya|ibi|duh|but|i y|u w|iji|nhy| we|nik|aya|uhu|nda| il|je |abo|aji|lel|ubu|nay|ba |lug|lon|ale|mil|da |a j|dul|o m|mha|aka|e u|g’h|udu|lyo|e m|e a|gik|bus|bal|sha|wit|twa|ngh|nek|wig| um|okw|any|uma|ima|uso|bud|’we| ij|hil|bil|a h|imo|ita|no | ih|gut|nha|ne |iso|ulo|uno|yom|’ha|u l|elo|eki|wel|hya|ngu|omb|som|mbi|i g|o i|u i|bak| is|ugu| yi|utu|eni|tum|umo|u s|tog|inh|’wi|lit|waj|e j|ule|jiw|u u|kub|kul|lik|uto| uy|upa",
    "sag": "tî | tî|na | na| ng|a n|ngb|gö |ngö|nga|nî | lo|lo |zo |bi |la |gbi|ang| sô|sô |î l|gan|ö t| zo|o n| wa|a t|îng|i t|ngü|gü | al|lîn| nd|a l|ê t| kû|äng|î n| te|wal|ala|alî|î k|ë t|î m|â t|î â|ô a|î b| mb|ûê |gâ |örö|ngâ|kûê| lê|o k|a â|e n|ko |î s| kö|ter|dör|köd|ödö|ï n|a k|lêg|gë |ôko|ëpë|mû |pëp| pë|o a|êgë|eke|yek|ke |ü t|î t| ay|o t|bên|ê n|rê |pëe|ra |ëe |erê|rö |tï |kua|aye| nî| ôk|ua |a z|ä t| âl|â n|ïng|î d|ö n|âng|ênî| am|î z|ten|âla| yâ|ê a|mbê|a m|û n|a y|ne |ene|rä |î g|a s|bê | ku|arä|ndi|ga |diä|ëng|iä | du| ân|amû|dut|öng|yâ |utï|ro |önî|lï |a p| gï|oro|lë |î a| âm|ndo| sê|ngô|do |i n|o s|ndö|âra|e t| bê|gba|ûng| mä|sâr| sï|î p| gb|ö k|e a|yê |a a| âk|dö |ara|ba |ï t| tö|a w|zar|tön|î w|war|ndâ|a g|ana|në |ênd| të|ta |ban| lë|zön|î f|nzö| sâ|sï |tën|o w| nz|sên| âz| da| za|îrî| në|nën|ate|ä s|bâ | at|o l|ënë|o ô|fa | kp| ma|o p| mû|kân|a b|bat|ata|ô n|se | kâ|alë| ko|ông|da |ë s|üng|ë n|ibê|rös|mbë|bët|ëtï|âmb|mbâ|ïgî|mba|gî |tän| po|bûn|gï |amb|ü n|gbï|ôi |gôi| af|rë |erë|lê | as|afa|âzo|i p|sor| ad|i s| ba|gïg|ä n|bät|dë |ö â|kûe|ûe |kpä|päl|älë|e z|ätä|ö w|ngi| yê|köt|ötä|tä |ê s|kod| hï|hal|hïn|lëz|ëzo|ngä|gän|odë|ö m|mar|sär|pä |ärä|îan|rän|bîa|a h|gi |bor|du ",
    "nno": " og|og | de| ha|er |en |ar |til| ti|lle|ett|il |ret|om |et | re|le |har|enn| me| al|all| fr|ne |tt |re | å | i |nne|and|ing|ska| sk|men| fo|det|den|ver|for|ell|t t|dom| so|de |e s| ve| ei|ere| på|al |an |e o|e h|fri|sam| sa|l å|på |leg| el|ler|som|ein|ei |nde|av | st|dei|or |ten|esk|kal|gje|n s|tte|je |ske|rid|r r|i s|te |nes| gj|eg |ido|med|e f|r s|st |ke |jon| in|r f|sjo|asj|nas|ter|unn|ed |kje|han|ona| er|t o|t e|g f|ski|e m|ast|ane|e t| av| gr|lan|ste|tan|å f| na|der| sl|t s|seg|n o|r k|nga|ge | an|g o|at |na |ern|nte|ng | ut|lik|e a|bei|gru|e i|arb|kil|g s|lag|eid|r a|e d|g d| si| få|ame|a s|e r|rbe|jen|n m|r d|n e|nn |e n|erd| tr| må| bl| mo|ren|run|nin|bli|kra| kr| at|ege|n i|me |nsk|ins|år |frå|in |lov|v p|end|mot|ale|e v|å a|få |rav|int|nal| ar|sta|e k|t f|ome| la|ot |t a|sla| ik|nle|itt| li| kv|id |kkj|ikk| lo|nad|å v|tta| fa| se|gen|ld |å s|kan|g t| ka|r l|god|n a|lin|jel|ild|dig|ha |l d|kap|ve |ndr|g i|g a|inn|var|rna|r m|r g|a o|dre|d a|n t|ag |kår|mål|ig |va |i d|t m|e e|n d|tyr| om|g e|eve|då |e u| då|und| no|ir |gar|g g|l h|se |ga |d d|l f|ker|r o|å d|eld|ige|t d|t i|t h|oko|nnl|rel|nok|rt |lt |åse|jer|ta |ik |ial|eig|r p|i e|olk|bar|osi|kte|sos|lir|opp| un|ad | be",
    "mos": " n |ẽn| a | se|a t|sẽ|̃n | ne|a s| ye|e n| ta| tɩ|n t| pa|tɩ | la| so|nin| ni| b | fã|fãa|ãa |ng |a n| bu| tõ|la |ẽ | te|tõe|ne |ye |a a|or | ya| to|ed |ned|pa |e t|õe |tar|em |tẽ|g n|ã n|n m|aan| ma|sor|buu|n y|maa|uud|a y|r n|ins|n p|ud |ra |paa|ɩ n|a b| wa|d f| na|me |n d|ara|n b|sã |taa|n w|bã |an |yel|eng|aal|ɩ b|n n|gẽ|̃ng|og | ka| bɩ|bɩ | tʊ|gã | yɩ|na |am |e b|ame|wa |g a|d b|aam|ab |mb | bã|ãmb| ba|m n|wã |aab|a m|aa |saa|ga |nsa|yaa| wã|a l|tog|ore|n s|nd |ʊʊm| sõ| sã|ãng|seg|egd|d s|el |tʊʊ|ngã|ba | tũ| da|ã t| me|b s|re |dat|l s|d n|ɩ y|ã y|dɩ |aoo|g t| kã|m t|ing|r s|a p|b y|b n|gdɩ|men|dã |vɩɩ| vɩ|lg |oor|ã s|n k|al |rã |nga|ar | le|gr |d a|neb|̃nd|ɩɩm|ĩnd|yɩ |lem| pʊ| bʊ|pʊg|nge|to |b t|ɩ s|g s| mi| ke|a k|bãm| we|kao|ilg|wil| zĩ| no|kẽ| ra|m b|ʊge|b k| bũ|oog|ã p|bũm|ngr|at | wi|gam| ko|eb |g b|sõn|ãad|ã f|õng|ɩm |m s| yi|ũmb| yã|ʊm |oy |wẽ|noy|ʊmd|da |ren|a z|ya | gã|le |b p|ɩ t|n g| f |ni |soa|oab|i t| sɩ|lag| ti|te |o a|s n|oga|go |tũ |gem|age|a w|̃ n|in | yõ|a g|b b|aor|ka |ẽe|tũu|aas|a r|e y|ag |eg |r t|e a|ã k|iid|e p|neg|o t|ate|oa |e s|ũ n|mã |ms |ell|eem|ẽm|b w|̃ms|too|ik | zã|zĩn|kog|bao|r b|s a|bui|uii|ogl|aba|alo|loa|kãa|od |l b|ll |nda|kat|aka",
    "cat": " de| i |es |de |la | la| a | pe|per|ió |ent|tat| se|nt |ret|ts |dre|at | el|ls | dr|men|aci|a p|ció|ona| co|a l|al |na |s d|que|en |el | to|s i| qu| en|e l|ns |tot|et |t a|ers| pr|t d|ons|er | ll|ion|a s|ta |a t|con|els|s e| l’|rso|res|als|son| un|est|cio| re|pro|ita|cia| in|les| o |ue |del|lli|té | té|ia |ame|é d|sev|ota|nac|i l| al|s p|a d|ar |a i|ual|nal|a c|ant|nci| le|ert|sta|rta|ser|t i|i a|l d| no|va |ats| d’|s n|re |s a|e c|eva| na|rà | ca|ues|com|lib|és | so|ibe| es|ets|ber|da |r a|no |una|l’e|s l|ter|sen|ran|ure|des|man|i e|l p|t e|n d|e d|e e|om | di|cci|igu|a a|s t| pa|i d|tra|s o|aqu|tre|vol|ect|a u|l i|gua|ide|s s|ada|ene|ial|nta|ntr|ens|soc|cte|ra |oci|hum|uma|cla|ali|lit|erà|cti| aq| hu|ici|pre|era|ess|uni|nte| fo| ni|ble|sse|tes|alt|eme|ass|ica|seg|o s|ote|rac| ig| po|ans| és|a e|un |us |mit| ma|r s|se |ssi|s h|a m|r l|nit|l t|ènc|ó d|ten| te|ir |i p|tal|eta|dic|i i|hom|t q|par|egu|s f| as|n l|ria| mi| ac|lic|int| tr|act|eix|n e|s c|ont|nse|ecc|t t|ltr|amb|qua|l’a|eli|ura|an |ist|e t|ó a|one|nam|ing|lar|o p|esp|rec|lig|a f| ha|iva| am|lle|t s|rot|mat|liu|tiu|iur|n a|fon|ots|inc|ndi|e p|seu|olu|gur|i c|més|der|rna|ina|for|igi|cie|bli|ic |mb |in |art|ol |rom|nin|omp",
    "sot": " le|le |ng |ho | mo| ho| bo|a h| e |lo |ya |ba |e m|a l| ya| ts| ba|na |ong| ka|a b|tho|e t|sa |elo|olo|a m|ets| di|o e|la |mon|oth|tsa|o y|ka |eng|a k|oke|kel|a t|g l|tok|ang|o t|tla|mot| se|o l|e b| na| ha|lok|wa |e h| tl| a |aba|o b|tse|ha | o |hab|e k|tjh|a d|tso|jha| to|se |so |oko|e e|tsh|dit|pa |apa|o n|e l|loh|kol| ma|o m|a e|ela|ele|ana|a s|let|bol|ohi|a a|tsw|kap| ke|hi |g o|ohl|eo |ke |ona|set|o k|o s|di | kg|e d|aha|lan|bot|bo |ito|o h| mm|hle|eth|ena|i b|ala|ats|moh|swa|lwa|g k|atl|abe|g m|ola|phe|bat|ane|a n|mel| me|o a| ph|ebe|ell|hlo|tlo|etj|mat| sa|g t| th|g y|lat|mol|g b|g h| en|she|the|seb|nan|lek|boh|hae|kgo|hel|e s|edi|wan|me |kga|ae |to |a f|ath|lao| hl|han|ile|nah|we |ume|kan|otl|len|aka|efe|ire|bel|bet|rel|swe|mme|sen|a p| ko|g e|atj|lel|its|bon|oho|eha|shi|man|ano|nts|he |lal|eka| fu|o f|heo|got|all|ao |het|hat|get|ban|hal|kge| wa|a y|lla|fum|mmo|kar|alo| ef|thu|e y|wal|tha|san|hon|tlh| he|e n|ben|hla|ing|uma|pha|o o|si | tu|tum|llo|lle| ta|pan|hen|mo |nen|hir| lo|son|ots|tab|ama|ato|din|lap|hil| eo|dis|oka|elw|tsi|llw|i m|hol|pel|iso|no |e a|fet|lwe|adi| fe|fen|hwa|opa|kop|are|amo|ret|emo|i k|isa|o p|o d|i l|gat|dik|i t| nt| la|ame|shw|hah| am|nya|ita|mab",
    "bcl": "an | sa|in | na|ng |sa | pa|na |nin|ang| ka| ni| ma| an|pag| as|sin|asi|n s|ion|n n|cio|a m|on |ban| de|n a|ga |kan| mg|a p|mga|a n|os |rec|ere|der|cho|ech|n p|aci|aro|n m|man|a s| la|n d|o n|asa|n k|g s|kat|sar|ata|ay |o s|al |ong|n l| o |a a|ho |a k|igw|tal|gwa|amb|kas|sai|mba|wa |ara| ig|agk|o a|lam|ro |o i|gka|ali|apa|nac|san|aba|g p|ina|a d|iya|yan|ing|lin|may|ink|aiy|nka| ba|aka|a i|yo | in|ag |abo| da|aha|ini| ga|tan|s n|nta|ano|agt|s a|kai|ad |hay|ida|hos|o m|og |ia |iba|ent|han| ta|par|n i| hu|at |ron|a b|g n|ant|g m|nal|ayo|a g|dap|mag|no |sta|aya|iri| pr|nga|ran|cia|g k|es |pat|li | co|dad|l n|y n|bos| si|mak|pro|ala|men|gan|aki|nte|lan|o k|con|t n|gab|a l|g d|ona|n b|ta |do |nda|aan|as |uha|agp|a c|uli|awo|taw|pan|n o| so|hul|i n|ter|ado|ags|g a|tra|min|anw|tay|kam|nwa|waa|g o|a o|kap|ain|bal|bil|ami|g i|d a|res|ra |nag|gta|ton|n e|ba |nan| mi|kab|en |bas|gpa|nes|o p| di|pin|ika|l a|n g|ind|isa|cci|ili|ial|ecc|tec|nci|ios|bah| es|one|pak|om |imi|agi|ico| re|ana| bi|a e|nid|rim|rar| se|rab|s s|hal|i a|buh|sab|cri|ubo|bo |gi |wo |rin|int|agh|ipa|sii|ibo|ani|to |sad|hon| le|iis|a t|ast|say|lar|n c|aag|ote|rot|n t|y m|ici|paa|ley|ey |yag|aen|dan|ni | pu|atu|lab|sal|ica| gi",
    "glg": " de|os |de | e |ión| a |da |to |ció|ere|ón |der|ito|en |a p| co|ent|eit|n d| se|rei|ade|as |aci|dad|s d| pe|per|o d|s e|e a|e d|men| da|nte|ers| pr| te|do |al |rso|ida|es |ten|soa|oa |que| to| po| o |a t| in|a e| li| do|cia|te |tod|res|o a|pro| re|tos|est|ra | es| ou|dos|lib|con|a d|nci|o e| na|e e|a a|a s|ber| á |oda| pa|e o| qu|e c|ue |ar |nac| en| sú|tra|s p| un|súa|com|ou |ia |nto|ser|a c|er |ns |a o|se |des|is |ter|s n| ca|ado|or |óns|sta|úa | no|rda|s s|ibe|rá |erd|era|no |nal| as|ica|e p|eme|erá|pre|sen|das|e n| ni|e s|por|ais|par|ant|ara|ame|cci|ona|io |o p|n p| di|cto|s t| so|o t|o á|nin| me| os|cio|enc|unh|n e|n c|nha|ha |ntr|ion|n s|á s|n t|s o|ese|nta|ect|e i|o s|e l|so |nid|oci|soc|ont|dic|ici|e t|tad| ac|tiv|ndi|ali|gua|l e|rec|a l| ig|omo|cas|o m|re | ma|ing|na |igu|vid|eli|ngu|und|s i|rac|a n|cla|cti|seu|ria|on |ase|o n|lic|s c|man|lid|a u|uni|ta | ó |ual|ido|ori| fu|ind|nda|ste|s a|tes| tr|act|ial|fun|dis|ecc|o ó|cal|mo |un |e r|iva|n o|ca |n a|o c|esp|ome|o o|seg|sti|r a|tor|r d|egu|ada|lo |nde|r o|uma|ote| el|alq|lqu|uer|spe|a i|tar|bre|tri|hum|olo|cie|ren|ena|ari|mat| fa|med|ura|lar|edi|ver|ixi|á p|ibr|gur|int|pen|rot|a f|cac|s f|ili|rio|ma |a v| vi|rim|len|ita",
    "lit": "as |ir | ir|eis|tei| te|s t|os |uri|ti |us |is |iek| pa|ai | vi|vie|tur| ki|ri |žmo| tu| žm|ien|ės |ių |ali|ais|mog|vis| ka|lai| la|ini|i t|s i|s ž|sę | į |isę|ena| ne| pr| bū| jo|pri|kie| ta|kvi|nas| su|ekv|mas|gus|būt|tin|isv|s s|ogu|isi|mą |mo |ant| ar|s k|ama|kai|ūti|s a|s v|aci| ti|s n| sa|s p|oki|cij|inė|ar |val|ms |tai|jo |i b| na|gal|sav|kur|aus|men|rin| ap|imą|ma |sta|ę į|ina|i p|imo|nim|i k| nu|ima|oti|mis| ku|jos|lyg|dar|išk|je | at|tas|kad|r t|tų |ad |tik|i i|nės|arb|i v|ijo|eik|aut|s b| įs| re|iam|sin|suo| be|isu| va|li |sty|asi|tie|ara|lin|isė|i s|ą i|jų | ly| ga|vo |si |r p|tuo|aik|rie| mo|din|pas|mok|ip |i n|rei|ybė|mos|aip|r l|ntu|įst|į t|gyv| iš|nti|tyb|ų i|pag|kia|kit|es |uot| sk|jim|tis| or|aud|yve|ven|mų |als|ų t|nac|avo|dam|ą k|i a|s j|oje|agr|kla|gau|neg|nių|o k|ega|iki|aug|ek |tat|ieš|tar|ia | ši|ios|ška|sva| to|tau|int|sau|uti| as|io |oga|san|mon|omi|kin|ito|s g|ome|r j| ve|aty|kim|nt |iai|lst| da|ją |min|r k|o t|nuo|tu |ver|kal|am |usi|o n|o a|ymo|tym|vę |ati| ji|o p|tim|ų n|paž|ter|s š| vy|alt|ksl|ing|ų s|oma|šal|ran|e t| ni| ša|ava|avi|nie|uom|irt|elg|jam|ipa|kių|tok|eka|tos|oja|kio|eny|nam|s d|ndi|amo|yti|gri|svę| gy|lie|ėmi|ats|ygi|soc|sie|oci|pat|cia",
    "umb": "kwe|oku|a o| ok|nda| kw| om|da |wen|e o|a k|la |ko | ly|end|nu |ka |o l|oko|mun|omu|unu|kwa|wa | ko|a v|o y|omo|mok|ali| vy|eka|olo|i o|osi| yo|lyo|mwe|si |okw|we |lo |iwa|o k|i k|le |te |a e|ete|gi |kut|sok|ong|iso| ya|vo |ang| ey|wet|ata|a y|o o|yok|ofe|fek|kuk|ela|a l|ilo| wo|owi|nga|iñg|kul|oka|vyo|uli|u e| va|li |ñgi|kal|wat|ta |u o|eci|ngi|ovo|ye |so | li|oci|yo |wiñ|nde|ga |ing| nd|ili|nge|ci |eye|ala|vya|e k|kol|isa|a a|lom|lon|go |avo|ako|ovi|pan| ol|uka|ngo|lya|ti |o v|akw|yal|olw|uti|imw|eli|alo|ge |ung| ku|a u|lis| al|onj|ati|wal|ale|e l|sa |i v|and| ov| yi|ika|ukw|ele|lil|yos|he | oc|yov|iha|ikw|omb|val|lin|lim|ahe|apo| ka| ye|yom| vo|lik|i l|kok|wav|aka|cih|o e|tiw| ke|yi |i w|ama|e y|lof|yow|yol| ek|kov|ole|vak|vik|tav|omw|a c|upa| el|ila| lo|aso|su |e v|lyu|ava|ñgo|lwa| wa|gis|gol| ce|tis|ave| on| es|po |wil|va |eso|kup|co | la|yam| ak|wam|iyo|ekw|e e|i c|tat|i a|a n|yah|eko|lwi|ita|lit| ec|kwi|upi|i y|epa|kan|kiy|nja|dec|asi|e u|yav|asu|mak|lap|yim|tya|vos|kas|cit| ha|lel|u c|a w|emb|u y|ola|yon| os|win|lye| ca|eyo| uk| ci| ow| yu|ayi|vel|liw|has|iti|sil| et|yuk|o w|umb|ulu|ya |wi |anj|kat|ngu|wom|o a|uva|esu|usu|mbo| co| of|mat|o c|ca |cel|vi |u l|ba |kon|mbe|wiw",
    "tsn": " le|le |go | mo|ng | ts| go|lo | bo|ya |we | di|gwe| ya|ong|ngw|sa |olo|elo|a b|tsa|tsh| e |tlh|a l|o t|e t|a g|e m|wa |a t|o y|eng|na |e l| kg|wan|kgo|mo |o n|tse|a k| tl|ets|ane| ba|dit|mon|ele|hwa|shw|la |ka |a m|nel| na| ka|e d|o l| o |o m|ba |se |e g|e e|bot|a d| a |di | ga|ots|tla|otl| se|lol|o b|tho|so |lho|tso|o g|ang|got|e b|ga |lel|seg|o e|its|gol|ose|ho |oth|let|e o|lha|ego|aba|hab|e k|ano|los|a n| nn| ma|eka|g l|šha|tšh|kan|alo|ola|lhe|ela|aka|sen|gat|tsw|kga| nt|mol|o a|nng|o o|o k|aga|atl|o s|bat|tlo|agi|yo |len|g y|edi|e y| th|g m|dik|to |tir|e n| ja|a a|mel|o d|ana|ire|g k|rel|swe| yo|bon|gag|lek|e s|mot|kwa|i l| te|a s|he |agw|ats|iwa|i k|itš|ona|no |a e|mai|any|lao|ikg|she|ntl|lwa|dir|g t|lon|ale| sa|ao |hel|shi|tle| wa|ume|log|jwa|itl|pe |hir| jw|non|iti|a y|set|hok|ira| ti|odi| me|gi |e j|tek|etl|a p|ko |ath|ala|hol|bod|tet|mog|han|nya| mm|g g|nag|i t|adi| lo|oag|i b|nna| ko|the|lan|re |thu|wen|hot|nyo|hut|o i| ne|pol|me |tum|ope|ame|gan|emo|ore|wel|nts|oko|okg|iro|ro |tha|elw|amo|gor|ing|jal|isi|nan|ogo| it|jaa|si |oga|heo|gon|diw|pa |opa| kw|lat|are|bo |o j| ke|ke |ile|gis|o f|rag| ph|bok|aak|kar|rwa|nye|g a|atš|mok|ago|okw|hag|ate|ato|uto|gwa|mme| fa|fa | op",
    "nso": "go | le|le | go|a g|lo |ba | di|ka |o y|ya | ka| ya|ng | ma|a m| mo| tš|elo|etš|e g|a l|o l| bo|a k|a b|e t|na |o t|tok|wa |e m|a t| ga|la |ang| a | ba| se|man|tše|oke|o k|ša |kel|dit|tša|tho|we |ele|a d|o g|o a|a s|o b|gwe|e d|ho |o m|ego|e l| na|tšh| to|šo |še |oko|ga |di | o |olo| e |let|ong|gob| ye|oba|ago| tl|tšw|mo |e b|re |g l|ngw|aba|tšo|swa|šha|ane|tla|hab|o n|ona|ito|ela| kg|ogo| th|oth|wan|eo |e k| sw|lok|kgo|log|ye |o d|a n|ola|g o|e s|set|hlo|kol|se | wa|lel|ao |eng|o s|šwa|mol| ts|eth|net|ano| bj|a y|o e| ke|thu|hut|šwe|ge |itš|leg|rel|alo|to |ohl| ge|mog|kan|e e|ire|nag|ke |eba|aka|pha|gag|bot|o w|aga|a a|mot|are|mok| yo|gor|oka|ko |gon|no |ore|ana|agw| wo|bon|bat|lwa|tse|bja| ph|din|yo |e r|šeg|e y|ath|nya|get|lao|sa |wo | re|wag|odi| sa|seb| me|utš|oph|mel|iti|kge|ato|kar|o o|šom| la|o f|phe|edi|hir|ala|pol|lat|ušo|i g|a p|g y|the| fi|ume|wel|bop|hel|emo| du|ile|gwa|bo |ale|tle|lwe|lek|ban|ta | lo|lon|o š|dir|mae| mm|tlh|god|pel|a w|weg|eka|elw|atš|išo|aem|šhi| ko|gam|rwa|mmo|boi|e n|ntl|pan|amm|i l|i b|hle|hla|leb| am|šon|jo |len|i s|kop|ret|gel|ing|opa|yeo|dum|sen|e a|ape|ase|kwa|lef|mal|amo|oge|bjo|oik|mon|kga|okg|a f|tsh|boh|uto|ika|ahl|ja |adi|iša|gab|hom|abo",
    "ban": "ng |an |ang| sa|ing|san| ma| pa|ane|rin|ne |ak |hak| ha| ka|n s| ri| ke|nga| ng|man|in |lan|a s|ara|ma | ja|n p|n k| pe|g s|g p|pun|asa|uwe|gan|n m|nin|sal|pan| la|alu|iri|sa |lui|jan|adi|a m|adu|uir|ra |yan|mad|kan|wan|duw|ur |tan|g j|anm|we | tu|nma|ika|awi|nge|ah |tur|ih |ban|ka |e h| ne|n n|en |nte|un |ngs|eng|anu|beb|aya|ani|ana|ian|a p|ala|bas|nan|gsa|ngg|uta| da|gar|aka|eba|da |apa|asi|ama|lih|aha| wa|ten| ut| ta|a n|ebe|are| wi|han|aje|keb|oni|nik|ent|aki|uni|ata|wia|iad|g n| pu|jer|ero|ron|aan|k h|saj|din|sak|a t|nus|dan|n w|pen|usa| ba|ngk| pi|ant|sam|e p|taw|n r|ate|wi |nen|i m|ega|neg|iwa|pat|atu|e s|ami|ipu|g k|ina|mar|kat|kal|aga|sar|ran|kin|per|g r|ndi|arg|ar |ksa|e m|ren|nya|al |tat|ida|ela|h p|aks|ntu|ngu|ado|lak| ny|oli|at |wen|ep |i k| se|dos|h s|n l|dad|gka|eka|a k|rep|eda|n h|par|upa|ena|swa| sw| in|nay|ewa|ung|era|ali|a u| mu|eh |nip|r p|e k|n t|k p|ras|i n|uku|n i|wah|eri|g m|pak|n b|r n|ayo|nda|mal|mi |um |dik|os |osa| mi|yom|na |teh|awe|k r|lar|car|tah|sia|g h|ti | hu|ut |huk|kum|sti|ewe|tuk| me|rga|pin|h m| su|gi |ari|n d|a w|ta |uan|gaw|gen|h r|on |war|tut|lah|pag|gay|r m|n u|ada|ira|a b|ngi|end|kew|g t|min|ggi|gda|jag|as |rap|agu| an|e n|ngd|s k|ila|eta",
    "bug": "na |eng|ng | na| ri|ang|nge|nna|ngn|gng|ge |sen|a r| ma| pa| si| ta| ha|ri |hak|app|tau|ak |au |ddi|a t|ase|edd|ale|a n|nap|gen|len|ass|pa |e n|ai |ria|enn|ega| ru|upa|rup|ias|a a|ing|inn|a s|pun|ngi|nin|e p|ini|nai|ga |lal|gi |sin|ppu|are|ae |ye | ye|ana|g n|sed|ada|le | as|i h|a p|ama|g r|i r|man| se|una|ara|ra |di |ssa|ren|a m|pad|e r|ila|ban|asa| ke|san|din|e a|ura| la|ane| de|nas|e s|i a|ipa|pan|u n|ann|i l| ad|da |ala|aji|ole|att| pu| e |ong|i s| ba|pur|aga|lai|i p|lan|g a|ngs|sal|ola|gsa|g s|a b|i n|ppa|rip| we|a k|g m|asi|wed|akk|mas|i m|ril|u r|reg|g p| pe|ung|gar|neg|sse| po|e m|k h| ar|pas| ne|map|ian| te|nar|pol|ett|ran| ja|bas|eba|jam|beb|ena|par| al|sib|ebe|ngk|uru|keb| sa|ain|ttu| mo|aka|unn|add|iba|sa |gan|gka|nen|bbi|i t| at|atu|kan|nan|uan|leb|rus|de |e d|ton|ata|tu |ssi|ro |e y|cen|kun|awa|ell| wa|k r|mak|wa |uwe|ire|ebb|gag|apa|sae| tu| ia|tte|mat|sim| to|a d|o r|ta |nat|ece|tur|la |ie |dec|ko |kel| di| hu|nca|caj|pak|rel|ma |lu |g t|bol|uku|e e|ter|jaj|tta|we |bir|deg|huk|e h|dan|ure|baw|kol|rit|kko|ele|arg|rga|llu|oe |lin|use|ari|auw|pat|mul|elo|ula|iti|gau|an |u p|nga|g y|a h|ekk|sil|ka |e w|ade|anc|iga|sip|ten|a y|e t| me|nre|aja|ji |rek|a w|dde|per|iko|sik",
    "knc": " a |ro |be |nzə|ye |a a| ha| kə|abe|akk| ka|zə |adə|a n|a k|kki|hak|mbe| la| ad|ndu| nd|wa |ben|en |ma |də | ya|o a|əbe|ə a|ga |e a|əga|lan|əna|lar|aye|aro|kin|inz|rdə|ard|ana|yay| ga|əla|kəl|ji |awa| mb|bej|eji|kən| ba|an |uro|du | na| ku|anz|dəg|nəm|kal| nə|e m|na |gan| du| sh|shi|amb|n k| su|ara|u y| ta|so |a d|kam|wo | ye| sa|e h|a s|sur|aso|au | au|iwa|nyi|kur|a l| da|kar| as|dəb|iya|kiw|o k|obe|e s|ada|ama|and|u a|aa |ta |ima|n n|la |əwa|nga| ci|ba | ab| nz|əgə| fa|ənd|ata|ndo|ya |tə |nza|ə n|ndi|a g|in |nam| fu|ə k|aya|a t|tən|a b|təg|ru |uru|inb|am |e k|al |ida|mga|aar|a h|baa|ə s|nab|dəw|dun|asa|nya|owu|gad|taw|o w|gən|a y|kat|dam| sə|o h|əra|e n|awo|ade|əmk| wa| wo|amg|dən| tə|a f|ala|i a|zəg|o n|uny|iga|zən|əli|wur|u k|o s|wan|za |din|utu|e l|san|i k|uwu|wu |awu|n a|on |de |da |nba|mka|yi |gay|tam| ng|laa|gin|azə|bem|gai|taa|ibe|rad|adi|fut| mə|wow|wak|ali|kun| an|mər|o t|yab|nad|aim|əgi|i n| aw|liw|cid|u s|edə|atə|any|do |apt|lka|alk|dar|rta|bed|tu |ela|ndə|uwo|gal|yir|wum|n y|ayi|n d|mma|zəb| yi|nan|ltə|lmu|ilm|mar|bel|raj| il|ero|m a|utə|enz|iro|alw|uma|umm| um|e g|how|kka|o f| ny| ho|fuw|ə h|ang|tin|zəl|o g|ema|ən |no |a i|a m|wal|əny|iwo|lil|ədə|ə f|rtə|hi |diy|mu ",
    "ibb": "ke | nd| mm|me | ke|e u|ndi|o e| em|mme|de |en |e n|owo| en| ow|wo |i e|mi |ye |emi|nye| un|e e|edi|ene| ek|yen|eny| ed|e m|nen|une|ana|n e|e o|e i| ye| uk|et |n n|eke|na |e k| mb|em |ne | id| es|un |kpu|ede|iet|ndo| nk|o k|di |kpo|ukp|did|am |an |kie|nam|kem|esi|o u| nt|idu|eme|o n|t e|no |yun|mo | uf|ho |mmo|nyu| in|o m|kpe|o o|sie|oho| kp|do |din|ie |ono|kpa|m e|ri |nkp|dib|on |e a|uke| ki|boh|a k| et|po |ida|dut|m u|ked|ded| ub| of|ond|ru |uru|pur|in |ut |du |eko|a u|ina| ot|mbe|n o|bet|iny|man| ak|op |idi|ikp|i o|edu|kon|ade|om | us|uan|wem|a m|uwe| uw|puk|ak |ode|ro |t m|a e|oro|a n|n k|u o|to |te |bo |akp|ufo|ok |dik|pan|mbo|bio|i m|ide|ini|fur|uri|ban|ofu|ubo|n i|o i|uto|iso|dom|omo|ema|diy|fen| nw|dis| ny| is|ni |usu|n m|u u|fin|tom|eto|pem|ed |m m|ibo|oto|o a|sua|wed|nwe|m n| ut|mde|dud| eb|ara| as|i n|oki| ob|nte|mok| ik| an|kar|m k|o y|t k| on|i u|nwa|n y|asa|ama|re |ufi|uka|io |nek|i k| or|pon|top|sun|ion|se |aha|t o|k n|e y|ere| ef|mba|mad|isu| mi|kor|ra |ian|i a|ka |a a|k m|ko |da |t i|ena|obi| ey|ha |dia|ti |aba|uk |u m|d e|dem|san|a o| se|pa | ab|tod|n u|p m|ude|fok|k u|efe|uku|nti|nka|ibi|son|he |pe |nto|dak|a y| od|nde|eye|anw|ndu|mbu|so |ebi|bie|nda|sin|med|tu ",
    "lug": "a o| ok| mu|oku|mu |wa |nga| ob|ga |tu |ntu|a e|na |bwa|a a|ang|ra |aba| n |ba |a m|wan|a n| ng| ab|li |obu|unt|a k|era|ibw|dde|oba|a b|u n|za |la |mun|ban|ali|ka |emb|iri|bul|ate|mbe|i m| ek|tee|eek|uli| bu|u a|edd|sa | ku|ant|ana|eki|u b|be |dem| eb|ama|n o| om|ira|omu| ki| ed|ye |ala|amu| am|e o|gwa|nna| er|kuk|y o|kwa| en|okw|eer| ly|inz|ula|kus|kir|u e| ba| em|eri| ky|any|onn| wa| ye|ggw|ina|kol|n e|awa| bw|uyi|u k|eka|yo |bwe|ola|o e|usa|o o|kwe|mus|yin|bal|i e|u m|ngi|e m|bir|riz|ere|ri |ebi|kul|aga|nza|kub|ekw| eg|ko |a y|u o|we |kut|mat|e l|e e|a l|aan|ger|no |kan|sin|nka|gir|uso| at|a g|iza|gan|nyi|zes|uku|wo |nge|zib|isa|izi|ya |egg|ufu|rir|lin|wam|wal|eby|a w|i o|bee|oze|esa|eta|iko|ebw| ma|ako|bon|tuu|kin|uki|de |zi |kug|yen|ino|e b|obo|aka|ulu| te|ne |lwa|ma |y e|lye|kuy|nsi|i y|gi |utu|ly |imu|e n|taa|asa|enk|ku |o n|o b|sob|si |una|bun|usi|san|e k| ag|uka|uga|ata| ol|rwa|wen|ing|wat|kik|o k| by|nya|ong|kye|by |kyo| bo|ewa|yam|bye|ubi|ngo|kis|ani|boz|kit|i n| aw|ky | al|sib|muk|awo|uko|umu|ibi|uma|afu|olw|eky|tab|ung|buy|ini|uum|saa|y a|lal|mag|ro |end|add|enn|kib|ens|ole|ni |mbi|o a|i k|gat| og|maw|and|kuu|a z|wet|igi|yig|emu| ne| gw|a t|nzi|n a|gya|amb|uwa|ulw| ey",
    "ace": "ng |an |eun|ang| ha|peu|oe |ak |on |nya| ny|yan| ta|ngo|ung|gon|na |ah | pe|reu| ng| ba| ke|hak|meu|keu| me|eut|at |ure| na|ban|ee | di|teu|roe|ata| ur|ara| be|seu|han|a h| sa|am |dro|eur|um |n n|tie|iep| ma| la|ala|nan|g n|ut |ong|a n|ep |tan| te|tap|jeu| ti|eul|eub|eu |eug| da|eum|eh |euk|ra |ih |n p|uga|ai |n b|a t|e n|lam|eba| se|beb|n t|awa|om |a b| ka|asa| at|eus|and|nyo|oh |ta |ka |h t|n k|p u|man|e t|n d|n h|ana|dan| pi|ape|a s|neu|nda| si|t n|bah|ula|yoe|a k|h n|dum|euh|g d|e p|eng|e b| le| pa|ngs|sia|ran|ma |g k|un | wa|ndu|lan|una|heu|ura|n m|lah|sa |n a| ra|aba|g s|a p|ia |und| je|wa |kat|bak|k n|anj| dr|asi| bu|nga|beu|uny|yar|sya|hai|k m|k t|k a|ama|aan|ek |a m|ok |g h|aka|sab|g p|i n|uta|khe|h p|ue |uka|har|ari|di |e d| su| um|t t|a l|ya |san|e s|gan|uko|gsa|e u| li|kan|bat|lee|aro|ot |n s|leu|ina|h d|lak|oih|yat|n u|kom|pat|ate| ne|ngg|nje|taw|mas|uma|sid|anu|umu|aja|si |uh |h m|rat|aya|sal|et |soe|t b|n l|aga|taa|usi| ja|ute|m p|en |dek|ila|a d|ube|dip|gam|any|lin|tam|don|ika|usa| ji|rak|idr|h b|nus|adi| as|dar|ame|n j|ngk|m n|eup|h h|bue|k h|huk|euj|g b|gar|eka|gah|upa|ile|sam| bi|h s| de| in|mum|‐ti|t h| hu|k k|pho|dil|ep‐|nta| ge|geu|h l|hat|ie |tha|use|ieh|sas",
    "bam": " ka|ni |a k|ka |an | ni|kan| bɛ|n k| la|i k|ya |la |ye |ɔgɔ|na | ye|bɛɛ|ɛɛ |en |li |sir|ɛ k|ama| ma|ira|a d|ra |ali|’a | da|man|a n|a b| i |ma | kɛ| wa|gɔ |wal|mɔg|ana|n n| ba| ja|ɔrɔ| mi| kɔ| k’| mɔ| jo| si|min|iya|dan|len|i m|’i |in |kɔn|ko |aw |den| sa| o | n’|ara|bɛ |i n|jam|ɔnɔ| na|ɛrɛ|a s|i j|ani|n b|a m|i d| fɛ| tɛ| an|osi|jos|a y|kɛ |a l|iri| ko| di|ɛ b|ada|ila|ɛ m|i t| fa|nɔ | de| ha|asi|tɛ |ari|a j|raw|a t|ɛ s|ale|a f|tig|ɛn |aya|dam|a i|i b|sar|si |riy|ɲa |n y|nu |inn|e k|ɔn |rɔ |ang|a w|o j|w n|nnu|k’i|nti|nɲa|ade|abi|bil|ala|hɔr|kal|had|igɛ|i s|a a|mad| a |aga|u k|kab|a ɲ|aba| ti|olo| hɔ|o b|ɛ j|i f| ta|ɔ k|aar|baa|ɛ n|n’a|kun|ugu|iɲɛ|diɲ|n j|k’a|a h|rɛ |ati|ɔ m| se| cɛ|ɲɔg|bɔ | tɔ|i y|lan|i h| ɲɔ|tɔn|don|nɛ |inɛ|ga |i l|ɲɛ |ile| fo|o k|ɛ l|nna|ili|un |gɔn|maa|fɛn|n d|ant|n i|aay|go |da | jɛ|u b|ri |rɔn|aka|lak|ɔnɲ|e m|ɔ b|nin|nw |cɛ |w k|yɔr|n o|o f|nga|jo |o m|nen|n’i|on |ɛ t| ku|o l|igi|ɲɛn|anb|fɛ |ɔ s| bɔ|n m|e b|afa|nka|n f|nma| fi|’u |ɔ n| ɲɛ|fan|i ɲ|ti |a o|dil|ɛ d|uya| sɔ|ago|ɛ y|e f|ɛmɛ|mɛn|aju|e d|bɛn| jɔ| fu|til|bag|fur|n t|uru|kar|atɔ|be | d’| du|d’a|oma|lom| u | do|riw|taa|w l|mɛ |gɛ |imɛ|n w|iir|nni|iim|amu|so |bal| ɲa| b’|gu |ɛɛr|’o |iwa|n s|wol|ele|ɲan",
    "kmb": "a k| ku|ya |la |ala| mu| ki|a m| o |u k|ni |o k| ni|kal| ky|mu | ya|lu |dya| dy|a o|ang|kya|a n|tok|i k|oso|so |kwa|nge|xi |na |elu|nga| kw|wa | wa|a d|hu |kut|thu|uka|oka|mut| ka|a i|mba|uth|ka |gel|ba |u m|u y|ku |ene|u n|ga |kuk|ban|ixi|i m|e k|wal|oke| mb|kik|kel|ne |u w|ela|uto|i y|ana| ng|iji|a y|kit|ma | ji|nda|ngu|yos|kum|ulu|ji |i d|isa|und| it|and|ong| mw|u i|iba|ika|wen| di|ten|ilu|ila|ndu|ye |sa |kub|aka|ena|amb|ung|olo|a w|ngo|kil|oxi|lo |muk|ke |sok|du |mox|ate|o w|kus|wat|ta | wo|gu | ph|u d|ito|ita|e m|alu|a j|kis|tun|uma|wos|luk|o m|san|mwe|a a|di |imo|ula|wan|nji|jix|i j|a t|kij|idi|kan|uku|gan|kul|e o|kye|adi|ato|o i| ja| ix|da |nu |o n|uta|kud| yo|i n|udi|ki |su |tal|a u|lun|e y|u u| ye|jin|iki|pha|hal|wij|we |a s|lak|ikw|go |tes|fol|itu|eng| ke| uf|yen|ing|yat|ele|utu|kyo|o y|kwe|kwi|uba| en|kib|ite| we|dal|i o|yan|ge |eny|tan|uki| ik|dib| im|esu|lon|kat|atu|e n|ja |i u|jya|vwa|kam|i w|ute|ini|uke|lel|esa| se|xil| ut|fun|unj|ufo|mbo| a |uso|kim|mun|u p|nen|ukw|u o|i i|umu|han|gon| il|lan|ata|te |i a| ko|jil|o a|nde|nyo|eka| at|o d|exi|ijy|tu |usa|tul|kuz|ilo|dis| un|u j|dit|ufu|ote| ib|ivw|mwi| bh| ha|se |bul|ubu|win| os|imb|bha|ama| to|axi|inu| uk|sak|kos|bot",
    "lun": "la | mu|ng | ku|a k|tu |ntu|chi| ch|a n|aku|di |mun|ma |unt|a m|g a| a | na|ela|ndi|aka| we|ima|jim|shi|eji|u w|i k| ni|ind|wu |i m|a w| in|a i|u m|hi |awu|na |kul|wej|lon|cha| ja|sha| kw|a c|i n|nak|ala|mu |wa |ing|ka |ung|kum|a h|ulo|him|mbi|muk|u c| wa|hak|iku|nsh|yi | ha|bi |amu|imb|ewa|wen|kwa|ang|adi|idi|kut|esh|ana|g o|ila|ha |tun|u j|ong|nik|kuk|tel|ovu| ov|u n|han| an|ate|vu |a a|kal|ula|kwi|jak|u a| ya|a y|ilu|u k| he|ham|and|uch|kus|ond|eka|hel|kew|zat|del|hin|uku|nde|i j|enk|i a|uka|eng|ach|lu |nat|nji|ona|mon|awa|nke|umo|ins| yi|a d|ama|udi|wak|i h|ati|i c|wan|ta |bul|mwi|ata|ayi| ak|uma|i y|ina|ich|itu|uza|kuz|nin| mw|ku |kin|wun|sak|naw|nyi|ni |ant|muc|wal|ish|u y|mul|kud|waw|uke|wes|uki|i i|kam|yid|wit|da |akw|kad|yan| di|ken|uta|ika|imu|iya|nda| ns|mbu|ya |ule|dil|iha|kuy| ko|hik|eni|ahi|kuh|si |kun|ush|umu|atw|g e|his|dik|ji |any|li | ye|dim|kos|osi|hih|wat|eyi|ney| ne|amb|twe|til|wil|nu |kwe|u h|etu|tiy|ja |nan|ash|mwe|win|was|hit|iti| wu|iwa|wah|lem|g i|tam|din|hu |haw|nga|kay| ka|hid|yin|isa|iki| ma|jaw|jil|che|mpe|omp|eta|tan|jin|hiw|usa|umb|eme|inj| hi|ulu|ubu|nam|wik|mpi| da|ale|ite|tal|twa|ahu|end|nka|mba| at|ga |mes|dic|iwu|yej|kan|kuc|iyi|sem|emb|lun|una",
    "tzm": "en |an | ye| d | n |ad |ur | ad|n i| s |agh|ḥe|n t| i |dan| ta| lh|lḥ|d y| gh|ell|n a|ra |̣eq|i t|eqq|s l|mda|ett|n d|d t|akk|la | ti|qq |hur|di | di| am|gh |ghu| is|t i|r s|in |nag| na|a y|is | te|a d|n n|yet|n g|ll |ara|ghe|ma | we| ar| wa|n s|l a|n l|sen|edd| ak|it |li | le|dd |ull|lla| id|d a| ur|rfa|erf|kul| yi| ku|as | se| ma|zer|amd|a n|lli|lel|men|t a|kw | de|t t|nt |kkw| im|fan|a i|a t|eg |n w|i d|q a|rt |ar |gar| ag|es | tl|ize|emd|i w|i l|deg| as|ken| dd|n u|lan|d i|a a|wak|tta| tm|d u|er | tu|wem|at |ddu|tle|w d|n y|t n|sse|r a|mur|s t|tam|gi | tt|yes|wan|r i|tim|na |wen|twa|d l|ttu|kke|wa |nen| iz|iḥ| u |win|d n|ame|s d|ent|ḍe|hel|a l|hed|ess|t d|mga|arw|i n|ḥu|mi |mad|agi|i g|der|udd|s n|rwa|̣en|awa|i i|ya |h d|iya|s y|msa|uḥ|idd|urt|un |n m|ane|em |sef|lsa|ili|q i|qan|leq|siy| ik|el |err| in|yed| la|ant|den|tag|man|g w|mma|yen|len|tmu|i u|aw |taw|r y|wad|edm|ṣe|hla|t l|̣er|ala|asi|ef |u a|tte|ddi|ttw| lâ|imi|l n|til|al | ne|am |̣ud| lq|iḍ| ya|dda|̣ṛ|med|ren| ss|gra|m a|ghl| il|chu|tem| ll|khe|way|eln|lna|ana|ukl|duk|gha|lt |ni |all|i a|tal|ray|nes|s k|tes|naw|ert|ila|awi|lqa|kra|anu|nun| kr|ikh|ezm|n k|iwe|iwi|ima|net|ser|s u|ir |yeh| an|aya|ehw|hwa|esk|dde",
    "war": "an |ga |nga| ka| ng| pa| ha|han|pag|in |ata| hi| an|mga| mg| ma|kat|hin|a m|ay |a p|ya |ung|a k|gan|on |n h|n n|ug |n p|n k| ug|n m|da |a h|n i|ha |iya|adu|dun|tad|a n| ta|ada|sa | iy|ara| na| di| o |pan|may|a t|ang|ud |ana|n a|o h|o n|taw|n u|ags|yon|y k|al |tag|asa|kad|o p|man| ba|awo|gsa|wo |ag |gad| in|a a|a u|ina|syo|a i|a s|od |ing|agp|ala|asy|ngo|n b|ali|nas|san|aka|a d|ra |g a|was|g h|aha|gpa|agt|to |ad |n t|tun|ng |usa| wa| tu|ini|iri|tan|ahi|kan|ray|nal|war|dir|i h|gka| us|god|g p|ri |a b|nan|ida|o a|i n|bal|y h|kas|uga|hat|tal|nah|awa|ni |pin|uha|buh|o m| bu|gud|aba|at |no | pi|bah|g m|ili|him|aya|atu|d h|agi| su|agk|lwa|mo |d a|alw|sya|uma|ano|int|kal|upa|mag|yo |o u|agb|n d|asu|lin|a o| ko|ona|did|hiy| bi|as | ki|l n|sud|iba|hi |o k|kon|ira| la|gba|pam|amo|g i|ton|gin|n o|uro|ho |os |la |g k|gtu|d m|aud|aag|t h|gi | gu| ig| ir|n g|abu|aho|ami| sa|ati|par|kau|ern|ban|tra|gar|ama|ras|yan|adt|tum| un|ka |aga|aso|api|dto|kin|tik|mil|iko|rin|sal|ika|a g|ila|mah|lip|rab|non|agu|ak |dad|lau|d n|ko |it |pak|n e| ti|una|i m|lig|s h|bay|ro |sug|mak|n w|naa|g n| so| ag|yal|nte|lal|ba |aup|lan|ihi|y b|kah|tub|bye| am|ari|yer|uka|ani|uyo|oha|ito|n s|upo|ent| pu|sam|iin|til|mat|ato",
    "dyu": "a’ | kà| ká|kà |ye | ye| à |ya’|ni | bɛ|kán|la |án |ya |ɔgɔ| ni| la|ɛɛ |ká |na |a k| mɔ|bɛɛ|mɔg| i |nya|á k|n k|ɔrɔ|’ k| mí|’ l| kɛ|mín|’ y|ín | mà|à k|ɛ k|’ m|ma | ya|à m| wá| jà| ní| be|be | ò |i y|ní |i’ | lá|ra |iya|ɛrɛ|n’ |n n| há| kɔ|te |wál|àma|jàm| te|áli|a b|ima|man|à à|hák|e k|lim| kó|ɔnɔ|mà |n b|i k|ɛn |gɔ |e b|n y|ɔ’ |ana|’ n|o’ | sà|ɛ y|’ s|kɛ |à l|rɔ |e à|kɔn|li’|àni|a m| dí|aw |rɛ |ɔ k|’ b| bá|à b|a à|ákɛ|riy|e s|gbɛ|nɔ |a j| bɔ| ù | sɔ|bɛn| sí|à y|sàr|e m|ara|kó | fà|à s| àn|dún| là|en | sì|an’| fɛ|úny| dú|a n|a y|ɛya|àri| gb|in |kɛr|kan|’ t|dí | cɛ|nin|yaw| tá|na’|e w|mìn|ìna|lá |ɔn | mì| ɲá|à d|ali|n m|yɛr| yɛ|sɔr|gɔ’| tɔ|ama|báa|nga| dà|i m|i à|sìg|ìgi|yɔr|gɔn|w n|áar|a d| sé|ána|àng|len|à i|si |ɛra|á d|bɛr|a s|bɔ |ólo|a h|i b|ɔ s|ɛ l|den|ɛ’ |à t|àra|ɔya|gɔy|kɛy|ógo|u’ |aya|’ d| má| dɔ|ra’|a f|ɔny|’ f| ó |ili|sí | se|se |ko |cóg|a t| có|dén|hɔr|ɔɔn| hɔ|ma’|lan|ika|ina|kàl| a |àla|n s|ɛ m|i t|rɔn|tig|ànt|a w|tá |e n|i s|à n|nna| í |’à |ò k|a g|n d|an |ga |fɛn|ɔ à|li |e i|ɛɛɛ|kél|ati|so’| yé|i f|áki|dàn| k’|i n|k’à| nà|í i|í à|lik|yé |igɛ|e’ |e ò|go | lɔ| na|ɔ b|w l|í t|rɔ’| dò|ò b|min|ti |àga|ow |n t|mad| mi|ò l|éle|gi |ɲán|í y|kil|dɔ |nba|i ɲ|gu | wó|ɛli|i l|úru",
    "wol": " ci|ci | sa|am |sañ|añ | na| ak|ak |lu |it | mb| am|aa |na |al |ñ s|ñu |ne |mu |te |pp | ne| ko|m n|i a| ku| ñu| te| mu|baa|u n|ko |u a|mba|a s|e a|ay | wa| lu| do|ar | ni|u m|nit|oo |épp| ta|oom|gu |t k|i b|ku |u k| it|éew|rée| ré|u y|xal| aa|kk |i d| bu|doo|i w| bi|war|u c| yi|aay|llu| li|fee|loo| xe| xa| ya|taa| di|yi |ama|on |u j|yu |eex|ew | yo|boo|xee| bo| wà|àll|wàl|mi |o c|ir |mën| më|yoo|ul | gu|nn |en |oot| du| so|oon|e m|dam|een|u d|i n|uy |eet|i m|ara| ba|bu |a a|ata|okk|aad| lé| ay|ju |ada| nj|nam|und|axa|dun|m a|enn|r n|aar|ex |taw|ala| jà| pa|et |di |ën |ana|ral|ota|k s|awf|naa|wfe| gi|u l|igg|aju| dë|ma | aj|ti |u t| se|ax |gée|mbo| ja|ool|bii|li |a m| ke|see|m c| ye|i l| ng|yam|ngu| yu|w m|an |ken|n w| lo|i s| me| de|m m|i t|om |u x|n t| an| mi|jaa|laa|ee |bok|lig|p l|n m|t y|ggé|k l|a l|lép|àpp|jàp|aam| jë|aax|ekk|nd |góo|ewa|ndi|tax|a d| da|amu|éey|gi | su|k c|n n|l b|o n|k t|p n|jàn|àng|gir| jo|a c|n a|n c|ñoo|i ñ|a n|kaa|ba |m g|le |une|kan|e b|la |nda|lee|i j|ang|aat|k n|ey |ant|iir|a y|l a|e n|nan|añu|men|j a|ok |k i|nee|l x|omi|i c|oxa|aw |g m|dox|nte|opp|u w|ngi| mo|omu|y d|are|i k|aan|em |du |a b|njà|ñ ñ| ti|m r|kun|ddu|ali| së| la|eg | ma|ëra|ng |xam|mul",
    "nds": "en |un |at |n d| da| de| un|een|dat|de |t d|sch|cht| ee| he|n s| wa|n e| vu|vun|ech|rec|ht |er |ten| to|tt | si| re|ver| ge|nne|t w|n w|ett|n h|n v|k u|n u| el|gen|elk|lk |t u|ien|to |ch | ve|wat|sie|war|het|it | an|n f|ner| mi| in|ann|rn | fö|ör |r d| fr|t r|hte|orr|ich|för| sc|rie|eit| or|den|nsc|ege|fri|rer| st|t g| up|aar|t a|nd | is|ll |rre|is |up |t e|chu|rt |se |ins|daa|lt |on |t h|oon|che|all|n g| ma|rrn|min| se|ell|hei| na|t s|n i|n a|nn |len| sü|in |rd |nen| we| bi|n m|e s|ven|ken|doo|sse|ren|aat|e m|ers|n t|s d|n b|lle|ünn|t t|n o|ik |kee|e g|t v|n k|hen|arr| dr|heb|lie|ebb|e v| al|e a|llt| ke|hn |he | wi|cho|ehe|ok |ard|sta|men|ill|gel|tsc| ok| do|an |düs|ene|erk| gr| dü|weg|ie |ede|ieh|r s|sün|üss|und|raa| dö|röf|drö|t m|ats|öff|e f|ünd|e w|dör|ens| gl|rch|sik|ig |kt |örc|ere|gru| ün|ff |ahn|nre|mit|st |al |aal|hon|ert|kan|nat|der|dee|enn|run| so|eih|lic|ehr|upp|iht|nwe| fa|pp |eke|e r|unw|t n|taa|hup| ka| be|bbt| wo|p s|el |as |t f|bt |e e|nee|maa|huu|eve|nst|ste|mee| ni|inn|n n|ern|iet| me|hör|dde|ent|n r|t o|öve|are|arb|ite|ter|l d|ach|nic|bei| as|lan|t b|d d|t i|ang|ame|rbe|utt| ut|pen| eh|uul|iek|hr | ar|r t|ul |e d|art|n ü|one|eer|na |nte|mut|ete|üd | mu|üüd|lüü",
    "vmw": "tth|la |thu|a e|na |hu |kha|a m|we |ana| mu|a o|awe|ela|ni |ala|hal|edi|to | ed|ire|dir|eit|ito|rei|ya |a n|wa |mut|a w| wa| ni|akh|aan|u o| on|o y|okh|utt|a a|haa| n’|wak|nla| wi|ari| yo| si| ok| ot|iwa|ka |iya| sa|ne |apo|lap|ale|le | oh|oth|att|the|mul|aka|oha|kun| el|aku|oni|mwa|ha |e s|unl|tha|ott|ele|ett|e m|o s| va|ene|e n|e o| ya|oot|hav|ade|ihi|iha|ihe|de |o o|e a|eli|hen|amu|e w| aw|hel|dad|ra | at|po |i m|lel|wi |o n|owa|e e|ula| en|ta |o a|i a|moo|waw|ina| ak|ota| mo|sa |a s| so|han|ara|var| kh|a i|ri |aya|itt|anl|row| mw| et|i o|ika|’we|nro|i e|n’a|her|lan|nak|sin|lo |elo|vo |u e|eri|n’e|oli|thi|u a|a’w|ida| ah|a v|liw|kan|him|lib|yar|riy|ona|onr|erd|wal|hiy|aa |ibe|rda|wan|ber|era|avi|hiw|nna|i v|hwa|lei|mih|vih| ep|khw|ntt| na|ko |ia |sik|aha|iwe|e k|hun|una|mu |avo|ikh|laa|riw| ma| an|e y|kel|’el|huk|u y|phe|kho|pon|i s|nid|upa|ath|ila|yot|eko|ali|tek| es| it|o e|uku|wih|nan|tte| a |mur|’at|i w|ani|ulu|nih|wel|lik|ira|ane|a y|nkh|saa|ro |n’h|wir|i n|ile|som|u s|hop|inn|ei |ont|kum|yaw|saw|iri| eh|tel|tti|ola|aki|mak|ret|uth|nnu|a k|nuw|ahi|enk| il| nn|ena|va |yok|ute|soo| pi|lal|ohi|hik|mpa|uwi|lih|har|kin|aph|ma |ope|man|ole|uma| oo|mpw| v’|nal|ehi|nin|uni| ek|khu",
    "ewe": "me |ame|e a|le |wo |kpɔ| am|ɖe |ƒe | si| me| wo|be |si | le|sia|esi|la | la|e d| ɖe| kp|pɔ |aɖe|e l| be|e w| ƒe|e e|dzi|na |nye|a a| du|ye | ŋu| na|duk| dz|ukɔ|e s|ome| mɔ|e n| aɖ|kpl|nya|gbe|e b|e m|ple|ɔkp|ɔ a|pɔk|woa|ɔ m|kɔ |evi|nɔ |ŋu |ke | nu|ɔ l|mes|awo| o |iwo|ɔnu|e ɖ| ab|ya |ekp|e k|ɔwɔ|u a| al|nu |ia |ɖek|e ŋ|kpe|ɔme|o a|iny|zi |dze| ny|o k|eme|eƒe|o n|iam|egb|mɔn|blɔ|i n|wɔ |a m| eƒ|o d|alo|siw|ɔɖe|lo |o m|eke|e g| bu|eny|ubu|ŋut|ɔ s|bub|lɔɖ|enɔ|meg|akp|abl| ha|e t| ta| go|mek|eɖo|ukp|li |nɔn|to |any|a l|etɔ|ɔ ƒ| ey|e h|nuk|gom|ɔ ɖ|ɔe |bɔ |ɖo |i s| to|anɔ|a k|ɔnɔ|e x|awɔ|e ƒ|tɔ | ƒo|mev| es| ɖo|ɖes| xe|i w|tso| wò|wɔw|mɔ |iaɖ|i l| ag| li|ã |o ƒ|odz|a s|agb|yen| ts|bu | he|bet| gb|o e|ewo|a e|ɔna|i d|ti |ele|dɔw| ka|i a|uti|peɖ|ta | an|afi|a ŋ|a ƒ| ad|ƒom|se |ɔwo|xex|exe|oma| ma|vin| dɔ|o l|wɔn|eye|a n|i t|vi |ɔ b|so |edz|gbɔ|ɖev|ado| se|ɔ n|oto|ene|eɖe|xɔ |nan|ɖod| af|ben|zin|ee |de |ɖok|dzɔ|gɔm|adz|ɔ k|wom| gɔ|uwo|i ɖ|a d| vo|a t|o g|i b| xɔ|oɖo|i m|e v|ats|o ŋ|sɔ |ovo|i e| at|vov|ne |ɔ e|kat|o s| ne| aw|da |wòa|eŋu| as|asi| el|o t|yi | sɔ|men|a b|ze |mee|uny|te |dom| ak|man|ẽ |i o|ie |ana|ata|ui |axɔ|u k|ɖoɖ|tsi|ema|rɔ̃|ded|ɔ g|ena| en|kɔm|met|u s| eɖ|oku|kui|mew|xem",
    "slv": " pr|in | in|rav|pra|do |anj|ti |avi|je |nje|no |vic| do|ih | po|li |o d| za| vs|ost|a p|ega|o i|ne | dr| na| v |ga | sv|ja |van|svo|ako|pri|co |ico|i s|e s|o p| ka|ali|stv|sti|vsa| ne| im|sak|ima|jo |dru|nos|kdo|i d|akd|i p|nja|o s|nih| al|o v|ma |i i| de|e n|pre|vo |i v|ni |red|obo|vob|avn|neg| bi|ova| iz|ove|iti|lov|ki |jan|a v|na | so|em | nj|a i|se | te|tva|oli|bod|ruž|e i| ra| sk|ati|e p|aro|i k| ob|a d| čl|eva|rža|drž| sp|ko |i n| se| ki|ena|sto|e v|žen|nak|kak|i z|var|ter|žav| mo|di |gov|imi|va |kol|n s| z |mi |ovo|rod|voj| en|nar|ve | je|pos|a s|ego|vlj|jeg| st|h p|er |kat|člo|ate|a z|enj|n p|del|i o|lja|pol|čin|a n|ed |sme|jen|eni| ta|odn| ve| ni|e b|en | me|jem|kon|nan|elj|sam|da |lje|zak|ovi|šči|raz|ans|ju |bit|ic | sm|ji |nsk|v s| s |n v|tvo|ene|a k|me |vat|ora|krš|nim|sta|živ|ebn|ev |ri |eko|o k|n n|so |za |ičn|ski|e d| va|o z|aci|cij|eja|elo|dej|si |nju|vol|kih|i m|nst|kup|kov|uži|la |mor|vih| da|h i|lju|otr|med|o a|sku|rug|odo|ijo|dst|spo|tak|zna|edn|vne|ara|ršn|itv|odi|u s|čen|boš|nik|avl|akr|e o|vek|dno|oln|o o|ošč|e m|ta |vič|bi |pno|čno|mel|eme|olj|ode|rst|rem|ov |ars| bo|n d|ere|dov|ajo|kla|ice|vez|vni| ko|ose|tev|bno|užb|ava|ver|e z|ljn|mu |a b|vi |dol|ker|r s",
    "ayr": "apa|nak|aka| ja| ma|ata|ana|aña|asi|aqe|cha|aki|ñap|jha|mar|aw |kan|ark| ch|una|aru|paw|ti |jh |pat|jaq|rka| ta|a j| ar|hat|ama|tak| wa|ach|iw |a a|ani|a m|spa|na |kap|ki |taq|pa |jan|sa | uk|qe |kis|kas|ha |ina|niw|may| kh| am|at |ati|pan|i j| ya| mu|iti|ka |ayn|t a|as |amp|ch |a u|an |pjh|yni|mun|iña|uka|ajh|ru |w k|hit|ñan|h a|is |isp|qen|khi|isi|has|ejh|e m|sis|atä|oqa|nch|rus|kam|siñ|han|mpi|kañ|qha|sin|asp| in|ham| uñ|ñat|hañ|qat| sa|yas|yat|ita|äña|ska|tap|asa|kha|sit|täñ|tha|arj|ma |a t|ta |tas|nka|sti|iri|sna| ji|a y|ara|pas| as|ñja|rjh| ku| ut|hap|tat|kat|tis|pi |apj|jam|noq|aya|i t|i u|ukh|ura| ka| ju|ans|qas|uñj|asn|a c|nin|aqa|kaj|nañ|sip|i a|us |i m|kun|w u|anc|api|ino|ili|uya|pac|tan|jil|ña |lir|utj|w j|s a|ipa|chi|kiw|w m|kak|muy|pis|rak|hac|isa|njh| lu|mas|amu|ena|nsa|w t|nan|ali|s j|ink|tay| a |upa|wak|a k|way|wa |in | ay|tañ|s m|jas|mp |lur|ank|khu|rañ|h j|t m|iru|eqa|ayt|yt |heq|che|anq|en |lan|rin|ipj|i c|mat|qpa|aqh|tja|awa|uki|k a|qej|anj|sap|pam|usk|yaq|kar|nip|llu|wal|run|yll| aj|lin|a w|ayl|n m|jac|isk|naq|ast|h u|ni |ath|a i|ayk|jhe|aqp|h k|uch|inc|hus|sar|s u|s w| pa|nap|ap | un|ak |n j|tir| ak|ns |s c|ust|arm|ask|war|ri |man|pit|qer|juc|sir|n w|hik|ika",
    "bem": " uk|la |uku|wa |a i|a u| mu|kwa|ali|ya |shi|a n|amb| na|sam| pa|ula|ta |nsa|fya| no|nga| ya|mbu|bu |ata| in| ku|a m|lo |se |nse| ba|ntu|kul|ons|ala|ang|ins|aku|li |wat|mo |tu |alo|a a|ngu|ili|nok|ika|na |nan|a p|ing|a k| al|mu |gu |o n|sha| ca|ila|oku|e a|ikw|yak|ka |lik| um|ana|lin|yal|ga | ci|aba|lwa|ku |ish| fy|uli|a b|u u|unt|i n| on|kal|lil|u y|ba |hi |ukw|amo|po |ulu|kan| sh|kup|ko |we |and|a c|aka|le |u n|cal|o u|ha |ile|ama|umu|bal|kus|akw|u m|mul| if|o a|kut|nsh|o b|ung|apo|e n|kub|mun|uci|yo |mbi|nka|cit|bul| ab|any| bu|pa |ne |u c|u b| ka|abu|ndu| fi|e u|a f|ton| ne|ant|no |i u|u a|ban|o i|cil|cin|ify| ng|pan|tun|gan|nda|kuc|kwe| ns|o c|ngw|o f|ans|fwa|a l|pam|tan|ti | am|kum|kuk|lan|u s| is|wil|du |nya|und| ic|e k|wal|aya|bi |bil|ubu|ush|fwi|int|nta|utu|twa|wab|afw|ela|o m|uko|ako| ta|lam|ale|gwa|win|u k|apa|ma |onk|way|kap|i k|imi|a o|upo| im|iwa|mba|o y|ngi|ici|pak|lul|ind| ma|e p|de |nde|gil|e b|iti|uti|ilw|a s|imb|da | li|uka|hiw|umo|pat|afu|kat|ine|eng|fyo|bun| af|uma|kuf|alw|til|ita|eka|afy|mas|e y|tul|but|nto|usa|kwi|mut|i i| ak| ap|bom|umw|sa |ont| wa|ilo|u f|baf|fik|ina|kab|ano|pal|ute|nab|kon|ash|bwa|ifi| bo| bw|lya|atu|ubi|bik|min|aik|cak|nak|men|ubo|ye |hil",
    "emk": " ka|a k|ka | la| a |la |an |kan| ma|a l|ni |ya |na |ama|a a|lu |n k| di|ɛɛ |di |a m|ma | bɛ| ja|ana|a b|aka|bɛɛ|man|iya|a d|ara|dɔ |jam|alu|en |a s| si| sa| mɔ|mɔɔ|ani| ye| dɔ| tɛ|ye |i s|i a|den| ba|riy|tɛ |sar|ɔɔ |da | al| kɛ| ni|ari|ila|a j| i |a t|n d|ɛn |ɲa |kak|ra |ada|ɛ k|i k|i d|len|u d|ele|nna|sil|n n|n m|olo| se| bo|ade|aar|ɔdɔ|ɛ d| kɔ|ɔ a|ank|ɔn | fa|fan|a ɲ|se |lak|lo | da| na|bol|kel|e k| wo|i m|aya| ke|ko | ad| mi|nu |baa| sɔ|dam|nda|ɔnɔ|mɛn| ko|a f|and|ala|ɛ y|ɔ b|ɛ s|le |ɛ m|i l|i b| wa|n s|a i| de|ina|li |ɔya|mad| mɛ|aba| le|n a| ha|a n|ɔ s|u l|nɲa|han|n b|sɔd|dɔn|kɔn|kɛ |ata|nɔ |kar|dan|in |u k|ɔ m|kɛd|ɛda|i j| su|nnu|a w|ɔ k|nka|lat| gb|ɲɔɔ|aji| an|a h|nin|olu|u m|kun|a g|on |asa| ku|ibi|jib|don| lɔ|i t|waj|bɛn|ɛnn|ban|ɔrɔ|wo |ran|si |ɛ b|ɛnɛ|ɛ l|mak|suu|e m|ii |i f| ɲi|e a|o m|ɲin|enn|usu|ba |ɛdɛ|yan|taa|nan|u b|u t| ɲa|nal|nba|ɲɛ | ɲɔ|law|ati|nad|rɔy|hɔr|a y|iri|sii| hɔ|mir|ti |enɲ|bɔ |u s|n t|u y|ini| te|ta |kol|enb|awa|bat| fu|nki|kil|ili| du|bar|ɛ j|fɛn|fɛ | do| dɛ|gbɛ|su |uus|aam| ta|afɛ|may|lɔ |nni|ɔnn|lɔn|maf|o a|e d| bɔ|din|sab| fɛ|ɔ j|o y|i w|tan|ɔɔy|dɛɛ|bɛd|kad|min|ɔlu|dal|ɔɔl| tɔ|ɔɔn|e f|biy|ali|e b|kɔd|te |wol|bi |e w| mu|ida|du |ant|nɛn|dɛ |ɛ a|dah",
    "bci": "an |be | be| ɔ |un | i |ran|sra|wla| sr|kwl|in |la | kɛ|n b|kɛ |n s|n k| kw| ng|n n|lɛ |a b|n m|le | nu|a k|nun|i s| a |man|n i|ɛn |e k|ɛ n|kun|n ɔ|mun| ni| ti| mu|nin|nga|ti | n |ɛ ɔ|e n|ɔ n| su|ga |ɔ f| fa| ku| li|e s|su |a n|a s|a ɔ|ɛ b|i n|e a| sɔ|wa |sɔ |i k| ma| le|ɛ i|tin|ɔ k|di | at|ata|ta |ɔ l|fat| mɔ|ati|mɔ |lik|akw|ɛ m| sɛ|lak|e w| sa|dɛ |ndɛ|mɛn|i b| mm| yo|iɛ |ba | nd|nvl| nv| kl|vle|sɛ |a a| mɛ| fi|ke |und| wu|ɛ s|n a|mml|liɛ|mla| ka|ike|yo |ɔ t|ngb|i a|e b|a m| an|ɔ ɔ| di| yɛ| si| bo|e t|ndi|bo | ye|o n|n t|e m|fin|e y|n f|sa |ɔ b| fɔ|dan|n y|fa |i i|uma|yɛ | ju| ny|ɔ i|nan| na|kan|ɔun| tr|wun| b | o |n l| aw|a y|b a| wa|fɔu|i f|ɛ a|ing|ge |uɛ |i w|a w|nge|klu|ka |gba|e i|awa|o m|jum|ɔ y|ɛ k|wie|a i|ie | fl|e f| wl|tra| ba|lo |lun| ak|ang|ye | wi|e l| kp|uan|i m| uf|uwa|n w|sie|flɛ|kpa|alɛ|luw|flu|o i|kle|ua | da|nyi|nzɛ|wuk|ɔ s|wo |e ɔ|ika| wo|wan|bɔ |ian| bl|wlɛ| bu|anz|o ɔ| af|aci|u b|bu | ya|ɛ w|ufl|bɔb|te |zɛ |ɔ d|a t|elɛ|i t|ci |nua|fuɛ|ɔbɔ|u i|anm|i l| w |w a| bɔ|o b|lu |se |u m|ilɛ|iɛn| ja|a j|afi|i ɔ|n u| se|unm|nda|yek|bɛn|gbɛ|eku|ɛ l|nma|kac|u s|san|ko |o y|o s|a l|u n|si |anu|aka|any|ɛ d| ko|n j|ɔ w|u a|fi | yi|anw|i j|uka|fiɛ|a d|o a|lel| kɔ|ɔlɛ|ɔn |a f",
    "epo": "aj | la|la |kaj| ka|oj | de|on |de |raj| ra|iu |ajt|as |o k| ĉi|e l|j k| li| pr|eco|aŭ |ĉiu|jn |ia |jto|est| es| al|an | ki|pro|io | ko|en |n k|kon| ti|co |j p|o d| po|ibe| aŭ|ro |tas|lib|ber|aci|toj| en|a p| ne|cio|ere|ta | in|to |do |o e|j l|n a|j d| se|a k|j r|ala|j e|taj| re|rec|iuj|kiu| pe|o a|ita|ajn|ado|n d|sta|nac|a a|nta|lia|ekt|eni|iaj|ter|uj |per|ton|int| si|cia| ha|stu|a l|je | je|al |o ĉ|n p|jta|tu | ri|vas|sen|hav|hom| di| ho|nte|a e|ali|ent| so|nec|tra|a s|ava|por|a r| na|igi|tiu|sia|o p|n l|ega|or | aj|soc|j ĉ|s l|oci|no | pl|j n|kto|evi|s r|j s|ojn|laj|u a|re | eg|j a|gal|ers|ke |pre|igo|er |lan|n j|pri| ku|era|ian|rim| fa|e s| ju|e a|ika|ata|ntr|el |is |u h|li |ioj|don|ont|tat|ons| el| su|go |un | ke|ebl|bla|n s|oma|ĉi |raŭ|kla|u r|ne |ili|iĝo|o t|s e|tek|men|nen|j i|nda|con|a d|ena|cev|moj|ice|ric|ple|son|art|a h|o r|res| un|u s|coj|e p|ĝi |for|ato|ren|ara|ame|tan| pu|ote|rot| ma|vi |j f|len|dis|ive|ant|n r| vi|ami|iĝi|sti|ĝo |r l|n ĉ|u l| ag|erv|u e|unu|gno| ce| me|niu|iel|duk|ern| ŝt|laŭ|o n|lab|olo|abo|tio|bor|ŝta|imi| ed|lo |kun|edu|kom|dev|enc|ndo|lig|e e|a f|tig|i e| kr| pa|na |n i|kad|and|e d|mal|ono|dek|pol|oro|eri|edo|e k|rso|ti |rac|ion|loj|j h|pli|j m",
    "pam": "ng |ing|ang| ka|an | pa|g k| at|ala|g p|at |apa| ma|kar|lan| ki|ata|kin|pam|g m|ara|tan|pan|yan| a |pat| in| ba|aya|n a|g a|ung|rap|ama|man|g b| ni| di|nin|din|n k|a a|tin|rin|a k|ami| la|tun|n i|ari|asa|nga|iya|ban|ati| me|nan| da| sa| na|t k|gan|g s|bal|etu|mag|a i|met|sa |la |ant|kal| iy|kap|a n| mi|in |ya |aka|tau| o |san|n d|au |lay|ana|mak|yun|na |ika|a m|ipa|ran|atu| al|n n| ta|ti |ila|g l|ali|kay|nsa|aga|a p|iti|g t|par|u m|ans|nu |al |g i|t p|iwa|a d|syu|t m|sab|anu|un |uli|mip|ra |aki|aba|u a|mal|as |mil| it|una|bla|abl|ita|awa|kat|t a|ili|kas|g n|lag|da |tas|i a|wa |n l|lal|dap|mas|bat| pr|abi|ap |a b| e |mik|ani|sal|li |ad | an|ral|ira|gal|a r|lin|g d|nte| li|ale|kab|e p|ula|wal|lit|nti|s a|lip|nta|pro|te |ie |wan|ag |tu |upa| ya|g e|tek|usa|g g|bie|o p|it |pun|ian| bi|lat|aku|be |n p|sas|iba|yat|alu|tul|e m|kan|l a|nap|t i|lir|u k|isa|pag|abe|len|e k|rot|en |bil|mam|ksy|ngg|lam|p a|ily|liw|eks|ote|n o|gga|u i|eng|ipu| tu|lya| ri|aul|pas|dan|uri|ema|lab|ta |lak|are| ar|ail|tam|o a| ke|ril| pe|sar| ra|ina|asi|ka |art|pak|sak|mit|rel|i k|gaw| ul| re|inu|i i|mun|abu|asy|mba| pi|ags|obr|gpa|a o|am |n m|mem|o k|isi| mu| nu|mis|nun|era|ndi|ga |agp|aun|mab|anm|lub|gla|e a|nme",
    "tiv": "an | u | sh| na|nan|en | a |ha |sha|shi| i |er |a i| er|or | ma|ar |gh |n i|n u|a m| ve| ci|n s|han|u n| ke|lu |man| lu|n m|yô |a u|u a|n a|r n|a k|mba|in |ii | ha|kwa|ken|n k|na |hin| mb|a a| kw|n n| ga|ga |cii|agh|a n|aa |wag|ve |a s| yô|nge|ba |r u|u i| gb|ana| or|a t|mao|r i|ity|ma |aor|anm|nma|gen|oo | ta|ir |ren| kp|i n|ang|r m|e u|gba| ng|r s| ia|ere|ugh| it|ian|doo|ese|uma|kpa| la|u k|n g|ngu|gu |om |oug|on |ol |a h|ior| ts| he| ne|tar|h u| ka|la |n t|se |e n|r a|a v|hen| ku|aha|mac|yol|i u|ace|ge |ce | de|ish|u t| io| do|tom|hi |a e|u u|o u|i m|iyo|i d|bar|ave|ua |u s| te|igh|a l|e a|m u|a w|un |n c|n e|ne |ev |r k|ind|ene|sen| is|ndi|ker|era| to|a o|ima|u v|a g|paa|n h| wo|di |yar|tya|ase|e s|de |n y|ee |end|him|tes| mk|u m|ka |tyô| mz|won|u e| um|u h| wa| mi|yan|tin|ran|ie |hie|a c|hir|i a|e k|i v|mak| in| za|r c|nen|e l| ig|i k|kur|nah|tse| ik|ves|eng|rum|mzo|men|zou|i l|e i|a d|i e|i i| ya| vo|mlu|ô i|inj|nja| as|vou|ura|ron|gbe| iy|r t|ôro|a y|oru|e e| zu| ti|ra |n l|ci |u l|ver|kpe| fa|was| ml|e m|em |io |mi |da |civ|môm|ant|see|ivi|wan|vir|nda| ij|soo|zua|lun|ea |vea|wa |ôm |av |hio|ake|a f|igb|l i|u z|r l|zan|nta|e g|hem|h s| mt|ded|iky|o s|r g|do |ndo|iji| hi|e h",
    "tpi": "ng |ong|lon| lo|im | ol| na|la | ma|pel|ela|ri |at | bi|ait|na | yu|ol |gat| ra|bil| ka|ilo|man|rai|t l|it |eri|mer| o |wan| i |mi |umi| wa|ing|yum|ta |t r|tin|eta|get|lge|olg|iga| ig| sa|ara|em |rap|i o|ap |nme|anm|in |ain|an |a m|ant|ape|nar|m o|i n| no|g o|g k|i i|as |ini|mas| me|n o|sim|tri|kan|kai|ntr| ga| st|a s| pa|gut| ha| wo|g y|yu |a l|g s|ama|m n|ok |g w|wok|spe|a k|i b|i m|g l|i l|sin|sam|pim|m l|kam| gu|l n|amt|tpe|g n| in|ts |a i|mti|utp|isp|kim|its| la|isi|aim|api|lo |o m|g b|tai| di|a o|dis|a t|p l|en |map|t w|s b| lu|luk|sem|no |tim|lai| ko| ki|ave|ols|nog|m k|lse|sav|nem|ve |a p| fr| em|nim|tu |i y|nka|et |m y| ti|g t|nap|g p|sta|tap|aun|a n| tu|un |asi|fri|pas|n m|m g|l i|aut|ane| sk|kau|t n|nta|sen|n s|oga|i g|g g|m i|kis|o i| ba|tok|os |usi|m s|ngt|anp|a w|s n|a h|s i|iki|i s|sai|l m|npe|ari|o l|o b|g r|ik |uti|iti|gti|aik|ut | to|a g|ili|a y| pi| ta|kin|ni |n b|lim| ye|yet| we|k b|ina|g m|uka|str|ins|rid|a b|anw|nsa|nwa|m w|m m|dom|ot |hap|ido|aus|i w| ne| si|n i|t o|dau|ese|rau|ank|sap|o k|m b|nin|pos|o n|am |go |s o|s l|u y|pik|vim|ivi|es | go|n n|kot|ron|ple|g d|a r|kul|ali|sku|apo|om |g h|l l|s s|ti |les|t m|gav|eki|nai|mek|kom| as|ind|nda|ip |liv|ul |ati",
    "ssw": "nge|eku|a n|ntf| le|e n| ng|tfu|lo |la |nga| ku|fu | ne|o l|khe|tsi|nkh|le |he |unt|elo| lo|si |ele|a l|ni |ung|mun|ma |lun|lel|wa |lek|nom| um|eni|oma| no|kut|hla|onk|a k|e l|ent|e k|gel|ela|ko |eli| ba| la|pha|ats| em|o n|ang|ema|eti|nel|nye|ban|ulu|uts|hul| na|aka|tfo|e u|lan|oku|lok|won|khu|esi|lul|a e|ule|ala|umu|tse|akh|ye |ve |i l|nek|ana|ane|lil|kwe|aph|na |we |ke |aba| wo|nti|ndl|ale|i n| ye|ba |ilu|gek|gan|lab|any|hat| li|tin|wen|gen|kel|len|ndz|fo |and|let|eko|e b|lwa| ka|te |set|nem| kw|mal|ka |ant|alu|ne |phi|ing| un|u u| ek|ise|une|e e|kul|nal|lal|mph|o y|uhl|fan|‐ke|ile|i k|kub|ukh|ben|kan|ako|a b|kat|eke|ive| ti|sek|nak|sit|seb|u l|alo|yel|kho|wo |kha|les|o e|ngu|kus|lom|ini|ikh|elw|isa|sa |fun|e w|ebe|o k|jen|iph|eng|kwa|ahl|uph|emb|be |tis|lwe| si|etf|isw|uma| se|ene|ta |nan| im|i e|enk|e a|abe|kun|ume|hak|nen|dle|ase|sen|kuv|tel|ebu|omu| in|lin|sel|tfw|nhl|a i|e i|kuk|uba|ti |kuf|mhl|bon|ula|sin|int|fut|dza|lak| wa|ind|ave|ali|yen|ete|to |ngo|use|kuh|hol|ze |a‐k|ona|a a|se |nje|und|swa|lon|eki|ike|i a|lis|tsa|gab|sim|i w|its|fol|e t|o m|hi |ndv|phe| ya|ma‐|utf|sik|liv|bun|cal|nta|ata|gal|mel|ute|wem|gap|han|uny|oba|alw|ili|a w|mbi| bu|gob| at|awo|ekw|dze|u n|emp",
    "nyn": "omu| om|ntu|tu | ku|a o|ra | ob|wa |obu|ari|a k|mun|a n|unt|mu |uri|nga| mu|aba|ri |a e| na|e o|gye|rik|ho |a a|han|ang|re |ga |iri|bwa|oku|aha|bur| bu|na |eki|ka |iku|ire|uga|ndi|ush|ban|ain|ere|ira|we |kur|sho| ek| ab|ne |ine|a b|and| ni|u a|e k|sa |u b|iha|i m|e n|kir|be |aho|bug|ibw| eb| ba|ing|ura|gir|u n|kut|ung|ant|abe| ah|ye |e b|i n| bw|kwe|ebi|era|iki|ba |ro | kw| ok|uba|gab| no|zi |bir|i k|u o|o o|rwa|o e|kub|end|ama|mer|eka|kug|ate|tee|di |rir|bus|kuk|rin|ish|sha|i b|wah|ha |u m|bwe|ngi| ai|ara|kwa|kan|o g|za |ngo|kuh|ana|i a|eme|eek|i o|baa| ka|go | gw|nib|zib|ash| or|iro|she|o k|u k|iin|o b|iba|oon|gan|agi|ngy|hem|mwe|ona|oro|bwo| ar|ya |i e|uru|nar|eir|uta|tar|kwi| ti|egy| n |hi |bar|isa|ute|o a|shi|ora|e e| en| ki| nk|riz|nda|da |ja |si |nsi|wen|yes|tek|yen|aga| am|o n|rei|rag|ki |obw|mur| ha|ris|wee|amb|aab|bya|kus|ugi|a y|ind|ata| ne|bas| ky|ija|hob|ikw|mus|gar|a g|eky|dii|bor|aar|ibi| we|aka|ham|emi|ekw|rer|ini|har|gi | bi|naa|kor| er|gwa|n o|iza| by|eih|yam|iho|rih|i y|ete|o m|eby|but|a r|ika|mag|ozi| em|ong|iik|iko|uka|nik| yo|sib|eri|utu|tuu|amu|uko|irw|nka|ani|yaa|u e|mut|roz|mub|ens|aij|nis|uku|kye|nde|der|e a|nok|nko|asa|aas|hab|obo|ent|ahu|rye|oba|kih|yob",
    "yao": "chi|ndu| wa|du | ch|a m|aku|akw|ni |kwe|und| mu|wak|wan|mun| ku|la |e m|wa |ulu|amb| ak|kut|u w|ali|mbo|lu |we | ma|le |ufu|ful|ila|a k|bo |a n| ga| ni|amu|kwa|se | na|ose|hil|nga|go |aka|and|ang|na | uf| pa|ete|uti|jwa|kul| jw|son|ngo|lam|e u|ne |kam|oni| so|u j|e a|ele|a c|ana|wal|ti |isy|cha| yi|gan|te |ya |mwa|lij|wet|che|ga |yak|ili|pa |e n| ya|o s|nda|i m|ula|jos|i a|ile|ijo|li |e k|o c|a u| mw|ich|mul|uch|o m|asa|ala|kas| ka|i w|ela|u a|ach|his|nam|lan|yin|i k|ind|ani|sye|yo |si |pe |gal|iwa|man|sya|aga|a w|o a|ule|ikw|asi|kus|ope|ma |gak|e w|jil|kap|hak|ika|ite|aji|mba|u g|ase|mbi|kum|uli|any|ape|a y|ekw|mal|imb|ja | al|end| ng| ja|mas|usi|kup|e c|pen|ye |anj|ka |a j|a p|lem|o n|ama|him|ago|sen|eng|ane|ako|mch|ola|och|oso|ena| kw|sop|lek|pel|gwa|hel|ine|gam|u y| mc|i y|awo|ons| mp|ole| li|wo |i u|hik|kol|auf|mka|tam|syo|e y|mpe|ten|ati|mau|nji|wam|muc|ong|i g|kan|uma|je |iku|nag|kwi|da | ul|cho|ngw|ene|iga|ano|esy|ion|upi|pag|o k|eka|wu |uwa|kuw|sa | un|a l|bom|iya|uni|jo |ale| ji|apa|yil|lil|uku|i n|o g|a a|o w|waj|mus|ipa|pan|pak|one|i c|ujo|duj|emw|nya|tio|jak|oma|nja|hiw|dan|apo|e j|poc| wo|lic|alo|eje|ing| mi|e p|lo |lig|a s| yo|ung|no | m |upa|ata| bo|nde|he |i j|was",
    "lav": "as |ība| un|un |tie|ies|bas|ai | ti|esī|sīb|ien| vi|bu |vie|ir | ir|ību|iem| va| pa|em | ne|s u|am |m i|šan|u u|r t|pie| ci| sa|ās | uz|vai| ka| pi|brī| iz|rīv| br|uz |cij|dzī|ena| ar|ar |isk|s p|es | at|āci| ap|ot |nam|viņ|inā|ikv|kvi| no|s v| ie|vis| ik|i i|pār|u a|ju |nu | pr|edr|vīb|īvī|iju|drī|u p|dar| st|lvē|cil|ilv|s t| la|iņa|ana|s i|n i|īdz|s s|kā |tīb|i a|ija|bai|ībā|ied|s n|arb|val|līd|s b|aiz|tu |iec|cie|ām |gu |vēk|īgu|īgi|ka |jas|umu|mu |t p| jā|u v|zīb|ska|lst|als|kum|gi |s l| tā|jot|stā|st |n v|vēr|a p|arī|aut|n p|ama|kas|u k| da| ta|nīg|izs|ojo|anu|ņa |u n|sta|s a|ba | ai| so|s d|a u|ā a|stī|cīb|m u|i u|son|not|mat|sav|iev|ā v|jum| kā|u t|ned|ajā|s k|u i|i v|līt|ēro| pe| dz|i n|per|u d|īks|kat|nāt|līb|nāc|rdz|nīb|pil|rīk|kst|a s|cit|pam| pā|ekl|tau|u s|bie|jā | re|i p|kur|a a|t v| li|evi|tis|evē|bā |ma |rīb|a v|os |ras|abi|nev|iku|skā| ve|lik| lī|nas|t k|ant|uma|roš|kād|zsa|sar|ciā|mie|ais|eci|oci|oša| je|jeb|būt|atr|n b|ieš|rso|ers|soc|enā|a t|t s|īša| be|bez|āda|ebk| ku|glī|isp|tot|spā|roj|lie|pre|ret|aul|na |tra|iet|du |zgl|āt |ard|kt |ier|izg|ikt|paš|iāl|nod|ts |eja|ā u|sab|eno|ēt |ta |tik|tīt|ecī| de|īga|tar|arp|r j|īst|tās|ja |enī|atv|vu |ārē|rēj|rie|oši|dro",
    "quz": "una|an | ka|nan|cha|ana|as |apa|pas|man|lla|aq |sqa|ta | ru|run|kun|ach|qa | ll|pa |paq|na |nta|chi|npa| ma|nch|aku|anp| ch|in |a r|ant|hay|mi |taq|ay |ama|asq|qan|tin|kuy|chu|lap|a k|yta|a a|ima|wan|ata|spa|all| wa|n k| ja|ipa| ya|nin|ina|aqm|his|qmi|a m| ju|pi |anc|nap|iku|aus|usa|kau|pan|nak|kan| mu|naq|aqt| pa|kam|aqa|kay|i k|kus|un |ank|isq|nku|may|yku|ayn|a j|a l|ayt|qta|ati|a p| pi| ri|aci|lli|lin|ayk|uku| al| at|n r|yac|ion|pip|han|inc|n j|ayp|yni|qpa|nac|say|asp|uy |mac|s m|cio|awa|a c|laq|tap| yu| im|a y|yoq|n m|asi|mun| de|has|n a| as|n c|int|uch|nma|s k|oq |ari|q k|hu | na|ypa| tu|tuk|tun|atu|rim|q r| sa|jat|yan| ji|nat|anm|jin|a s|api|hik|uya|nti|pac|tan|ash|mas|n p|n l|k a|ura| su|a q|yuy|n y|ech|q j|unt|yay|ypi|is |lan| qa|usp|kas| an|a w|s w|inp|sin| ta|ma |a t|shw|q a|hwa|uyt|nmi|sim|ere|rec|der|uma|s t|isp|n t|ña | ni| ay|upa|nam|hur|war|waw|imi|nka|sap|kaq|s j|was|y r|usq|kin| un|inm|qas| si|ani|tiy|t a|sta|pay|pis|maq|hin|ha |arm|npi|rmi|ink|aqp|q c|la |i p|nis|yma|nk | ku|aym|nal|hak|rik| ti|unc|niy|y s|iyo|juc| qh|ist|pap| aj|s y|cho|onq| re|ayo|iqp|n s|s p|os |i m|t i|ras|ita|piq|qsi|ku |yqa|mik|q y|eqs|pat|tak| pu|lak|i r|ipi|iya|ywa|muc|a n| qe|san|jun|y l",
    "rmy": " sh|ri | a |shi|hi |i s|ti |ea |ari|i a| ca|rea|tsi|i c| s |a a|ndr|tu |câ |dre|i n|ept|ptu|rep|li | nd| di| un|a s|are|i u|ats|la | la|i l|ear| li|lje|di |ati|lui|ui |a l| tu|tat|â s|ei |sea| ti| câ|un |jei|or |caf|afi| lu|â t| ar|ali|i t|fi |ilj|a c|bâ |râ |car|ibâ|lor| cu|nâ |icâ|a n|i d|s h|hib|tâ | hi|â a|si |u c|eas|tur|tul|ber|â c| in| co|lib|u a|n a|cu |ibe|u s|tea|lu |tsâ|ul |tse|int|a p|i i| pr|u p|i p|url|i m|lji|min|sti|alâ| al| pi|sht|nal|â n| si|ji |â p|rar|ert|sii|ii |nat|til|u l|sâ |lâ |â l|sta| nu| ic|i f|nu |ist|mlu|ili|a t|ots|uni|rta|a d|its|â d|pri| ts|oml|i e| de| na|sia| po|gur|tut| st| at| ân|ura|al |ita|anâ| ma|ips|can|oat|tsl| su| as| so|ând|nts| ap| ea|sh |nit| mi|ent|a i|ate| ac|poa|ilo|sot|ina|ash|ona| lj|âts|rli|lip|â i|unâ|t c|iti|bli| u |nji| fa|zea|tât|ril| om|urâ|con|i b|sig|igu|ntr|pur|par|ntu|let|com|iil| ni|eal|ind|r s|hti|at |ucr|art|adz|arâ|itâ|rtâ|inj|uri| eg| sc|atâ|sin|ral|pse|asi| ba|r a|apu|âlj|ia |chi| va|sun|ter|rlo|ica| pu|luc|unt|i v|ise|ini|est|ast|gal|ega|act|nda|ead|uts|a u|imi|ma |ra |pis|s l|ets|a o|va |pi |lit|scâ|asc|ial|sa | ta|rim|tar|alt|idi|tlu| gh|era|ant|eri|aes|a m| nâ| ae|oar|nea|pro|apt|ana|ta |atl|lic|l s|iun|nte|mil",
    "src": " de|de |e s|os | sa|tzi|tu | su|one| a |sa |ne | e | in|ent|ion|der|su |zio|ere|as |e d|a s|u d|ret|es | cu|ess| pr| so|s d|men|ale|ade|atz| s |re |e c|sos|in |s i|chi| un|nte|ten|etu|er | pe|et |e e|ida| te|le | is| ch|ene|are| es|a p| si|u s|a d|pro|hi |dad|te |sse|tad|zi |e t| on|e i|s e|nt |nzi|u a|sso|onz| co|ame|cun|tos|e a|sas|a c|ntu|net|na |e p|at |nes|du | li|t d|n s|son|s a| o |ber|ro |pes|u e|int|zia|nat|i p|ia |res|nu |un | re|sta|s p|ter|era| po| di|per|s c|t s|rar|ser| at|e o|s s|ibe|lib|si |tra|ust|u c|rta|unu|cus|ntz|adu| to|da |nal| na|ant|egu|eto|und|ine|i s|a e|otu|u p|t a|ert|est| da|a a| fa|ist|ona|pod|s o|pre|iss|ra | ma|ica|tot|les|ntr|una|sua|con|dae|ae |s n|man|sia|ndi|nid|ada|a l|nta|o s|a i|ua |ide| ne|otz|min|rat|iat| pa|nde|ode|dis|ren|ali|a u|ta |u o|sot|u t|ime|ssi| as|o a|pet|e u|nsi|fun|lid|epe|eru|unt|st |t e|end|us | fu| ca|ner|dos|s f|ass|nda|uni|das|iu |ind|a t|ial|a f|ghe|gua| eg|a n| se|ont|etz|s m|s ò|sti|t p|ual|nen| me|sen|com|ura|a b|lic|a o|pen|ado|nos|inn|des|seg|e f|din|òmi|ire|a m| òm|e l|dep|ènt|for|ena|par| tr|u i|ara|cra|sid| no|s u|u r|suo|e n|pri|ina| fi|ria|gur|art|det|s t| bo|tar|emo|run|ama|icu|isp|dam|e r|itu|cum|tut|eli| bi",
    "sco": " th|the|he |nd | an|and| o |al | in|ae |in |es |ion|cht| ta|tio|or |t t|ric| ri|ich|tae|on |s a|is |e a| aw| be|s t| he|ati|ent|ht |ts |e r| co|er | na| fr|bod|ody|his|dy |hes| fo|e t|o t|for|it |ng |ty |n t| or|be |fre|ree| hi|l a|ing|awb|wbo| sh|s o|ter| on|sha|nat|r t|nal|an |n a| as|hal|e o|y a|d t|tit| pe|l b| re|y h|aw | ma|nt |men|air|ce | pr| a | ti|hts|e f|e c|le |eed|edo|dom|n o|e s|ons|d a|res|e w|man| wi|d f|ed |sta|ar |t o|ona| it|ity|at |as |her|ers|t i| de|con|til|il | st|nti|e p|e i|e g|nce|ny | so| di|nte|ony|ns |und|ith|thi| fu|ie |ir |oun|ont|e e| un|pro|oci|nae|y i|lit|soc|com|nin|en |ic |ne |r a| me|ly | wa|ear|ual| en|ame|uni|r i|e h|hum| is|ane|uma|ess|inc| fa|equ| hu|ver| eq|e m|hei|o h|ms |d o| ha|wi |t n|s f| no|t a|int|cla|rit|qua|d i|iti| se|rsa|y s|ial| le| te|e d|r o|ive|r h| la|nit|om |ite|s r|cie|s i|ali|cti|cia|re |aim|rat|ld |tat|hat|rt |per|s h|n f|dis|tha| pu| we|g a|oms|eil|ntr|fai|tri|ist|ild|e u|r s|dec|lea|e b|hau|imi|mai|s n| ac|elt|lt |l t|omm|d p| ga|din|war|law|eme|y t|era|eir|art|ds |s e|ral|nor|tel|ge |g o|eik|eli|rie|rou|nda| gr|lan|mei|ate| ge|n i|ten|id |s d|ors|iou|bei|sam|nta|sec|mmo|lar| tr|ful|ul |mon|s w|anc|l o|gar|ern|ara|d s",
    "tso": " ku|ku |ni |a k|hi | ni|a n| a |i k|ka |i n|wa | ya| ma|la |ya |na |a m| ti| hi|fan| sv|nel|hu |a t|ane|ela| ka|iwa|u n| na|svi|lo |nhu|a l|a h|ele|le |ndz|u k|va | xi|a w|vi |mbe| à |elo|wu | wu|eli| mu|u y|mun|i l| le|nga|umb|lan|nfa| va|u l|be |u h|li |kum|tik|ihi|iku|aka|unh| wa|a s|liw|isa|i m| fa|ma |anu|nu |u t|han| la| ng| wi|wih| ha|a x|yel|a a|lel| nf|i h|ta |ana|o y|e k| nt|u a|i a|eni| li|ndl|ga |any| ko| kh|van|u w|u v|amb|a y|ti |sa |pfu|i t|i w|in |lek|e y|ang|and|ati|yi | è |irh|sva|mat|ani|i s| nd|a v|mel|yen|hla|isi|hin| ye|eke|n k| lo|ulu|kwe|hul|thl| kw|nth|tin|mah|wan|ava| mi|ko |khu|u s|à n|dle|lul|ule|tir|o l|i y|aha|aye|kwa|inf|à k|è k|rhu|mba| th|fum|end|anh|xi |dzi|kel|a f|u f| lè|we |may|eka|nye|gan|dze|vu |ham|xim|mis|thx|aku|tà |xa |hlo| tà|eyi|ima|nti|eki|ngo| si|u p|vak|ngu|lak|ume|oko|lon|a è|o n|lok| ta|zis|hak|u m|i à|ke |i x|u x|rhi|ha |awu|dza|u à|za | là|n w|ung|e n|a à|i f|esv|les|vik|siw| y |à m|to |mha|ola|sav|ond|nya|kot|kol|uma|e h|mbi|e s|naw|ths| dj|fun|mu |a u|xiw| ts| hl|u d| lw|nyi|ki |ong|sun|lwe|ike|ind|nis|xih|e a|èli|imu|sel|sek|iph|zen|lum| pf| xa|sin|umu|sim|ave|kar|ala|wey|sik|o t|avu|wav|oni|ile|wak| yi|ali| hà|gul|e l|ba |i v",
    "men": " ng|a n|i n|ɔɔ |ti | ti|i l| i | ma| nu| gb|ngi|a k|aa |gi | kɔ|ia |ɛɛ |ei | na| a |ma |hu | ye| ta|kɔɔ|a t|na | hu|a m| kɛ| nd|gbi|ya |bi |i y| lɔ|a h|ɛ n|ii |ɔny|u g|i h|nya|uu |lɔn| kp|i m|ngɔ|nga|la |i t|kɛɛ|lɔ |i k|ɔ t|mia| mi|a y|nge| ji|ee |gaa|a a|ɔ n|ɔ i|gɔ |ind|tao|ao | hi|num| le| yɛ|umu|mu |ung|nda|hin|ye |i g|hou|hug|e n|ugb|ni |a l|sia|ndɔ|nuu|a i|maa| ya|ahu|gba|u k|mah|oun|ɔma|le |da |i w|ɔlɔ|i j| va| ɔɔ|eng|i i|va |yei|dɔl|li |lei| sa|yɛ |kpɛ|yil|isi| la|bat|a w|u n|e t|ta |ahi| ki| wo|ɔ k|e a|ɛlɛ|saw| lo|o k|ji |gbɔ|pɛl|uvu|ili| ho|vuu| gu|nde|aho|gbu|ɛ t|ale|ila|nah|kɛ |ɛi |ndu|kpa| wa|nuv|ge |e m| ny|e k|atɛ|wei|awe|a g| ii|bua|ie |awa|wot|yek|kɔl|ulɔ|ing|ga |gul|tɛ |ɔle|u t|gbɛ|ɔ y|nun|wa |hei|ani|ɛ k| tɔ|bɔm|ɛ g|ein|taa| ha|ang|uni|u i|ekp|ɔ g|lɛɛ|kpɔ|a v|kpe|ote|i b|te |u m|tii|ɔ s| we|ɛ h|baa|pe |ɛ y| ɛɛ|i ɛ| ba|fa |a j|bu |ifa|kia|jif|u l|eke|ama|gen|u w|lee|lɛ | lɛ|ɛmb|a b|e y|aah|hii|ngo|bɛm|lek| wi|ui | yi|u y|bɛɛ| he|u a|e h|ɔ m|uah|o g|yen|yan|nyi|aal|hi |wu |yee|maj|ajɔ|jɔɔ|nye|mbo|e g|u ɔ|ong|ka |oi |lon|dun|uny|ɛng| sɔ|lɔl|nyɛ|lii|a p|oyi|iti| bɛ|lɔm|akp|e i|ɛ i| ka|jis|oko|i p|ɔla| wɛ|a s|ewɔ|iye|dɔɔ|lok|gua|ɛ b| li|u h|nin|wee|lah|ula| ga| du|i v",
    "fon": "na | na| e | ɖo|ɔn |ɖo |kpo| kp|nu |o n| ɔ | nu| mɛ| gb|mɛ |po |do |yi |tɔn| é | si|gbɛ|e n|in | to| lɛ|lɛ | tɔ|nyi| al|wɛ | do|bo |ɛtɔ| ny|tɔ |e ɖ|ɖe | bo|okp|lo |ee |ɖok|to |ɔ e|bɛt| wɛ| ac|a n|sin|acɛ|o t|o a|ɛn |i ɖ|o e|bɔ |ɔ ɖ| bɔ|cɛ |ɛ b| ɖe|a ɖ|ɔ n|ɛ ɔ|n b|an |nɔ |odo|ɛ ɖ|o ɔ|ɛ n|ɛ e|ɖɔ |ji | ɖɔ|lin|n n| en|bi |o ɖ|mɔ |n e|pod| bi|lɔ | mɔ|n a|nɛ |ɛ k|i n|un |ɔ m|i e|mɛɖ| hw| ji| ye|ɛɖe|enɛ| ǎ |alo|o s|kpl|u e|a d|ɔ b| nɔ|alɔ|ɔ é|ɔ g|ɖee|si |n m|gbɔ|a t|n k| yi|sɛn|jɛ |e k| wa|o m|e m|é ɖ| jl|hɛn|e e| hɛ| sɛ|nnu|nun|wa |n ɖ| ee|é n|kpa|unɔ|bɔn|ɔ t|a s|ɛ é|u k|ɔ w|inu|e s|i t|zɔn|o l|a y|o g|bɛ |ma |n t|e j|ɔ s|ɔ a|o b|a z| zɔ|jlo|i k|nuk|ɔ k|a e|ɔ l|u t|kɔn|xu |e ɔ| lo|hwɛ| ka|eɖe|o y|e w|jij|sis|n l|ixu|six| su|ali|isi|ukɔ|ɛ a| ay|ayi|su |n g|u a|a b|n d|dan|nmɛ| ta|n ɔ|etɔ|e g|o j| we|onu|wem|ba |ema|ɛ g|o h|ɛ s|ɛ t|i s|u w|n s| sɔ|bǐ | bǐ|hwe|a m|sɔ |lɔn|o d|u m|ple| ma|ɛ l|azɔ| az|tog|ye |i l|hun| jɛ|o w|ogu|o k|u g|kan|oɖo|elɔ|gbe| le| el|wu |ka |ɛ w|n w| li|sun|esu| hu| i |ɖó | ɖó|plɔ|ɖi |ɖè |ɛnn|pan|i m|yet|xo |iin|tii| ti| fi|e b|zan|i w|poɖ|ɖes|a j|ann|a g|gun| ɖi| tu|gan|ɛ m| wu|u s|ɔ y|a l| da|u n|u l|ɔnu|obo|ɔ h|vi |lee|ijɛ|ta |e a|ya |nuɖ|ɔ d|wen| tɛ| ga| ɛ | xo",
    "nhn": "aj |tla| tl| ti|ej |li |j t|i t| ma|an |a t|kaj|tij|uan|sej|eki| no|chi|ij | ua|ma | to| te|j m| ki|noj|ika| se|lis|j u|aka|laj|tle|pa |pan|j k|ka | mo|amp|ali|ech|uaj|iua|j n|man|oj |och|tek|tli|kua|ili|a k|se | pa|ano|ise|ual|mpa|tec|n t|en |len|iaj|is | ue|a m|jto|ajt|pia| am|uel|eli| ni|ya |oua|j i|ni |hi |tok|kin|noc|one|lal|ani|nek|jki|ipa|kit|oli|ati|amo|j s|kam|aua|ia |tim|mo | ku|ant|stl| ik| ke|opa|ase|nij|ama|i m|imo|ijp|ist|tl |ijk|tis|mej|itl|tik|mon|ok |lak|par|n n|ara|ra |tit|kej|jpi|a s|ojk|ki | o |alt|nop|maj|jya| ka|iti|cht|ijt|uam|a n|kiu|lat|leu|o t|ita|lau| ip|tep|kia|jka|n m|ana|lam|kij|nka|tou|epa|n s|til|i n|i u|e t| ak|s t|k t|lti|nem|lan|eyi|mat|nau|ose|emi|j a|ntl|uat|uey|jtl|nit|nti|kip|oka|onk| on|eui|i k|kat|j p|ini|toj|kem|ale|ajy|ame|ats|pal|iki|ema|uik|n k|eua|ach|e a|ijn| sa|mpo|tot|otl|oyo|mil|hiu|eka|tol|ajk|uak|ite|san|pam|atl|yek|tia|ate|ino|jua|a i|ipi|j o|tsa|oke|its|uil|o o|jne|oju|tos|kui|oui|a a|yi |kol|ote|a u|i i|n a|ken|chp|iko|as | ne|tin| me|ank|jti| ye|kon|ojt|aui|xtl|ine|tsi|kii|you|ko |ejk|o k|uas|poy|tst|ejy|nok|las| ya|yol|hti|pou|siu| in|nel|yok|mac|ak |hik|sij| si|sto|htl|jke|nko|jch|sek|mot|i a|ela|ui |kis|mel|axt| ax|ijc|nan",
    "dip": " ku|en |ic |ku | bi|bi | yi| ke|an |yic|aan|raa| ci| th|n e| ka| eb| ra|c k|c b|n a|ci |in |th |kua|ny |ka |i k|ŋ y|i l|ben|k e|ebe| ek| e |höm|nhö|öm | al|ai |kem| ye| nh|eme|m k|men|i y|t k|n k| la|c e|ith| er|lɛ̈|thi|alɛ|ua |t e|ek |ɛ̈ŋ| lo|ɔc |n t|ŋ k| ep|u l|it |yen|kɔc|̈ŋ |de |k k|pin|a l|i r|n y|epi|n b|lau|at |iny|aci|aai|u t|ken|au |ok | te|a c|ath| pi|ke | ac|e y|cin|u k|oŋ | lu| ti|a t|uat|baa|ik |tho|yit|ui |hii|u n|h k|e r|n c|te |kek| lö|l k|h e| lɛ|hin|thö|m e|ɛŋ |n r|n l| et| mi|ëk |i b|ekɔ|era|eŋ |e w|i t|el |ak |nhi|iic|a k|i e|pio| ny|ŋ e| aa|nde|u b|e k|kak|eba|ök |k a| ba| en|ye |lɛŋ| pa|iim|im |köu|e c|rot|e l| le|öŋ |ot |ioc|c t|i m|r e| kö| kɔ|eth|y k|oc |ŋ n|loo|la |iit| el| we| ey|i p|uny| ro|ut | tu|oi |e t|enh|thɛ|m b|hok|pan|k t|ëŋ | wi|yii|tha|wic|pir| li|u e|bik|u c|ën |ynh|y e|lui|eu |ir |y b|nyn|uc |n w|mit| ec|öun|any| aw|ɛt |ɛ̈ɛ| dh| ak|and|loi|wen|l e|höŋ|e e|thë|aku|̈ɛ̈|kut|am |eny|u m|i d|iek|k c| ko|tic|leu| ya|u y|tii| tö| ma|nyo|tö | ew|hök|den|t t|hëë|i n|k y|i c|cit|h t| ed|uee|bai|ɛ̈n|öt |eri|ɛ̈k|awu|rin|a p|cɛ̈|hai|kic|t a| të|tue|cii|hoŋ| bɛ|ooŋ|n p| cɛ|̈k |c l|u p|uk |c y|löi|i a|eke|dhi|wel|thk|eeŋ|öi |elo|n m|r k|ien|om |hom| wa|nho",
    "kde": "na | na| va| wa|la |nu |a k| ku|a w|ila|wa |a v|chi| mu|unu|e n|mun|van|a m|a n|ya |le |ele|sa | ch|asa|amb|ana|was|lam|mbo|ohe|ave| vi|ne |bo |aka|e v|a u|u a| n’|u v|e m|ke |anu| li|ve |vel|ake|ala|hil|ile| pa| av|ng’|a l|he |ing|ene|ela|ili|ika|vil|ngo|vak|ali| di|uku|wun|any|lan|a i|mbe|a a|uni|e a|ama| ma|go |nda|bel|emb|wak|kuw|nya| mw|ola|a d|den|lem|a c| il|ulu|kol|g’a|o v|nji|kan|ji |au |ma | au|lil|mbi|uwu|lik|ye |’an|kuk|din|ula|no |and|umi|kum|eng|ane|dya|ong|o l|ach|mwa|e w| ak|an’|a p|kal|nil|lew|mad|n’n|voh|ilo|wen|aya|apa| vy|kut|ale|va | al|ang|ava|kul|hin|o m|hel|e k|ond|hi | la|lin| lu|idy|dye|u l|da |ole|ka |ani|ndo|ton| in|ewa|lov|o c|dan|u m|cho|uva|ia |pan|kam|we |ove|nan|uko|bi |kav| ya|lim| um|eli|u n|nga|uli|lia|mil|o n|’ch| kw|li | an|aha|dil|ata| dy|e l|n’t|i v|tuk|hoh|u i|hev|ni |niw|und| ul|ade|lel|kay|lon|e u|ino|i n|nje|uwa|she|yik| ly|hum|ako|i w|uma|vya|kwa|ba |’ma|val|kil|mwe|mba|mu |pal|umb|wav|hih|ulo| ka|e c|nde|wal|ima|’ni|lun|ihu|a y|vin|yoh|e i|vyo|inj|u c|kup|kuv| ki| m’|a s|e p|dol|lek|awa|o u|n’c|iwa|imu|anj|mal|yen|u w|yac|bil|oja|o a|ha |utu|ech|i d|uka|taw|n’m|ita|awu|ina|m’m|i a|itu|hon|lu |atu|mak|iku|lya|lit|jel|evo| vo|i l|mah|hap",
    "snn": " ba|ye |bai| ye|ai |e b| ca|ai̱|ia |ji | ne| si|i̱ | go|goa|sia|i n|e c|a y|i y|̱ b| ja|se |aye|i j|a b|jë |iye|e g|re |oa |hua|yë |quë| gu|hue|e̱ |u̱i|gu̱|ne | ma|̱i |je̱|eo |e s| hu| ña|bay|o y|ñe |ja |ajë|to |aij|deo| ñe|a i|ayë|ba | ji|beo|cat| de| be|e j|i s|mai|e e|bi |a ñ| co| e |ato|uë |ña |i g|e ñ|i b| iy|cha|ë b|eba|coa|na | ts|e y|̱je|reb| i | ti|i t|ja̱|ach|ue |e i|i c|ni |oac|e t|a ë| re|je |aiy|oji|eoj|a̱j|oye| ë |ë t|cay|ija|ico|ihu| sa|i d|ere|a c| qu|ahu|iji|ca |ua | yë| to|a h|ase|ues|ë s|aca| se|uai|e d|ese|asi|caj| ai| tu|tut|utu|ë c|yeq|equ| na|cai| i̱|ti |mac|e m|ë g|ebi|a a|ani|tu |e n|yeb|eje|oya|toy|co̱|a m|̱ t|ije|sic|eso|eoy|a t| a | te|haj|cah|oas|are|i m|a s|ehu|añe| da|o b| do|i i|i r|e r|neñ|yer|huë|ë y| o |jai|a j|aje|a g|ibë|ëay|aña|aja|a o|coc|bëa|oca|sos|doi|oi |aco|eñe| jë|ë d|ë j|cas|ëca|hay|ea |̱ g|ari|tsi|yij|sai|̱ c|osi|teo|o h|co |̱re|nej|ëhu|o s|ose|jab|̱ni| me|rib|ñes|si |yaj|jëa|uaj|ë m|dar| yi|oe |e o|nes|i̱r|ma |nij|i h|oja|uëc|ama|ë i|i̱h|o̱u|̱uë|̱hu|aqu|ëco|e a|a̱ |ëja|̱ñe|o̱a|go̱| ëj|ñe̱|tia|abë|sih| bi|tsë|sëc| je| cu|̱ a|ned|cab|a d|ore|me | oi| ro|jay|tso|ë r|eye|ta |bë |ñaj|soe|̱ca|o̱c|año|o c|ire|ohu|uej|ñej|i a|ñas|ë q| ju|ban",
    "kbp": "aa | pa| se|se |na |nɛ | nɛ| yɔ| wa|yʊ | ɛy|ɛ p|ɖɛ |aɖɛ|a ɛ|a w|ɛwɛ|ɛna|yɛ |ala|ɛ ɛ|ɛ s|ɔɔ |yɔɔ|ɩ ɛ| ɛ |paa|e ɛ|e p|ɛyʊ|aɣ | pɩ| ɛw|a p|waɖ|ʊʊ |a n| ta|yɔ |yaa|yɩ |wɛn|la |taa|ʊ w| tɔ|a a|ɔ p|ɛya| kɩ| ɩ |ɩyɛ|a t|ʊ ɛ|a k|wɛɛ|tɔm|ɔm |ɛ t|wal|ʊ n| wɛ| ŋg| tɩ|ɛ n|ɛ k|kpe|ɛ ɖ|maɣ|zɩ | an|ʊ t|ɛ y| pʊ|nɩ | tʊ|ɛyɩ|ɩɣ |ɩ t| we|ɩ y|anɩ| pɔ|a s|gbɛ| pɛ| ɛs|pa |kpa|ɛɛ |wɛ | nɔ|daa|nɔɔ|ʊ y|ama|ya | kʊ|tʊ |pal|mɩy|ayɩ|ɩ p|ɩna|tɩ | ɖɩ|ʊ p|ɔ ɛ| ɛl| mb|ɔ s|ŋgb|a y|ɩma|ɖɩ |ʊ k|ɔɖɔ|ɩ n|bʊ |mbʊ| ɛk| kp|ɛja| ɛj|tʊm|jaɖ|paɣ|kɛ | ye|ɛyɛ|alɩ| na|i ɛ| ke| ya| ɖɔ|ɩ ɖ|ɔɔy|nda|ɖɔ |fɛy|ɣ ɛ|ɩ s|jɛy|yi |ɖɔɖ|ɛla|lɩ |kɩm|kɩ |aŋ |bɛy|pee| ñɩ|lab|ɩzɩ|pe |eyi|ŋ p|ɩ ɩ|ɛzɩ| fa|ɔyʊ|aʊ |ʊmɩ|ʊyʊ|ʊma|a l|sɔɔ|a ɩ|ekp|ʊ s| aj|ajɛ| ɛt|iya|wey|ɩ k|ʊ ŋ|ma |kan|ɩsɩ|laa|ɔyɔ|ɩm |li | kɛ| lɛ|and|sam| sa|ɣtʊ|ɔ k|day|ɔɔl|ɣ p|sɩ |ɔŋ |ɩfɛ|akp|pak|sɩn|pɩf|naa|ndʊ|kul| ha|aɣt|ɔ y|uli| ɖe| kɔ|eek| pe| sɔ|m n|ŋga|ee |ga |ɖʊ |maʊ|m t|e e|ɣna|ɣ s|ŋgʊ|abɩ|akɩ|a ñ|yaɣ|pɩz|eki| ɖo|maŋ| la|yee|ana|tɩŋ|ɣ t|pad|ñɩm| ca|ɛ a|a ɖ|pɩs|ina|dʊʊ|ɖe | ɖa|a m|lɛ |ked| ɛɖ|lak|aka|gʊ |asɩ|ʊ ɖ| ɛd|dʊ |nʊm| nʊ|ñɩn|ba |ɛpɩ|pʊ |ada|ɛhɛ|hal| a |le |zɩɣ|ɛɛn|ɛsɩ| le|aɣz|uu |nɖɩ|e t|ŋ n|ɛda|lɩm|e w|ɔ w|ɩ a| ɛp| nɖ|ɛkɛ|i p|ɣzɩ|alʊ|zaɣ|bɩ |ɛ l|ɩkɛ|ɔ t|e y|ɖam|aaa|pɛw",
    "tem": "yi | yi| ka|a ʌ| tə|uni|ni |wun| ɔ | aŋ| wu|ka | kə| kʌ| ʌŋ|nɛ |kə |tək| ʌm|əkə|ɔŋ |mar| ɔw|a k|ma |i k| a |wa | mʌ|i t|ri |ɔwa|thɔ| th| ma|ari|i m|a a|ʌma|aŋ | o | ba|tha|ba | kɔ|a y|ŋ k|ɔm |‐e | rʌ|lɔm|kɔ |i ɔ|kom|o w|ʌnɛ|te |mʌ | ŋa|i o|əm |hɔf|ɔf |alɔ|om |a m|ɔ b|ɔ y|aŋf|fəm|hal|kəp| mə|ŋfə|ʌth| tʌ|a t|a r|ŋ y|ŋth|ŋa | ʌt|ɔ k|e ɔ|ɛ t| ro|wan|ema| gb|ank| ye|th |yem|nko| mɔ|ʌwa| sɔ|kʌm|m a|kət|ʌmʌ|anɛ|rʌw|ɔ t|ʌme|ʌŋt|me |ʌte| bɛ|hɔ |a ɔ|ki |ʌŋ |m ʌ|m k|ar |ŋ ɔ|yɛ |əth|ɛ ʌ| ta|i a|ta | ʌk|ə k|thi|et |pet|pa |ŋɔŋ| te|ŋe |i ʌ|ra |i r|əpe| ŋɔ|ɛ k|ʌ k| yɔ| rə|kʌt|rʌ | yɛ|bɛ |e a|e t|ro |ɔ ʌ|akə|thə|ɔ m|a‐e|əpa|a w|kəl|ə b|yɔ |ə t|mɔ |bot|ŋ t|e y|əŋ |mʌs|gba|e m|m r| bo|ʌŋe| ak|ɛ a|nʌn|ləŋ|ələ|sɔŋ|ŋ b|təm|wop|ʌ a|ə y|kəs|sek|ə s|tʌt|li |ot | ko|ɛ ŋ|ŋ a|ekr| ra|ɔth|sɔt|ʌse|ath|ru |t k|ɛ m|e k|ɛth|ma‐|po | po| wo|ʌrʌ|i y|m t|m ŋ|tʌŋ|tɔŋ|e w|gbʌ|tə |nth|ʌyi|ʌlə|hən|ʌ ʌ|op |iki|ʌkə|rʌr|ʌru|ŋgb|sɔ |əyi|rʌn|gbə|ɔ a|ər |ɔkɔ| pə| ʌr|ənʌ|ləs|nka|ith|əli|ʌy |bəl|mʌy|ran|o ɔ|ɛ r|ant|f ʌ|mə |ti |f t| tɔ|əs |r k|hi |yik|ɔ ɔ|rək|kar|ʌ t|mʌt|lɔk|ayi|krʌ|pan|na |kʌr|mət|tət|tho|pi |mʌl| to|to | wa|ʌgb|thɛ|ə g|bas|eŋ |aŋk|ɔ r|thʌ|o t|ɛŋ |i‐e|kʌ |kʌs|mɔŋ|o d|kɔŋ|din|ɔ g|kəw|di |ŋ w|əma|ɛr |ʌ y|ək |ŋko",
    "toi": " ku|a k|wa | mu|a m|la |ali|ya |tu |i a|e k|a a|aku|ula|ntu|ang| al|lim|lwa|kwa|aan|mun|mwi|de |ulu|ngu|wi |imw|luk|gul|na |ele| ak|kub|ons|unt|kul|oon|se |ant|nse| oo|zyi|gwa|si | ba|ba | lw|zya|uli|ela|a b| ci| ka| zy|waa|and| an| kw|ili|uki|eel|uba|nyi|ala|kut|ide| ma|kid|isi|uny|i m|kun|cis| ya|li |i k|nga|a l|yin|kuk|ka | ul|kus|ina|laa|nte|ila|tel|mul|wab|wee|nda|izy|ede| am|led|amb|ban|we |da |ana|kwe|e a|lil| bu|o k|bwa|aka|ukw|o a|ati|uko|awo|yan|ko |uci|ilw|bil|bo |a c|wo |amu|law|mbu|i b|bul|umi|ale|abi|kak|e m|u b|akw|u o|ti |sal|kuy|ung|bel|wak| bw|o l|ga |kal|asy|e u|lan| mb|lo |usa|ika|asi|aam|a n|ule|bi |cit|bun|kup|egw|muk|igw|u k|u a|mbi|wii|kum|a z|aci|ku |yi | mi|yo |le |mas|yig|ubu|kka|i c| ab|ene|ne |no |a y| wa|abo|ndi|uta|syo|aya|aba|len|kuc|eya|o y|mal|ind|lem| lu|ukk|mo |eka|mil|mbo|ita|uka|ama|lik|u z|ndu|mu |nzy|zum|bal|abu|upe|bam|syi|u m|liz|int|ta |yak|ley|e b|nzi|lii|kab|uti|ube|uum|i n|cik|ezy|iib|iba|ani|iko|iin|ile|was| ca|zye|alw| aa|sya|uku|twa|min|tal|muc|umu| nk|du |azy|onz|lek|kon|buk|o m|yik|i z|lwe|u u|oba|kwi|imo|gan|zil|del|usu| we|peg|yee|ngw|sum|imb|ump|mpu|nde|end|i o|yoo|o n| nc|a u|mi |ano|uya|o c|di |mba|yil|yal|ako|a o|isy|izu|omb",
    "est": "sel|ja | ja|le |se |ust|ste|use|ise|õig|mis| va|gus|ele|te |igu|us |st |dus| õi| võ| on|on |e j| in|ini|nim|ma |el |a v|iga|ist|ime|al |või|da | te|lik| ig|adu|mes|ami|end|e k|e v|l o| ka|est| ra| se|õi |iku| ko|vab|aba|tus|ud |a k|ese| ku|l i|gal|tsi|lt |es |ema|ida|ks |a i|n õ|lis|atu|rah|tam|ast|sta|e t|s s| mi|ta |ole|stu|bad|ga |val|ine| ta|ne | pe|nda|ell|a t|ali|ava|ada|a p|ik |kus|e s|ioo|tes|ahe|ing|lus| ol|a a|is |vah|a s|ei | ei|kon|vas|tud|ahv|t k|as |a r|s t|e e|i v|eks|oon|t v|oni|kõi|s k|sio|sus|e a|gi |mat|min| pi|s v|oma|kul|dad| ni|e p| om|igi|tel|a j|e o|ndu|dse|lle|ees|tse|uta|vus|aal|aja|i t|dam|ats|ni |ete|pid|pea|e õ|its|lma|lev|nis|dis|ühi|sli|i s|nen|iel|des|de |t i|et |nin|eva|teg|usl|elt|ili|i m|ng | ee|tem|ses|ilm|sek|ab | põ|ait| ne|õrd|sed|võr|ul | üh| ki|abi| kõ|ega|rds| vä|ots| et| ri|põh|ed |töö|si |ad |i k| tä|ata| ab| su|eli| sa|s o|s j|sil|nni|ari|asu|nna| al|nud|uma|sik|hvu|onn|eab|emi|rid|ara|set|e m| ke|a e|täi|d k|s p|i e|imi|eis|e r|na | ül|a ü|koh|a o|aks|s e|e n| so|õik|saa|and|isi|nde|tum|hel|lii|kin|äär|sea|isk|een|ead|dum| kä|rii|rat|lem|umi|kor|sa |idu|mus|rit|har| si|vad|ita|ale|kai|teo| mõ|ade|üks|mas|lse|als|iaa|sia|sot|jal|iig|ite",
    "snk": "an | a | na|na |a n|ga | ga|en | su|re |a k| ka|su |a a|a s| ta|un | se|ta |ma | i |ama|do |e s|ere|ser|aan| do|nan|nta| ra|n s| ma| ki| ja|jam| da|taq|ne |a g|a d| ya|n d|ni | ku|ren|ri | si|ana|u k|n ŋ|ŋa | nt|e k|maa| ŋa|ndi|wa |aqu|ane| ba|ra |a r| sa|oro|n t|raa|tan| ke|oxo| xa|i s|di |a f|and|ti |a b| be|i k|gan|aax|aaw| go|iri|kit|awa|axu|sir|a i| du|a t|me |ara|ya |ini|xo |tta|i a|oll|ran|on |gol|e d|n g|a j|nde|aar|e m|be |a m|ari|u n|lli|ron| fa|qu | ti|n n|aad|axa| ña|o a| so|ke |nu | ko|din|lle|dan|a y|man|i g|sor|u r|i t| no|are|xar|kuu| wa|enm|ada|baa|de |qun|o k|yi |xun|i n|i x| an| ha|kan|fo |att|ang|n k|o s|dam|haa|da |n y|kat|e t|li | fo|i d| mo|nme|u b|i m|aba| fe|len| re|pa |ant|ayi|yan|e n|a x|e y|n b| di|ppa|app|kap|xa |u t|o g|mox|ure| xo|ond|i i|a ñ|n x|taa|du |ell| me|iti|xu |u d|udo|ind|uud|anu|nga|o b|nun|nox|n f|ku |aga|anŋ|dun|itt|eye|ye | bo|ore|ite|u a|oor| yi| ro|sar|saa|ill|e b| wu|le |riy|nma|ro |ken|edd|fed|bur| mu|mun|o n|iin|tey|sel| tu|u m|lla|la |ono|ñaa|den|faa|a w|te |inm|ka |aay| te|ina|xoo|o d|ira|u s|o t|nmu|nen|ban|ene| ni|ña |o i|uur|una|o m|xon|n w|kaf|gu |e g|a h|kil|yu |und|aqi|een| bi|bag|i j|n ñ|laa|i r|no |sig|igi|kor| o |i b|bat",
    "cjk": " ku|a k|yi |nyi| ny|la | mu|wa | ci|a c|a n| ha|we |a m|nga|ga |i k|kul|uli|sa |esw|ana|ela|a h|ung|ha |tel|swe|ze |ya |a u| ka| wa|uci| ya|ate|ci |mwe|kwa|ma |mbu|ji |kut|han|u m| ul|ang| mw|nat|ca | ca|e m|mu |uth|ali|i n|mut|thu|i m|e k|lit|hu |ina|ka |kup|na | ma|asa|aku|e n|a i|pwa|nji|wes|li | mb|e a|ifu|fuc|kan|bun|ize|ing|a y|anj|mba|uta|ita|i u| kw|muk|ite|kus|amb|lin|awa|imb|cip|lim|ong|esa|i c|nge| ak|ngu| ce| an|ili|ulu| na|naw|kuh|ama|upw|emu|lem|ila| un|a a|ula|ukw|aka|cif|ule|wo |has|kun|kha| xi|o n|tam| es|usa|ala|te |u c| ng|iku|cik|lya|wil|e c|ta |xim|wik| li|muc| ly|ikh|no |o m| in|i a|utu|e w|akw|mo |imo|mil| mi|i y|ba |ko |ngi|ufu|ku |lij|uka|iji|a w|umi|o w|tan|o y|e y|imw|ulw|uha|nal|so |o k| ye|i l|e u|umw|bu |aci|lwi|aha|ciz|mwi|kat|lon|u k|yes|ipw|ulo|aze|uni|wak|lo |ema|o c|aco| iz|kum|ika|e i|cim|isa|eny|umu|pem|yum|kwo| ik|kwe|e h|ngw|wam|cin|i h|a e|wan|ge |a x|was|le |kuk|uze|lik|gul|nin|pwe|o u|mah|ata|uma| up|sak|zan| uf|fun|go |wen|mbi|uso|ges|co |ngo|iki|hal|gik|ile|nda|kol|kal|kuz|ne | ja|oze|yoz|ikw|ipe|ces|swa|cis|man|i i|iso|ele|aso|waz|mi |upu| if|ise|umb|uvu|kil| it|i w|sok|o l|oko|nyo|una|bi |tum|iko|ene|hak|sem|a l|da |vul|nyu| ut| uk|eka",
    "ada": "mi |nɛ | nɔ| nɛ| e | he|he |nɔ | a |ɔ n|kɛ | kɛ|i k| ng|a n|i n|aa |e n|blɔ| bl|ɛ n|ɛ e|gɛ |ngɛ|e b|lɔ | ma| mi|ɛ h| ts| ko|hi |ɛ a| ɔ |ko |e h|ɛɛ |tsu| ni|ɔ k|a m|a k|i h|ma | ny|emi|a h|ami| be|be |i a|ya | si|e m|e j| ka|si |ɛ m|ɔ f| kp|nya| je|ni |oo |loo|o n| hi| fɛ|fɛɛ|a t|laa|a b|je |e k| pe|pee| ye|mɛ |umi|ɔ m| ha|a a|ɔmi|omi|kpa| wo|ɔ e|i t|ɛ ɔ|e s|i b|ɔ h| lo|ɛ k|ke |ha |bɔ |maa|mla|i m|ɔ t|ɔ́ |e p|kaa|ahi| sa|lɔh|ɔhi|sum|ɔ a|nɔ́|o e| na| gb|ee |e ɔ| ji|e a|i s| ml|ɛ s|sa | hɛ|ɔɔ |yem|u n|alo| jɔ| ku| lɛ| bɔ| to|a s|ɛ b|i l|lɛ |sua|o k|uaa|a j| su|ɛmi| ad|ɛ y|imi|ade| fa| al|jɔm|des|esa|eɔ |ihi|ji |ne |ɛ t|a e|ɛ j|ake|e e|kak|ngɔ|o a|eem|i j|e y|wo | bu|him|e w|́ k|ɔ y|tom|suɔ|ia |ane|mah| ya|o b| ke|e g|wom|gba|ue |ba | bi| gu|uo |e t|san|uu |pa |hia| tu| hu|suo| we|tsɔ|ɔ s|e f|kuu|gɔ |o m|a p| ja|ɛ p|fa |ɔ b|ɛ g|hɛɛ| ab|a l|hu |ye |na |tue|i ɔ|isi| sɔ|sɔs|jam|gu |ti |ɛ w|sis|o h|uɔ |li |a w| ba|sɔɔ|abɔ| ju| hl|ɔsɔ|hla|ɔ l|a y|sɛ | ɔm|ɔmɛ|i w|ɛti|pɛt|kpɛ|to | yi|asa| kɔ|nyu|akp|pak|kpe|sɔɛ|ɔɛ |u ɔ|yɛm|o s|uɛ | nu|pe |se | sɛ|o j|a g|ɔ w| wa|sem| pu|su |e l| mɛ|u k|hɛ |nih|kas| fɔ|kon|onɛ|bim|lam|imɛ|nyɛ| fi|hiɔ|usu|i p|bi | ní|yo |eeɔ|uam|bum|níh|íhi|o l|ula|kul|guɛ|naa",
    "bin": "e o|ne | ne|be |an |en |vbe| o |wan|mwa|n n|e e|emw|evb|mwe|in |na |e n| na| em|omw|e a|n e|e i| vb|re | ke|gha|gbe|wen| gh|ie |wee| om|e u| kh|bo |hia| ir|ha |o k|nmw|tin|n o|vbo|he |eti|ia |kev| ev| we| et|win|ke |ee |o n| hi|a n|a r|o r|gie|ran| ya|ira|mwi|a m| mw|a g|ghe|ogh| a | re| uh|eke| og|n k| no|ro |ye |khe| ye|hek|rri|nog|een|unm|a k|ogi|egb|ya |ere|wun|hun|mwu| mi|mie|de | rr|a e| ar|a o|n y|e v|o g|un |ra | ot| gb|uhu| ok|n i|ien|a v|rhi|e k|n a|i n|a y| ru|khi|n m|hie| eg|oto|arr|ba |ovb|u a|e y|ru |ian|hi |kpa| ra|o m|nde|yan|e w|and|to |o e|o h| ni| rh|e r|n g| er|n h|ugb|we |hae|on | iy|dom|rue|u e| or| ik|ren|a i|aro|iko|o y|n w|ben|ene|rio|se |i k|uem|ehe| ov|otu|okp|kug|oba|iob| uw|aen| do|iru|ae |tu |ue | iw| ma|wu |rro|o o|rie|n v| ug|a u|nna| al|ugh|agb|pa | ay|o w|ze |uwu|ma | eb|iye|aya|ugi|inn|gho|rre|nii|aku|gba|khu| se|yi |onm|ho |a w|ii |iwi| uy|uyi|e d| i |hin|obo|u o| ak|beh|ebe|uhi|bie|ai |da |i r|gbo|o v|won|mwo|umw| ag|ode| ek| la| um|aan| eh|egh|yin|anm|mo | kp| bi|kom|irr|i e|a a|kha|oda|bon|a d| ow|owa|ghi|n u|o a|yen|eem|ieg| az|aze|hoe| yi|oe |e g|ele|le |lug| ka|aa | as|yaa|gue|a h|mu |nre| od|n r|ero|ese| ku|enr|lel|vbi|wa |u i|a b|oro|bi ",
    "gaa": "mɔ | ni|ni |kɛ |ɛ a| ak|lɛ |i a| he|ɛ m|akɛ| lɛ| ko|gbɛ|ɔ n|ɛɛ | mɔ| kɛ|yɛ |li |ɛ e|ko |ɔ k|i e|aa | yɛ|bɛ | ml|shi|ɛ h|egb| gb|ɔɔ |mli| fɛ|fɛɛ|heg|nɔ |a a|i n|aŋ |oo | nɔ|i k|he |ɛ n| es| am|ɛ k|ɔ y| sh| ma|esa|loo|ji |maŋ|amɛ|emɔ|ɔ f|fee| ek| al|ɛi |ii |ɔ m|ɔ a|bɔ |e n|ɔ l|amɔ| eh|alo|hi |naa|ee |ɔmɔ|oni| en|o n|kon|aji|i y|i m|sa |o a|eli|umɔ| bɔ| hu|yel|hu |eem|nɛɛ|tsu| ah| nɛ|sum|tsɔ| an|nii|o e|baa| as|mɛi|yɔɔ|gbɔ|aaa|na |i h|eye|ɛ g|eɔ |ɛji| at|ana|eko|ena|o h|ŋ n|kom| ts|ɔ e|maj|i s|i l|efe|ome| kp|a l|kwɛ|ku |ehe|toi|a n|saa|bɔm|ha |a m|kɛj|kpa|hew| ku| sa| na|hiɛ| hi|ane|gba|e e|i f| mɛ|ɛ t|bɛi|ash|ŋ k|e k| ej|hey|aka|ats|ne |its|e a|san| ay|ye | je| kr| ey|mla|eŋm|nit|a h|ɔ b|ɛ s|anɔ|ŋmɔ|a e|ɛ b|jeŋ|ɛ y|aan|kro| ab| af|any|iaŋ|ɔ g|a k| yɔ|uɔ |shw|ets|ekɛ|usu|ŋŋ |ŋma|esh|u l| ba| et|iɔ |i j|o k|suɔ|oko| yi|e s| ag|afe|agb|oi |ŋ a|rok|o s| aw|ai | ji|ɛ j|aye|ŋ h|ish|nyɛ|la | ad|o m| ef|tsɛ|sɛ |wɔ |ewɔ|mɔɔ|ehi|aŋm|hwe| bɛ| to|ɔ h|jɛ |aha| ja|paŋ|alɛ|awo|sɔ |ŋts|ɛŋt|iɛŋ|bii|diɛ| di|mɛb|eni|his| ny|e b|hik|u k|ate|i b|ŋmɛ|akw|o y|eŋ |ahe| lo|me |ade|ɔ j|kɛn|teŋ|yeɔ|ɔ s|des| su|wal|nyɔ| eb| eg|ŋ m|mef|saŋ|ɛ l|o l|u n|asa|sem|jia|wɛ | em|o b|gbe|hil|ihi|hih|ɔŋ |nak|e h|sus|e g",
    "kng": " ya|na |ya |a k| na|a y|a m| ku|a n|a b| ba|u y|and|ka | mu|yin|wan|tu | lu|aka| mp|ve | yi|la |ntu| ki|mpe|pe |nda|a l|si |yan|ana|so | ke|e n|ons|nso|di |da |ndi|i y|u n|lu |mun|alu|unt|ina|e y|nza|luv|ala|uve| ma|u m|ke |za |ayi|sal|o m|ban|ndu|ta |isa|kan|ulu|i m|amb|ma |kim|u k|fwa| ny|nyo|yon|ama|ti |ang|anz|du |kus|o y| me|i n|to |ins|nsi|wa |usa| mo|kon|uta|end|i k|uka| bi|a d| ko|mbu|mos|sa | ve|ika|mu |osi|e k|uti|kuz|imp|a v|e m|und|ind| fw|ila| to|pwa|mpw|ngu|bal|adi|ba | sa|len|sam|sik|mab|tin|vwa|mba|kuk| di|yay|a t|yi | le|ant| ka|ata|isi|olo|kis|mut|ula|lo |bu |su | bu| at|amu|o n|dya|kut|dil| nz|ngi|abu|usu|but| nt|ni |bak|kul|e b|nga|e l|inz|imv|gu |wu | dy|lus|awu| ti|lak|bay|bun|kat|ngo|tal|i b|utu|kak|o k|bim|uzi|uza|mvu| ng|nak|iku|baw|esa|kin|ken|yak|mpa|luz|umu|nu |nta|dis|dik|vuk|u f|tan|sad|ati|nka|ank|luk|mak|ong| mb|ani|i l|lwa|aba|luy|uya|yal|ing|zwa|kuv|idi|ku |ga |zit|bis|uvw|uzw| ni|swa| nk|iti|mef|fun|ibu|nsa|aku|ufu|kub|lam|met|i a|mus|eta|a a|u t|twa|atu|tuk|fum|uko|iki|don|kol|kun|bam|eng|uku|ndo| ns|a s|ela|usi|pam|mvw|u b|i t|zo |anu|tis|uke|sul|te |gid|dib|yam|ilw| mf|ola|umb|uso|kam|gi |mbi|oko|nzi|i s| nd|mfu|luf|dus|bum|lut|mam|ded|wil|tad",
    "ndo": "na |oku|wa | na|a o|a n|ka |ntu| uu|tu |uth| om|e o|mba|ong|omu|ba | ok|uut| ne|he |the|ang|hem|emb|unt|o o|a u| wo|nge| iy|ehe|kal| no|a w|o n|no |nga|e n|ko |mun|oka|lo |o i|lon|we |ulu|a m|ala| ke|la |a k|u n|han|ku |gwa|osh|shi|ana|ngu|ilo|ano|ngo|keh| mo|ga |nen|man|ho |luk|tha|ge |gul|u k|eng|ha |a y|elo|uko|a e|ye |hil|uka|li |go |wan|ath|wo |thi|dhi|uun| pa|kwa| ta|a p|ya | sh| ko|nka|lwa| os|mwe|oma|ta |ema|sho| ka|e m| yo|sha|wok|ika|po |o w|onk|e p|pan|ith|a i|opa|gel|hik|iya|hi |aan|una|o g|kuk|alo|o e|nok|ndj|le |a a|men|yom|a s|i n| li|and| po|pam|lat|kan|ash|waa|aka|ame|gam|umb|a t|ond|yuu|o k|olo|ane|ing|igw|aa |ele|kul|mon| gw|ilw|gan|o y|iil|iyo| el|kut|nin|oko|ike|o m| ku|adh| ye|amw|ome|yeh|aye| ga| on| yi|a g|lyo|ne | ng|mbo|opo|kug|eko|yok|wom| oy|non|iye| go|ulo|e e| we| e |ina|ant|omo|ene| a |i k|mok|him| dh|und|ndu| me|eho|wen|nek| op|alu|e g|ima|kat|ota|oye|ila|ngw|yop|wat|ela|o u|a l| ii| ay| nd| th|o l|yon|ili|oon|okw|yaa|taa|lwe|omb| ni|aku|i m|mo |ula|ekw|enw|iyu|pok|epa|uki|ke | wu| mb|meh|e t|uni|nom|dho|pau|eta|yi | ly|o a|ono|lun|lak|ola|yo |lol|ank|bo |i o|awa|nwa|a h|naw|hok|nem|kom|ndo|o s|u t|vet|mbu|ani|uga|ndi|ukw|udh|lok|e k|alw|kwe|kun| ya",
    "quy": "chi|nch|hik|una| ka|anc|kun|man|ana|aq |cha|aku|pas|as |sqa|paq|nan|qa |apa|kan|ikp|ik |ech|spa| de|pa |cho|ere|der|rec|am | ru|an | ma| ch|kpa|asq|ta |na |nam|nak|taq|a k|qan|ina|run|lli|ach|nap|pi |mi | ll|yoq|asp|ima|hay|hin|aqa|nku|ant|ayn|oyo| hi| im|hoy|cio|nta|nas|q k|api|iw |wan|kuy|kay|liw|aci|ion|ipa|lla|oq |npa|ay |kas|a m|nac| na|inc|all|ama|ari|anp| ya|chu| hu|nin|pip|i k|qmi|hon|w r|ata|awa|a c|ota|in |yku|yna| wa|a h|has|a d|iku|a l| li|pan|ich|may| pi| ha|onc|a r|onk| ot|ku | qa|ank|aqm|mun|anm|hu |a p|nma| mu|qta|n h|pap|isq|yni|ikm|ma |wsa|aws|kaw|ibr|bre|lib|ayk|usp|nqa|e k| al|lin|n k|re |ara|nat|yac|kma|war|huk|uwa|yta|hwa|chw| sa|was|kus|yan|m d|kpi|q m|a i|q l|kin|tap|a a|kta|ikt|i c|a s|uy | ca|qaw|uku| tu| re|aqt|ask|qsi|sak|uch|q h|cas|tin|pak|ris|ski|sic|q d|nmi|s l|naq|tuk|mpa|a y|k c|uma|ien|ypi| am|qaq|qap|eqs|ayp|req|qpa|aqp|law|ayt|q c|pun| ni|a q|ruw|i h|haw|n c| pa|amp|par|k h| le|yma|ñun|ern|huñ|nni|n r|anq|map|aya|tar|s m|uñu|ten|val|ura|ita|arm|isu|s c|onn|igu| ri|qku|naw|k l|u l|his|ley|say|s y|rim|aru|rma|sun|ier|s o|qar|n p|a f|a t|esq|n a|oqm|s i|awk| va|w n|hap|lap|kup|i r|kam|uyk|sap| qe|ual|m p|ran|nya|gua| pe| go|gob|maq|sum|ast| su| ig",
    "rmn": "aj |en | te|te | sa| le|aka|pen| si| e |el |ipe|si |kaj|sar| th|and| o |sav|qe |les| ma|es | ha|j t|hak|ja |ar |ave| an|a s|ta |i l|ia |nas| aj|ne | so|imn|mna|sqe|esq|nd |tha|haj|e s|e t|e a|enq|asq|man| ja|kan|e m| i | ta|the|mes|cia|bar|as |isa|utn|qo |hem|o s|s s| me|vel|ark|i t| na|kas|est| ba|s h|avo| di|ard| bi| pe|rka|lo | ak|ika|e r|a a| pr|e k|qi |mat|ima|e p|a t| av|e d|r s|n s|anu|nuś|o t|avi|orr|o a| ka| re|n a|re |aja|e o|sqo|sti| ov|õl |l p|nqe|ere|d o|vor|so |no |dik|rel|ove|n t|ve |e b|res|tim|ren| de|àci|o m|i a|but|len|ali|ari|rre|de | pa|ver| va|sqi|ara|ana|vip|rak|ang|vi | ra|or |ker|i s|eme|e z|ata|e l|a e|rip|rim|akh|la |o p|kar|e h|a p|na |ane|rin|ste|j b|er |ind|ni |tne| ph|nip|r t| ke|ti |are|ndo| je|l a|uśi|e n|khi| bu|kon|lim|al |tar|ekh|jek|àlo|o k| ko|rde|rab|aba| zi|ri |aća|ćar|śik|dõl|dor|on |ano|ven| ni|śaj| śa|khe|ća |ast|j s|uti|uni|tni|naś|i d|mut| po|i p|a m| pu|a l|l s|som|n n|ikh|nik|del|ala|ris|pes|pe |j m|enć|e e|nća|ndi|rdõ|kri|erd|śka|emu|men|alo|nis|aśt|śti|amu|kh |tis|uj |j p|do |ani|ate|nda|o b|nge|o z|soc|a d|muj|o j|da |pri|rdo| as|cie|l t|ro |i r|kla|ing|a j| ze|zen|j e|ziv|hin|aśk| st|maś|ran|pal|khl|mam|i b|oci|rea|l o|nqo| vi|n e"
  },
  "Cyrillic": {
    "rus": " пр| и |рав|ств| на|пра|го |ени|ове|во | ка|ани|ть | в | по| об|ия |сво| св|лов|на | че|ело|о н| со|ост|чел|ие |ого|ет |ния|ест|аво|ый |ажд| им|ние|век| не|льн|ли |ова|име|ать|при|т п|и п|каж|или|обо| ра|ых |жды| до|дый|воб|ек |бод|ва |й ч|его|ся |и с|ии |аци|еет|но |мее|и и|лен|ой |тва|ных|то | ил|к и|енн| бы|ию | за|ми |тво|и н|о п|ван|о с|сто|аль| вс|ом |о в|ьно|их |ног|и в|нов|ако|про|ий |сти|и о|пол|олж|дол|ое |бра|я в| ос|ным|жен|раз|ти |нос|я и| во|тор|все| ег|ей |тел|не |и р|ред|ель|тве|оди| ко|общ|о и| де|има|а и|чес|ним|сно|как| ли|щес|вле|ься|нны|аст|тьс|нно|осу|е д| от|пре|шен|а с|бще|осн|одн|быт|сов|ыть|лжн|ран|нию|иче|ак |ым |ват|что|сту|чен|е в| ст|рес|оль| ни|ном|род|ля |нар|вен|ду |оже|ны |е и| то|вер|а о|зов|м и|нац|ден|рин|туп|ежд|стр| чт|я п|она|дос|х и|й и|тоя|есп|лич|бес|обр|ото|о б|ьны|ь в|нии|е м|ую | мо|ем | ме|аро| ре|ава|кот|ав | вы|ам |жно|ста|ая |под|и к|ное| к | та| го|гос|суд|еоб|я н|ен |и д|мож|еск|ели|авн|ве |ече|уще|печ|дно|о д|ход|ка | дл|для|ово|ате|льс|ю и|в к|нен|ции|ной|уда|вов| бе|оро|нст|ами|циа|кон|сем|е о|вно| эт|азо|х п|ни |жде|м п|ког|от |дст|вны|сть|ые |о о|пос|сре|тра|ейс|так|и б|дов|му |я к|нал|дру| др|кой|тер|ь п|арс|изн|соц|еди|олн",
    "ukr": "на | пр| і |пра|рав| на|ня |ння| за|ого| по|ти |го |люд| лю|во | ко| ма|льн|юди|их |о н| не|аво|анн|дин| св|сво|ожн|кож|енн|пов|жна| до|ати|ина|ає |а л| бу|аці|не |ува|обо| ос| як|має| ви|них|аль|або|є п| та|ні |ть |ови|бо | ві| аб|ере|і п|а м|вин|без|при|іль|ног|о п|ми |та |ом |ою |бод|ста|воб| бе|до |ва |ті | об|о в|ост| в | що|ий |ся |і с| сп|инн|від|ств|и п|ван|нов|нан|кон| у |ват|она|ії |но |дно|ій |езп|пер| де|ути|ьно|ист|під|сті|бут| мо|и і|ідн|ако|нні|ід |тис|що |род|і в|а з|ава| пе|му |і н|а п|соб|ої |а в|спр|ів |ний|яко|ду |вно|і д|ну |аро|и с| ін|ля |рів|у в| рі|и д|нар|нен|ова|ому|лен|нац|ним|ися|чи |ав |і р|ном| ро|нос|ві |вни|овн| її|ові|мож|віл|у п| пі| су|її |одн| вс|ово|ють|іст|сть|і з| ст|буд| ра|чен|про|роз|івн|оду|а о|ьни|ни |о с|сно|зна|рац|им |о д|ими|я і|ції|х п|дер|чин| со|а с|ерж|и з|и в|е п|ди |заб|осо|у с|е б|сі |тер|ніх|я н|і б|кла|спі|в і| ні|о з|ржа|сту|їх |а н|нна|так|я п|зпе| од|абе|для|ту |і м|печ| дл|же |ки |віт|ніс|гал|ага|е м|ами|зах|рим|ї о|тан|ког|рес|удь| ре|то |ков|тор|ара|сві|тва|а б|оже|соц|оці|ціа|осн|роб|дь‐|ь‐я|‐як|і і|заг|ахи|хис|піл|цій|х в|лив|осв|іал|руч|ь п|інш|в я|ги |аги| ді|ком|ини|а і|оди|нал|тво|кої|всі|я в|ною|об |о у|о о|і о",
    "bos": " пр| и |рав| на|пра|на |да |ма |има| св|а с|а п| да|а и| по|је |во |ко |ва | у |ако|но |о и|е с| за| им|аво|ти |ава|сва|и п|ли |о н|или|и с|их |вак| ко|ост|а у| сл|не |вањ| др|ње | не|кој|ња | би|ије|и д|им |ств|у с|јед|бод|сло|лоб|обо| ил|при| је|ање| ра|а д| об| су|е и|вје|се |ом |и и|сти| се|ју |дру|а б| ос|циј|вој|е п|а н|раз|су |у п|ања|о д|ује|а о|у и| од|и у|ло |ова|дје|жав|оје|а к|ни |ово|едн|ити|аци|у о|о п|нос|и о|бра| ка|шти|а ј|них|е о|пре|про|ржа| бу|буд|тре| тр|ог |држ|бит|е д|у з|ја |ста|авн|ија|е б|миј|и н|реб|сво|ђи |а з|ве |бил|ред|род|аро|ило|ива|ту |пос| ње| из|е у|ају|ба |ка |ем |ени|де |јер|у д|одн|њег|ду |гов|вим|јел|тва|за | до|еђу|ним| са|нар|а т| ни|о к|оји|м и| см| ст|еба|ода|ран|у н|дна|ичн|уђи|ист|вно|алн|и м| дј|нак|нац|сно|нст|тив|ани|ено|е к|е н|аве|ан |чно|и б|ном|сту|нов|ови|чов|нап|ног|м с|ој |ну |а р|еди|овј|оја|сми|осн|анс|ара|дно|х п|под|сам|обр|о о|руг|тво|ји | мо|его|тит|ашт|заш| кр|тељ|ико|уна|ник|рад|оду|туп|жив| ми|јек|кри| ов| вј| чо|ву |г п| оп|међ|њу |рив|нич|ина|одр|е т|уду| те|мје|ење|сви|а ч|у у|ниц|дни| та|и т|тно|ите|и в|дст|акв|те |ао | вр|ра |вољ|рим|ак |иту|ави|кла|вни|амо| он|ада|ере|ена|сто|кон|ст |она|иво|оби|оба|едс|как|љу ",
    "srp": " пр| и |рав|пра| на|на | по|ма | св|да |има|а п|а и|во |ко |ва |ти |и п| у |ако| да|а с|аво|и с|ост| за|о и|сва| им|вак|ава|је |е с| сл| ко|о н|ња |но |не | не|ом |ли | др|или|у с|сло|обо|кој|их |лоб|бод|им |а н|ју | ил|ств| би|сти|а о|при|а у| ра|јед|ог | је|е п|ње |ни |у п|а д|едн|ити|а к|нос|и у|о д|про| су|ање|ова|е и|вањ|и и|циј| ос|се |дру|ста|ају|ања|и о| об|род|ове| ка| де|е о|аци|ја |ово| ни| од|и д| се|ве |ује|ени|ија|авн|жав| ст|у и|м и|дна|су |ред|и н|оја|е б|ара|што|нов|ржа|вој|држ|тва|оди|у о|а б|одн|пош|ошт|ним|а ј|ка |ран|у у| ов|аро|е д|сно|ења|у з|раз| из|осн|а з|о п|аве|пре|де |бит|них|шти|ву |у д|ду |ту | тр|нар| са|гов|за |без|оји|у н|вно|ичн|еђу|ло |ан |чно|ји |нак|ода| ме|вим|то |сво|ани|нац| ње|ник|њег|тит|ој |ме |ном|м с|е у|о к|ку | до|ика|ико|е к|пос|ашт|тре|алн|ног| вр|реб|нст| кр|сту|дно|ем |вар|е н|рив|туп|жив|те |чов|ст |ови|дни|ао |сме|бра|ави| ли|као|вољ|ило|о с|штв|и м|заш|њу |руг|тав|анс|ено|пор|кри|и б|оду|а р|ла | чо|а т|руш|ушт| бу|буд|ављ|уги|м п|ком|оје|вер| ве|под|и в|међ|его|вре|акв|еди|тво| см|од |дел|ена|рад|ба | мо|ну |о ј|дст|кла| оп|как|сам|ере|рим|вич|ива|о о| он|вни|тер|збе|х п|ниц|еба|е р|у в|ист|век|рем|сви|бил|ште|езб|јућ|њен|гла",
    "uzn": "лар|ан |га |ар | ва| би|да |ва |ир | ҳу|ига|уқу|бир|ҳуқ|қуқ|ган| ҳа|ини|нг |р б|иш | та|ни |инг|лик|а э|ида|или|лиш|нин|ари|иши| ин|ади|он |инс|нсо|сон|ий |лан|дир| ма|кин|и б|ши |ҳар| бў|бўл| му|дан|уқи|ила|қла|р и|қиг|эга| эг| ўз|ки |эрк|қил|а б|оли|кла| эр|гад|лга|нли| ол|рки|и ҳ| ёк|ёки| қа|иб |иги|лиг|н б|н м| қи| ба|ара|атл|ри | бо|лат|бил|ин |ҳам|а т|лаш|р ҳ|ала| эт|инл|ик |бош|ниш|ш ҳ|мас|и в|эти|тил|тла|а ҳ|и м|а қ|уқл|қар|ани|арн|рни|им |ат |оси|ўли|ги | да|а и|н ҳ|риш|и т|мла|ли | ха|а м|ият| бу|рла|а а|рча|бар|аси|ўз |арч|ати|лин|ча |либ|мум| ас|аро|а о|ун |таъ| бе| ту|икл|р в|тга|тиб| ке|н э|ш в|мда|амд|али|н қ|мат|шга| те|сид|лла|иро| шу| қо|дам|а ш|ирл|илл|хал|рга| де|ири|тиш|умк|ола|амл|мки|тен|гин|ур |а ў|рак|а ё|имо| эъ|алқ| са|енг|тар|рда|ода| ша|шқа|ўлг|кат|сий|ак |н о|зар|и қ|ор | ми|нда|н в| си|аза|ера|а к|тни|р т|мил| ки|к б|ана|ам |ошқ|рин|сос|ас | со|сиз|асо|нид|асл|н ў|н т|илг|бу |й т|ти |син|дав|шла|на |лим|қон|и а|лак|эма|муҳ|ъти|си |бор|аш |и э|ака|нга|а в|дек|уни|екл|ино|ами| жа|риг|а д| эм|вла|лма|кер| то|лли|авл| ка|ят |н и|аъл|чун|анл|учу| уч|и с|аёт| иш|а у|тда|мия|а с|ра |ўзи|оий|ай |диг|эът|сла|ага|ник|р д|ция| ни|и ў|ада|рор|лад|сит|кда|икд|ким",
    "azj": " вә|вә |әр |лар| һә|ин |ир | ол| һү| би|һүг|үгу|гуг|на |ләр|дә |һәр| шә|бир|ан | тә|лик|р б|мал|лма|асы|ини|р һ|шәх|ән |әхс|ары|гла|дир|а м|али|угу|аг | ма|ын |илә|уна|јәт| ја|икд|ара|ар |әри|әси|рин|әти|р ш|нин|дән|јјә|н һ| аз|ни |әрә| мә|зад|мәк|ијј| мү|син|тин|үн |олу|и в|ндә|гун|рын|аза|нда|ә а|әт |ыны|нын|лыг|илм| га| ет|ә ј|кди|әк |лә |лмә|олм|ына|инд|лун| ин|мас|хс |сын|ә б|г в|н м|адл|ја |тмә|н т|әми|нә |длы|да | бә|нун|бәр|сы | он|әја|ә һ|маг|дан|ун |етм|инә|н а|рлә|си | ва|ә в|раг|н б|ә м|ама|ры |н и|әра|нма|ынд|инс| өз|аны|ала| ал|ик |ә д|ләт|ирл|ил | ди|бил|ығы|ли |а б|әлә|дил|ә е|унм|алы|мүд| сә|ны |ә и|н в|ыг |нла|үда|аси|или| дә|нса|сан|угл|уг |әтл|ә о|хси| һе|ола|кил|ејн|тәр|јин| бу|ми |мәс|дыр|һәм| да|мин|иш | һа| ки|у в|лан|әни| ас|хал|бу |лығ|р в| ед|јан|рә |һеч|алг| та|еч |и с|ы һ|сиа|оси|сос|фиә|г һ|афи|ким|даф| әс|ә г| иш|н ә|ији|ыгл|әмә|ы о|әдә|әса| со|а г|лыд|илл|мил|а һ|ыды|сас|лы |ист| ис|ифа|мәз|ыр |јар|тлә|лиј|түн|ина|ә т|сиј|ал |рил| бү|иә |бүт| үч|үтү|өз |ону| ми|ија| нә|адә|ман|үчү|чүн|сеч|ылы|т в| се|иал|дах|сил|еди|н е|әји|ахи|хил| ҹә|миј|мән|р а|әз |а в|илд|и һ|тәһ|әһс|ы в|һси|вар|шәр|абә|гу |раб|аја|з һ|амә|там|ғын|ад |уғу|н д|мәһ|тәм| ни|и т| ха",
    "koi": "ны |ӧн | бы|да | пр|пра|рав| мо|лӧн| да|быд|лӧ |орт|мор|ӧм |аво|ӧй | ве|ыд | не|нӧй|ыс |ын |сӧ |тӧм|сь |во |эз |льн|ьнӧ|тны|д м| ас|ыны|м п| по|сьӧ| и |то |бы | ӧт| эм| кы|аль|тлӧ|н э| от|вер|эм | кӧ|ртл|ӧ в| ко|воэ|ств|ерм|тшӧ| до|ола|ылӧ|вол|ас |ӧдн|кыт|ісь|ето|нет|тво|ліс|кӧр|ӧс | се|ы с|шӧм|а с|та |злӧ| ме| ол|аци|ӧ к|ӧ д|мед| вы|вны|а в|на |з в| на|ӧ б|лас|ӧрт| во| вӧ| сі|лан|рмӧ|дбы|едб|ыдӧ|оз |ась| оз| сы|ытш|олӧ|оэз|тир|с о| чу|ы а|оти|ция|ись|ӧтл| эт|рты| го|ы п|ы б|кол|тыс|сет| сь|рті|кӧт|о с|н б|дз |н н| мы| ке|кер|тӧн|тӧг|ӧтн|ис |а д|мӧ |ост|ӧ м| со|онд|нац|дӧс|итӧ|ест|выл| ви|сис|эта| уд|суд|нӧ |удж|ӧг |пон|ы н|н п|мӧд|а п|орй|ӧны|ӧмӧ|н м|ть |сыл|ана|ті |нда|рны|сси|рре|укӧ|з к|чук|йын|рез| эз|ысл|ӧр |ьӧр|с с|с д|рт |с в|езл|кин|осу|эзл|й о|отс| тӧ|ы д| ло| об|овн|лӧт|асс|кӧд|с м|ӧ о|нал|быт|она|ӧт |слӧ|скӧ|кон|тӧд|ытӧ|дны|а м|ы м|нек|ы к|ӧ н|асл|дор|ӧ п| де| за|а о| ов|сть|тра| дз|ь к|ӧтч|н к| ст|аса|етӧ|ьны|мӧл|умӧ|сьн| ум|ерн|код| пы|тла|оль|иал|а к|н о| сэ|а н|ь м|кыд|циа|са | ли|а б|езӧ|й д| чт|ськ|эсӧ|ион|еск|ӧ с|оци|что|ан |соц|йӧ |мӧс|тко|зын|нӧя|вес|енн| мӧ|ӧтк|ӧсь|тӧ |рлӧ|ӧя |оля|рйӧ|ӧмы|гос|тсӧ|зак|рст|з д|дек|ннё|уда|пыр|еки|ако|озь| а |исӧ|поз|дар|арс|ы ч",
    "bel": " і | пр|пра|ава| на|на | па|рав|ны |ць |або| аб|ва |ацы|аве|ае | ча|ння|анн|льн| ма| св|сва|ала|не |чал|лав|ня |ай |ых | як|га |век|е п| ад|а н| не|пры|ага| ко|а п| за|кож|ожн|ы ч|бод|дна|жны|ваб|цца|ца | ў |а а|ек |мае|і п|нне|ных|асц|а с|пав|бо |ам |ста| са| вы|ван|ьна| да|ара|дзе|одн|го |наг|він|аць|оўн|цыя|мі |то | ра|і а|тва| ас|ств|лен|аві|ад |і с|енн|і н|аль|най|аво|рац|аро|ці |сці|пад|ама| бы| яг|яго|к м|іх |рым|ым |энн|што|і і|род| та|нан| дз|ні |я а|гэт|нас|ана| гэ|інн|а б|ыць|да |ыі |оў |чын| шт|а ў|цыі|які|дзя|а і|агу|я п|ным|нац| у | ўс|ыя |ьны|оль|нар|ўна|х п|і д|ў і| гр|амі|ымі|ах | ус|адз| ні|эта|ля |воў|ыма|рад|ы п|зна|чэн|нен|аба| ка|ўле|іна|быц|ход| ін|о п| ст|ера|уль|аў |асн|сам|рам|ры | су|нал|ду |ь с|чы |кла|аны|жна|і р|пер|і з|ь у|маю|ако|ыцц|яко|для|ую |гра|ука|е і|нае|адс|і ў|кац|ўны|а з| дл|яўл|а р|аюч|ючы|оду| пе| ро|ы і|вы |і м|аса|е м|аду|х н|ода|адн|нні|кі | шл|але|раз|ада|х і|авя|нав|алі|раб|ы ў|нна|мад|роў|кан|зе |дст|жыц|ані|нст|зяр|ржа|зак|дзі|люб|аюц|бар|ім |ены|бес|тан|м п|дук|е а|гул|я ў| дэ|ве |жав|ацц|ахо|заб|а в|авы|ган|о н|ваг|я і|чна|я я|сац|так|од |ярж|соб|м н|се |чац|ніч|ыял|яль|цця|ь п|о с|вол|дэк| бе|ну |ога| рэ|рас|буд|а т|асо|сно|ейн",
    "bul": " на|на | пр|то | и |рав|да |пра| да|а с|ств|ва |та |а п|ите|но |во |ени|а н|е н| за|о и|ото|ван|не | вс|те |ки | не|о н|ове| по|а и|ава|чов|ни |ане|ия | чо|аво|ие | св|е п|а д| об|век|ест|сво| им|има|ост|и д|и ч|ани|или|все|ли |тво|и с|ние|вот|а в|ват|ма | ра|и п|и н| в |ек |сек|еки|а о| ил|е и|при| се|ова|ето|ата|воб|обо|бод|аци|ат |пре|оди|к и| бъ| съ|раз| ос|ред| ка|а б|о д|се | ко|бъд|лно|ния|о п| от|ъде|о в|за |ята| е | тр|и и|о с|тел|и в|нит|е с|ран| де|от |общ|де |ка |бра|ен |ява|ция|про|алн|и о|ият|ст |нов| до|его|как|ато| из|нег|а т|ден|а к|щес|а р|тря|а ч|ряб|о о|вен|ябв|бва|дър|гов|нац|ено|тве|ърж|е д|нос|ржа|а з|вит|зи |акв|лен| та|ежд|и з|род|е о|обр|нот| ни| с |т с|нар|о т|она|ез |йст|кат|иче| бе|жав|е т|е в|тва|зак|аро|кой|осн| ли|ува|авн|ейс|сно|рес|пол|нен|вни|без|ри |стр| ст|сто|под|чки|вид|ган|си |ди |и к|нст| те|а е|вси|еоб| дъ|сич|ичк|едв|жен|ник|ода|т н|о р|ака|ели|одн|елн|лич| че|чес|бще| ре|и м| ср|сре|и р|са |лни| си|дви|ичн|жда| къ|оет|ира|я н|дей| ме|еди|дру|ход|еме|кри|че |дос|ста|гра| то|ой |тъп|въз|ико|и у|нет| со|ави|той|елс|меж|чит|ита|що |ъм |азо|зов|нич|нал|дно| мо|ине|а у|тно|таз|кон|лит|ан |клю|люч|пос|тви|а м|й н|т и|изв|рез|ази|ра |оят|нео|чре",
    "kaz": "ен |не | құ|тар|ұқы| ба| қа|ға |ада|дам|құқ|ық | бо| ад|ықт|қта|ына|ар | жә|ың |ылы|әне|жән| не|мен|лық|на |р а|де | жа|ін |а қ|ары|ан | әр|қыл|ара|ала| ме|н қ|еме|уға|ның| де|асы|ам |іне|тан|лы |нды|да |әр |ығы|ста|еке| өз|ын |ған|анд|мес| бі| қо|ды |ің |бас|бол|етт|ып |н б|ілі|қық|нде|ері|е қ|алы|нем|се |бір|лар|есе|ы б|тын|а ж| ке|тиі|ост|ге |бар| ти|е б| ар|дық|сы |інд|е а|аты| та| бе|ы т|ік |олы|нда|ғын|ры |иіс|ғы | те|бос|луы|алу|сын|рын|еті|іс |рде|қығ|е ж|рін|дар|іні|н ж|тті|қар|н к|ім | ер|егі|ыры|ыны| са|рға|ген|ынд|аны|уын|ы м|лға|ана|нің|тер|уы |ей |тік|ке |сқа|қа |мыс|тық|м б|ард| от|е н|е т|мны|өзі|нан|гіз|еге| на|ы ә|аза|ң қ|лан|нег|асқ|кін|амн|кет|рал|айд|луғ|аса|ті |рды|і б|а б|ру | же|р м|ді |тта|мет|лік|тыр|ама|жас|н н|лып| мү|дай|өз |ігі| ал|ауд|дей|зін|бер|р б|уда|кел|біл|і т|қор|тең|лге| жү|ден|ы а|елі|дер|ы ж|а т|рқы|рлы|арқ| тү|қам|еле|а о|е ө|тін|ір |ең |уге|е м|лде|ау |ауы|ркі|н а|ы е|оны|н т|рыл|түр|ция|гін| то| ха|жағ|оға|осы|зде| ос|ікт|кті|а д|ұлт|лтт|тты|лім|ғда| ау| да|хал|тте|лма| ұл|амд|құр|ірі|қат|тал|орғ|зі |елг|сіз|ағы| ел|ң б|ыс | ас|імд|оты| әл|н е|ағд|қты|шін|ерк|е д|ек |ені|кім|ылм|шіл|аға|сты|лер|гі |атт|кен| кө|ым‐| кұ|кұқ|ра |рік|н ә| еш",
    "tat": " һә|лар|әм |һәм| ке| хо|кук|оку|хок|еше| бе|ләр|кеш|га |әр |рга|ан |кла| бу|ар |ең |нең|гә | то| ба|да |ргә| ти|ырг|һәр|ене|бер|ән |ен |р к|бул|укл|дә |а т|ары|тор|ире| үз|на |ган|ара| ка| ал|ә т|нә | ит| дә|ы б| ир|рын|ше |ын |енә|тие|лык|екл|ына|н т|иеш|бар|еле|ка |елә|а х|н б|кы |рек|ала|кар| та|ә к|нда|еш |лән|бел|укы|лан|ите|тә |шен|ле |лы |ез |ерг|н и|ә б|а к|клә|үз |тел|лыр|не |әрг|ы һ|е б| га| ха|алы|рне|м и|тен|әрн|а б|ның|ынд|ың |ләт|дан|сә | як|лга|улы|ел |а а| яи|яис|асы|ш т|а һ| са|рлә|лек|иге|ә х|гез|орм|ем |аны|р б|м а|р һ|рмы|мыш|сын|шка|ә һ|исә|тәр|үлә|әт |мәт|сен|сез|чен| ни|ә и|н м|илл|ять|ны |ылы|үзе| ки| эш| ту|алу|акы|ып |уга|ль |тан|н к|лу |бу |мас|рен|кә | тү| тә|түг|зен| җә|тын|ди |баш|кле|гән|ть | би|әре|штә|гын|әүл|ер |мил| ми|клы|гел|ыш |лер|ерл|әве|рдә|а я|р а| мә| рә|лем|хал| ан|ң т| аш|ык |ция|е х|стә|ә д|аль|рак|ек | де|рәв|тот|кән|улг|орг|веш|ешт|ни |итә|кка|м т|үге|шел|а и|ндә| да|рел|кер| кы|ерә|та |н я|еге|ый |а д|аци|р о|шла|тлә|әтл|н д|айл|ллә|ард|рда|кта|шкә| за|ге |ләш|ш б|әсе|кон|шыр|циа|нин|лау|уры|ры |оты|әне| тө|инд|нди| җи|оци|соц|лә |арт|якл|зак|тиг|рке| ди| со|ыкл|кем| ко|р и|ң б|әте|гыя|чар|үгә|ин |иле| сә| ил|мгы| ае|н а|аер|ыны|л һ",
    "tuk": " би|лар| ве|ве |да |ада|ары| хе|ир | ад|бир|дам|кла|ер |р б|ың | ха|ара|га |ен |лан|ыны|или|дыр|ам |ала| бо|хер|р а|ыр |лы |лер|ан |бил|иң |ыды|р х|акл|нда| өз|клы|ны |хук|ери| ху|уку|ага|не |лыд|ине|ына|лен|на |хак|де |‐да|ин |рын|атл| эд|маг|өз | де|асы|лыг|кук|е а|ынд|алы|лма|бол|дан|ини|а х| я‐|е х|ге |иле|я‐д|ар |ама|ли |ыгы|ети| ба| га|гын|ере|укл|лиг|ның|зат|лык|тлы|нде|ни |лик|ден|мак|сын|дил|ры |аны|кин|әге|п б|а г|хем|иги|эрк|аза|а д|мек| эр|мал|ыкл|мәг|сас| эс|екл| ма|рин|эса|ола|ы б|айы|н э|эди| гө| хи|сы | аз|баш|ы д|йда|шга|ашг|а в| до|ыет|ы в|дак|ниң|рки|гал|чин|гда|ак | җе|а б| эт|этм|кы |лет|йән| та|гин|ян |тме|хич|ич |мез| гу|хал|ылы|үнд|илм|дай|ягд| яг|и в|им |акы|ы г|ән |а а|рың|ги |тле|н м| го|ип |ал |еси| се|лме| ка|м х|дең|ң х|е д|дир|илл|рил| ал|кан|е г|лин|ра |дол| бе| ми|мил|ң д|н х|ели|н а|е м| ге|ы х| дө|ик | со|ң а|чил|дөв|е б| са|гар|е в|ең |н б|рма| ме|кли|үчи| дә| үч|ция|н в| дү|и б|айд|кле|сер|а я|соц|гор|оци|дал|мы |олм|циа|уң | он|уп |кда|дәл|ири| ди|еле|лип|алк|лим|гур|үни|нме| әх|н г| иш|ы ө|ң э|нун|еги|тин|ы а|рле|аци|ыз |з х|сыз|аха|м э|олы|рам| ту| ни|ып |ерт|алм|ора|и х|хли|әхл|к э|өвл|вле|тмә|ет |нли|ахс|гөз|гы |етл|ы ү|нуң|ону|сиз|емм|ек ",
    "tgk": "ар | ба| ҳа| да|ад | ва|он |ва | та|дар|ти | ин|ба | бо| ки|аро| до|ои |дор|ард|ки |бар|д ҳ|уқу| як|ин |ҳар|и о| на| ма|и м|ора| ҳу|як |ни |нсо|инс|и ҳ|аи |и б|сон|рад| му|ҳои|р я|ҳуқ|қуқ|ҳақ|ии |к и| ша|и д| аз|и и| оз|нд |яд |қ д|озо|аз |зод|анд|д б|ояд| ка|ият|она|да |амо|ақ |а б|ди | ё |гар|ат |дан|ҳам|оди|рда|моя| он|уда|қи | ху|бо |и т|дон|ст |нам|н ҳ|ода|и с|ан |н б|мил|и х|бош|они|оша|худ|ава|боя|аст|и а|ро | ме|а ҳ|имо|ила|оми|оба|ида|кар|н д|лат|д в|а ш|ҳо | ас|таҳ|рои|и н|д к|яти| ди|шад|ӣ в|ри |рдо|шав| ми|е к|роб|тар|та |кор| бе|о д|вад|мон|иҳо|ли |уд |оси|ошт|ми |р м|ати|т б| со|ӣ ё|нҳо|мин|шар|ара|таъ|ани|а в|иро|а д|дав|ят |даа| са|ама|дош|раф|шуд|лӣ |д а|оти|а м| фа|ист|ор |р ҳ|на |и к|р к|д т|и ҷ|и ш| эъ| су|н м|н в|и ӯ|фи |вар|диҳ|ига|зар| шу|ари|а т| иҷ| ақ| ҳи|асо|р б|т ҳ|а а|одо|мум|р в|а о| ӯ |рон|наз|диг| ни|бот| ҷа|авр| қа|яи |р д|уқи|лал|кас|шта|уна|еҷ |ино|тҳо|уни|або|сти| во|авл|и қ|вла|ун |у о|ӣ б| ҳе|дӣ |қу |чун|н и|сар|ояи|тав|маҳ|онҳ|қар|атҳ|тир|оҳ |ахс| қо|уқ |оли| ис|д д|и з| ко|аза|ори|фар|сос|ран|н к|р а|ҷти|ону|сӣ |ири|рра|рӣ |ҳеҷ| за|ид |ҳти|рии|ами|қон|уди|н н| од|иҷт|мия|ъло|лом|ию |наи|али|нда|оӣ |оят|янд| зи|оян|ӣ ҳ|и п|офи|киш|ҳим|рат|тим",
    "kir": " жа|на |ана|жан| би|уу |уку|га |бир| ук|ар |ен |луу|тар|кук|укт| ка| ад|ын |ада|ууг|дам| ме|уга|ык | ар|ене|мен|нен|ан |ары|олу| бо|ин |ам |ган|ир |бол| ал|ара|нда|н к|туу|р б|н ж| ба|анд| же|р а|кта|ына|ард|кту|эрк|үн |да |н б|н э| эр|нди|а т| ко|рды|н а|дык|рки|инд|а ж|кин|ала|а а|лар|аны|үү | өз|а к|тер|алу| та|а у|алы|а э|же |ук |ийи| ти|иш |тий| ма|гө |кыл|йиш|улу|нын|ке |н т|кар|бар|или|у м| кы|иги|рын|а б|үгө|рга|е а|ун |етт|дик| ту|дар|тта|баш|у а|н у| ээ|дын|им |рүү|гин|лык|ушу|нды|тур| са| эл| эм| мү|гон|лга|алд|икт|үүг| бе|ры |өз |нан|он | ан|кте|ул |дай|ерд|диг|р м|ери|үчү| не|атт|лды|еке|еги|үнө|лук|амд|у б|ынд|үнү|рди|тук|ка |кан|к ж| ки|м а|күн|не |ине|мда|рин|ого|кет| со|кам|дин|к м| эч| то|сыз|ылу|өзү| де|н м|ция|ээ |чүн|гиз|уп |нег|эч |руу|ыз |мес|эме| иш|лут|ы м|шка|ыкт|мам|ашк|лде| ке|лго| тү|ө ж|олг|ес |к т|кор|ге |бил|түү|угу|рал|алг|тын|кен| ул|лим|утт|ыгы|орг|н н|у ж|рде|нуу|тал|ч к|рго|мак| те| уш|уну|ктө|ди |акт|нүн| ди|зүн|иле| кө|кат|аци|мсы| эс|тык|е к|ей |тан|е э|ай |ер |соц|оци|циа|аты| жо|к к|амс|лан|а м|ири|ске|айд|ирд| мы|ылы|зги|ыны|ага|ген|е б|шул|тол|өнү|дыг|е ж|ү ү|з к|айы|раб|енд|абы|жал|ү ж|оо |уна|к а|кал|лек|ект|рма|дей| үч|тоо|мат|у э|бер",
    "mkd": " на|на | пр| и |во | се|то |ите|те |рав|та |а с|пра|ува|да | да| не|ва |а п|а н|и с|ата|о н|еко|а и| по|но |ој |кој| со| за| во|ств|ја |ње |ање|аво|ни | им|от |е п|е н|ма |ат |вањ|ост|а д|о с|е и|се |ова|ија|и п| сл|а о|има|сек|сло|ото|ли |о д|ава|обо|о и| ил|или| би|бод|и н|лоб| од|бид|ред|ен |при|вот|иде|а в|ста| об|и и|и д|пре|нос|ст |е с| ни| ќе|ове|аат|аци|ќе |со |ови|про|ј и|тво| ра|ест|што| де|т и|акв| ко|раз|гов|его|нег|ани|едн|ако|циј|бра|од |а з|е б|и о|а б|о п|ват| е | др|ето|ваа|как|ди |т с| ка| чо|ени|алн|одн|ено| си|чов| шт|а г|а е|вен|нит| ја|де |оди|е о|ран|и з|сно|нот| ед|тит|лно|ви |јат|ден|т н|нац| оп| до| ос|и в|осн|кон|дна|е д| ст|век|о о|род|сто|сит|еме|ара|дно|обр|ј н|пшт|еди|опш|за |ние|аро|нов|а к|вни|дру| ов|тве|жив|ште|д н|ие | ме|ед |иот|и м|о в|ќи |дат|шти|јќи|без|бед|ки |ков|ко |а р|нар|чно|дни| вр|ели|нак|ашт|ичн|ка |ема|цел|зем|еду|чув|тес|држ|ник|т п|луч|аа |деј|нст|не |а ч|руг|ода|ивн| це|нив|дин|авн| зе|нио|пор|а м|заш|лас|вит|дек|го |ине|ело|нет|ез |тен| ре| из|под|раб|або|бот|дув|нув| бе|ење|еде|он |њет|зов|иту|ван|н и|аѓа|е в|еѓу|рем|дел|о к|кот|им | жи|дос|вре|меѓ|олн|нап| го|емј|кри|уна|нем|оја| су|ита|азо|лит|тор|инс|ора|огл|ипа|пот|слу|кви",
    "khk": " эр|эрх| хү|ний|н б|эн |тэй|ийг|х э|эй | бо|хүн| бү|йн |ан |ах | ба|ийн|бол|ий | ха|бай|уул|рх |оло|й х|йг |гаа|эх |бүр|гүй|үн | бу|он |аар|рхт|үнд|хтэ|үр |лэх|ар | за|н х|лах|эр | хэ|й б|өлө|н э|лөө|эл | үн|аа | ул|ын |хий|үй | ор| ту|улс|ула|үлэ| чө|чөл|н т|үүл| ху|сэн| ни|ндэ|лон|гээ|р х|өөр|сан| нэ|ны | ёс|нь |эд | гэ| нь| ч | тө| тэ|лаг|оро|дэс|лс |г х|ох |үни|ээр|хам|х ё| ша|д х|р э|лго|лд | дэ|н а|бую|уюу|гуу|төр|ай |юу |тай|ээ |ж б|эг |лий|хан|ыг | эд| то|х б|дсэ|й э|рга| ал|хар|арг|ад |лга|рэг| зо|айг|ага| тү|л х|ал | хө|өөт| са|н н|йгэ|дэл|нд |гий|н з|ол |ава|лла| өө|рол|өтэ|гэр|г б|л б|бус|нэг|н д|аг |аал|н ү|алд|рла| үз|гэм|й а|н у| ол|хуу|х ч|эрэ|мга|олг|эс |хүү|той| ар|үү |лал| эн| мө|йх |ин |өрө|х т|луу|рий|сон| га|хэн|айх|эни| ам|гла|өр |аса|ана|амг| би|ард| ял|йгм|ой |лын|үрэ|эгт| ав|эдэ|оо |мий|х н|аан|үйл|арл|нха|тгэ|дээ|с о|рхи|лов|д н|тэг|өг |өн |хэр|лэн|өөг|үүн|вср|га |р т| хи|хүр|рон|ч б| хо|гөө| мэ|бие|н г|ура|бүх|ори|али| аж| үй| яв|өх |хээ|г н|ата| та|гш |г ү|эгш|вах|лох|эгд|длэ|х ү|гох|үх |энэ|лж |олц| шү|л т| да|дал|эж |д б|лан|й т|айл|л н|х а|агл|тоо| со|өри|йгу|гми|дил|ээн|дар|н ш|шүү|овс| ад|а х|р ч|ади|ааг|лаа|айд|амь|гтэ|н с|д т|ийт|лэл|х ш|н ч|унх"
  },
  "Arabic": {
    "arb": " ال|ية | في|الح|في | وا|وال| أو|ة ا|أو |الم|الت|لحق|حق |لى |كل |ان |ة و|الأ| لك|لكل|ن ا|ها |ق ف|ات |مة |ون |أن |ما |اء |ته |و ا|الع|ي ا|شخص|ي أ| أن|الإ|م ا|حري| عل|ة ل|من |الا|حقو|على|قوق|ت ا|أي |رد | شخ| لل| أي|ق ا|لا |فرد|رية| ول| من|د ا| كا| إل|خص |وق |ا ا|ة أ|ا ي|ل ف|ه ا|نسا|جتم|ن ي|امة|كان|دة | حق|ام |الق|ة م| فر|اية|سان|ل ش|ين |ن ت|إنس|ا ل| لا|ذا |هذا|ن أ|لة |ي ح| دو|ه ل|لك |ترا|لتع|اً |له |إلى| عن|ى ا|ه و|ع ا|ماع|د أ|اسي| حر|ة ع|مع |الد|نون| با|لحر|لعا|ن و|، و|يات|ي ت|الج| هذ|ير |بال|دول|لإن|عية|الف|ص ا| وي|الو|لأس| إن|أسا|ساس|ماي|حما|رام|سية|انو|مل |ي و|عام|ا و|تما| مت|ة ت|علي|ع ب|ك ا| له|ة ف|قان|ى أ|ول |هم |الب|ة ب|ساو|لقا|الر|لجم|ا ك|تمت|ليه|لتم|لمت|انت| قد|اد |ه أ| يج|ريا|ق و|ل ا|ا ب|ال |يه |اعي|لدو|ل و|لإع|لمي|لمج|لأم|تع |دم |تسا|عمل|اته|لاد|رة |اة |غير|قدم|وز |جوز|يجو|عال|لان|متع|مان|فيه|اجت|م و|يد |تعل|ن ل|ر ا| يع| كل|مم |مجت|تمع|دون| مع|تمي|ذلك|كرا|يها| مس|ميع|إعل|علا| تم| عا|ملا|اعا|لاج|ني |ليم|متس|ييز|يم |اعت|الش| تع|ميي|عن |تنا| بح|لما|ي ي|يز |ود |أمم|لات|أسر|شتر|تي | جم|ه ع|ر و|ي إ|تحد|حدة| أس|عة |ي م|ة، |معي|ن م|لمس|م ب|اق |جمي|لي |مية|الض|الس|لضم|ضما|لفر| وس|لحم|امل|ق م|را |ا ح|نت | تن|يته| أم|إلي|واج|د و|لتي| مر|مرا|متح| ذل| وأ| تح|ا ف| به| وم| بم|وية|ولي|لزو",
    "urd": "ور | او|اور| کی|کے | کے|یں | کا|کی | حق|ے ک|ایٔ|کا |یٔے| کو|یا |نے |سے | اس|ٔے |میں|کو | ہے| می|ے ا| ان|وں | کر| ہو|اس |ی ا|ر ا|شخص| شخ|حق | سے| جا|خص |ہر |ام |ے م|ں ک|ہیں| یا|سی |ادی|آزا| آز|زاد|ص ک|ہ ا|ہے |جای|ا ح|ر ش|ت ک|کہ |م ک| پر|ی ک|ان |پر |۔ہر|دی |یٔی|س ک|ا ج|ر م|ہے۔|ق ہ|ں ا|ی ح|و ا|ار |ن ک|قوق|کسی|حقو|ری |وق |ے گ| ہی|ی ج| مع|سان| نہ| مل| حا|ٔی | جو|نی |کرن| لی|تی |ی ت|نسا|ل ک| کہ|جو |انس|اپن|ے ب|نہ | اپ|یت |ا ا|ہ ک| کس|ر ک|رے |ے ہ| ای|می |ل ہ|۔ ا|ے ل|ی ش|رنے|وہ |حاص|ی م|معا|اصل|صل |یں۔|ویٔ|نہی|ملک|ایس|انہ|ات |ی ب|د ک|ی ہ| تع|کیا|ق ک|ر ہ|ا م|دہ | من| بن| قو|ے ج|یہ |ں م|اشر|مل | دو|عاش|قوم|ر ب|انی|وام|قوا|اقو|لیٔ|دار| وہ| و | عا|ی س|بر |علا|اد |ہ م|و ت|ر ن| جس|ے۔ہ|ے، |انو| دی|گی |لیم|یوں| قا| یہ|دوس|ے۔ |ا ہ|تعل|یم |ر پ|جس |ریق|ے ح| اق|نیا|لک | گی|ین |یاد| مس|لاق|، ا|ی ن|پنے|وری|م ا| با|علی|یر |ی، |انے|ون |ن ا|ر ع| بر|ی آ|ر ح| رک|ے پ|کر |گا۔| پی|سب | گا|نا | پو|یسے|رای| مر|اری|قان|نون| مم|ندگ| اع|دگی|ہ و| ہر|ر س| چا|خلا|ا پ|ق ح| بھ|س م| شا|ہوگ|ے خ|وسر|رتی|ومی| بی|رکھ| مت|کوی|ر آ|پور|اف | مح|ے س|ہوں|نکہ|ونک|ت ا| طر|ے ع|یٔد|د ا|ال |ں۔ |م م|اں | مق|غیر|پنی| ام|ں، |من |ہو |ریع|و ک|ذری| ذر|عام|، م|دان|ادا|اعل|مام|تما| عل|دیو|بھی|ھی |بنی|ے ی|ا ک|اوی|ل م| زن|یاس|لان|عمل| عم|ت م| بچ",
    "skr": "تے |اں | تے|دے |دی |وں | دا| حق| کو|ے ا|کوں| دے|دا | دی|یاں| کی|ے ۔|یں |ہر | ۔ |کیت|ہے | وچ| ہے|وچ | ان| شخ|شخص|ادی|ال | حا|اصل|حق |حاص|ے م|خص |صل |ں د| نا|یا | ای|اتے|ق ح|ل ہ|ے و|ں ک| ات|ہیں|سی | مل|نال|زاد|ازا|ی ت| از|قوق|ار |ا ح|حقو| او|ص ک| ۔ہ|۔ہر|ر ش|دیا|ے ج|وق |ندے| کر|یند| یا|نہ | جو|کہی|ئے |ی د|سان|نسا|وند|ی ا|یتے|انس|ا ا|ملک|ے ح|و ڄ|ے ک|ڻ د| وی|یسی|ے ب|ا و| ہو|ں ا|ئی |ندی|تی |آپڻ|وڻ |ر ک|ن ۔| نہ|انہ|جو | کن| آپ| جی|اون|ویس|ی ن| تھ| کہ|ان |ری |ڻے | ڄئ| ہر|ے ن|دہ |ام |ں م|ے ہ|تھی|ں و|۔ ا|ں ت|ی ۔|کنو|ی ح|ی ک|نوں|رے |ہاں| بچ|ون |ے ت|کو | من|ی ہ|اری|ور |نہا|ہکو|یتا|نی |یاد|ت د|ن د| ون|وام|ی م|قوا|تا |ڄئے|پڻے| ہک|می | قو|ق ت|ے د|لے |اف |ل ک|ل ت| تع|چ ا|ین |خلا|اے |علا| سا|جیا|ئو |کرڻ|ی و|انی|ہو |دار| و |ی ج| اق|ن ا|یت |ارے|ے س|لک |ق د|ہوو| ڋو|ر ت| اے|ے خ| چا| خل|لاف|قنو|نون|پور|ڻ ک| پو|ایہ|بچئ|چئو|ات |الا|ونڄ|وری|این| وس| لو|و ا|ہ د| رک|یب |سیب|وسی|یر |ا ک|قوم|ریا|ں آ| جا|رکھ|مل |کاں|رڻ |اد |او |عزت| قن|ب د|وئی|ے ع| عز| ۔ک| مع|اقو|ایں|م م|زت |ڻی |یوڻ|ر ہ| سم|ں س|لوک| جھ| سی|جھی|ت ت|ل ا|اوڻ|کوئ|ں ج|ہی |حدہ|تعل|ے ذ|وے |تحد|متح|لا |ا ت|کار| اع|ے ر| مت|ر ا|ا م|ھین|ھیو|یہو| مط| سڱ|ی س|ڄے |نڄے|سڱد|لیم|علی|ے ق| ذر|م ت| کھ|ن ک| کم|ہ ا|سار|ائد|ائی|د ا| ہن|ہن |ی، |و ک|ں ب|ھیا|ذری|ں پ|لی ",
    "uig": " ئا| ھە|ىنى|ە ئ|نىڭ|ىلى| ۋە|ىڭ |ۋە | ئى| بو|ھوق|وقۇ| ھو|قۇق|نى |بول| ئە|لىك|قىل|ىن |لىش|شقا|قا |ەن | قى|ن ب|ھەم|ى ئ|ئاد|ىشى|دەم|ادە|كى |لىق|غان|ىي |ىغا|گە | بى|دىن|ىدى|ەت |كىن|ىكى|ندا|ۇق | تە|نلى|تىن|ەم |لەت|قان|ىگە|ىتى|ىش |ھەر|ئەر| با|ولۇ|دۆل|غا |اند| دۆ|اق |مە |لۇش|دە |لۇق| ئۆ|ان | يا|ەرق|ۆلە|ركى| قا|ەرك|ەمم|ا ئ|ممە|ۇقى|ىق | بە|رقا|داق|ارا|ىلە|رىم|ىشق|ى ۋ|لغا|مەن|اكى|ەر |ا ھ|دۇ |ياك|ۇقل|ئار|ق ئ|ىنل|لار| ئې|ى ب|لىن|ڭ ئ|ئۆز|ق ھ|شى |ىمە|قلۇ|ن ئ|لەر|ەتل|نىش|ىك |ەھر| مە|ھرى|لەن|ىلا|ار |بەھ| ئۇ|ە ق|ئىي|اسى| مۇ|رلى| ئو|بىر|، ئ|بىل|ش ھ|بار|ى، |ۇ ھ|ايد|ۇشق|شكە|ە ب|يەت|ا ب|رنى|كە |ىسى| كې|ېلى|الى|ەك |م ئ|ماي|ولم|تنى|ىدا|ارى|يدۇ|لىد| قو|ەشك|تلە|ك ھ|انل|ەمد|مائ|ئال|ر ئ|مدە|ىيە|ش ئ|ە ھ|لما|ائى|ئىگ|دا |ي ئ|ۇشى|راۋ|ا، |سىي| تۇ|كىل|ە ت|ىقى|قى |ۆزى|ېتى|ىرى|ىر |ىپ |ى ك|ن، |ر ب|لەش|اسا|اۋا|ى ھ|شلى|ساس|ادى|تى |اشق|ەتت|قىغ|ىما|انى| خى|ۇرۇ| خە|ن ق|منى| خا|چە |ى ق| جە|رقى|تىد| ھۆ|باش|ارل|ئىش|تۇر| جى|مۇش|نۇن|شۇ |انۇ|ۇش |رەك|ېرە|كېر| سا|الغ|ۇنى|ئېل|ىشل|تەش|خەل|مەت|اش |دىغ|كەن|ەلق|تىش|مىن|ايى|سىز|ق ۋ|نىي|جىن|رىش|پ ق| كى|ېرى|ئاس|ەلى| ما|تتى|ىرل|ولى| دە|ارق|سىت|ە م| قە|شىل| تى|ەرن|كىش|ن ھ|ەلگ|ەمن|ك ئ| تو|ى ي|قتى|ئاش|تىم|تەۋ|ناي|ىدە|ىنا| بۇ|ىيا|زىن|امى|قار|شكى|ىز | ئۈ|ەۋە|ۆرم|ە خ|شىش|ىيى|جتى|ىجت|ئىج|نام|تەر",
    "pes": " و | حق| با|که |ند | که| در|در |رد | دا|دار|از | از|هر | هر|یت |ر ک|حق |د ه|ای |د و|ان | را|ین |ود |یا | یا|را |ارد|ی و|کس | کس| بر| آز|باش|ه ب|آزا|د ک| خو|ه ا|د ب|زاد| اس|ار | آن|ق د|شد |حقو|قوق|ی ب|وق |ده |ه د|ید |ی ک|و ا|ور |ر م|رای|اشد|خود|ادی|تما|ری | اج|ام |دی |اید|س ح|است|ر ا|و م| ان|د ا|نه | بی|با | هم| نم|مای| تا|د، |ی ا|انه|ات |ون |ایت|ا ب|ست | کن|برا|انو| بش| مو|این| مر|اسا| مل|وان|ر ب|جتم| شو| اع|ن ا|ورد| می| ای|آن | به|و آ|ملل|ا م|ماع|نی |ت ا|، ا|ت و|ئی |عی |ائی|اجت|و ب|های|ن م|ی ی|بشر|کند|شود| من| زن|ن و|ی، |بای|ی ر| مس|مل |مور|ز آ|توا|دان|اری|علا|گرد|یگر|کار| گر| بد|ن ب|ت ب|ت م|ی م| مق|د آ|شور|یه |اعی| عم|ر خ|ن ح| کش|رند|مین| اح|ن ت|ی د| مت|ه م|د ش| حم|و د|دیگ|لام|کشو|هٔ |ه و|انی|لی |ت ک| مج|ق م|میت| کا| شد|اه |نون| آم|اد |ادا|اعل|د م|ق و|ا ک|می |ی ح|لل |نجا| مح|ساس|یده| قا|بعی|قان|ر ش|مقا|ا د|هد |وی |نوا|گی |ساو|ر ت|بر |اً |نمی|اسی|اده|او | او| دی| هی|هیچ|ه‌ا|‌ها|یر |خوا|د ت|همه|ا ه|تی |حما|دگی|بین|ع ا|سان|ر و|شده|ومی| عق| بع|ز ح|شر |مند| شر|ٔمی|أم|تأ|انت|اند|اوی|مسا|ردد|بهر| بم|ارن|یتو|ل م|ران|و ه|ر د|م م|رار|عقی|سی |و ت|زش | بو|ا ا|ی ن|موم|جا |عمو|رفت|عیت| فر|ندگ|واه|زند|م و|نما|ه ح|ا ر|دیه|جام|مرد|ت، |د ر|مام| تم|ملی|نند|الم|طور|ی ت|تخا|ا ت|امی|امل|دد | شخ|شخص"
  },
  "Devanagari": {
    "hin": "के |प्र|और | और| के|ों | का|कार| प्|का | को|या |ं क|ति |ार |को | है|िका|ने |है |्रत|धिक| अध|अधि|की |ा क| कि| की| सम|ें |व्य|्ति|क्त|से | व्|ा अ|्यक|में|मान|ि क| स्| मे|सी |न्त| हो|े क|ता |यक्|क्ष|ै ।|िक |त्य| कर|्य | या|भी | वि|रत्|र स|ी स| जा|स्व|रों|्ये|ेक |येक|त्र|िया|ा ज|क व|र ह|ित |्रा|किस| अन|ा स|िसी|ा ह|ना | से| पर|र क| सा|देश|गा | । | अप|्त्|े स|समा|ान |ी क|्त |वार| ।प|ा प| रा|षा |न क|।प्|ष्ट|था |अन्| मा|्षा|्वा|ारो|तन्|वतन|ट्र|्वत|प्त|ाप्|्ट्|राष|ाष्| इस|े अ| उस| सं|राप|कि |त ह|हो |ं औ|ार्|ा ।|किय|े प| दे| भी|करन|री |जाए|ी प| न |र अ|क स|अपन|े व|ाओं|्तर|ओं | नि|सभी|रा | तथ|तथा|िवा|यों|पर | ऐस|रता|ारा|्री|सम्| द्|ीय |िए |व क|सके|द्व|होग| सभ|ं म|माज|रने|िक्|्या|ा व|र प| जि|ो स|र उ|रक्|े म|पूर| लि|ाएग| भा|इस |त क|ाव |स्थ|पने|ा औ|द्ध|श्य|र्व| घो|घोष|रूप|भाव|ाने|कृत|ो प|े ल|लिए|शिक|ूर्| उन|। इ|ं स|य क|्ध |दी |ी र|र्य|णा |एगा|न्य|रीय|ेश |रति|े ब| रू|ूप |परा|्र |तर्| पा| सु|जिस|तिक|सार|जो |ेशो| शि|ानव|ी अ|चित|े औ| पू|ियो|ा उ|म क|ी भ|शों| बु|म्म|स्त|िश्|्रो|्म |ो क| यह|र द|नव |चार|दिय|े य|र्ण|राध|ोगा|ले |नून|ानू|ोषण|षणा|विश| जन|ारी|परि|गी |वाह|साम|ाना|रका| जो|ाज |ी ज|ध क|बन्|ताओ|ंकि|ूंक|ास |कर |चूं|ी व|य ह|ा ग|य स|न स|त र|कोई|ुक्|ोई | ।क|ं न|हित|निय|याद|ादी|्मा|्था|ामा|ाह |ी म|े ज",
    "mar": "्या|या |त्य|याच|चा | व |ण्य|प्र|कार|ाचा| प्|धिक|िका| अध|अधि|च्य|ार |आहे| आह|ा अ|हे | स्|्रत|्ये|ा क|स्व| कर|्वा|ता |ास |ा स|ा व|त्र| त्|वा |ांच|यां|िक |मान| या|्य | का| अस|रत्|ष्ट|र्य|येक|ल्य|र आ|ाहि|क्ष| को|ामा|कोण| सं|ाच्|ात |ा न| रा|ंत्|ून |ेका| सा|राष|ाष्|चे |्ट्|ट्र|तंत| मा|ने |किं| कि|व्य|वात|े स|करण|ंवा|िंव|ये |क्त| सम|ा प|ना | मि|कास|ातं|्र्|र्व|समा|मिळ| जा|े प|व स|यास|ोणत|रण्|काम|ीय |ा आ| दे|े क|ांन|हि |रां| व्|्यक|ा म|िळण|ही | पा|्षण|ार्|ान |े अ| आप| वि|ळण्|ाही|ची |े व|्रा|मा |ली |ंच्|ारा|ा द| आण| नि|णे |द्ध| नय|ला |ा ह|नये| सर|सर्|्री|बंध|ी प|आपल|ले |ील |माज| हो|्त |त क|ाचे|्व |षण |ंना|लेल|ी अ|देश|आणि|णि |ध्य| शि|ी स|े ज|शिक|रीय|ानव|पाह|हिज|िजे|जे |क स|यक्|न क|व त|ा ज|यात|पल्|न्य|वी |स्थ|ज्य| ज्|े आ|रक्|त स|िक्|ंबं|संब| के|क व|केल|असल|य अ|य क|त व|ीत |णत्|त्व|ाने| उप|्वत|भाव|े त|करत|याह|रता|िष्|व म|कां|साम|रति|सार|ंचा|र व|क आ|याय|ासा|साठ|ाठी|्ती|ठी |ेण्|र्थ|ीने|े य|जाह|ोणा|संर|ायद|च्छ|स स|ंरक|तील|ी व|त आ|ी आ|ंधा|ेशा|ित | अश|हीर| हक|हक्|क्क|य व|शा |व आ|तीन|ण म|ूर्|ेल्|द्य|ेले|ांत|ा य|ा ब|ी म|ंचे|याव|देण|कृत|ारण|ेत |िवा|वस्|स्त|ाची|नवी| अर|थवा|अथव|ा त| अथ|अर्|ती |पूर|इतर|र्ण|ी क|यत्| इत| शा|रका|तिष|ण स|तिक|्रक|्ध |रणा| आल|ेल |ाजि| न्|धात|रून|श्र|असे|ष्ठ|ुक्|ेश |तो |जिक|े म",
    "mai": "ाक | आ |प्र|कार|िका|धिक|ार |्रत|ेँ |क अ|्यक|िक |्ति| अध|व्य|अधि|क स| प्|क्त| व्|केँ|यक्|तिक|न्त| स्|हि |क व|मे |बाक|मान| सम|त्य|क्ष| छै|छैक|ेक |स्व|त्र|रत्|्ये|ष्ट| अप|येक|र छ|सँ |वा | एह|ैक।|ित | वि| जा|ति |्त्|ट्र|िके|राष|ाष्| हो|्ट्| रा|्य | सा| अन| कर|अपन|।प्|कोन|अछि|वतन|्वत|तन्|क आ| अछ|ताक|था | पर| वा| को|ार्|एहि|पन |ा आ|नहि|नो |समा| मा|्री|रता| नि| का|देश| नह|्षा|क प| दे| कए|रक | सं|ोनो|ि क|न्य|आ स|छि |्त |ल ज|्वा|ारक|ा स|तथा|ान्| तथ|्या|आ अ|ना |ँ क|ान | जे|जाए|वार|ता |ीय |र आ|क ह|करब|िवा|ामा|र्व| आओ|्रस|परि|त क|स्थ|ा प|ानव|रीय|धार|्तर|अन्|घोष|साम|माज|आओर|ारण| एक|कएल|ँ अ|ओर |एबा|स्त|द्ध|्रा|ँ स|रण | सभ|ोषण|क।प|ाहि|रबा|क ज|ा अ|चित|यक |कर |पूर|रक्|नक | घो|षा |िक्|सम्|एहन| उप|र प| अव|एल |ूर्|षणा| हे|त अ|शिक|तु |ाधि|ेतु|हेत|हन |िमे|र अ|वक |ँ ए|जाह| शि|आ प|भाव|े स|्ध |क क|ि ज|प्त|रूप|निर|िर्| सक|च्छ|होए|रति|अनु|सभ |हो |ेल |त आ|चार|ण स|रा |त ह|जिक|ाजि|र्ण|्रक|एत।|ि आ|र्य|सभक|ैक |क उ| जन|त स|ाप्|न प|श्य|न अ|कृत|हु |रसं|री |राप|ा व|जे |क ब|ि घ| भा|उद्|ाएत|्ण |विव| उद|वाध|िसँ|आ व|ि स|न व|ारा|ोएत| ओ |य आ|कान|िश्|न क| दो|णाक| द्|हिम| अथ|अथव|ामे|द्व|ेश |ओ व|ि अ|क ए|वास| पू|षाक|त्त|य प| बी|यता|धक |ए स|थवा|ि द|पर | भे|जेँ| कि|कि |क ल| रू|विश|न स| ले|सार|ाके|िष्|रिव|क र|ास |ेओ |्थि|केओ|राज",
    "bho": " के|के |ार |े क|कार|धिक|िका|ओर |आओर| आओ| अध|अधि|े स|ा क|े अ| हो| सं|र क|र स|ें | मे|में|िक | कर|ा स|र ह| से|से |रा |मान| सम|न क|क्ष|े ब|नो | चा|वे |ता |चाह|ष्ट| रा|ति |्रा|खे |राष|ाष्|प्र| सा| का|ट्र|े आ| प्| सक| मा|्ट्| स्|होख| बा|करे|ि क|ौनो|त क|था |कौन|पन | जा| कौ|रे |ाति|ला | ओक|ेला|तथा|आपन|्त | आप|कर |हवे|र म| हव| तथ|सबह|र आ|ोखे| ह।|िर |े ओ|केल|सके|हे | और|ही |तिर|त्र|जा |ना |बहि|।सब|े च| खा|े म| पर|खात|ान |र ब|न स|ावे| लो|षा |ाहे|ी क|ओकर|ा आ|माज|ित |े ज|ल ज|मिल|संग|्षा|ं क| सब|ा प|और |रक्|वे।|िं |े ह|ंत्|ाज |स्व|हिं|नइख|कान|ो स| जे|समा|क स|लोग|करा|क्त|्रत|ला।| नइ|े। |ानव|िया|हु |इखे|्र |रता|्वत|ानू|े न|ाम |नून|ाही|वतं|पर |ी स| ओ |े उ|े व|्री|रीय|स्थ|तंत|दी |ीय |े त|र अ|र प|्य |साम|बा।| आद|ून |। स|व्य|ा।स|सभे|भे |या | दे|ा म|े ख| वि| सु|केह|प्त|योग|ु क|ोग |े द|चार|ादी|ाप्| दो| या|राप|ल ह|पूर| मि|तिक|खल |यता|्ति| बि|ए क|आदि|दिम| ही|हि |मी | नि|र न| इ |ेहु|नवा|ा ह|री |ले | पा|ाधि| सह| उप|्या| जर|षण | सभ|िमी|देश|े प|म क|जे |ाव | अप|शिक|ाजि|जाद|जिक|े भ|क आ|्तर|िक्|ि म|ेकर|ुक्|वाध|गठन| व्|निय|ठन |।के|ामा|रो | जी|य क|न म|े ल|न ह|ास |ेश | शा|घोष|ंगठ|िल | घो|्षण| पू|े र|ंरक|संर|उपय|पयो|हो |बा |ी ब|्म |सब |दोस|ा। | आज|साथ| शि|आजा| भी| उच|ने |चित| अं|र व|ज क|न आ| ले|नि |ार्|कि |याह|्थि",
    "nep": "को | र |कार|प्र|ार |ने |िका|क्त|धिक|्यक| गर|व्य|्रत| प्|अधि|्ति| अध| व्|यक्|मा |िक |त्य|ाई |लाई|न्त|मान| सम|त्र|गर्|र्न|क व| वा|्ने|वा | स्|रत्|र स|्ये|तिल|येक|ेक |छ ।|ो स|ा स|हरू| वि|क्ष|्त्|िला| । |स्व|हुन|ति | हु|ले | रा| मा|ष्ट|समा|वतन|तन्| छ |र छ| सं|्ट्|ट्र|ाष्|ो अ|राष|्वत|ुने|नेछ|हरु|ान |ता |े अ|्र | का|िने|ाको|गरि|े छ|ना | अन| नि|रता|नै | सा|ित |तिक|क स|र र|रू |ा अ|था |स्त|कुन|ा र|ुनै| छै|्त |छैन|ा प|ार्|वार|ा व| पर|तथा| तथ|का |्या|एको|रु |्षा|माज|रक्|परि|द्ध|। प| ला|सको|ामा| यस|ाहर|ेछ |धार|्रा|ो प|नि |देश|भाव|िवा|्य |र ह|र व|र म|सबै|न अ|े र|न स|रको|अन्|ताक|ंरक|संर|्वा| त्|सम्|री |ो व|ा भ|रहर| कु|्रि|त र|रिन|श्य|पनि|ै व|यस्|ारा|ानव| शि|ा त|लाग|रा |शिक| सब|ाउन|िक्|्न |ारक|ा न|रिय|्यस|द्व|रति|चार| सह|्षण| सु|ारम|ुक्|ुद्|साम|षा |ैन | अप| भए|बाट|ुन | उप|ान्|ो आ|्तर|िय |कान|ि र|रूक|द्द|र प|ाव |ो ल|तो | पन|ैन।| आव|ा ग|।प्|बै |ूर्|िएक|र त|निज|त्प| भे|जिक|ेछ।|िको|्तो|वाह|त स|ाट | अर|ाजि|्ध | उस|रमा|ात्|र्य|नको|ाय |जको|ित्|ागि| अभ|न ग|गि |ा म| आध|स्थ| पा|ारह|घोष|त्व|यता|ा क|र्द| मत|विध| सक|सार|परा|युक|राध| घो|णको|अपर|े स|ारी|।कु| दि| जन|भेद|रिव|उसक|क र|र अ|ि स|ानु|ो ह|रुद| छ।|ूको|रका|नमा| भन|र्म|हित|पूर|न्य|क अ|ा ब|ो भ|राज|अनु|ोषण|षणा|य र| मन| बि|्धा| दे|निर|ताह|र उ|यस |उने|रण |विक",
    "mag": "के | के|ार | हई|कार|िका|धिक|हई।| और|े अ|और |अधि| अध|ा क|र ह|े स|े क|सब |ें |में| मे| कर|से | सम|था |तथा| हो| से|र स|र क|िक | तथ| सब| सं|क्ष|मान|ब क|ा स|ना | सा|प्र|कर | प्| भी|ति |ई। |रा |भी |्रा| अप| का|त क|या |अपन| को|ट्र|क ह|पन | पर| मा| रा| या|ी क|ता | स्| ओक|ष्ट|ही |ान |्त |करे|्रत|त्र|ाष्|्ट्| सक|न क|राष|ओकर|।सब|रे |ेल |हई |े ब| जा|ई।स|रक्| ले|ंत्|े म| ही|सक |नो |र म| ना|स्व|ाम |होए|र औ|दी |व्य|क्त|ा प|वतं|ानव|ित | शा|ादी|षा |माज| इ |तंत|पर |ी स|्वत|्य |े उ|्र |ोग |वे |्षा|े भ|े ल|न स|करा|कान| एक|ल ज|म क|लेल|्ति|ावे| दे|रता|क स|साथ|ानू|नून|ेकर|र अ|य क|ाथ |प्त|ा म|ला |ई।क| वि|समा|ून |े प|साम|। स|ा ह| जे|े ह| चा|ोई |जा |मिल| व्|ि क|बे |ाप्|राप|ोए |रो |वार|कोई|चाह| दो|व क| नि|चार|र व|ाधि| पा|र प|स्त|एल |कोन|े व|ोनो|काम|ो स|्म |े ओ|योग| सु|ए क|नवा|न ह|षण |ीय |एक |परि| उप|े आ|्तर| सह|ाजि|ल ह|संर|ई क|ास |पूर|ं स|ंरक|ो क|जिक|देश|ुक्|ामा|होब|सम्|।के|्यक|े च|केक|्वा|पयो|उपय|री |ी ह|ाही|दोस|र आ| उच|ाति|म्म|्मा|े ख| लो|तिक|रति|ेश |न औ|स्थ|वा |मी |े त| आद|निय|न प|वाध| घो|घोष|ब अ|रिव|ा ब|कि |म स|रीय|्री|य स|यक्|ि म|ा द|ा त|ब ह|जाद|उचि|युक|ंयु|संय| उ |इ स|े इ|्षण|। त|चित|ा औ|व ह|हे |त स| पू|क औ|ग क|े न|न द|करो|लोग|ोषण|ारा|र न|िल |समय|कौन|ं क|मय |ौनो|ुरक|ो भ| भा|ाज | कए|कएल|सुर|र्म|ाव |िवा"
  },
  "Ethiopic": {
    "amh": "፡መብ|ሰው፡|ት፡አ|ብት፡|መብት|፡ሰው|፡አለ|፡ወይ|ወይም|ይም፡|ነት፡|ንዱ፡|አለው|ለው።|ዳንዱ|ያንዳ|ንዳን|እያን|ዱ፡ሰ|ት፡መ|፡እን|፡የመ|።እያ|እንዲ|፡ነጻ|፡የተ|ም፡በ|ው፡የ|ም፡የ|፡የሚ|ና፡በ|ን፡የ|፡የማ|፡አይ|ነጻነ|ና፡የ|ው፡በ|ቶች፡|ው።፡|ሆነ፡|ት፡የ|፡በሚ|፡መን|ው።እ|ትና፡|ኀብረ|ትን፡|ውም፡|ንኛው|እኩል|ብቻ፡|ኛውም|ንም፡|፡ለመ|፡ያለ|ም፡ሰ|ማንኛ|መብቶ|፡አገ|ት፡በ|ራዊ፡|፡እኩ|፡ለማ|ለት፡|በት፡|ሆን፡|መንግ|፡በተ|ረት፡|ብቶች|ጋብቻ|ዎች፡|ህንነ|ጻነት|ም፡እ|ወንጀ|፡ልዩ|ሰብ፡|ማንም|ጠበቅ|ኩል፡|ደህን|።ማን|ነጻ፡|ግኘት|ማግኘ|።፡እ|፡የሆ|፡ሁሉ|ች፡በ|፡በመ|ሥራ፡|፡ደህ|ፈጸም|ል፡መ|ተግባ|፡ድር|ት፡ወ|ው።ማ|ፍርድ|ርድ፡|፡በሆ|ር፡ወ|በትም|ትም፡|ይነት|ቸው፡|ብ፡የ|ነትና|ቱን፡|ሕግ፡|ንና፡|፡ሥራ|የማግ|፡መሠ|ኘት፡|፡ጊዜ|ጻነቶ|ነቶች|በር፡|በኀብ|ዩነት|ልዩነ|፡በኀ|፡ዓይ|ዓይነ|ችና፡|ግባር|ባር፡|፡ደረ|ነው።|፡ነው|ደረጃ|ም።እ|ም፡መ|፡ወን|ይማኖ|ማኀበ|ሃይማ|፡ኑሮ|መሠረ|ሁሉ፡|ነቱ፡|ሌሎች|ንግሥ|በቅ፡|የሆነ|፡ይህ|ንዲጠ|ገር፡|ተባበ|ትክክ|ጸም፡|ር፡የ|ዲጠበ|ትም።|ው፡ከ|፡እያ|ሩት፡|ድርጅ|፡ብቻ|ና፡ለ|ይገባ|የመኖ|፡ማን|ንነት|ቤተሰ|ርጅት|ት፡ድ|፡መሰ|እንደ|፡አላ|ብሔራ|ት፡ለ|ሔራዊ|ርት፡|ህርት|ውን፡|የሚያ|ል።እ|ሆኑ፡|ምህር|ትምህ|በት።|ለበት|አለበ|፡አስ|ሎች፡|ች፡የ|፡በሕ|ብረ፡|፡ከሚ|ን፡አ|ት፡እ|ን፡ወ|ረግ፡|በሆነ|የኀብ|፡የኀ|መሆን|፡መሆ|ን፡መ|፡ውሳ|ንጀል|ፈላጊ|ህም፡|ረታዊ|ክለኛ|ክክለ|ታዊ፡|ጀል፡|ኑሮ፡|።፡ይ|ዓዊ፡|ዜግነ|ንዲሁ|ዲሁም|፡ማኀ|ገሩ፡|ር፡በ|ብዓዊ|አገሩ|ሁም፡|ና፡ነ|ሰብዓ|የተባ|ጅት፡|ማኖት|ር፡አ|ንግስ|ኖት፡|በሕግ|መኖር|ው፡ያ|መጠበ|ረጃ፡|፡በማ|ነትን|ብነት|ገብነ|፡ገብ|መፈጸ|፡ሁኔ|ሁኔታ|ን፡ለ|ው፡ለ|፡ተግ|፡የአ|፡ይገ|፡በአ|ችን፡|፡ትም|ነቱን|፡ቢሆ|ቢሆን|ጊዜ፡|ረ፡ሰ|ት፡ጊ|ሰቡ፡|ምበት|ላቸው|አላቸ|በነጻ|፡በነ|አንድ|ቅ፡መ|፡መጠ|ት፡ይ|መሰረ|ጥ፡የ|ስጥ፡|ፈጸመ|ውስጥ|ንድ፡|፡ውስ|፡በግ|፡ሆኖ|ሉ፡በ|፡ጋብ|ንስ፡|ንነቱ|መው፡|የሚፈ|አይፈ|ብረሰ|ነ፡መ|፡የሃ|ም፡ከ|ች፡እ|ስት፡|ሙሉ፡|አገር|ሆኖ፡|ደረግ|ኢንተ|ንተር|ተርና|ርናሽ|ናሽና|ሽናል",
    "tir": " መሰ| ሰብ|ሰብ | ኦለ|ትን |ኦለዎ|ናይ | ናይ| ኦብ|ዎ፡፡|ለዎ፡|ሕድሕ|ኦብ |ድሕድ|ሕድ |መሰል|ውን |ሰል |ድ ሰ|ይ ም|ል ኦ|ካብ |፡ሕድ|፡፡ሕ| ወይ|ወይ | መን| ነፃ|ን መ|ዝኾነ|፡፡ |ታት |ብ ዝ|ነት |ን ነ| ካብ|መሰላ|ነፃነ| እዚ|ብ መ|ኦዊ |ታትን|መንግ|ዊ መ| እን|ብ ብ|ንግስ|ት ኦ|ሰላት|ን ም|ኾነ |እዚ |ብኦዊ|ሰብኦ|ን ኦ|ን፡፡| ንክ| ዝኾ|ን ን| ምር|ኹን |ይኹን| ይኹ|ምርካ|ርካብ| ኦይ| ሃገ|ሕጊ |ራት |ሎም | ብሕ|ነ ይ| ከም|ማዕሪ|ይ ብ| ንም| ዝተ|ርን |ን ብ|ራዊ | ፣ |ብ ሕ|ላትን|ብ ኦ|ማሕበ|ነታት| ኦድ|ዕሪ | ማዕ|ስታት|ግስታ|’ውን|ት መ|ን ዝ|ታዊ |፣ ብ| ማሕ|ነትን|ንጋገ|ድንጋ| ስለ| ድን|ስራሕ|ኩሎም|ሕበራ|ኦት |ን ሰ|ዓለም|ፃነታ| ብም|ት ወ|መሰሪ| ስራ|ፃነት|ተሰብ|ካልኦ|ልኦት|ን ሓ|ዓት |ዋን |ቡራት|ሕቡራ| ሕቡ|ብሕጊ|ድብ |ውድብ| ውድ|ብን |ትምህ|ነቱ |ዚ ድ|፣ ኦ|ሃገራ| ኩሎ|ለዎም|ምህር|ም፡፡|ም መ| ብዝ|ምኡ’|ኡ’ው|እንት| ዓለ| ብዘ|በራዊ| ሓለ|ሓለዋ|ዎም፡|ቱ ን|ት ብ|ጋገ |ነፃ | ምዃ|ን ዘ| ገበ|ት፣ | ትም|ኸውን|ራሕ | ዘይ|ህርቲ|ርቲ |ከምኡ|ሃይማ| ምስ|ነ፣ |እንተ| ስር|ስርዓ|ርዓት|ባት |ይማኖ|ሰሪታ|ን ና| ክብ|ልን | ብማ|ገሩ | ህዝ|ላት |ት ና|ይ ኦ|ዕሊ |ለዝኾ|ስለዝ|ሪተሰ|ብሪተ|ሕብሪ| ሕብ|ን ተ|ኾነ፣|በን |ሃገሩ|ገ እ|ኻዊ | ሃይ|እን |ሪጋገ| ምሕ|ን እ|ለኻዊ|ር፣ | ብሓ| ብሃ| ክኸ|ክኸው|ብ ዘ|ዃኑ |ዊ ክ|ምን |ሓደ |ምዃኑ|ም ን|ት እ|ዊ ወ|ታውን| ሕድ|ብዘይ| ሕጊ|ት ን| ልዕ| ካል|ን ካ|ሰባት|ን ስ|ናን |ቤተሰ|ሕን |ለምለ|ት ስ|ምለኻ|፣ ከ|ተደን|ባል |ኦድላ|እዋን| እዋ|ደቂ | ደቂ| ሰባ|ፃን |ነፃን|ግስቲ|፣ ን|ዚ ብ|ስቲ | ቤተ|ምጥሓ| ክሳ| ነዚ|ን ክ|ነቲ | ነቲ|ነዚ | ምእ|ብነፃ| ምዕ|ምዕባ|ዕባለ|ክሳብ| ብነ|ል እ|ዚ መ|ልዕሊ|ክብሩ|ብማዕ|ሳብ |ህይወ|ኦቶም|ምስ |ንገገ|እምነ| እም|ድ ኦ|ቶም |ቲ ክ|ፍትሓ|ለም | ፍት|ብ ን|ን ዓ|ራውን|ሓፈሻ|ደንገ|ም ብ|ትዮን| ዝሰ|ዝተደ|ሉ መ|ብ ና|ጊ ካ|ልዎ |ኦባል| ኦባ|ድልዎ|ን ድ|ኦድል|ዜግነ|ላውን| ድሕ"
  },
  "Hebrew": {
    "heb": "ות |ים |כל |ת ה| כל|דם |אדם|יות| של| זכ|ל א| אד|של |ל ה|אי |ויו|כאי|ת ו|י ל|זכא| ול|לא | וה|רות|זכו|ית |ירו|ין | או|ם ז| לא| הח|או | הא| וב| המ|חיר|ת ל|יים|ם ל|את |ת ב|ת ש|רה |ון | לה|נה |כוי|ותי|ה ש|ו ל|ו ב| הו|ת א|ם ב|ם ו|תו | את|לה |ני |אומ| במ|דה |א י|ה ה|ה ב|על |ם ה| על|הוא|וך |ה א|בוד|וד |ואי|נות|ה ו|ת כ|י ה|יה |ם ש|ו ו| שה|ם א|ו כ|ינו|ן ה| שו|שוו|החי|כות|לאו|בות|דות|ה ל|לית|ה מ| בי|וה |וא | הי| לפ|ור | לב|ל ב|בחי|הכר|לו |ת מ|ן ש|החו|ה כ| בכ|ומי|בין|ן ו|ן ל|רוי|פלי|ולה|ליה| הז|חינ| לע| בנ|יבו|חוק| אח|חבר| יה| חי|מי |ירה| חו|האד|ווה|חופ|ופש|וק |נו |יו |ל מ|מדי|כבו| הע|נוך| הד|י א|י ו| הכ|בני|עה |ו א|רצו|דינ|בזכ|מות|יפו| אל|סוד|לם |איש|רך | אי|הגנ|הם |פי |ם כ|חות|ל ו|איל|ילי|תיה|כלל|אלי|יסו|האו|זש | בא|ר א|ו ה|זו |אחר| הפ| בע| בז|משפ| בה| לח|דרך|ומו| בח| דר| מע|ל י|תוך|מנו| בש|לל |רבו| למ|פני| לק|תם |שה |שית|ללא|לפי|היה|מעש|דו |שות|להג|וצי|שוא|אין|וי |תי |ונו|ליל| לו|חיי|ל ז| זו|היא|יא |נתו|ה פ|לת |ובי| לכ|ך ה|יל |י ש|שיו|ן ב|עול|המד|ודה|ולם| ומ|א ה|ולא| בת|הכל| סו| מש| עב|סוצ|ארצ| אר|ציא|ד א|לחי|הן |יחס| יח|יאל|הזכ|ם נ| שר|בו |עבו|היס| לי|ת ז|פול|יהי|גבל|תיו|המא|שהי|א ל|מאו| יו|ותו|ישי|גנה|פשי|וחד|יהם|חרו|לכל|ידה|עות|ונה|ום |חה |עם |שרי|ם י|שר |והח| אש| הג|ק ב|הפל|נשו|הגב|ד ו",
    "ydd": " פֿ|ון |ער |ן א| אַ|דער|ט א| או|און|אַר|ען |פֿו| אױ| אי|ן פ|ֿון|רעכ| דע| רע|עכט|פֿא|ן ד|כט | די|די |אַ |אױף|ױף |ֿאַ| זײ| גע|אַל|אָס| אָ|ונג| הא|האָ|זײַ| מע|אָל|נג |װאָ|ַן |אַנ|רײַ| װא|ָס |באַ| יע|יעד|ניט|ן ז|ר א|יט |אָט|אָר|עדע|מען|זאָ|ָט |פֿר|ײַן| בא|טן |אין|ן ג|ין |ן װ|נאַ|ֿרײ|ר ה| זא|לעכ|ע א|אָד|ַ ר|ענט|אַצ|ַצי|אָנ| צו| װע|יז |מענ|ָדע|איז|ן מ|ַלע|בן |ר מ|טער| מי| פּ|מיט|טלע|ָל |עכע|ײט |ַנד|ע פ|לע |געז|לאַ|אַפ|עזע|ראַ| ני|ַפֿ|רן |ײַנ|נען|טיק|כע |פֿע|יע |הײט|ַהײ|נטש|ײַה|ט ד|ן ב|לן |ן נ|פֿט|שאַ|רונ| זי| װי|ט פ| דא|טאָ|דיק|קן |ר פ|ר ג|יקן|אָב|ף א|אַק|קער|ערע|כער|י פ|ות |ַרב|פּר|קט |עם |יאָ|ציע|ציא|יט־|צו |ישע| קײ|ן ק|סער| גל|דאָ|ונט|גן |ַרא|יקע| טא|ענע|לײַ|שן |ַנע|יק |טאַ|ס א|עט |נגע|ט־א|ָנא|־אי|יקט|נטע|ײנע|־ני|ָר |װער|י א|ן י|יך |זיך|ער־|ערן|אױס|ָבן|נדע|ָסע|װי |ֿעל|ר־נ|ן ה| גר|גלײ| צי|ראָ|זעל|עלק|נד |לקע|אָפ| כּ|ט װ|ג א| נא|ט צ|ר ד|עס |דור|גען|קע |ג פ|ֿט |ן ל|שע |ר ז|רע |ײטן|פּע|קלא|קײט|יטע|ים |ס ז|ײַ | דו|אַט| לא|ר װ|קײנ|עלש|י ד|לשא|יות|נט |ַרז|ע ר|ל ז|אַמ|ן ש| שו|אינ|נטל| הי|בעט|ָפּ|ף פ|ײַכ|בער|ן צ|מאָ| שט| לע|גער|ורך|רך |נעם|גרו|פֿן|לער|װעל|ע מ|ום |שפּ|ך א|יונ|רבע|עפֿ|טעט|ן כ|רעס|ערצ|ז א|עמע|ם א|שטע|כן |רט |י ג|סן |נער|ליט|ט ז|נעמ|ּרא|היו|אַש|ת װ|אומ|ק א|יבע|ֿן |ץ א|פֿי|ײן |ם ט"
  }
}
},{}],22:[function(require,module,exports){
/* eslint-env commonjs */

module.exports = {
    'cmn': /[\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u3005\u3007\u3021-\u3029\u3038-\u303B\u3400-\u4DB5\u4E00-\u9FCC\uF900-\uFA6D\uFA70-\uFAD9]|[\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]/g,
    'Latin': /[A-Za-z\xAA\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02B8\u02E0-\u02E4\u1D00-\u1D25\u1D2C-\u1D5C\u1D62-\u1D65\u1D6B-\u1D77\u1D79-\u1DBE\u1E00-\u1EFF\u2071\u207F\u2090-\u209C\u212A\u212B\u2132\u214E\u2160-\u2188\u2C60-\u2C7F\uA722-\uA787\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA7FF\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uFB00-\uFB06\uFF21-\uFF3A\uFF41-\uFF5A]/g,
    'Cyrillic': /[\u0400-\u0484\u0487-\u052F\u1D2B\u1D78\u2DE0-\u2DFF\uA640-\uA69D\uA69F]/g,
    'Arabic': /[\u0600-\u0604\u0606-\u060B\u060D-\u061A\u061E\u0620-\u063F\u0641-\u064A\u0656-\u065F\u066A-\u066F\u0671-\u06DC\u06DE-\u06FF\u0750-\u077F\u08A0-\u08B2\u08E4-\u08FF\uFB50-\uFBC1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFD\uFE70-\uFE74\uFE76-\uFEFC]|\uD803[\uDE60-\uDE7E]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB\uDEF0\uDEF1]/g,
    'ben': /[\u0980-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09FB]/g,
    'Devanagari': /[\u0900-\u0950\u0953-\u0963\u0966-\u097F\uA8E0-\uA8FB]/g,
    'jpn': /[\u3041-\u3096\u309D-\u309F]|\uD82C\uDC01|\uD83C\uDE00|[\u30A1-\u30FA\u30FD-\u30FF\u31F0-\u31FF\u32D0-\u32FE\u3300-\u3357\uFF66-\uFF6F\uFF71-\uFF9D]|\uD82C\uDC00/g,
    'kor': /[\u1100-\u11FF\u302E\u302F\u3131-\u318E\u3200-\u321E\u3260-\u327E\uA960-\uA97C\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/g,
    'tel': /[\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C78-\u0C7F]/g,
    'tam': /[\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BFA]/g,
    'guj': /[\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AF1]/g,
    'mal': /[\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D75\u0D79-\u0D7F]/g,
    'kan': /[\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2]/g,
    'mya': /[\u1000-\u109F\uA9E0-\uA9FE\uAA60-\uAA7F]/g,
    'ori': /[\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B77]/g,
    'pan': /[\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75]/g,
    'Ethiopic': /[\u1200-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u137C\u1380-\u1399\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E]/g,
    'tha': /[\u0E01-\u0E3A\u0E40-\u0E5B]/g,
    'sin': /[\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2-\u0DF4]|\uD804[\uDDE1-\uDDF4]/g,
    'ell': /[\u0370-\u0373\u0375-\u0377\u037A-\u037D\u037F\u0384\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03E1\u03F0-\u03FF\u1D26-\u1D2A\u1D5D-\u1D61\u1D66-\u1D6A\u1DBF\u1F00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FC4\u1FC6-\u1FD3\u1FD6-\u1FDB\u1FDD-\u1FEF\u1FF2-\u1FF4\u1FF6-\u1FFE\u2126\uAB65]|\uD800[\uDD40-\uDD8C\uDDA0]|\uD834[\uDE00-\uDE45]/g,
    'khm': /[\u1780-\u17DD\u17E0-\u17E9\u17F0-\u17F9\u19E0-\u19FF]/g,
    'hye': /[\u0531-\u0556\u0559-\u055F\u0561-\u0587\u058A\u058D-\u058F\uFB13-\uFB17]/g,
    'sat': /[\u1C50-\u1C7F]/g,
    'bod': /[\u0F00-\u0F47\u0F49-\u0F6C\u0F71-\u0F97\u0F99-\u0FBC\u0FBE-\u0FCC\u0FCE-\u0FD4\u0FD9\u0FDA]/g,
    'Hebrew': /[\u0591-\u05C7\u05D0-\u05EA\u05F0-\u05F4\uFB1D-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFB4F]/g,
    'kat': /[\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u10FF\u2D00-\u2D25\u2D27\u2D2D]/g,
    'lao': /[\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF]/g,
    'iii': /[\uA000-\uA48C\uA490-\uA4C6]/g,
    'aii': /[\u0700-\u070D\u070F-\u074A\u074D-\u074F]/g
};

},{}],23:[function(require,module,exports){
'use strict';

/* eslint-env commonjs */

/*
 * Load `trigram-utils`.
 */

var utilities = require('trigram-utils');

/*
 * Load `expressions` (regular expressions matching
 * scripts).
 */

var expressions = require('./expressions.js');

/*
 * Load `data` (trigram information per language,
 * per script).
 */

var data = require('./data.json');

/*
 * Construct trigram dictionaries.
 */

(function () {
    var languages;
    var name;
    var trigrams;
    var model;
    var script;
    var weight;

    for (script in data) {
        languages = data[script];

        for (name in languages) {
            model = languages[name].split('|');

            weight = model.length;

            trigrams = {};

            while (weight--) {
                trigrams[model[weight]] = weight;
            }

            languages[name] = trigrams;
        }
    }
})();

/*
 * Maximum sample length.
 */

var MAX_LENGTH = 2048;

/*
 * Minimum sample length.
 */

var MIN_LENGTH = 10;

/*
 * The maximum distance to add when a given trigram does
 * not exist in a trigram dictionary.
 */

var MAX_DIFFERENCE = 300;

/**
 * Deep regular sort on the number at `1` in both objects.
 *
 * @example
 *   > [[0, 20], [0, 1], [0, 5]].sort(sort);
 *   // [[0, 1], [0, 5], [0, 20]]
 *
 * @param {Object} a - Left-hand.
 * @param {Object} b - Right-hand.
 */
function sort(a, b) {
    return a[1] - b[1];
}

/**
 * Filter `languages` by removing languages in
 * `blacklist`, or including languages in `whitelist`.
 *
 * @param {Object.<Object>} languages - Languages
 *   to filter
 * @param {Array.<string>} whitelist - Whitelisted
 *   languages; if non-empty, only included languages
 *   are kept.
 * @param {Array.<string>} blacklist - Blacklisted
 *   languages; included languages are ignored.
 * @return {Object.<Object>} - Filtered array of
 *   languages.
 */
function filterLanguages(languages, whitelist, blacklist) {
    var filteredLanguages;
    var language;

    if (whitelist.length === 0 && blacklist.length === 0) {
        return languages;
    }

    filteredLanguages = {};

    for (language in languages) {
        if (
            (
                whitelist.length === 0 ||
                whitelist.indexOf(language) !== -1
            ) &&
            blacklist.indexOf(language) === -1
        ) {
            filteredLanguages[language] = languages[language];
        }
    }

    return filteredLanguages;
}

/**
 * Get the distance between an array of trigram--count
 * tuples, and a language dictionary.
 *
 * @param {Array.<Array.<string, number>>} trigrams - An
 *   array containing trigram--count tuples.
 * @param {Object.<number>} model - Object
 *   containing weighted trigrams.
 * @return {number} - The distance between the two.
 */
function getDistance(trigrams, model) {
    var distance = 0;
    var index = -1;
    var length = trigrams.length;
    var trigram;
    var difference;

    while (++index < length) {
        trigram = trigrams[index];

        if (trigram[0] in model) {
            difference = trigram[1] - model[trigram[0]] - 1;

            if (difference < 0) {
                difference = -difference;
            }
        } else {
            difference = MAX_DIFFERENCE;
        }

        distance += difference;
    }

    return distance;
}

/**
 * Create a single tuple as a list of tuples from a given
 * language code.
 *
 * @param {string} language - A single language.
 * @return {Array.<Array.<string, number>>} An array
 *   containing a single language--distance.
 */
function singleLanguageTuples(language) {
    return [[language, 1]];
}

/**
 * Create a single `und` tuple.
 *
 * @return {Array.<Array.<string, number>>} An array
 *   containing a single language--distance.
 */
function und() {
    return singleLanguageTuples('und');
}

/**
 * Get the distance between an array of trigram--count
 * tuples, and multiple trigram dictionaries.
 *
 * @param {Array.<Array.<string, number>>} trigrams - An
 *   array containing trigram--count tuples.
 * @param {Object.<Object>} languages - multiple
 *   trigrams to test against.
 * @param {Object} options - Configuration.
 * @return {Array.<Array.<string, number>>} An array
 *   containing language--distance tuples.
 */
function getDistances(trigrams, languages, options) {
    var distances = [];
    var whitelist = options.whitelist || [];
    var blacklist = options.blacklist || [];
    var language;

    languages = filterLanguages(languages, whitelist, blacklist);

    for (language in languages) {
        distances.push([
            language,
            getDistance(trigrams, languages[language])
        ]);
    }

    return distances.length ? distances.sort(sort) : und();
}

/**
 * Get the occurrence ratio of `expression` for `value`.
 *
 * @param {string} value - Value to check.
 * @param {RegExp} expression - Code-point expression.
 * @return {number} Float between 0 and 1.
 */
function getOccurrence(value, expression) {
    var count = value.match(expression);

    return (count ? count.length : 0) / value.length || 0;
}

/**
 * From `scripts`, get the most occurring expression for
 * `value`.
 *
 * @param {string} value - Value to check.
 * @param {Object.<RegExp>} scripts - Top-Scripts.
 * @return {Array} Top script and its
 *   occurrence percentage.
 */
function getTopScript(value, scripts) {
    var topCount = -1;
    var topScript;
    var script;
    var count;

    for (script in scripts) {
        count = getOccurrence(value, scripts[script]);

        if (count > topCount) {
            topCount = count;
            topScript = script;
        }
    }

    return [topScript, topCount];
}

/**
 * Normalize the difference for each tuple in
 * `distances`.
 *
 * @param {string} value - Value to normalize.
 * @param {Array.<Array.<string, number>>} distances
 *   - List of distances.
 * @return {Array.<Array.<string, number>>} - Normalized
 *   distances.
 */
function normalize(value, distances) {
    var min = distances[0][1];
    var max = (value.length * MAX_DIFFERENCE) - min;
    var index = -1;
    var length = distances.length;

    while (++index < length) {
        distances[index][1] = 1 - ((distances[index][1] - min) / max) || 0;
    }

    return distances;
}

/**
 * Get a list of probable languages the given value is
 * written in.
 *
 * @param {string} value - The value to test.
 * @param {Object} options - Configuration.
 * @return {Array.<Array.<string, number>>} An array
 *   containing language--distance tuples.
 */
function detectAll(value, options) {
    var settings = options || {};
    var minLength = MIN_LENGTH;
    var script;

    if (settings.minLength !== null && settings.minLength !== undefined) {
        minLength = settings.minLength;
    }

    if (!value || value.length < minLength) {
        return und();
    }

    value = value.substr(0, MAX_LENGTH);

    /*
     * Get the script which characters occur the most
     * in `value`.
     */

    script = getTopScript(value, expressions);

    /*
     * One languages exists for the most-used script.
     *
     * If no matches occured, such as a digit only string,
     * exit with `und`.
     */

    if (!(script[0] in data)) {
        return script[1] === 0 ? und() : singleLanguageTuples(script[0]);
    }

    /*
     * Get all distances for a given script, and
     * normalize the distance values.
     */

    return normalize(value, getDistances(
        utilities.asTuples(value), data[script[0]], settings
    ));
}

/**
 * Get the most probable language for the given value.
 *
 * @param {string} value - The value to test.
 * @param {Object} options - Configuration.
 * @return {string} The most probable language.
 */
function detect(value, options) {
    return detectAll(value, options)[0][0];
}

/*
 * Expose `detectAll` on `detect`.
 */

detect.all = detectAll;

/*
 * Expose `detect`.
 */

module.exports = detect;

},{"./data.json":21,"./expressions.js":22,"trigram-utils":26}],24:[function(require,module,exports){
/*!
 * jQuery JavaScript Library v3.1.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2016-09-22T22:30Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};



	function DOMEval( code, doc ) {
		doc = doc || document;

		var script = doc.createElement( "script" );

		script.text = code;
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.1.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = jQuery.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type( obj ) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {

		// As of jQuery 3.0, isNumeric is limited to
		// strings and numbers (primitives or objects)
		// that can be coerced to finite numbers (gh-2662)
		var type = jQuery.type( obj );
		return ( type === "number" || type === "string" ) &&

			// parseFloat NaNs numeric-cast false positives ("")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			!isNaN( obj - parseFloat( obj ) );
	},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}

		// Support: Android <=2.3 only (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE <=9 - 11, Edge 12 - 13
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						disabledAncestor( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Simple selector that can be filtered directly, removing non-Elements
	if ( risSimple.test( qualifier ) ) {
		return jQuery.filter( qualifier, elements, not );
	}

	// Complex selector, compare the two sets, removing non-Elements
	qualifier = jQuery.filter( qualifier, elements );
	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;
	} );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && jQuery.isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			resolve.call( undefined, value );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.call( undefined, value );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( jQuery.isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				jQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ jQuery.camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ jQuery.camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( jQuery.camelCase );
			} else {
				key = jQuery.camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted,
		scale = 1,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		do {

			// If previous iteration zeroed out, double until we get *something*.
			// Use string for doubling so we don't accidentally see scale as unchanged below
			scale = scale || ".5";

			// Adjust and apply
			initialInUnit = initialInUnit / scale;
			jQuery.style( elem, prop, initialInUnit + unit );

		// Update scale, tolerating zero or NaN from tween.cur()
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.
		} while (
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
		);
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && jQuery.nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( jQuery.type( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: jQuery.isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

function manipulationTarget( elem, content ) {
	if ( jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return elem.getElementsByTagName( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		isFunction = jQuery.isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( isFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		div.style.cssText =
			"box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";
		div.innerHTML = "";
		documentElement.appendChild( container );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = divStyle.marginLeft === "2px";
		boxSizingReliableVal = divStyle.width === "4px";

		// Support: Android 4.0 - 4.3 only
		// Some styles come back with percentage values, even though they shouldn't
		div.style.marginRight = "50%";
		pixelMarginRightVal = divStyle.marginRight === "4px";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
	container.appendChild( div );

	jQuery.extend( support, {
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelMarginRight: function() {
			computeStyleTests();
			return pixelMarginRightVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );

	// Support: IE <=9 only
	// getPropertyValue is only needed for .css('filter') (#12537)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i,
		val = 0;

	// If we already have the right measurement, avoid augmentation
	if ( extra === ( isBorderBox ? "border" : "content" ) ) {
		i = 4;

	// Otherwise initialize for horizontal or vertical properties
	} else {
		i = name === "width" ? 1 : 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {

			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {

			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var val,
		valueIsBorderBox = true,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Support: IE <=11 only
	// Running getBoundingClientRect on a disconnected node
	// in IE throws an error.
	if ( elem.getClientRects().length ) {
		val = elem.getBoundingClientRect()[ name ];
	}

	// Some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {

		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test( val ) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				style[ name ] = value;
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}
		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						} ) :
						getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = extra && getStyles( elem ),
				subtract = extra && augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				);

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ name ] = value;
				value = jQuery.css( elem, name );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function raf() {
	if ( timerId ) {
		window.requestAnimationFrame( raf );
		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 13
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( jQuery.isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					jQuery.proxy( result.stop, result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	// Go to the end state if fx are off or if document is hidden
	if ( jQuery.fx.off || document.hidden ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = window.requestAnimationFrame ?
			window.requestAnimationFrame( raf ) :
			window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	if ( window.cancelAnimationFrame ) {
		window.cancelAnimationFrame( timerId );
	} else {
		window.clearInterval( timerId );
	}

	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnothtmlwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnothtmlwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( type === "string" ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = value.match( rnothtmlwhite ) || [];

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




support.focusin = "onfocusin" in window;


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = jQuery.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = jQuery.isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( jQuery.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( jQuery.isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 13
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( jQuery.isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var docElem, win, rect, doc,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		rect = elem.getBoundingClientRect();

		// Make sure element is not hidden (display: none)
		if ( rect.width || rect.height ) {
			doc = elem.ownerDocument;
			win = getWindow( doc );
			docElem = doc.documentElement;

			return {
				top: rect.top + win.pageYOffset - docElem.clientTop,
				left: rect.left + win.pageXOffset - docElem.clientLeft
			};
		}

		// Return zeros for disconnected and hidden elements (gh-2310)
		return rect;
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		// because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {

			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset = {
				top: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),
				left: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )
			};
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

jQuery.parseJSON = JSON.parse;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}





return jQuery;
} );

},{}],25:[function(require,module,exports){
'use strict';

/**
 * A factory returning a function that converts a given string to n-grams.
 *
 * @example
 *   nGram(2) // [Function]
 *
 * @example
 *   nGram(4) // [Function]
 *
 *
 * @param {number} n - The `n` in n-gram.
 * @throws {Error} When `n` is not a number (incl. NaN), Infinity, or lt 1.
 * @return {Function} A function creating n-grams from a given value.
 */
function nGram(n) {
    if (
        typeof n !== 'number' ||
        n < 1 ||
        n !== n ||
        n === Infinity
    ) {
        throw new Error(
            'Type error: `' + n + '` is not a valid argument for n-gram'
        );
    }

    /*
     * Create n-grams from a given value.
     *
     * @example
     *   nGram(4)('n-gram')
     *   // ['n-gr', '-gra', 'gram']
     *
     * @param {*} value - The value to stringify and convert into n-grams.
     * @return {Array.<string>} n-grams
     */

    return function (value) {
        var nGrams,
            index;

        nGrams = [];

        if (value === null || value === undefined) {
            return nGrams;
        }

        value = String(value);

        index = value.length - n + 1;

        if (index < 1) {
            return nGrams;
        }

        while (index--) {
            nGrams[index] = value.substr(index, n);
        }

        return nGrams;
    };
}

/*
 * Export `n-gram`.
 */

module.exports = nGram;

/*
 * Create bigrams from a given value.
 *
 * @example
 *   bigram('n-gram')
 *   // ["n-", "-g", "gr", "ra", "am"]
 *
 * @param {*} value - The value to stringify and convert into bigrams.
 * @return {Array.<string>} bigrams
 */

nGram.bigram = nGram(2);

/*
 * Create trigrams from a given value.
 *
 * @example
 *   trigram('n-gram')
 *   // ["n-g", "-gr", "gra", "ram"]
 *
 * @param {*} value - The value to stringify and convert into trigrams.
 * @return {Array.<string>} trigrams
 */

nGram.trigram = nGram(3);

},{}],26:[function(require,module,exports){
'use strict';

var getTrigrams,
    EXPRESSION_SYMBOLS,
    has;

/**
 * Dependencies.
 */

getTrigrams = require('n-gram').trigram;

/**
 * Cache.
 */

has = Object.prototype.hasOwnProperty;

/**
 * An expression matching general non-important (as in, for
 * language detection) punctuation marks, symbols, and numbers.
 *
 * | Unicode | Character | Name               |
 * | ------: | :-------: | :----------------- |
 * |  \u0021 |     !     | EXCLAMATION MARK   |
 * |  \u0022 |     "     | QUOTATION MARK     |
 * |  \u0023 |     #     | NUMBER SIGN        |
 * |  \u0024 |     $     | DOLLAR SIGN        |
 * |  \u0025 |     %     | PERCENT SIGN       |
 * |  \u0026 |     &     | AMPERSAND          |
 * |  \u0027 |     '     | APOSTROPHE         |
 * |  \u0028 |     (     | LEFT PARENTHESIS   |
 * |  \u0029 |     )     | RIGHT PARENTHESIS  |
 * |  \u002A |     *     | ASTERISK           |
 * |  \u002B |     +     | PLUS SIGN          |
 * |  \u002C |     ,     | COMMA              |
 * |  \u002D |     -     | HYPHEN-MINUS       |
 * |  \u002E |     .     | FULL STOP          |
 * |  \u002F |     /     | SOLIDUS            |
 * |  \u0030 |     0     | DIGIT ZERO         |
 * |  \u0031 |     1     | DIGIT ONE          |
 * |  \u0032 |     2     | DIGIT TWO          |
 * |  \u0033 |     3     | DIGIT THREE        |
 * |  \u0034 |     4     | DIGIT FOUR         |
 * |  \u0035 |     5     | DIGIT FIVE         |
 * |  \u0036 |     6     | DIGIT SIX          |
 * |  \u0037 |     7     | DIGIT SEVEN        |
 * |  \u0038 |     8     | DIGIT EIGHT        |
 * |  \u0039 |     9     | DIGIT NINE         |
 * |  \u003A |     :     | COLON              |
 * |  \u003B |     ;     | SEMICOLON          |
 * |  \u003C |     <     | LESS-THAN SIGN     |
 * |  \u003D |     =     | EQUALS SIGN        |
 * |  \u003E |     >     | GREATER-THAN SIGN  |
 * |  \u003F |     ?     | QUESTION MARK      |
 * |  \u0040 |     @     | COMMERCIAL AT      |
 */

EXPRESSION_SYMBOLS = /[\u0021-\u0040]+/g;

/**
 * Clean `value`.
 *
 * @example
 *   > clean('Some dirty  text.')
 *   // 'some dirty text'
 *
 * @param {string} value
 * @return {string}
 */

function clean(value) {
    if (value === null || value === undefined) {
        value = '';
    }

    return String(value)
        .replace(EXPRESSION_SYMBOLS, ' ')
        .replace(/\s+/g, ' ')
        .trim()
        .toLowerCase();
}

/**
 * Deep regular sort on item at `1` in both `Object`s.
 *
 * @example
 *   > [[0, 20], [0, 1], [0, 5]].sort(sort);
 *   // [[0, 1], [0, 5], [0, 20]]
 *
 * @param {{1: number}} a
 * @param {{1: number}} b
 */

function sort(a, b) {
    return a[1] - b[1];
}

/**
 * Get clean, padded, trigrams.
 *
 * @param {string} value
 * @return {Array.<string>}
 */

function getCleanTrigrams(value) {
    return getTrigrams(' ' + clean(value) + ' ');
}

/**
 * Get an `Object` with trigrams as its attributes, and
 * their occurence count as their values
 *
 * @param {string} value
 * @return {Object.<string, number>} - `Object` containing
 *   weighted trigrams.
 */

function getCleanTrigramsAsDictionary(value) {
    var trigrams,
        dictionary,
        index,
        trigram;

    trigrams = getCleanTrigrams(value);
    dictionary = {};
    index = trigrams.length;

    while (index--) {
        trigram = trigrams[index];

        if (has.call(dictionary, trigram)) {
            dictionary[trigram]++;
        } else {
            dictionary[trigram] = 1;
        }
    }

    return dictionary;
}

/**
 * Get an `Array` containing trigram--count tuples from a
 * given value.
 *
 * @param {string} value
 * @return {Array.<Array.<string, number>>} `Array`
 *   containing trigram--count tupples, sorted by
 *   count (low to high).
 */

function getCleanTrigramsAsTuples(value) {
    var dictionary,
        tuples,
        trigram;

    dictionary = getCleanTrigramsAsDictionary(value);
    tuples = [];

    for (trigram in dictionary) {
        tuples.push([trigram, dictionary[trigram]]);
    }

    tuples.sort(sort);

    return tuples;
}

/**
 * Get an `Array` containing trigram--count tuples from a
 * given value.
 *
 * @param {Array.<Array.<string, number>>} tuples - Tuples
 *   to transform into a dictionary.
 * @return {Object.<string, number>}
 */

function getCleanTrigramTuplesAsDictionary(tuples) {
    var dictionary,
        index,
        tuple;

    dictionary = {};
    index = tuples.length;

    while (index--) {
        tuple = tuples[index];
        dictionary[tuple[0]] = tuple[1];
    }

    return dictionary;
}

/**
 * Expose utilities.
 */

module.exports = {
    'clean': clean,
    'trigrams': getCleanTrigrams,
    'asDictionary': getCleanTrigramsAsDictionary,
    'asTuples': getCleanTrigramsAsTuples,
    'tuplesAsDictionary': getCleanTrigramTuplesAsDictionary
};

},{"n-gram":25}],27:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var deepClone, deepDelete, deepExtend, deepFromFlat, deepKeys, deepMapValues, isPlainObject, mapKeys, mapValues, _;

_ = require('underscore');

module.exports = {
  deepKeys: deepKeys = function(obj) {
    if (!isPlainObject(obj)) {
      throw new Error("deepKeys must be called on an object, not '" + obj + "'");
    }
    return _.flatten(_.map(obj, function(v, k) {
      if (isPlainObject(v) && !_.isEmpty(v)) {
        return _.map(deepKeys(v), function(subkey) {
          return "" + k + "." + subkey;
        });
      } else {
        return [k];
      }
    }));
  },
  deepClone: deepClone = function(object) {
    var type, _i, _len, _ref;
    if (object == null) {
      return object;
    }
    _ref = [Date, Number, String, Boolean];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      type = _ref[_i];
      if (object instanceof type) {
        return new type(object);
      }
    }
    if (_(object).isArray()) {
      return _(object).map(deepClone);
    }
    if (!_(object).isObject()) {
      return object;
    }
    if (object.nodeType && _(object.cloneNode).isFunction()) {
      return object.cloneNode(true);
    }
    if (object.constructor !== {}.constructor) {
      return object;
    }
    return mapValues(object, deepClone);
  },
  deepHas: function(obj, keys) {
    var helper;
    helper = function(obj, keys) {
      if ((keys.length === 0) || (!_.isObject(obj))) {
        return false;
      } else if (keys.length === 1) {
        return _.first(keys) in obj;
      } else {
        return helper(obj[_.first(keys)], _.rest(keys));
      }
    };
    return helper(obj, _.isArray(keys) ? keys : keys.split('.'));
  },
  deepOmit: function(obj, keys) {
    var deepOmitOne;
    if (!isPlainObject(obj)) {
      throw new Error("deepOmit must be called on an object, not '" + obj + "'");
    }
    deepOmitOne = function(obj, key) {
      var helper;
      helper = function(obj, key_arr) {
        switch (false) {
          case !_.isEmpty(key_arr):
            return obj;
          case key_arr.length !== 1:
            return _.omit(obj, _.first(key_arr));
          case !!isPlainObject(obj[_.first(key_arr)]):
            return obj;
          default:
            return _.extend({}, obj, _.object([_.first(key_arr)], [helper(obj[_.first(key_arr)], _.rest(key_arr))]));
        }
      };
      return helper(obj, key.split('.'));
    };
    return _.reduce(keys, deepOmitOne, obj);
  },
  deepPick: (function() {
    var deepGet;
    deepGet = function(obj, key) {
      var helper;
      helper = function(obj, key_arr) {
        if (key_arr.length === 1) {
          return obj != null ? obj[_.first(key_arr)] : void 0;
        } else {
          return helper(obj[_.first(key_arr)], _.rest(key_arr));
        }
      };
      return helper(obj, key.split('.'));
    };
    return function(obj, keys) {
      var flat_new_obj;
      if (!isPlainObject(obj)) {
        throw new Error("deepPick must be called on an object, not '" + obj + "'");
      }
      flat_new_obj = _.reduce(keys, function(new_obj, key) {
        var val;
        val = deepGet(obj, key);
        if (val !== void 0) {
          new_obj[key] = val;
        }
        return new_obj;
      }, {});
      return deepFromFlat(flat_new_obj);
    };
  })(),
  deepDelete: deepDelete = function(obj, key) {
    if ((key == null) || (obj == null)) {
      return;
    }
    if (!_(key).isArray()) {
      key = key.split('.');
    }
    if (key.length === 1) {
      delete obj[key];
      return;
    }
    return deepDelete(obj[key[0]], key.slice(1, key.length));
  },
  deepExtend: deepExtend = function(obj, ext, mutate) {
    return _.reduce(ext, function(acc, val, key) {
      acc[key] = (key in obj) && isPlainObject(obj[key]) && isPlainObject(val) ? deepExtend(obj[key], val) : val;
      return acc;
    }, mutate ? obj : _.clone(obj));
  },
  isPlainObject: isPlainObject = function(value) {
    return (value != null ? value.constructor : void 0) === {}.constructor;
  },
  deepToFlat: function(obj) {
    var recurse, res;
    res = {};
    recurse = function(obj, current) {
      var key, newKey, value, _results;
      _results = [];
      for (key in obj) {
        value = obj[key];
        newKey = (current ? current + "." + key : key);
        if (value && isPlainObject(value)) {
          _results.push(recurse(value, newKey));
        } else {
          _results.push(res[newKey] = value);
        }
      }
      return _results;
    };
    recurse(obj);
    return res;
  },
  deepFromFlat: deepFromFlat = function(o) {
    var k, key, oo, part, parts, t;
    oo = {};
    t = void 0;
    parts = void 0;
    part = void 0;
    for (k in o) {
      t = oo;
      parts = k.split(".");
      key = parts.pop();
      while (parts.length) {
        part = parts.shift();
        t = t[part] = t[part] || {};
      }
      t[key] = o[k];
    }
    return oo;
  },
  mapValues: mapValues = function(obj, f_val) {
    if (!isPlainObject(obj)) {
      throw new Error("mapValues must be called on an object, not '" + obj + "'");
    }
    return _.object(_.keys(obj), _.map(obj, f_val));
  },
  deepMapValues: deepMapValues = function(obj, f) {
    if (!isPlainObject(obj)) {
      throw new Error("deepMapValues must be called on an object, not '" + obj + "'");
    }
    return mapValues(obj, function(v, k) {
      if (isPlainObject(v)) {
        return deepMapValues(v, function(subv, subk) {
          return f(subv, "" + k + "." + subk);
        });
      } else {
        return f(v, k);
      }
    });
  },
  mapKeys: mapKeys = function(obj, f_val) {
    if (!isPlainObject(obj)) {
      throw new Error("mapKeys must be called on an object, not '" + obj + "'");
    }
    return _.object(_.map(obj, function(v, k) {
      return f_val(k, v);
    }), _.values(obj));
  }
};

},{"underscore":28}],28:[function(require,module,exports){
//     Underscore.js 1.7.0
//     http://underscorejs.org
//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    concat           = ArrayProto.concat,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.7.0';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var createCallback = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  _.iteratee = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return createCallback(value, context, argCount);
    if (_.isObject(value)) return _.matches(value);
    return _.property(value);
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    if (obj == null) return obj;
    iteratee = createCallback(iteratee, context);
    var i, length = obj.length;
    if (length === +length) {
      for (i = 0; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    if (obj == null) return [];
    iteratee = _.iteratee(iteratee, context);
    var keys = obj.length !== +obj.length && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length),
        currentKey;
    for (var index = 0; index < length; index++) {
      currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  var reduceError = 'Reduce of empty array with no initial value';

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = function(obj, iteratee, memo, context) {
    if (obj == null) obj = [];
    iteratee = createCallback(iteratee, context, 4);
    var keys = obj.length !== +obj.length && _.keys(obj),
        length = (keys || obj).length,
        index = 0, currentKey;
    if (arguments.length < 3) {
      if (!length) throw new TypeError(reduceError);
      memo = obj[keys ? keys[index++] : index++];
    }
    for (; index < length; index++) {
      currentKey = keys ? keys[index] : index;
      memo = iteratee(memo, obj[currentKey], currentKey, obj);
    }
    return memo;
  };

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = function(obj, iteratee, memo, context) {
    if (obj == null) obj = [];
    iteratee = createCallback(iteratee, context, 4);
    var keys = obj.length !== + obj.length && _.keys(obj),
        index = (keys || obj).length,
        currentKey;
    if (arguments.length < 3) {
      if (!index) throw new TypeError(reduceError);
      memo = obj[keys ? keys[--index] : --index];
    }
    while (index--) {
      currentKey = keys ? keys[index] : index;
      memo = iteratee(memo, obj[currentKey], currentKey, obj);
    }
    return memo;
  };

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var result;
    predicate = _.iteratee(predicate, context);
    _.some(obj, function(value, index, list) {
      if (predicate(value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    if (obj == null) return results;
    predicate = _.iteratee(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(_.iteratee(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    if (obj == null) return true;
    predicate = _.iteratee(predicate, context);
    var keys = obj.length !== +obj.length && _.keys(obj),
        length = (keys || obj).length,
        index, currentKey;
    for (index = 0; index < length; index++) {
      currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    if (obj == null) return false;
    predicate = _.iteratee(predicate, context);
    var keys = obj.length !== +obj.length && _.keys(obj),
        length = (keys || obj).length,
        index, currentKey;
    for (index = 0; index < length; index++) {
      currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `include`.
  _.contains = _.include = function(obj, target) {
    if (obj == null) return false;
    if (obj.length !== +obj.length) obj = _.values(obj);
    return _.indexOf(obj, target) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      return (isFunc ? method : value[method]).apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matches(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matches(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = obj.length === +obj.length ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = _.iteratee(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = obj.length === +obj.length ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = _.iteratee(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = obj && obj.length === +obj.length ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (obj.length !== +obj.length) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = _.iteratee(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = _.iteratee(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = _.iteratee(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = low + high >>> 1;
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (obj.length === +obj.length) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return obj.length === +obj.length ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = _.iteratee(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    if (n < 0) return [];
    return slice.call(array, 0, n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return slice.call(array, Math.max(array.length - n, 0));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, output) {
    if (shallow && _.every(input, _.isArray)) {
      return concat.apply(output, input);
    }
    for (var i = 0, length = input.length; i < length; i++) {
      var value = input[i];
      if (!_.isArray(value) && !_.isArguments(value)) {
        if (!strict) output.push(value);
      } else if (shallow) {
        push.apply(output, value);
      } else {
        flatten(value, shallow, strict, output);
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false, []);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (array == null) return [];
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = _.iteratee(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = array.length; i < length; i++) {
      var value = array[i];
      if (isSorted) {
        if (!i || seen !== value) result.push(value);
        seen = value;
      } else if (iteratee) {
        var computed = iteratee(value, i, array);
        if (_.indexOf(seen, computed) < 0) {
          seen.push(computed);
          result.push(value);
        }
      } else if (_.indexOf(result, value) < 0) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true, []));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    if (array == null) return [];
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = array.length; i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(slice.call(arguments, 1), true, true, []);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function(array) {
    if (array == null) return [];
    var length = _.max(arguments, 'length').length;
    var results = Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(arguments, i);
    }
    return results;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    if (list == null) return {};
    var result = {};
    for (var i = 0, length = list.length; i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    if (array == null) return -1;
    var i = 0, length = array.length;
    if (isSorted) {
      if (typeof isSorted == 'number') {
        i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    for (; i < length; i++) if (array[i] === item) return i;
    return -1;
  };

  _.lastIndexOf = function(array, item, from) {
    if (array == null) return -1;
    var idx = array.length;
    if (typeof from == 'number') {
      idx = from < 0 ? idx + from + 1 : Math.min(idx, from + 1);
    }
    while (--idx >= 0) if (array[idx] === item) return idx;
    return -1;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Reusable constructor function for prototype setting.
  var Ctor = function(){};

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    var args, bound;
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    args = slice.call(arguments, 2);
    bound = function() {
      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
      Ctor.prototype = func.prototype;
      var self = new Ctor;
      Ctor.prototype = null;
      var result = func.apply(self, args.concat(slice.call(arguments)));
      if (_.isObject(result)) return result;
      return self;
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    return function() {
      var position = 0;
      var args = boundArgs.slice();
      for (var i = 0, length = args.length; i < length; i++) {
        if (args[i] === _) args[i] = arguments[position++];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return func.apply(this, args);
    };
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = hasher ? hasher.apply(this, arguments) : key;
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        clearTimeout(timeout);
        timeout = null;
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last > 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed after being called N times.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed before being called N times.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      } else {
        func = null;
      }
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function(obj) {
    if (!_.isObject(obj)) return obj;
    var source, prop;
    for (var i = 1, length = arguments.length; i < length; i++) {
      source = arguments[i];
      for (prop in source) {
        if (hasOwnProperty.call(source, prop)) {
            obj[prop] = source[prop];
        }
      }
    }
    return obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj, iteratee, context) {
    var result = {}, key;
    if (obj == null) return result;
    if (_.isFunction(iteratee)) {
      iteratee = createCallback(iteratee, context);
      for (key in obj) {
        var value = obj[key];
        if (iteratee(value, key, obj)) result[key] = value;
      }
    } else {
      var keys = concat.apply([], slice.call(arguments, 1));
      obj = new Object(obj);
      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];
        if (key in obj) result[key] = obj[key];
      }
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(concat.apply([], slice.call(arguments, 1)), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = function(obj) {
    if (!_.isObject(obj)) return obj;
    for (var i = 1, length = arguments.length; i < length; i++) {
      var source = arguments[i];
      for (var prop in source) {
        if (obj[prop] === void 0) obj[prop] = source[prop];
      }
    }
    return obj;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }
    // Objects with different constructors are not equivalent, but `Object`s
    // from different frames are.
    var aCtor = a.constructor, bCtor = b.constructor;
    if (
      aCtor !== bCtor &&
      // Handle Object.create(x) cases
      'constructor' in a && 'constructor' in b &&
      !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
        _.isFunction(bCtor) && bCtor instanceof bCtor)
    ) {
      return false;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    var size, result;
    // Recursively compare objects and arrays.
    if (className === '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size === b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
        }
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      size = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      result = _.keys(b).length === size;
      if (result) {
        while (size--) {
          // Deep compare each member
          key = keys[size];
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
        }
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return result;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b, [], []);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (_.isArray(obj) || _.isString(obj) || _.isArguments(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around an IE 11 bug.
  if (typeof /./ !== 'function') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = function(key) {
    return function(obj) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of `key:value` pairs.
  _.matches = function(attrs) {
    var pairs = _.pairs(attrs), length = pairs.length;
    return function(obj) {
      if (obj == null) return !length;
      obj = new Object(obj);
      for (var i = 0; i < length; i++) {
        var pair = pairs[i], key = pair[0];
        if (pair[1] !== obj[key] || !(key in obj)) return false;
      }
      return true;
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = createCallback(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property) {
    if (object == null) return void 0;
    var value = object[property];
    return _.isFunction(value) ? object[property]() : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(obj) {
    return this._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result.call(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}.call(this));

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJtYWluLmpzIiwibm9kZV9tb2R1bGVzL2NvdW50cnktbGFuZ3VhZ2UvZGF0YS5qc29uIiwibm9kZV9tb2R1bGVzL2NvdW50cnktbGFuZ3VhZ2UvaW5kZXguanMiLCJub2RlX21vZHVsZXMvY291bnRyeS1sYW5ndWFnZS91dGlscy5qcyIsIm5vZGVfbW9kdWxlcy9kL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L2Fzc2lnbi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC9hc3NpZ24vaXMtaW1wbGVtZW50ZWQuanMiLCJub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3QvYXNzaWduL3NoaW0uanMiLCJub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3QvaXMtY2FsbGFibGUuanMiLCJub2RlX21vZHVsZXMvZXM1LWV4dC9vYmplY3Qva2V5cy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC9rZXlzL2lzLWltcGxlbWVudGVkLmpzIiwibm9kZV9tb2R1bGVzL2VzNS1leHQvb2JqZWN0L2tleXMvc2hpbS5qcyIsIm5vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC9ub3JtYWxpemUtb3B0aW9ucy5qcyIsIm5vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC92YWxpZC1jYWxsYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9lczUtZXh0L29iamVjdC92YWxpZC12YWx1ZS5qcyIsIm5vZGVfbW9kdWxlcy9lczUtZXh0L3N0cmluZy8jL2NvbnRhaW5zL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2VzNS1leHQvc3RyaW5nLyMvY29udGFpbnMvaXMtaW1wbGVtZW50ZWQuanMiLCJub2RlX21vZHVsZXMvZXM1LWV4dC9zdHJpbmcvIy9jb250YWlucy9zaGltLmpzIiwibm9kZV9tb2R1bGVzL2V2ZW50LWVtaXR0ZXIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZnJhbmMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZnJhbmMvbGliL2RhdGEuanNvbiIsIm5vZGVfbW9kdWxlcy9mcmFuYy9saWIvZXhwcmVzc2lvbnMuanMiLCJub2RlX21vZHVsZXMvZnJhbmMvbGliL2ZyYW5jLmpzIiwibm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcyIsIm5vZGVfbW9kdWxlcy9uLWdyYW0vaW5kZXguanMiLCJub2RlX21vZHVsZXMvdHJpZ3JhbS11dGlscy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy91bmRlcnNjb3JlLmRlZXAvdW5kZXJzY29yZS5kZWVwLmpzIiwibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvdW5kZXJzY29yZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25xWUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMVJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BJQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaFdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1K1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1TUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwidmFyIGZyYW5jID0gcmVxdWlyZSgnZnJhbmMnKTtcbnZhciAkID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG52YXIgZWUgPSByZXF1aXJlKCdldmVudC1lbWl0dGVyJyk7XG52YXIgQ291bnRyeUxhbmd1YWdlID0gcmVxdWlyZSgnY291bnRyeS1sYW5ndWFnZScpO1xuXG52YXIgZW1pdHRlciA9IGVlKHt9KSwgbGlzdGVuZXI7XG5cblxuXG5cbnZhciBjb3VudGVyID0gMDtcblxuXG5mdW5jdGlvbiBUdHMoKSB7XG4gICAgdmFyIHRoaXNUVFMgPSB0aGlzO1xuICAgIHRoaXMucmF0ZSA9IDEuMjtcbiAgICB0aGlzLnBsYXlpbmcgPSBmYWxzZTtcbiAgICB0aGlzLnV0dGVyYW5jZSA9IG51bGw7XG4gICAgdGhpcy50ZXh0ID0gJyc7XG4gICAgdGhpcy50YXJnZXQgPSBudWxsO1xuICAgIHRoaXMuY2hhckluZGV4ID0gMDtcbiAgICB0aGlzLmNvdW50ZXIgPSAwIDtcblxuICAgIHRoaXMuaXNQbGF5aW5nPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBsYXlpbmc7XG4gICAgfTtcblxuICAgIHRoaXMuaW5pdCA9IGZ1bmN0aW9uICh0ZXh0LHRhcmdldCkge1xuICAgICAgICB0aGlzLnRleHQ9IHRleHQ7XG4gICAgICAgIGlmICh0YXJnZXQpXG4gICAgICAgICAgICB0aGlzLnRhcmdldD0gdGFyZ2V0O1xuICAgICAgICB2YXIgaXNvTGFuZyA9IGZyYW5jKHRvQmVTcG9rZW4sMyk7XG4gICAgICAgIENvdW50cnlMYW5ndWFnZS5nZXRMYW5ndWFnZShpc29MYW5nLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XG4gICAgICAgICAgICBpZihlcnIpIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICBpZihkYXRhKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhciB1dHRlcmFuY2UgPSBuZXcgU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlKHRleHQpO1xuICAgICAgICAgICAgICAgIHV0dGVyYW5jZS5yYXRlID0gdGhpc1RUUy5yYXRlO1xuICAgICAgICAgICAgICAgIHV0dGVyYW5jZS52b2ljZSA9IHdpbmRvdy5zcGVlY2hTeW50aGVzaXMuZ2V0Vm9pY2VzKCkuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5sYW5nLmluZGV4T2YoZGF0YS5pc282MzlfMSkhPS0xXG4gICAgICAgICAgICAgICAgfSlbMF07XG4gICAgICAgICAgICAgICAgdXR0ZXJhbmNlLm9uZW5kPWZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1RUUy5wbGF5aW5nPWZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzVFRTLmVqZWN0KCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB1dHRlcmFuY2Uub25ib3VuZGFyeSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGVtaXR0ZXIuZW1pdCgnaW5kZXgnLGUuY2hhckluZGV4KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRoaXNUVFMudXR0ZXJhbmNlID0gdXR0ZXJhbmNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgdGhpcy5pbmplY3QgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICB2YXIgb3ZlcmxheSA9ICQoJzxkaXYgY2xhc3M9XCJ0dHNvdmVybGF5XCI+ICcgKyBlbGVtZW50KycgPC9kaXY+Jyk7XG4gICAgICAgIG92ZXJsYXkuYXBwZW5kVG8oZG9jdW1lbnQuYm9keSlcblxuICAgIH07XG4gICAgdGhpcy5lamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJCgnLnR0c292ZXJsYXknKS5yZW1vdmUoKTtcbiAgICAgICAgdGhpcy5jb3VudGVyID0gMDtcbiAgICB9O1xuXG4gICAgdGhpcy5wbGF5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZih0aGlzVFRTLnV0dGVyYW5jZSl7XG4gICAgICAgICAgICB3aW5kb3cuc3BlZWNoU3ludGhlc2lzLnNwZWFrKHRoaXNUVFMudXR0ZXJhbmNlKTtcbiAgICAgICAgICAgIHRoaXNUVFMucGxheWluZyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbmplY3QodGhpcy5tYXJrRE9NKHRoaXMudGV4dCkpO1xuICAgIH07XG4gICAgdGhpcy5zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmVqZWN0KCk7XG4gICAgICAgIHdpbmRvdy5zcGVlY2hTeW50aGVzaXMuY2FuY2VsKCk7XG4gICAgICAgIHRoaXNUVFMucGxheWluZyA9IGZhbHNlO1xuICAgIH07XG4gICAgdGhpcy5yZXN1bWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHdpbmRvdy5zcGVlY2hTeW50aGVzaXMucmVzdW1lKCk7XG4gICAgICAgIHRoaXNUVFMucGxheWluZyA9IHRydWU7XG4gICAgfTtcbiAgICB0aGlzLnBhdXNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB3aW5kb3cuc3BlZWNoU3ludGhlc2lzLnBhdXNlKCk7XG4gICAgICAgIHRoaXNUVFMucGxheWluZyA9IGZhbHNlO1xuICAgIH07XG4gICAgdGhpcy5nb0Zhc3RlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5yYXRlPSB0aGlzLnJhdGUrMC4xO1xuICAgICAgICB0aGlzLmluaXQodGhpcy50ZXh0KTtcbiAgICB9O1xuICAgIHRoaXMuZ29TbG93ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucmF0ZT0gdGhpcy5yYXRlLTAuMTtcbiAgICAgICAgdGhpcy5pbml0KHRoaXMudGV4dCk7XG4gICAgfTtcblxuICAgIHRoaXMubWFya0RPTSA9IGZ1bmN0aW9uIChzZWxlY3RlZFRleHQpIHtcblxuICAgICAgICB2YXIgZnVsbEVsVGV4dCA9IHRoaXMudGFyZ2V0LnRleHQoKTtcbiAgICAgICAgdmFyIHNJbmRleCA9IGZ1bGxFbFRleHQuaW5kZXhPZihzZWxlY3RlZFRleHQpO1xuICAgICAgICB2YXIgZUluZGV4ID0gc0luZGV4K3NlbGVjdGVkVGV4dC5sZW5ndGg7XG5cbiAgICAgICAgdmFyIHNwbGl0ID0gc2VsZWN0ZWRUZXh0LnNwbGl0V2l0aEluZGV4KC9bIC5dKy8pO1xuICAgICAgICAvL2NvbnNvbGUubG9nKHNwbGl0KTtcbiAgICAgICAgdmFyIG1hcmtlZCA9IFwiXCI7XG4gICAgICAgIGZvciAodmFyIGkgPSAwIDsgaTxzcGxpdC5sZW5ndGggOyBpKysgKXtcbiAgICAgICAgICAgIG1hcmtlZCArPSBcIjxzcGFuIGNsYXNzPSd3XCIgK3NwbGl0W2ldWzBdK1wiJz5cIitzcGxpdFtpXVsxXStcIiA8L3NwYW4+XCIgO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9IGZ1bGxFbFRleHQuc2xpY2UoMCxzSW5kZXgpICsgbWFya2VkICtcbiAgICAgICAgICAgIGZ1bGxFbFRleHQuc2xpY2UoZUluZGV4KTtcbiAgICAgICAgcmV0dXJuIG1hcmtlZDtcbiAgICB9XG59XG5cbnZhciBwbGF5ZXIgPSBuZXcgVHRzKCkgO1xuXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG5cblxuICAgIGVtaXR0ZXIub24oJ2luZGV4JywgbGlzdGVuZXIgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yPVwiLncwXCI7XG4gICAgICAgIGZvciAodmFyIGk9MTtpPD1pbmRleDtpKyspIHtcbiAgICAgICAgICAgIHNlbGVjdG9yICs9IFwiICwgLndcIiArIGk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coc2VsZWN0b3IpO1xuICAgICAgICAkKHNlbGVjdG9yKVxuICAgICAgICAgICAgLmNzcyhcImJhY2tncm91bmQtY29sb3JcIixcIiNmN2U1MGFcIilcbiAgICAgICAgICAgIC5jc3MoXCJ0ZXh0LWRlY29yYXRpb25cIiwgXCJ1bmRlcmxpbmVcIik7XG4gICAgfSk7XG5cblxuXG4gICAgJChkb2N1bWVudCkuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uKSB7XG4gICAgICAgICAgICB0b0JlU3Bva2VuID0gd2luZG93LmdldFNlbGVjdGlvbigpLnRvU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQuc2VsZWN0aW9uICYmIGRvY3VtZW50LnNlbGVjdGlvbi50eXBlICE9IFwiQ29udHJvbFwiKSB7XG4gICAgICAgICAgICB0b0JlU3Bva2VuID0gZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCkudGV4dDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGFyZ2V0ID0gJChldmVudC50YXJnZXQpO1xuICAgICAgICBwbGF5ZXIuaW5pdCh0b0JlU3Bva2VuLCB0YXJnZXQpO1xuXG5cblxuXG4gICAgfSkua2V5ZG93bihmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoZS5rZXlDb2RlID09IDgzICYmIGUuYWx0S2V5KSB7XG4gICAgICAgICAgICBpZiAocGxheWVyLmlzUGxheWluZygpKSB7XG4gICAgICAgICAgICAgICAgcGxheWVyLnN0b3AoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHBsYXllci51dHRlcmFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyLnBsYXkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09IDY4ICYmIGUuYWx0S2V5KSB7XG4gICAgICAgICAgICBpZiAocGxheWVyLmlzUGxheWluZygpKSB7XG4gICAgICAgICAgICAgICAgcGxheWVyLnBhdXNlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBsYXllci5yZXN1bWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT0gMTg3ICYmIGUuYWx0S2V5KSB7XG4gICAgICAgICAgICBwbGF5ZXIuZ29GYXN0ZXIoKTtcbiAgICAgICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT0gMTg5ICYmIGUuYWx0S2V5KSB7XG4gICAgICAgICAgICBwbGF5ZXIuZ29TbG93ZXIoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG59KTtcblxuU3RyaW5nLnByb3RvdHlwZS5zcGxpdFdpdGhJbmRleD1mdW5jdGlvbihkZWxpbSl7XG4gICAgdmFyIHJldD1bXTtcbiAgICB2YXIgc3BsaXRzPXRoaXMuc3BsaXQoZGVsaW0pO1xuICAgIHZhciBpbmRleD0wO1xuICAgIGZvcih2YXIgaT0wO2k8c3BsaXRzLmxlbmd0aDtpKyspe1xuICAgICAgICByZXQucHVzaChbaW5kZXgsc3BsaXRzW2ldXSk7XG4gICAgICAgIGluZGV4Kz1zcGxpdHNbaV0ubGVuZ3RoKzE7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHM9e1xuICBcImxhbmd1YWdlRmFtaWxpZXNcIjogW1xuICAgIFwiTm9ydGh3ZXN0IENhdWNhc2lhblwiLFxuICAgIFwiQWZyby1Bc2lhdGljXCIsXG4gICAgXCJJbmRvLUV1cm9wZWFuXCIsXG4gICAgXCJOaWdlcuKAk0NvbmdvXCIsXG4gICAgXCJOb3J0aGVhc3QgQ2F1Y2FzaWFuXCIsXG4gICAgXCJBeW1hcmFuXCIsXG4gICAgXCJUdXJraWNcIixcbiAgICBcIkxhbmd1YWdlIGlzb2xhdGVcIixcbiAgICBcIkNyZW9sZVwiLFxuICAgIFwiU2luby1UaWJldGFuXCIsXG4gICAgXCJBdXN0cm9uZXNpYW5cIixcbiAgICBcIkFsZ29ucXVpYW5cIixcbiAgICBcIkNvbnN0cnVjdGVkXCIsXG4gICAgXCJVcmFsaWNcIixcbiAgICBcIlNvdXRoIENhdWNhc2lhblwiLFxuICAgIFwiVHVwaWFuXCIsXG4gICAgXCJFc2tpbW/igJNBbGV1dFwiLFxuICAgIFwiSmFwb25pY1wiLFxuICAgIFwiRHJhdmlkaWFuXCIsXG4gICAgXCJOaWxvLVNhaGFyYW5cIixcbiAgICBcIkF1c3Ryb2FzaWF0aWNcIixcbiAgICBcIktvcmVhbmljXCIsXG4gICAgXCJUYWnigJNLYWRhaVwiLFxuICAgIFwiTW9uZ29saWNcIixcbiAgICBcIkRlbsOp4oCTWWVuaXNlaWFuXCIsXG4gICAgXCJOaWdlci1Db25nb1wiLFxuICAgIFwiUXVlY2h1YW5cIlxuICBdLFxuICBcImxhbmd1YWdlc1wiOiBbXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImFiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiYWJrXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJhYmtcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJhYmtcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiQWJraGF6XCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcItCw0qfRgdGD0LAg0LHRi9C30YjTmdCwXCIsXG4gICAgICAgIFwi0LDSp9GB0YjTmdCwXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJOb3J0aHdlc3QgQ2F1Y2FzaWFuXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJhYVwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImFhclwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiYWFyXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiYWFyXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkFmYXJcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiQWZhcmFmXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJBZnJvLUFzaWF0aWNcIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJESklcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImFmXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiYWZyXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJhZnJcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJhZnJcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiQWZyaWthYW5zXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIkFmcmlrYWFuc1wiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiSW5kby1FdXJvcGVhblwiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIlpBRlwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiYWYtWkFcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiQWZyaWthYW5zIC0gU291dGggQWZyaWNhXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQzNlwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJha1wiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImFrYVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiYWthXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiYWthXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkFrYW5cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiQWthblwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiTmlnZXLigJNDb25nb1wiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIkdIQVwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwic3FcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJzcWlcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImFsYlwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInNxaVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJBbGJhbmlhblwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJnanVoYSBzaHFpcGVcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkluZG8tRXVyb3BlYW5cIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJBTEJcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcInNxLUFMXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkFsYmFuaWFuIC0gQWxiYW5pYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MUNcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiYW1cIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJhbWhcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImFtaFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImFtaFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJBbWhhcmljXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIuGKoOGIm+GIreGKm1wiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiQWZyby1Bc2lhdGljXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiRVRIXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJhclwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImFyYVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiYXJhXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiYXJhXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkFyYWJpY1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCLYp9mE2LnYsdio2YrYqVwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJSVExcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiQWZyby1Bc2lhdGljXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiRFpBXCIsXG4gICAgICAgIFwiQkhSXCIsXG4gICAgICAgIFwiVENEXCIsXG4gICAgICAgIFwiQ09NXCIsXG4gICAgICAgIFwiREpJXCIsXG4gICAgICAgIFwiRUdZXCIsXG4gICAgICAgIFwiRVJJXCIsXG4gICAgICAgIFwiSVJRXCIsXG4gICAgICAgIFwiSVNSXCIsXG4gICAgICAgIFwiSk9SXCIsXG4gICAgICAgIFwiS1dUXCIsXG4gICAgICAgIFwiTEJOXCIsXG4gICAgICAgIFwiTEJZXCIsXG4gICAgICAgIFwiTVJUXCIsXG4gICAgICAgIFwiTUFSXCIsXG4gICAgICAgIFwiTkVSXCIsXG4gICAgICAgIFwiT01OXCIsXG4gICAgICAgIFwiUUFUXCIsXG4gICAgICAgIFwiU0FVXCIsXG4gICAgICAgIFwiU09NXCIsXG4gICAgICAgIFwiU0ROXCIsXG4gICAgICAgIFwiU1lSXCIsXG4gICAgICAgIFwiVFVOXCIsXG4gICAgICAgIFwiQVJFXCIsXG4gICAgICAgIFwiWUVNXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJhci1EWlwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJBcmFiaWMgLSBBbGdlcmlhXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MTQwMVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImFyLUJIXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkFyYWJpYyAtIEJhaHJhaW5cIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgzQzAxXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiYXItRUdcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiQXJhYmljIC0gRWd5cHRcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwQzAxXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiYXItSVFcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiQXJhYmljIC0gSXJhcVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA4MDFcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJhci1KT1wiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJBcmFiaWMgLSBKb3JkYW5cIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgyQzAxXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiYXItS1dcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiQXJhYmljIC0gS3V3YWl0XCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MzQwMVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImFyLUxCXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkFyYWJpYyAtIExlYmFub25cIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgzMDAxXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiYXItTFlcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiQXJhYmljIC0gTGlieWFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgxMDAxXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiYXItTUFcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiQXJhYmljIC0gTW9yb2Njb1wiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDE4MDFcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJhci1PTVwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJBcmFiaWMgLSBPbWFuXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MjAwMVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImFyLVFBXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkFyYWJpYyAtIFFhdGFyXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4NDAwMVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImFyLVNBXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkFyYWJpYyAtIFNhdWRpIEFyYWJpYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MDFcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJhci1TWVwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJBcmFiaWMgLSBTeXJpYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDI4MDFcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJhci1UTlwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJBcmFiaWMgLSBUdW5pc2lhXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MUMwMVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImFyLUFFXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkFyYWJpYyAtIFVuaXRlZCBBcmFiIEVtaXJhdGVzXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MzgwMVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImFyLVlFXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkFyYWJpYyAtIFllbWVuXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MjQwMVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJhblwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImFyZ1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiYXJnXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiYXJnXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkFyYWdvbmVzZVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJhcmFnb27DqXNcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkluZG8tRXVyb3BlYW5cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImh5XCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiaHllXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJhcm1cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJoeWVcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiQXJtZW5pYW5cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwi1YDVodW11aXWgNWl1bZcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkluZG8tRXVyb3BlYW5cIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJBUk1cIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImh5LUFNXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkFybWVuaWFuIC0gQXJtZW5pYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MkJcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiYXNcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJhc21cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImFzbVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImFzbVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJBc3NhbWVzZVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCLgpoXgprjgpq7gp4Dgpq/gprzgpr5cIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkluZG8tRXVyb3BlYW5cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImF2XCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiYXZhXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJhdmFcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJhdmFcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiQXZhcmljXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcItCw0LLQsNGAINC80LDRhtOAXCIsXG4gICAgICAgIFwi0LzQsNCz04DQsNGA0YPQuyDQvNCw0YbTgFwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiTm9ydGhlYXN0IENhdWNhc2lhblwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiYWVcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJhdmVcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImF2ZVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImF2ZVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJBdmVzdGFuXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcImF2ZXN0YVwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiSW5kby1FdXJvcGVhblwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiYXlcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJheW1cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImF5bVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImF5bVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJBeW1hcmFcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiYXltYXIgYXJ1XCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJBeW1hcmFuXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiQk9MXCIsXG4gICAgICAgIFwiUEVSXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJhelwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImF6ZVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiYXplXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiYXplXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkF6ZXJiYWlqYW5pXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcImF6yZlyYmF5Y2FuIGRpbGlcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlR1cmtpY1wiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIkFaRVwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiQ3ktYXotQVpcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiQXplcmkgKEN5cmlsbGljKSAtIEF6ZXJiYWlqYW5cIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwODJDXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiTHQtYXotQVpcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiQXplcmkgKExhdGluKSAtIEF6ZXJiYWlqYW5cIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDJDXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImJtXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiYmFtXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJiYW1cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJiYW1cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiQmFtYmFyYVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJiYW1hbmFua2FuXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJOaWdlcuKAk0NvbmdvXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiTUxJXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJiYVwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImJha1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiYmFrXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiYmFrXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkJhc2hraXJcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwi0LHQsNGI0qHQvtGA0YIg0YLQtdC70LVcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlR1cmtpY1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiZXVcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJldXNcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImJhcVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImV1c1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJCYXNxdWVcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiZXVza2FyYVwiLFxuICAgICAgICBcImV1c2tlcmFcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkxhbmd1YWdlIGlzb2xhdGVcIixcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImV1LUVTXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkJhc3F1ZSAtIEJhc3F1ZVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MkRcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiYmVcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJiZWxcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImJlbFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImJlbFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJCZWxhcnVzaWFuXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcItCx0LXQu9Cw0YDRg9GB0LrQsNGPINC80L7QstCwXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJJbmRvLUV1cm9wZWFuXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiQkxSXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJiZS1CWVwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJCZWxhcnVzaWFuIC0gQmVsYXJ1c1wiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MjNcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiYm5cIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJiZW5cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImJlblwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImJlblwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJCZW5nYWxpXCIsXG4gICAgICAgIFwiQmFuZ2xhXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIuCmrOCmvuCmguCmsuCmvlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiSW5kby1FdXJvcGVhblwiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIkJHRFwiLFxuICAgICAgICBcIklORFwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiYmVyXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJiZXJcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJiZXJcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiQmVyYmVyXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlRhbWF6acmjdFwiLFxuICAgICAgICBcIlRhbWF6aWdodFwiLFxuICAgICAgICBcIuK1nOK0sOK1juK0sOK1o+K1ieK1luK1nFwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiQWZyby1Bc2lhdGljXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiRFpBXCIsXG4gICAgICAgIFwiTUFSXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJiaFwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImJpaFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiYmloXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkJpaGFyaVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCLgpK3gpYvgpJzgpKrgpYHgpLDgpYBcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkluZG8tRXVyb3BlYW5cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImJpXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiYmlzXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJiaXNcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJiaXNcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiQmlzbGFtYVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJCaXNsYW1hXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJDcmVvbGVcIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJWVVRcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImJzXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiYm9zXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJib3NcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJib3NcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiQm9zbmlhblwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJib3NhbnNraSBqZXppa1wiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiSW5kby1FdXJvcGVhblwiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIkJJSFwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiYnJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJicmVcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImJyZVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImJyZVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJCcmV0b25cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiYnJlemhvbmVnXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJJbmRvLUV1cm9wZWFuXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJiZ1wiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImJ1bFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiYnVsXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiYnVsXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkJ1bGdhcmlhblwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCLQsdGK0LvQs9Cw0YDRgdC60Lgg0LXQt9C40LpcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkluZG8tRXVyb3BlYW5cIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJCR1JcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImJnLUJHXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkJ1bGdhcmlhbiAtIEJ1bGdhcmlhXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQwMlwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJteVwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIm15YVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiYnVyXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibXlhXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkJ1cm1lc2VcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwi4YCX4YCZ4YCs4YCF4YCsXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJTaW5vLVRpYmV0YW5cIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJNTVJcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImNhXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiY2F0XCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJjYXRcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJjYXRcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiQ2F0YWxhblwiLFxuICAgICAgICBcIlZhbGVuY2lhblwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJjYXRhbMOgXCIsXG4gICAgICAgIFwidmFsZW5jacOgXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJJbmRvLUV1cm9wZWFuXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiQU5EXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJjYS1FU1wiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJDYXRhbGFuIC0gQ2F0YWxhblwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MDNcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiY2hcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJjaGFcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImNoYVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImNoYVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJDaGFtb3Jyb1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJDaGFtb3J1XCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJBdXN0cm9uZXNpYW5cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImNlXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiY2hlXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJjaGVcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJjaGVcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiQ2hlY2hlblwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCLQvdC+0YXRh9C40LnQvSDQvNC+0YLRglwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiTm9ydGhlYXN0IENhdWNhc2lhblwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwibnlcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJueWFcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcIm55YVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcIm55YVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJDaGljaGV3YVwiLFxuICAgICAgICBcIkNoZXdhXCIsXG4gICAgICAgIFwiTnlhbmphXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcImNoaUNoZcW1YVwiLFxuICAgICAgICBcImNoaW55YW5qYVwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiTmlnZXLigJNDb25nb1wiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIk1XSVwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiemhcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJ6aG9cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImNoaVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInpob1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJDaGluZXNlXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIuS4reaWhyAoWmjFjW5nd8OpbilcIixcbiAgICAgICAgXCLmsYnor61cIixcbiAgICAgICAgXCLmvKLoqp5cIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlNpbm8tVGliZXRhblwiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIkhLR1wiLFxuICAgICAgICBcIk1BQ1wiLFxuICAgICAgICBcIkNITlwiLFxuICAgICAgICBcIlRXTlwiLFxuICAgICAgICBcIlNHUFwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiemgtQ05cIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiQ2hpbmVzZSAtIENoaW5hXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDgwNFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcInpoLUhLXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkNoaW5lc2UgLSBIb25nIEtvbmcgU0FSXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MEMwNFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcInpoLU1PXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkNoaW5lc2UgLSBNYWNhdSBTQVJcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgxNDA0XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiemgtU0dcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiQ2hpbmVzZSAtIFNpbmdhcG9yZVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDEwMDRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJ6aC1UV1wiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJDaGluZXNlIC0gVGFpd2FuXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQwNFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcInpoLUNIU1wiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJDaGluZXNlIChTaW1wbGlmaWVkKVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDAwMDRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJ6aC1DSFRcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiQ2hpbmVzZSAoVHJhZGl0aW9uYWwpXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4N0MwNFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJjdlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImNodlwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiY2h2XCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiY2h2XCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkNodXZhc2hcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwi0YfTkdCy0LDRiCDRh9OX0LvRhdC4XCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJUdXJraWNcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImt3XCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiY29yXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJjb3JcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJjb3JcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiQ29ybmlzaFwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJLZXJuZXdla1wiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiSW5kby1FdXJvcGVhblwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiY29cIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJjb3NcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImNvc1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImNvc1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJDb3JzaWNhblwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJjb3JzdVwiLFxuICAgICAgICBcImxpbmd1YSBjb3JzYVwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiSW5kby1FdXJvcGVhblwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiY3JcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJjcmVcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImNyZVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImNyZVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJDcmVlXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIuGTgOGQpuGQg+GUreGQjeGQj+GQo1wiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiQWxnb25xdWlhblwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiaHJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJocnZcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImhydlwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImhydlwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJDcm9hdGlhblwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJocnZhdHNraSBqZXppa1wiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiSW5kby1FdXJvcGVhblwiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIkhSVlwiLFxuICAgICAgICBcIkJJSFwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiaHItSFJcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiQ3JvYXRpYW4gLSBDcm9hdGlhXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQxQVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJjc1wiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImNlc1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiY3plXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiY2VzXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkN6ZWNoXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIsSNZcWhdGluYVwiLFxuICAgICAgICBcIsSNZXNrw70gamF6eWtcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkluZG8tRXVyb3BlYW5cIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJDWkVcIixcbiAgICAgICAgXCJTVktcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImNzLUNaXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkN6ZWNoIC0gQ3plY2ggUmVwdWJsaWNcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDA1XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImRhXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiZGFuXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJkYW5cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJkYW5cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiRGFuaXNoXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcImRhbnNrXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJJbmRvLUV1cm9wZWFuXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiRE5LXCIsXG4gICAgICAgIFwiRlJPXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJkYS1ES1wiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJEYW5pc2ggLSBEZW5tYXJrXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQwNlwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInByc1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJEYXJpXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcItmB2KfYsdiz24wg2K/YsduMXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJJbmRvLUV1cm9wZWFuXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiQUZHXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJkdlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImRpdlwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiZGl2XCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiZGl2XCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkRpdmVoaVwiLFxuICAgICAgICBcIkRoaXZlaGlcIixcbiAgICAgICAgXCJNYWxkaXZpYW5cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwi3oveqN6I3qzegN6oXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIlJUTFwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJJbmRvLUV1cm9wZWFuXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiTURWXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJkaXYtTVZcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiRGhpdmVoaSAtIE1hbGRpdmVzXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQ2NVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJubFwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIm5sZFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiZHV0XCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibmxkXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkR1dGNoXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIk5lZGVybGFuZHNcIixcbiAgICAgICAgXCJWbGFhbXNcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkluZG8tRXVyb3BlYW5cIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJCRUxcIixcbiAgICAgICAgXCJOTERcIixcbiAgICAgICAgXCJBQldcIixcbiAgICAgICAgXCJDVVdcIixcbiAgICAgICAgXCJTWE1cIixcbiAgICAgICAgXCJTVVJcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcIm5sLUJFXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkR1dGNoIC0gQmVsZ2l1bVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA4MTNcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJubC1OTFwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJEdXRjaCAtIFRoZSBOZXRoZXJsYW5kc1wiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MTNcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiZHpcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJkem9cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImR6b1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImR6b1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJEem9uZ2toYVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCLgvaLgvqvgvbzgvYTgvIvgvYFcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlNpbm8tVGliZXRhblwiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIkJUTlwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiZW5cIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJlbmdcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImVuZ1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImVuZ1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJFbmdsaXNoXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIkVuZ2xpc2hcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkluZG8tRXVyb3BlYW5cIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJBVEdcIixcbiAgICAgICAgXCJBVVNcIixcbiAgICAgICAgXCJCSFNcIixcbiAgICAgICAgXCJCUkJcIixcbiAgICAgICAgXCJCTFpcIixcbiAgICAgICAgXCJCV0FcIixcbiAgICAgICAgXCJDTVJcIixcbiAgICAgICAgXCJDQU5cIixcbiAgICAgICAgXCJDVVdcIixcbiAgICAgICAgXCJETUFcIixcbiAgICAgICAgXCJFUklcIixcbiAgICAgICAgXCJGSklcIixcbiAgICAgICAgXCJHTUJcIixcbiAgICAgICAgXCJHSEFcIixcbiAgICAgICAgXCJHUkRcIixcbiAgICAgICAgXCJHVVlcIixcbiAgICAgICAgXCJIS0dcIixcbiAgICAgICAgXCJJTkRcIixcbiAgICAgICAgXCJJUkxcIixcbiAgICAgICAgXCJKQU1cIixcbiAgICAgICAgXCJLRU5cIixcbiAgICAgICAgXCJLSVJcIixcbiAgICAgICAgXCJMU09cIixcbiAgICAgICAgXCJMQlJcIixcbiAgICAgICAgXCJNV0lcIixcbiAgICAgICAgXCJNWVNcIixcbiAgICAgICAgXCJNTFRcIixcbiAgICAgICAgXCJNSExcIixcbiAgICAgICAgXCJNVVNcIixcbiAgICAgICAgXCJGU01cIixcbiAgICAgICAgXCJOQU1cIixcbiAgICAgICAgXCJOUlVcIixcbiAgICAgICAgXCJOWkxcIixcbiAgICAgICAgXCJOR0FcIixcbiAgICAgICAgXCJQQUtcIixcbiAgICAgICAgXCJQTFdcIixcbiAgICAgICAgXCJQTkdcIixcbiAgICAgICAgXCJQSExcIixcbiAgICAgICAgXCJSV0FcIixcbiAgICAgICAgXCJLTkFcIixcbiAgICAgICAgXCJMQ0FcIixcbiAgICAgICAgXCJWQ1RcIixcbiAgICAgICAgXCJXU01cIixcbiAgICAgICAgXCJTWUNcIixcbiAgICAgICAgXCJTTEVcIixcbiAgICAgICAgXCJTR1BcIixcbiAgICAgICAgXCJTWE1cIixcbiAgICAgICAgXCJTTEJcIixcbiAgICAgICAgXCJaQUZcIixcbiAgICAgICAgXCJTU0RcIixcbiAgICAgICAgXCJMS0FcIixcbiAgICAgICAgXCJTRE5cIixcbiAgICAgICAgXCJTV1pcIixcbiAgICAgICAgXCJUWkFcIixcbiAgICAgICAgXCJUT05cIixcbiAgICAgICAgXCJUVE9cIixcbiAgICAgICAgXCJUVVZcIixcbiAgICAgICAgXCJVR0FcIixcbiAgICAgICAgXCJHQlJcIixcbiAgICAgICAgXCJVU0FcIixcbiAgICAgICAgXCJWVVRcIixcbiAgICAgICAgXCJaTUJcIixcbiAgICAgICAgXCJaV0VcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImVuLUFVXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkVuZ2xpc2ggLSBBdXN0cmFsaWFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwQzA5XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZW4tQlpcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiRW5nbGlzaCAtIEJlbGl6ZVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDI4MDlcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJlbi1DQVwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJFbmdsaXNoIC0gQ2FuYWRhXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MTAwOVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImVuLUNCXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkVuZ2xpc2ggLSBDYXJpYmJlYW5cIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgyNDA5XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZW4tSUVcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiRW5nbGlzaCAtIElyZWxhbmRcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgxODA5XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZW4tSk1cIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiRW5nbGlzaCAtIEphbWFpY2FcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgyMDA5XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZW4tTlpcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiRW5nbGlzaCAtIE5ldyBaZWFsYW5kXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MTQwOVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImVuLVBIXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkVuZ2xpc2ggLSBQaGlsaXBwaW5lc1wiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDM0MDlcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJlbi1aQVwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJFbmdsaXNoIC0gU291dGggQWZyaWNhXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MUMwOVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImVuLVRUXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkVuZ2xpc2ggLSBUcmluaWRhZCBhbmQgVG9iYWdvXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MkMwOVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImVuLUdCXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkVuZ2xpc2ggLSBVbml0ZWQgS2luZ2RvbVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA4MDlcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJlbi1VU1wiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJFbmdsaXNoIC0gVW5pdGVkIFN0YXRlc1wiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MDlcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJlbi1aV1wiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJFbmdsaXNoIC0gWmltYmFid2VcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgzMDA5XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImVvXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiZXBvXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJlcG9cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJlcG9cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiRXNwZXJhbnRvXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIkVzcGVyYW50b1wiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiQ29uc3RydWN0ZWRcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImV0XCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiZXN0XCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJlc3RcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJlc3RcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiRXN0b25pYW5cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiZWVzdGlcIixcbiAgICAgICAgXCJlZXN0aSBrZWVsXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJVcmFsaWNcIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJFU1RcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImV0LUVFXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkVzdG9uaWFuIC0gRXN0b25pYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MjVcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiZWVcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJld2VcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImV3ZVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImV3ZVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJFd2VcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiRcqLZWdiZVwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiTmlnZXLigJNDb25nb1wiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIkdIQVwiLFxuICAgICAgICBcIlRHT1wiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiZm9cIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJmYW9cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImZhb1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImZhb1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJGYXJvZXNlXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcImbDuHJveXNrdFwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiSW5kby1FdXJvcGVhblwiLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZm8tRk9cIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiRmFyb2VzZSAtIEZhcm9lIElzbGFuZHNcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDM4XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImZqXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiZmlqXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJmaWpcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJmaWpcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiRmlqaWFuXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcInZvc2EgVmFrYXZpdGlcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkF1c3Ryb25lc2lhblwiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIkZKSVwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiZmlcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJmaW5cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImZpblwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImZpblwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJGaW5uaXNoXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcInN1b21pXCIsXG4gICAgICAgIFwic3VvbWVuIGtpZWxpXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJVcmFsaWNcIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJGSU5cIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImZpLUZJXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkZpbm5pc2ggLSBGaW5sYW5kXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQwQlwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJmclwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImZyYVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiZnJlXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiZnJhXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkZyZW5jaFwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJmcmFuw6dhaXNcIixcbiAgICAgICAgXCJsYW5ndWUgZnJhbsOnYWlzZVwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiSW5kby1FdXJvcGVhblwiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIkJFTFwiLFxuICAgICAgICBcIkJFTlwiLFxuICAgICAgICBcIkJGQVwiLFxuICAgICAgICBcIkJESVwiLFxuICAgICAgICBcIkNNUlwiLFxuICAgICAgICBcIkNBTlwiLFxuICAgICAgICBcIkNBRlwiLFxuICAgICAgICBcIlRDRFwiLFxuICAgICAgICBcIkNPTVwiLFxuICAgICAgICBcIkNJVlwiLFxuICAgICAgICBcIkNPRFwiLFxuICAgICAgICBcIkNPR1wiLFxuICAgICAgICBcIkRKSVwiLFxuICAgICAgICBcIkdOUVwiLFxuICAgICAgICBcIkZSQVwiLFxuICAgICAgICBcIkdVRlwiLFxuICAgICAgICBcIlBZRlwiLFxuICAgICAgICBcIkdMUFwiLFxuICAgICAgICBcIk1UUVwiLFxuICAgICAgICBcIk1ZVFwiLFxuICAgICAgICBcIk5DTFwiLFxuICAgICAgICBcIlJFVVwiLFxuICAgICAgICBcIkJMTVwiLFxuICAgICAgICBcIlNQTVwiLFxuICAgICAgICBcIldMRlwiLFxuICAgICAgICBcIkdBQlwiLFxuICAgICAgICBcIkdJTlwiLFxuICAgICAgICBcIkhUSVwiLFxuICAgICAgICBcIklUQVwiLFxuICAgICAgICBcIkpFWVwiLFxuICAgICAgICBcIkxVWFwiLFxuICAgICAgICBcIk1ER1wiLFxuICAgICAgICBcIk1MSVwiLFxuICAgICAgICBcIk1VU1wiLFxuICAgICAgICBcIk1DT1wiLFxuICAgICAgICBcIk5FUlwiLFxuICAgICAgICBcIlJXQVwiLFxuICAgICAgICBcIlNFTlwiLFxuICAgICAgICBcIlNZQ1wiLFxuICAgICAgICBcIkNIRVwiLFxuICAgICAgICBcIlRHT1wiLFxuICAgICAgICBcIlZVVFwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZnItQkVcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiRnJlbmNoIC0gQmVsZ2l1bVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA4MENcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJmci1DQVwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJGcmVuY2ggLSBDYW5hZGFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwQzBDXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZnItRlJcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiRnJlbmNoIC0gRnJhbmNlXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQwQ1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImZyLUxVXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkZyZW5jaCAtIEx1eGVtYm91cmdcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgxNDBDXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZnItTUNcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiRnJlbmNoIC0gTW9uYWNvXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MTgwQ1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImZyLUNIXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkZyZW5jaCAtIFN3aXR6ZXJsYW5kXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MTAwQ1wiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJmZlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImZ1bFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiZnVsXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiZnVsXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkZ1bGFcIixcbiAgICAgICAgXCJGdWxhaFwiLFxuICAgICAgICBcIlB1bGFhclwiLFxuICAgICAgICBcIlB1bGFyXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIkZ1bGZ1bGRlXCIsXG4gICAgICAgIFwiUHVsYWFyXCIsXG4gICAgICAgIFwiUHVsYXJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIk5pZ2Vy4oCTQ29uZ29cIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJCRU5cIixcbiAgICAgICAgXCJCRkFcIixcbiAgICAgICAgXCJNTElcIixcbiAgICAgICAgXCJORVJcIixcbiAgICAgICAgXCJTRU5cIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImdsXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiZ2xnXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJnbGdcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJnbGdcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiR2FsaWNpYW5cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiZ2FsZWdvXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJJbmRvLUV1cm9wZWFuXCIsXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJnbC1FU1wiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJHYWxpY2lhbiAtIEdhbGljaWFuXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQ1NlwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJrYVwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImthdFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiZ2VvXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwia2F0XCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkdlb3JnaWFuXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIuGDpeGDkOGDoOGDl+GDo+GDmuGDmFwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiU291dGggQ2F1Y2FzaWFuXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiR0VPXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJrYS1HRVwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJHZW9yZ2lhbiAtIEdlb3JnaWFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDM3XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImRlXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiZGV1XCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJnZXJcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJkZXVcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiR2VybWFuXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIkRldXRzY2hcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkluZG8tRXVyb3BlYW5cIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJBVVRcIixcbiAgICAgICAgXCJCRUxcIixcbiAgICAgICAgXCJERVVcIixcbiAgICAgICAgXCJMSUVcIixcbiAgICAgICAgXCJMVVhcIixcbiAgICAgICAgXCJJVEFcIixcbiAgICAgICAgXCJDSEVcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImRlLUFUXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkdlcm1hbiAtIEF1c3RyaWFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwQzA3XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZGUtREVcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiR2VybWFuIC0gR2VybWFueVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MDdcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJkZS1MSVwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJHZXJtYW4gLSBMaWVjaHRlbnN0ZWluXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MTQwN1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImRlLUxVXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkdlcm1hbiAtIEx1eGVtYm91cmdcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgxMDA3XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZGUtQ0hcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiR2VybWFuIC0gU3dpdHplcmxhbmRcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwODA3XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImVsXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiZWxsXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJncmVcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJlbGxcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiR3JlZWtcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwizrXOu867zrfOvc65zrrOrFwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiSW5kby1FdXJvcGVhblwiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIkdSQ1wiLFxuICAgICAgICBcIkNZUFwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZWwtR1JcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiR3JlZWsgLSBHcmVlY2VcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDA4XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImduXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiZ3JuXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJncm5cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJncm5cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiR3VhcmFuw61cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiQXZhw7FlJ+G6vVwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiVHVwaWFuXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiUFJZXCIsXG4gICAgICAgIFwiQk9MXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJndVwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImd1alwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiZ3VqXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiZ3VqXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkd1amFyYXRpXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIuCql+CrgeCqnOCqsOCqvuCqpOCrgFwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiSW5kby1FdXJvcGVhblwiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIklORFwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZ3UtSU5cIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiR3VqYXJhdGkgLSBJbmRpYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0NDdcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiaHRcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJoYXRcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImhhdFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImhhdFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJIYWl0aWFuXCIsXG4gICAgICAgIFwiSGFpdGlhbiBDcmVvbGVcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiS3JlecOybCBheWlzeWVuXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJDcmVvbGVcIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJIVElcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImhhXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiaGF1XCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJoYXVcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJoYXVcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiSGF1c2FcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiKEhhdXNhKSDZh9mO2YjZj9iz2Y5cIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkFmcm8tQXNpYXRpY1wiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIk5FUlwiLFxuICAgICAgICBcIk5HQVwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiaGVcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJoZWJcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImhlYlwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImhlYlwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJIZWJyZXdcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwi16LXkdeo15nXqlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJSVExcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiQWZyby1Bc2lhdGljXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiSVNSXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJoZS1JTFwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJIZWJyZXcgLSBJc3JhZWxcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDBEXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImh6XCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiaGVyXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJoZXJcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJoZXJcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiSGVyZXJvXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIk90amloZXJlcm9cIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIk5pZ2Vy4oCTQ29uZ29cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImhpXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiaGluXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJoaW5cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJoaW5cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiSGluZGlcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwi4KS54KS/4KSo4KWN4KSm4KWAXCIsXG4gICAgICAgIFwi4KS54KS/4KSC4KSm4KWAXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJJbmRvLUV1cm9wZWFuXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiSU5EXCIsXG4gICAgICAgIFwiRkpJXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJoaS1JTlwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJIaW5kaSAtIEluZGlhXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQzOVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJob1wiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImhtb1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiaG1vXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiaG1vXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkhpcmkgTW90dVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJIaXJpIE1vdHVcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkF1c3Ryb25lc2lhblwiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIlBOR1wiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiaHVcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJodW5cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImh1blwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImh1blwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJIdW5nYXJpYW5cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwibWFneWFyXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJVcmFsaWNcIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJIVU5cIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImh1LUhVXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkh1bmdhcmlhbiAtIEh1bmdhcnlcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDBFXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImlhXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiaW5hXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJpbmFcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJpbmFcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiSW50ZXJsaW5ndWFcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiSW50ZXJsaW5ndWFcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkNvbnN0cnVjdGVkXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJpZFwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImluZFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiaW5kXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiaW5kXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkluZG9uZXNpYW5cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiQmFoYXNhIEluZG9uZXNpYVwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiQXVzdHJvbmVzaWFuXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiSUROXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJpZC1JRFwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJJbmRvbmVzaWFuIC0gSW5kb25lc2lhXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQyMVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJpZVwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImlsZVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiaWxlXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiaWxlXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkludGVybGluZ3VlXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIkludGVybGluZ3VlXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJDb25zdHJ1Y3RlZFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiZ2FcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJnbGVcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImdsZVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImdsZVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJJcmlzaFwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJHYWVpbGdlXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJJbmRvLUV1cm9wZWFuXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiSVJMXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJpZ1wiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImlib1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiaWJvXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiaWJvXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIklnYm9cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiQXPhu6Vz4bulIElnYm9cIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIk5pZ2Vy4oCTQ29uZ29cIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJOR0FcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImlrXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiaXBrXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJpcGtcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJpcGtcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiSW51cGlhcVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJJw7F1cGlhcVwiLFxuICAgICAgICBcIknDsXVwaWF0dW5cIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkVza2ltb+KAk0FsZXV0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJpb1wiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImlkb1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiaWRvXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiaWRvXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIklkb1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJJZG9cIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkNvbnN0cnVjdGVkXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJpc1wiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImlzbFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiaWNlXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiaXNsXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkljZWxhbmRpY1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCLDjXNsZW5za2FcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkluZG8tRXVyb3BlYW5cIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJJU0xcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImlzLUlTXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkljZWxhbmRpYyAtIEljZWxhbmRcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDBGXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIml0XCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiaXRhXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJpdGFcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJpdGFcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiSXRhbGlhblwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJpdGFsaWFub1wiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiSW5kby1FdXJvcGVhblwiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIklUQVwiLFxuICAgICAgICBcIkhSVlwiLFxuICAgICAgICBcIlNNUlwiLFxuICAgICAgICBcIlNWTlwiLFxuICAgICAgICBcIkNIRVwiLFxuICAgICAgICBcIlZBVFwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiaXQtSVRcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiSXRhbGlhbiAtIEl0YWx5XCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQxMFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcIml0LUNIXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkl0YWxpYW4gLSBTd2l0emVybGFuZFwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA4MTBcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiaXVcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJpa3VcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImlrdVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImlrdVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJJbnVrdGl0dXRcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwi4ZCD4ZOE4ZKD4ZGO4ZGQ4ZGmXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJFc2tpbW/igJNBbGV1dFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiamFcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJqcG5cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImpwblwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImpwblwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJKYXBhbmVzZVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCLml6XmnKzoqp4gKOOBq+OBu+OCk+OBlClcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkphcG9uaWNcIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJKUE5cIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImphLUpQXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkphcGFuZXNlIC0gSmFwYW5cIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDExXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImp2XCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiamF2XCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJqYXZcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJqYXZcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiSmF2YW5lc2VcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiYmFzYSBKYXdhXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJBdXN0cm9uZXNpYW5cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImtsXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwia2FsXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJrYWxcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJrYWxcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiS2FsYWFsbGlzdXRcIixcbiAgICAgICAgXCJHcmVlbmxhbmRpY1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJrYWxhYWxsaXN1dFwiLFxuICAgICAgICBcImthbGFhbGxpdCBvcWFhc2lpXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJFc2tpbW/igJNBbGV1dFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwia25cIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJrYW5cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImthblwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImthblwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJLYW5uYWRhXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIuCyleCyqOCzjeCyqOCyoVwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiRHJhdmlkaWFuXCIsXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJrbi1JTlwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJLYW5uYWRhIC0gSW5kaWFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDRCXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImtyXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwia2F1XCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJrYXVcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJrYXVcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiS2FudXJpXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIkthbnVyaVwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiTmlsby1TYWhhcmFuXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiTkVSXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJrc1wiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImthc1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwia2FzXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwia2FzXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkthc2htaXJpXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIuCkleCktuCljeCkruClgOCksOClgFwiLFxuICAgICAgICBcItmD2LTZhdmK2LHZiuKAjlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiSW5kby1FdXJvcGVhblwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwia2tcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJrYXpcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImthelwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImthelwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJLYXpha2hcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwi0pvQsNC30LDSmyDRgtGW0LvRllwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiVHVya2ljXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiS0FaXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJray1LWlwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJLYXpha2ggLSBLYXpha2hzdGFuXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQzRlwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJrbVwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImtobVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwia2htXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwia2htXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIktobWVyXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIuGegeGfkuGemOGfguGemlwiLFxuICAgICAgICBcIuGegeGfgeGemOGemuGel+GetuGen+GetlwiLFxuICAgICAgICBcIuGel+GetuGen+GetuGegeGfkuGemOGfguGemlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiQXVzdHJvYXNpYXRpY1wiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIktITVwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwia2lcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJraWtcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImtpa1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImtpa1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJLaWt1eXVcIixcbiAgICAgICAgXCJHaWt1eXVcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiR8Spa8WpecWpXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJOaWdlcuKAk0NvbmdvXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJyd1wiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImtpblwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwia2luXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwia2luXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIktpbnlhcndhbmRhXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIklraW55YXJ3YW5kYVwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiTmlnZXLigJNDb25nb1wiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIlJXQVwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwia3lcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJraXJcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImtpclwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImtpclwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJLeXJneXpcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwi0JrRi9GA0LPRi9C30YfQsFwiLFxuICAgICAgICBcItCa0YvRgNCz0YvQtyDRgtC40LvQuFwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiVHVya2ljXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiS0daXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJreS1LWlwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJLeXJneXogLSBLYXpha2hzdGFuXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQ0MFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJrdlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImtvbVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwia29tXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwia29tXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIktvbWlcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwi0LrQvtC80Lgg0LrRi9CyXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJVcmFsaWNcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImtnXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwia29uXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJrb25cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJrb25cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiS29uZ29cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiS2lrb25nb1wiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiTmlnZXLigJNDb25nb1wiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIkFHT1wiLFxuICAgICAgICBcIkNPRFwiLFxuICAgICAgICBcIkNPR1wiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwia29cIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJrb3JcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImtvclwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImtvclwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJLb3JlYW5cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwi7ZWc6rWt7Ja0XCIsXG4gICAgICAgIFwi7KGw7ISg7Ja0XCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJLb3JlYW5pY1wiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIlBSS1wiLFxuICAgICAgICBcIktPUlwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwia28tS1JcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiS29yZWFuIC0gS29yZWFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDEyXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImt1XCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwia3VyXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJrdXJcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJrdXJcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiS3VyZGlzaFwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJLdXJkw65cIixcbiAgICAgICAgXCLZg9mI2LHYr9uM4oCOXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIlJUTFwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJJbmRvLUV1cm9wZWFuXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiSVJRXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJralwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImt1YVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwia3VhXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwia3VhXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkt3YW55YW1hXCIsXG4gICAgICAgIFwiS3VhbnlhbWFcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiS3VhbnlhbWFcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIk5pZ2Vy4oCTQ29uZ29cIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJBR09cIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImxhXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibGF0XCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJsYXRcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJsYXRcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTGF0aW5cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwibGF0aW5lXCIsXG4gICAgICAgIFwibGluZ3VhIGxhdGluYVwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiSW5kby1FdXJvcGVhblwiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIlZBVFwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwibGJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJsdHpcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImx0elwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImx0elwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJMdXhlbWJvdXJnaXNoXCIsXG4gICAgICAgIFwiTGV0emVidXJnZXNjaFwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJMw6t0emVidWVyZ2VzY2hcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkluZG8tRXVyb3BlYW5cIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJMVVhcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImxnXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibHVnXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJsdWdcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJsdWdcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiR2FuZGFcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiTHVnYW5kYVwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiTmlnZXLigJNDb25nb1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwibGlcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJsaW1cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImxpbVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImxpbVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJMaW1idXJnaXNoXCIsXG4gICAgICAgIFwiTGltYnVyZ2FuXCIsXG4gICAgICAgIFwiTGltYnVyZ2VyXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIkxpbWJ1cmdzXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJJbmRvLUV1cm9wZWFuXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJsblwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImxpblwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwibGluXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibGluXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkxpbmdhbGFcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiTGluZ8OhbGFcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIk5pZ2Vy4oCTQ29uZ29cIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJDT0RcIixcbiAgICAgICAgXCJDT0dcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImxvXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibGFvXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJsYW9cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJsYW9cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTGFvXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIuC6nuC6suC6quC6suC6peC6suC6p1wiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiVGFp4oCTS2FkYWlcIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJMQU9cIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImx0XCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibGl0XCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJsaXRcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJsaXRcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTGl0aHVhbmlhblwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJsaWV0dXZpxbMga2FsYmFcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkluZG8tRXVyb3BlYW5cIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJMVFVcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImx0LUxUXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkxpdGh1YW5pYW4gLSBMaXRodWFuaWFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDI3XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImx1XCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibHViXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJsdWJcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJsdWJcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTHViYS1LYXRhbmdhXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlRzaGlsdWJhXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJOaWdlcuKAk0NvbmdvXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiQ09EXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJsdlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImxhdlwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwibGF2XCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibGF2XCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkxhdHZpYW5cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwibGF0dmllxaF1IHZhbG9kYVwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiSW5kby1FdXJvcGVhblwiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIkxWQVwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwibHYtTFZcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiTGF0dmlhbiAtIExhdHZpYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MjZcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiZ3ZcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJnbHZcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImdsdlwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImdsdlwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJNYW54XCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIkdhZWxnXCIsXG4gICAgICAgIFwiR2FpbGNrXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJJbmRvLUV1cm9wZWFuXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJta1wiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIm1rZFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwibWFjXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibWtkXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIk1hY2Vkb25pYW5cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwi0LzQsNC60LXQtNC+0L3RgdC60Lgg0ZjQsNC30LjQulwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiSW5kby1FdXJvcGVhblwiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIk1LRFwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwibWstTUtcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiTWFjZWRvbmlhbiAoRllST00pXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQyRlwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJtZ1wiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIm1sZ1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwibWxnXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibWxnXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIk1hbGFnYXN5XCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcImZpdGVueSBtYWxhZ2FzeVwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiQXVzdHJvbmVzaWFuXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiTURHXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJtc1wiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIm1zYVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwibWF5XCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibXNhXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIk1hbGF5XCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcImJhaGFzYSBNZWxheXVcIixcbiAgICAgICAgXCLYqNmH2KfYsyDZhdmE2KfZitmI4oCOXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJBdXN0cm9uZXNpYW5cIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJNWVNcIixcbiAgICAgICAgXCJCUk5cIixcbiAgICAgICAgXCJTR1BcIixcbiAgICAgICAgXCJJRE5cIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcIm1zLUJOXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIk1hbGF5IC0gQnJ1bmVpXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDgzRVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcIm1zLU1ZXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIk1hbGF5IC0gTWFsYXlzaWFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDNFXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIm1sXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibWFsXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJtYWxcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJtYWxcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTWFsYXlhbGFtXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIuC0ruC0suC0r+C0vuC0s+C0glwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiRHJhdmlkaWFuXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJtdFwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIm1sdFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwibWx0XCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibWx0XCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIk1hbHRlc2VcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiTWFsdGlcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkFmcm8tQXNpYXRpY1wiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIk1MVFwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwibWlcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJtcmlcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcIm1hb1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcIm1yaVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJNxIFvcmlcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwidGUgcmVvIE3EgW9yaVwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiQXVzdHJvbmVzaWFuXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiTlpMXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJtclwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIm1hclwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwibWFyXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibWFyXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIk1hcmF0aGkgKE1hcsSB4bmtaMSrKVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCLgpK7gpLDgpL7gpKDgpYBcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkluZG8tRXVyb3BlYW5cIixcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcIm1yLUlOXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIk1hcmF0aGkgLSBJbmRpYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0NEVcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwibWhcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJtYWhcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcIm1haFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcIm1haFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJNYXJzaGFsbGVzZVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJLYWppbiBNzKdhamXEvFwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiQXVzdHJvbmVzaWFuXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiTUhMXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJtblwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIm1vblwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwibW9uXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibW9uXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIk1vbmdvbGlhblwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCLQvNC+0L3Qs9C+0LtcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIk1vbmdvbGljXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiTU5HXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJtbi1NTlwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJNb25nb2xpYW4gLSBNb25nb2xpYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0NTBcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwibmFcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJuYXVcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcIm5hdVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcIm5hdVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJOYXVydVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJFa2FrYWlyxakgTmFvZXJvXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJBdXN0cm9uZXNpYW5cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIm52XCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibmF2XCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJuYXZcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJuYXZcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTmF2YWpvXCIsXG4gICAgICAgIFwiTmF2YWhvXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIkRpbsOpIGJpemFhZFwiLFxuICAgICAgICBcIkRpbsOpa8q8ZWjHsMOtXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJEZW7DqeKAk1llbmlzZWlhblwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwibmJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJub2JcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcIm5vYlwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcIm5vYlwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJOb3J3ZWdpYW4gQm9rbcOlbFwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJOb3JzayBib2ttw6VsXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJJbmRvLUV1cm9wZWFuXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiTk9SXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJuYi1OT1wiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJOb3J3ZWdpYW4gKEJva23DpWwpIC0gTm9yd2F5XCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQxNFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJuZFwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIm5kZVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwibmRlXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibmRlXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIk5vcnRoZXJuIE5kZWJlbGVcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiaXNpTmRlYmVsZVwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiTmlnZXLigJNDb25nb1wiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIlpBRlwiLFxuICAgICAgICBcIlpXRVwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibnNvXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJuc29cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJuc29cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTm9ydGhlcm4gU290aG9cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiU2Vzb3RobyBzYSBMZWJvYVwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiTmlnZXItQ29uZ29cIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJaQUZcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIm5lXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibmVwXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJuZXBcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJuZXBcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTmVwYWxpXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIuCkqOClh+CkquCkvuCksuClgFwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiSW5kby1FdXJvcGVhblwiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIk5QTFwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwibmdcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJuZG9cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcIm5kb1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcIm5kb1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJOZG9uZ2FcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiT3dhbWJvXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJOaWdlcuKAk0NvbmdvXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJublwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIm5ub1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwibm5vXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibm5vXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIk5vcndlZ2lhbiBOeW5vcnNrXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIk5vcnNrIG55bm9yc2tcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkluZG8tRXVyb3BlYW5cIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJOT1JcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcIm5uLU5PXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIk5vcndlZ2lhbiAoTnlub3JzaykgLSBOb3J3YXlcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwODE0XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIm5vXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibm9yXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJub3JcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJub3JcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTm9yd2VnaWFuXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIk5vcnNrXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJJbmRvLUV1cm9wZWFuXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiTk9SXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJpaVwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImlpaVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiaWlpXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiaWlpXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIk51b3N1XCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIk51b3N1aHhvcFwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiU2luby1UaWJldGFuXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJuclwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIm5ibFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwibmJsXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibmJsXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlNvdXRoZXJuIE5kZWJlbGVcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiaXNpTmRlYmVsZVwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiTmlnZXLigJNDb25nb1wiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIlpBRlwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwib2NcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJvY2lcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcIm9jaVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcIm9jaVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJPY2NpdGFuXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIm9jY2l0YW5cIixcbiAgICAgICAgXCJsZW5nYSBkJ8OyY1wiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiSW5kby1FdXJvcGVhblwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwib2pcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJvamlcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcIm9qaVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcIm9qaVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJPamlid2VcIixcbiAgICAgICAgXCJPamlid2FcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwi4ZCK4ZOC4ZSR4ZOI4ZCv4ZKn4ZCO4ZOQXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJBbGdvbnF1aWFuXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJjdVwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImNodVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiY2h1XCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiY2h1XCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIk9sZCBDaHVyY2ggU2xhdm9uaWNcIixcbiAgICAgICAgXCJDaHVyY2ggU2xhdm9uaWNcIixcbiAgICAgICAgXCJPbGQgQnVsZ2FyaWFuXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcItGp0LfRi9C60Yog0YHQu9C+0LLRo9C90YzRgdC60YpcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkluZG8tRXVyb3BlYW5cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIm9tXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwib3JtXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJvcm1cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJvcm1cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiT3JvbW9cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiQWZhYW4gT3JvbW9vXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJBZnJvLUFzaWF0aWNcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIm9yXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwib3JpXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJvcmlcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJvcmlcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiT3JpeWFcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwi4KyT4Kyh4Ky84Ky/4KyGXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJJbmRvLUV1cm9wZWFuXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJvc1wiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIm9zc1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwib3NzXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwib3NzXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIk9zc2V0aWFuXCIsXG4gICAgICAgIFwiT3NzZXRpY1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCLQuNGA0L7QvSDDptCy0LfQsNCzXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJJbmRvLUV1cm9wZWFuXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcInBhXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwicGFuXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJwYW5cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJwYW5cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiUGFuamFiaVwiLFxuICAgICAgICBcIlB1bmphYmlcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwi4Kiq4Kmw4Kic4Ki+4Kis4KmAXCIsXG4gICAgICAgIFwi2b7Zhtis2KfYqNuM4oCOXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJJbmRvLUV1cm9wZWFuXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiSU5EXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJwYS1JTlwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJQdW5qYWJpIC0gSW5kaWFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDQ2XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcInBpXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwicGxpXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJwbGlcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJwbGlcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiUMSBbGlcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwi4KSq4KS+4KS04KS/XCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJJbmRvLUV1cm9wZWFuXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJmYVwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImZhc1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwicGVyXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiZmFzXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlBlcnNpYW5cIixcbiAgICAgICAgXCJGYXJzaVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCLZgdin2LHYs9uMXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIlJUTFwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJJbmRvLUV1cm9wZWFuXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiSVJOXCIsXG4gICAgICAgIFwiQUZHXCIsXG4gICAgICAgIFwiVEpLXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJmYS1JUlwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJGYXJzaSAtIElyYW5cIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDI5XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcInBsXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwicG9sXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJwb2xcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJwb2xcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiUG9saXNoXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcImrEmXp5ayBwb2xza2lcIixcbiAgICAgICAgXCJwb2xzemN6eXpuYVwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiSW5kby1FdXJvcGVhblwiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIlBPTFwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwicGwtUExcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiUG9saXNoIC0gUG9sYW5kXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQxNVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJwc1wiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInB1c1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwicHVzXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwicHVzXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlBhc2h0b1wiLFxuICAgICAgICBcIlB1c2h0b1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCLZvtqa2KrZiFwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJSVExcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiSW5kby1FdXJvcGVhblwiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIkFGR1wiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwicHRcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJwb3JcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInBvclwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInBvclwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJQb3J0dWd1ZXNlXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcInBvcnR1Z3XDqnNcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkluZG8tRXVyb3BlYW5cIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJBR09cIixcbiAgICAgICAgXCJCUkFcIixcbiAgICAgICAgXCJDUFZcIixcbiAgICAgICAgXCJUTFNcIixcbiAgICAgICAgXCJHTlFcIixcbiAgICAgICAgXCJHTkJcIixcbiAgICAgICAgXCJNQUNcIixcbiAgICAgICAgXCJNT1pcIixcbiAgICAgICAgXCJQUlRcIixcbiAgICAgICAgXCJTVFBcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcInB0LUJSXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlBvcnR1Z3Vlc2UgLSBCcmF6aWxcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDE2XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwicHQtUFRcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiUG9ydHVndWVzZSAtIFBvcnR1Z2FsXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDgxNlwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJxdVwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInF1ZVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwicXVlXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwicXVlXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlF1ZWNodWFcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiUnVuYSBTaW1pXCIsXG4gICAgICAgIFwiS2ljaHdhXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJRdWVjaHVhblwiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIkJPTFwiLFxuICAgICAgICBcIlBFUlwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwicm1cIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJyb2hcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInJvaFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInJvaFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJSb21hbnNoXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcInJ1bWFudHNjaCBncmlzY2h1blwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiSW5kby1FdXJvcGVhblwiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIkNIRVwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwicm5cIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJydW5cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInJ1blwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInJ1blwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJLaXJ1bmRpXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIklraXJ1bmRpXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJOaWdlcuKAk0NvbmdvXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiQkRJXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJyb1wiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInJvblwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwicnVtXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwicm9uXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlJvbWFuaWFuXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcImxpbWJhIHJvbcOibsSDXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJJbmRvLUV1cm9wZWFuXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiUk9VXCIsXG4gICAgICAgIFwiTURBXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJyby1ST1wiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJSb21hbmlhbiAtIFJvbWFuaWFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDE4XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcInJ1XCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwicnVzXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJydXNcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJydXNcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiUnVzc2lhblwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCLRgNGD0YHRgdC60LjQuSDRj9C30YvQulwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiSW5kby1FdXJvcGVhblwiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIlJVU1wiLFxuICAgICAgICBcIkJMUlwiLFxuICAgICAgICBcIktBWlwiLFxuICAgICAgICBcIktHWlwiLFxuICAgICAgICBcIlRKS1wiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwicnUtUlVcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiUnVzc2lhbiAtIFJ1c3NpYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MTlcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwic2FcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJzYW5cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInNhblwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInNhblwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJTYW5za3JpdCAoU2HhuYFza+G5m3RhKVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCLgpLjgpILgpLjgpY3gpJXgpYPgpKTgpK7gpY1cIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkluZG8tRXVyb3BlYW5cIixcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcInNhLUlOXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlNhbnNrcml0IC0gSW5kaWFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDRGXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcInNjXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwic3JkXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJzcmRcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJzcmRcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiU2FyZGluaWFuXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcInNhcmR1XCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJJbmRvLUV1cm9wZWFuXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJzZFwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInNuZFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwic25kXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwic25kXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlNpbmRoaVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCLgpLjgpL/gpKjgpY3gpKfgpYBcIixcbiAgICAgICAgXCLYs9mG2ozZitiMINiz2YbYr9q+24zigI5cIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiUlRMXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkluZG8tRXVyb3BlYW5cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcInNlXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwic21lXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJzbWVcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJzbWVcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTm9ydGhlcm4gU2FtaVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJEYXZ2aXPDoW1lZ2llbGxhXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJVcmFsaWNcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcInNtXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwic21vXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJzbW9cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJzbW9cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiU2Ftb2FuXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcImdhZ2FuYSBmYSdhIFNhbW9hXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJBdXN0cm9uZXNpYW5cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcInNnXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwic2FnXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJzYWdcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJzYWdcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiU2FuZ29cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiecOibmfDoiB0w64gc8OkbmfDtlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiQ3Jlb2xlXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiQ0FGXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJzclwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInNycFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwic3JwXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwic3JwXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlNlcmJpYW5cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwi0YHRgNC/0YHQutC4INGY0LXQt9C40LpcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkluZG8tRXVyb3BlYW5cIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJTUkJcIixcbiAgICAgICAgXCJCSUhcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcIkN5LXNyLVNQXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlNlcmJpYW4gKEN5cmlsbGljKSAtIFNlcmJpYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDBDMUFcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJMdC1zci1TUFwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJTZXJiaWFuIChMYXRpbikgLSBTZXJiaWFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwODFBXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcImdkXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiZ2xhXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJnbGFcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJnbGFcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiU2NvdHRpc2ggR2FlbGljXCIsXG4gICAgICAgIFwiR2FlbGljXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIkfDoGlkaGxpZ1wiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiSW5kby1FdXJvcGVhblwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwic25cIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJzbmFcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInNuYVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInNuYVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJTaG9uYVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJjaGlTaG9uYVwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiTmlnZXLigJNDb25nb1wiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIlpXRVwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwic2lcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJzaW5cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInNpblwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInNpblwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJTaW5oYWxhXCIsXG4gICAgICAgIFwiU2luaGFsZXNlXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIuC3g+C3kuC2guC3hOC2vVwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiSW5kby1FdXJvcGVhblwiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIkxLQVwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwic2tcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJzbGtcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInNsb1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInNsa1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJTbG92YWtcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwic2xvdmVuxI1pbmFcIixcbiAgICAgICAgXCJzbG92ZW5za8O9IGphenlrXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJJbmRvLUV1cm9wZWFuXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiU1ZLXCIsXG4gICAgICAgIFwiQ1pFXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJzay1TS1wiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJTbG92YWsgLSBTbG92YWtpYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MUJcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwic2xcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJzbHZcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInNsdlwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInNsdlwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJTbG92ZW5lXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcInNsb3ZlbnNraSBqZXppa1wiLFxuICAgICAgICBcInNsb3ZlbsWhxI1pbmFcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkluZG8tRXVyb3BlYW5cIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJTVk5cIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcInNsLVNJXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlNsb3ZlbmlhbiAtIFNsb3ZlbmlhXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQyNFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJzb1wiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInNvbVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwic29tXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwic29tXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlNvbWFsaVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJTb29tYWFsaWdhXCIsXG4gICAgICAgIFwiYWYgU29vbWFhbGlcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkFmcm8tQXNpYXRpY1wiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIkRKSVwiLFxuICAgICAgICBcIlNPTVwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwic3RcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJzb3RcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInNvdFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInNvdFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJTb3V0aGVybiBTb3Rob1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJTZXNvdGhvXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJOaWdlcuKAk0NvbmdvXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiTFNPXCIsXG4gICAgICAgIFwiWkFGXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJlc1wiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInNwYVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwic3BhXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwic3BhXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlNwYW5pc2hcIixcbiAgICAgICAgXCJDYXN0aWxpYW5cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiZXNwYcOxb2xcIixcbiAgICAgICAgXCJjYXN0ZWxsYW5vXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJJbmRvLUV1cm9wZWFuXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiQVJHXCIsXG4gICAgICAgIFwiQk9MXCIsXG4gICAgICAgIFwiQ0hMXCIsXG4gICAgICAgIFwiQ09MXCIsXG4gICAgICAgIFwiQ1JJXCIsXG4gICAgICAgIFwiQ1VCXCIsXG4gICAgICAgIFwiRE9NXCIsXG4gICAgICAgIFwiRUNVXCIsXG4gICAgICAgIFwiU0xWXCIsXG4gICAgICAgIFwiR05RXCIsXG4gICAgICAgIFwiR1RNXCIsXG4gICAgICAgIFwiSE5EXCIsXG4gICAgICAgIFwiTUVYXCIsXG4gICAgICAgIFwiTklDXCIsXG4gICAgICAgIFwiUEFOXCIsXG4gICAgICAgIFwiUFJZXCIsXG4gICAgICAgIFwiUEVSXCIsXG4gICAgICAgIFwiUFJJXCIsXG4gICAgICAgIFwiRVNQXCIsXG4gICAgICAgIFwiVVJZXCIsXG4gICAgICAgIFwiVkVOXCIsXG4gICAgICAgIFwiRVNIXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJlcy1BUlwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJTcGFuaXNoIC0gQXJnZW50aW5hXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MkMwQVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImVzLUJPXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlNwYW5pc2ggLSBCb2xpdmlhXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4NDAwQVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImVzLUNMXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlNwYW5pc2ggLSBDaGlsZVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDM0MEFcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJlcy1DT1wiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJTcGFuaXNoIC0gQ29sb21iaWFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgyNDBBXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZXMtQ1JcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiU3BhbmlzaCAtIENvc3RhIFJpY2FcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgxNDBBXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZXMtRE9cIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiU3BhbmlzaCAtIERvbWluaWNhbiBSZXB1YmxpY1wiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDFDMEFcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJlcy1FQ1wiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJTcGFuaXNoIC0gRWN1YWRvclwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDMwMEFcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJlcy1TVlwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJTcGFuaXNoIC0gRWwgU2FsdmFkb3JcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHg0NDBBXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZXMtR1RcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiU3BhbmlzaCAtIEd1YXRlbWFsYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDEwMEFcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJlcy1ITlwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJTcGFuaXNoIC0gSG9uZHVyYXNcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHg0ODBBXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZXMtTVhcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiU3BhbmlzaCAtIE1leGljb1wiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA4MEFcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJlcy1OSVwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJTcGFuaXNoIC0gTmljYXJhZ3VhXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4NEMwQVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImVzLVBBXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlNwYW5pc2ggLSBQYW5hbWFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgxODBBXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZXMtUFlcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiU3BhbmlzaCAtIFBhcmFndWF5XCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4M0MwQVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImVzLVBFXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlNwYW5pc2ggLSBQZXJ1XCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MjgwQVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImVzLVBSXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlNwYW5pc2ggLSBQdWVydG8gUmljb1wiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDUwMEFcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJlcy1FU1wiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJTcGFuaXNoIC0gU3BhaW5cIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwQzBBXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZXMtVVlcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiU3BhbmlzaCAtIFVydWd1YXlcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgzODBBXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZXMtVkVcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiU3BhbmlzaCAtIFZlbmV6dWVsYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDIwMEFcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwic3VcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJzdW5cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInN1blwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInN1blwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJTdW5kYW5lc2VcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiQmFzYSBTdW5kYVwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiQXVzdHJvbmVzaWFuXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJzd1wiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInN3YVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwic3dhXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwic3dhXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlN3YWhpbGlcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiS2lzd2FoaWxpXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJOaWdlcuKAk0NvbmdvXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiQ09EXCIsXG4gICAgICAgIFwiS0VOXCIsXG4gICAgICAgIFwiVFpBXCIsXG4gICAgICAgIFwiVUdBXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJzdy1LRVwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJTd2FoaWxpIC0gS2VueWFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDQxXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcInNzXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwic3N3XCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJzc3dcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJzc3dcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiU3dhdGlcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiU2lTd2F0aVwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiTmlnZXLigJNDb25nb1wiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIlNXWlwiLFxuICAgICAgICBcIlpBRlwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwic3ZcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJzd2VcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInN3ZVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInN3ZVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJTd2VkaXNoXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlN2ZW5za2FcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkluZG8tRXVyb3BlYW5cIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJTV0VcIixcbiAgICAgICAgXCJGSU5cIixcbiAgICAgICAgXCJBTEFcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcInN2LUZJXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlN3ZWRpc2ggLSBGaW5sYW5kXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDgxRFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcInN2LVNFXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlN3ZWRpc2ggLSBTd2VkZW5cIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDFEXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcInRhXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwidGFtXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJ0YW1cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJ0YW1cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiVGFtaWxcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwi4K6k4K6u4K6/4K604K+NXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJEcmF2aWRpYW5cIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJJTkRcIixcbiAgICAgICAgXCJTR1BcIixcbiAgICAgICAgXCJMS0FcIixcbiAgICAgICAgXCJNWVNcIixcbiAgICAgICAgXCJNVVNcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcInRhLUlOXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlRhbWlsIC0gSW5kaWFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDQ5XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcInRlXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwidGVsXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJ0ZWxcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJ0ZWxcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiVGVsdWd1XCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIuCwpOCxhuCwsuCxgeCwl+CxgVwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiRHJhdmlkaWFuXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiSU5EXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJ0ZS1JTlwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJUZWx1Z3UgLSBJbmRpYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0NEFcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwidGdcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJ0Z2tcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInRna1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInRna1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJUYWppa1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCLRgtC+0rfQuNC606NcIixcbiAgICAgICAgXCJ0b8SfaWvEq1wiLFxuICAgICAgICBcItiq2KfYrNuM2qnbjOKAjlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiSW5kby1FdXJvcGVhblwiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIlRKS1wiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwidGhcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJ0aGFcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInRoYVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInRoYVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJUaGFpXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIuC5hOC4l+C4olwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiVGFp4oCTS2FkYWlcIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJUSEFcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcInRoLVRIXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlRoYWkgLSBUaGFpbGFuZFwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MUVcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwidGlcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJ0aXJcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInRpclwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInRpclwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJUaWdyaW55YVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCLhibXhjI3hiK3hiptcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkFmcm8tQXNpYXRpY1wiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIkVSSVwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiYm9cIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJib2RcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInRpYlwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImJvZFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJUaWJldGFuIFN0YW5kYXJkXCIsXG4gICAgICAgIFwiVGliZXRhblwiLFxuICAgICAgICBcIkNlbnRyYWxcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwi4L2W4L284L2R4LyL4L2h4L2y4L2CXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJTaW5vLVRpYmV0YW5cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcInRrXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwidHVrXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJ0dWtcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJ0dWtcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiVHVya21lblwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJUw7xya21lblwiLFxuICAgICAgICBcItCi0q/RgNC60LzQtdC9XCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJUdXJraWNcIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJUS01cIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcInRsXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwidGdsXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJ0Z2xcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJ0Z2xcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiVGFnYWxvZ1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJXaWthbmcgVGFnYWxvZ1wiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiQXVzdHJvbmVzaWFuXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiUEhMXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJmaWxcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImZpbFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImZpbFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJGaWxpcGlub1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJGaWxpcGlub1wiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiQXVzdHJvbmVzaWFuXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiUEhMXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJ0blwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInRzblwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwidHNuXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwidHNuXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlRzd2FuYVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJTZXRzd2FuYVwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiTmlnZXLigJNDb25nb1wiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIkJXQVwiLFxuICAgICAgICBcIlpBRlwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwidG9cIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJ0b25cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInRvblwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInRvblwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJUb25nYSAoVG9uZ2EgSXNsYW5kcylcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiZmFrYSBUb25nYVwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiQXVzdHJvbmVzaWFuXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJ0clwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInR1clwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwidHVyXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwidHVyXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlR1cmtpc2hcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiVMO8cmvDp2VcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlR1cmtpY1wiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIlRVUlwiLFxuICAgICAgICBcIkNZUFwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwidHItVFJcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiVHVya2lzaCAtIFR1cmtleVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MUZcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwidHNcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJ0c29cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInRzb1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInRzb1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJUc29uZ2FcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiWGl0c29uZ2FcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIk5pZ2Vy4oCTQ29uZ29cIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJaQUZcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcInR0XCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwidGF0XCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJ0YXRcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJ0YXRcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiVGF0YXJcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwi0YLQsNGC0LDRgCDRgtC10LvQtVwiLFxuICAgICAgICBcInRhdGFyIHRlbGVcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlR1cmtpY1wiLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwidHQtUlVcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiVGF0YXIgLSBSdXNzaWFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDQ0XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcInR3XCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwidHdpXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJ0d2lcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJ0d2lcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiVHdpXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlR3aVwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiTmlnZXLigJNDb25nb1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwidHlcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJ0YWhcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInRhaFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInRhaFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJUYWhpdGlhblwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJSZW8gVGFoaXRpXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJBdXN0cm9uZXNpYW5cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcInVnXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwidWlnXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJ1aWdcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJ1aWdcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiVXlnaHVyXCIsXG4gICAgICAgIFwiVWlnaHVyXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlV5xqN1cnHJmVwiLFxuICAgICAgICBcItim24fZiti624fYsdqG25XigI5cIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiUlRMXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlR1cmtpY1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwidWtcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJ1a3JcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInVrclwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInVrclwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJVa3JhaW5pYW5cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwi0YPQutGA0LDRl9C90YHRjNC60LAg0LzQvtCy0LBcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkluZG8tRXVyb3BlYW5cIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJVS1JcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcInVrLVVBXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlVrcmFpbmlhbiAtIFVrcmFpbmVcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDIyXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcInVyXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwidXJkXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJ1cmRcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJ1cmRcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiVXJkdVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCLYp9ix2K/ZiFwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJSVExcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiSW5kby1FdXJvcGVhblwiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIlBBS1wiLFxuICAgICAgICBcIkZKSVwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwidXItUEtcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiVXJkdSAtIFBha2lzdGFuXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQyMFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJ1elwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInV6YlwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwidXpiXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwidXpiXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlV6YmVrXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIk/igJh6YmVrXCIsXG4gICAgICAgIFwi0I7Qt9Cx0LXQulwiLFxuICAgICAgICBcItij24fYstio25DZg+KAjlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiVHVya2ljXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiVVpCXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJDeS11ei1VWlwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJVemJlayAoQ3lyaWxsaWMpIC0gVXpiZWtpc3RhblwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA4NDNcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJMdC11ei1VWlwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJVemJlayAoTGF0aW4pIC0gVXpiZWtpc3RhblwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0NDNcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwidmVcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJ2ZW5cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInZlblwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInZlblwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJWZW5kYVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJUc2hpdmVu4biTYVwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiTmlnZXLigJNDb25nb1wiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIlpBRlwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwidmlcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJ2aWVcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInZpZVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInZpZVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJWaWV0bmFtZXNlXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlRp4bq/bmcgVmnhu4d0XCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJBdXN0cm9hc2lhdGljXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiVk5NXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJ2aS1WTlwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJWaWV0bmFtZXNlIC0gVmlldG5hbVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MkFcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwidm9cIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJ2b2xcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInZvbFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInZvbFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJWb2xhcMO8a1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJWb2xhcMO8a1wiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiQ29uc3RydWN0ZWRcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIndhXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwid2xuXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJ3bG5cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJ3bG5cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiV2FsbG9vblwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJ3YWxvblwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiSW5kby1FdXJvcGVhblwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiY3lcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJjeW1cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcIndlbFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImN5bVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJXZWxzaFwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJDeW1yYWVnXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJJbmRvLUV1cm9wZWFuXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiR0JSXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJ3b1wiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIndvbFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwid29sXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwid29sXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIldvbG9mXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIldvbGxvZlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3Rpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiTmlnZXLigJNDb25nb1wiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIlNFTlwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiZnlcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJmcnlcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImZyeVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImZyeVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJXZXN0ZXJuIEZyaXNpYW5cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiRnJ5c2tcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkluZG8tRXVyb3BlYW5cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcInhoXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwieGhvXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJ4aG9cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJ4aG9cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiWGhvc2FcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiaXNpWGhvc2FcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIk5pZ2Vy4oCTQ29uZ29cIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJaQUZcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcInlpXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwieWlkXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJ5aWRcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJ5aWRcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiWWlkZGlzaFwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCLXmdeZ1rTXk9eZ16lcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiUlRMXCIsXG4gICAgICBcImZhbWlseVwiOiBcIkluZG8tRXVyb3BlYW5cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcInlvXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwieW9yXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJ5b3JcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJ5b3JcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiWW9ydWJhXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIllvcsO5YsOhXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJOaWdlcuKAk0NvbmdvXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiQkVOXCIsXG4gICAgICAgIFwiTkdBXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJ6YVwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInpoYVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiemhhXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiemhhXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlpodWFuZ1wiLFxuICAgICAgICBcIkNodWFuZ1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJTYcmvIGN1ZcWLxoVcIixcbiAgICAgICAgXCJTYXcgY3VlbmdoXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdGlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJUYWnigJNLYWRhaVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwienVcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJ6dWxcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInp1bFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInp1bFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJadWx1XCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcImlzaVp1bHVcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0aW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIk5pZ2Vy4oCTQ29uZ29cIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJaQUZcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImFjZVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiYWNlXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiYWNlXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkFjaGluZXNlXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiYWNoXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJhY2hcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJhY2hcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiQWNvbGlcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJhZGFcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImFkYVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImFkYVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJBZGFuZ21lXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiYWR5XCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJhZHlcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJhZHlcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiQWR5Z2hlXCIsXG4gICAgICAgIFwiIEFkeWdlaVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImFmYVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiYWZhXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiYWZhXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkFmcm8tQXNpYXRpYyBsYW5ndWFnZXNcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJhZmhcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImFmaFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImFmaFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJBZnJpaGlsaVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImFpblwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiYWluXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiYWluXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkFpbnVcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJha2tcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImFra1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImFra1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJBa2thZGlhblwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImFsZVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiYWxlXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiYWxlXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkFsZXV0XCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiYWxnXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJhbGdcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJhbGdcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiQWxnb25xdWlhbiBsYW5ndWFnZXNcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJhbHRcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImFsdFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImFsdFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJTb3V0aGVybiBBbHRhaVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImFuZ1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiYW5nXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiYW5nXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkVuZ2xpc2gsIE9sZCAoY2EuNDUwLTExMDApXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiYW5wXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJhbnBcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJhbnBcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiQW5naWthXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiYXBhXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJhcGFcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJhcGFcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiQXBhY2hlIGxhbmd1YWdlc1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImFyY1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiYXJjXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiYXJjXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIk9mZmljaWFsIEFyYW1haWMgKDcwMC0zMDAgQkNFKVwiLFxuICAgICAgICBcIiBJbXBlcmlhbCBBcmFtYWljICg3MDAtMzAwIEJDRSlcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJSVExcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJhcm5cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImFyblwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImFyblwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJNYXB1ZHVuZ3VuXCIsXG4gICAgICAgIFwiIE1hcHVjaGVcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJhcnBcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImFycFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImFycFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJBcmFwYWhvXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiYXJ0XCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJhcnRcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJhcnRcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiQXJ0aWZpY2lhbCBsYW5ndWFnZXNcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJhcndcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImFyd1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImFyd1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJBcmF3YWtcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJhc3RcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImFzdFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImFzdFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJBc3R1cmlhblwiLFxuICAgICAgICBcIiBCYWJsZVwiLFxuICAgICAgICBcIiBMZW9uZXNlXCIsXG4gICAgICAgIFwiIEFzdHVybGVvbmVzZVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImF0aFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiYXRoXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiYXRoXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkF0aGFwYXNjYW4gbGFuZ3VhZ2VzXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiYXVzXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJhdXNcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJhdXNcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiQXVzdHJhbGlhbiBsYW5ndWFnZXNcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJhd2FcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImF3YVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImF3YVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJBd2FkaGlcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJiYWRcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImJhZFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImJhZFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJCYW5kYSBsYW5ndWFnZXNcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJiYWlcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImJhaVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImJhaVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJCYW1pbGVrZSBsYW5ndWFnZXNcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJiYWxcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImJhbFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImJhbFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJCYWx1Y2hpXCIsXG4gICAgICAgIFwiQmFsb2NoaVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIlJUTFwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImJhblwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiYmFuXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiYmFuXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkJhbGluZXNlXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiYmFzXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJiYXNcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJiYXNcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiQmFzYVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImJhdFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiYmF0XCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiYmF0XCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkJhbHRpYyBsYW5ndWFnZXNcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJiZWpcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImJlalwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImJlalwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJCZWphXCIsXG4gICAgICAgIFwiIEJlZGF3aXlldFwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImJlbVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiYmVtXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiYmVtXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkJlbWJhXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiYmhvXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJiaG9cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJiaG9cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiQmhvanB1cmlcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJiaWtcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImJpa1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImJpa1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJCaWtvbFwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImJpblwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiYmluXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiYmluXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkJpbmlcIixcbiAgICAgICAgXCIgRWRvXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiYmxhXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJibGFcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJibGFcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiU2lrc2lrYVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImJudFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiYm50XCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiYm50XCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkJhbnR1IGxhbmd1YWdlc1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImJyYVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiYnJhXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiYnJhXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkJyYWpcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJidGtcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImJ0a1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImJ0a1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJCYXRhayBsYW5ndWFnZXNcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJidWFcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImJ1YVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImJ1YVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJCdXJpYXRcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJidWdcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImJ1Z1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImJ1Z1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJCdWdpbmVzZVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImJ5blwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiYnluXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiYnluXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkJsaW5cIixcbiAgICAgICAgXCIgQmlsaW5cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJjYWRcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImNhZFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImNhZFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJDYWRkb1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImNhaVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiY2FpXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiY2FpXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkNlbnRyYWwgQW1lcmljYW4gSW5kaWFuIGxhbmd1YWdlc1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImNhclwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiY2FyXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiY2FyXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkdhbGliaSBDYXJpYlwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImNhdVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiY2F1XCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiY2F1XCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkNhdWNhc2lhbiBsYW5ndWFnZXNcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJjZWJcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImNlYlwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImNlYlwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJDZWJ1YW5vXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiY2VsXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJjZWxcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJjZWxcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiQ2VsdGljIGxhbmd1YWdlc1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImNoYlwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiY2hiXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiY2hiXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkNoaWJjaGFcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJjaGdcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImNoZ1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImNoZ1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJDaGFnYXRhaVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImNoa1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiY2hrXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiY2hrXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkNodXVrZXNlXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiY2htXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJjaG1cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJjaG1cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTWFyaVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImNoblwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiY2huXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiY2huXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkNoaW5vb2sgamFyZ29uXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiY2hvXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJjaG9cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJjaG9cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiQ2hvY3Rhd1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImNocFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiY2hwXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiY2hwXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkNoaXBld3lhblwiLFxuICAgICAgICBcIiBEZW5lIFN1bGluZVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImNoclwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiY2hyXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiY2hyXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkNoZXJva2VlXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiY2h5XCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJjaHlcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJjaHlcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiQ2hleWVubmVcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJjbWNcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImNtY1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImNtY1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJDaGFtaWMgbGFuZ3VhZ2VzXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiY29wXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJjb3BcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJjb3BcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiQ29wdGljXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiY3BlXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJjcGVcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJjcGVcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiQ3Jlb2xlcyBhbmQgcGlkZ2lucywgRW5nbGlzaCBiYXNlZFwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImNwZlwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiY3BmXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiY3BmXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkNyZW9sZXMgYW5kIHBpZGdpbnMsIEZyZW5jaC1iYXNlZFwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImNwcFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiY3BwXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiY3BwXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkNyZW9sZXMgYW5kIHBpZGdpbnMsIFBvcnR1Z3Vlc2UtYmFzZWRcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJjcmhcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImNyaFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImNyaFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJDcmltZWFuIFRhdGFyXCIsXG4gICAgICAgIFwiIENyaW1lYW4gVHVya2lzaFwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImNycFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiY3JwXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiY3JwXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkNyZW9sZXMgYW5kIHBpZGdpbnNcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJjc2JcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImNzYlwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImNzYlwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJLYXNodWJpYW5cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJjdXNcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImN1c1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImN1c1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJDdXNoaXRpYyBsYW5ndWFnZXNcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJkYWtcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImRha1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImRha1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJEYWtvdGFcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJkYXJcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImRhclwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImRhclwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJEYXJnd2FcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJkYXlcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImRheVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImRheVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJMYW5kIERheWFrIGxhbmd1YWdlc1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImRlbFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiZGVsXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiZGVsXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkRlbGF3YXJlXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiZGVuXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJkZW5cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJkZW5cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiU2xhdmUgKEF0aGFwYXNjYW4pXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiZGdyXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJkZ3JcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJkZ3JcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiRG9ncmliXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiZGluXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJkaW5cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJkaW5cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiRGlua2FcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJkb2lcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImRvaVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImRvaVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJEb2dyaVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImRyYVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiZHJhXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiZHJhXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkRyYXZpZGlhbiBsYW5ndWFnZXNcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJkc2JcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImRzYlwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImRzYlwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJMb3dlciBTb3JiaWFuXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiZHVhXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJkdWFcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJkdWFcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiRHVhbGFcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJkdW1cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImR1bVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImR1bVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJEdXRjaCwgTWlkZGxlIChjYS4xMDUwLTEzNTApXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiZHl1XCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJkeXVcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJkeXVcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiRHl1bGFcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJlZmlcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImVmaVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImVmaVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJFZmlrXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiZWd5XCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJlZ3lcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJlZ3lcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiRWd5cHRpYW4gKEFuY2llbnQpXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiZWthXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJla2FcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJla2FcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiRWthanVrXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiZWx4XCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJlbHhcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJlbHhcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiRWxhbWl0ZVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImVubVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiZW5tXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiZW5tXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkVuZ2xpc2gsIE1pZGRsZSAoMTEwMC0xNTAwKVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImV3b1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiZXdvXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiZXdvXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkV3b25kb1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImZhblwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiZmFuXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiZmFuXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkZhbmdcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJmYXRcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImZhdFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImZhdFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJGYW50aVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImZpdVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiZml1XCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiZml1XCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkZpbm5vLVVncmlhbiBsYW5ndWFnZXNcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJmb25cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImZvblwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImZvblwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJGb25cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJmcm1cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImZybVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImZybVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJGcmVuY2gsIE1pZGRsZSAoY2EuMTQwMC0xNjAwKVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImZyb1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiZnJvXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiZnJvXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkZyZW5jaCwgT2xkICg4NDItY2EuMTQwMClcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJmcnJcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImZyclwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImZyclwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJOb3J0aGVybiBGcmlzaWFuXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiZnJzXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJmcnNcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJmcnNcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiRWFzdGVybiBGcmlzaWFuXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiZnVyXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJmdXJcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJmdXJcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiRnJpdWxpYW5cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJnYWFcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImdhYVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImdhYVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJHYVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIixcbiAgICAgIFwiY291bnRyaWVzXCI6IFtcbiAgICAgICAgXCJHSEFcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImdheVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiZ2F5XCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiZ2F5XCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkdheW9cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJnYmFcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImdiYVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImdiYVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJHYmF5YVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImdlbVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiZ2VtXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiZ2VtXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkdlcm1hbmljIGxhbmd1YWdlc1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImdlelwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiZ2V6XCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiZ2V6XCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkdlZXpcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJnaWxcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImdpbFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImdpbFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJHaWxiZXJ0ZXNlXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiZ21oXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJnbWhcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJnbWhcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiR2VybWFuLCBNaWRkbGUgSGlnaCAoY2EuMTA1MC0xNTAwKVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImdvaFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiZ29oXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiZ29oXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkdlcm1hbiwgT2xkIEhpZ2ggKGNhLjc1MC0xMDUwKVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImdvblwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiZ29uXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiZ29uXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkdvbmRpXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiZ29yXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJnb3JcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJnb3JcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiR29yb250YWxvXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiZ290XCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJnb3RcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJnb3RcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiR290aGljXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiZ3JiXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJncmJcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJncmJcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiR3JlYm9cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJncmNcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImdyY1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImdyY1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJHcmVlaywgQW5jaWVudCAodG8gMTQ1MylcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJnc3dcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImdzd1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImdzd1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJTd2lzcyBHZXJtYW5cIixcbiAgICAgICAgXCIgQWxlbWFubmljXCIsXG4gICAgICAgIFwiIEFsc2F0aWFuXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiZ3dpXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJnd2lcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJnd2lcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiR3dpY2gnaW5cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJoYWlcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImhhaVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImhhaVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJIYWlkYVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImhhd1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiaGF3XCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiaGF3XCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkhhd2FpaWFuXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiaGlsXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJoaWxcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJoaWxcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiSGlsaWdheW5vblwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImhpbVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiaGltXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiaGltXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkhpbWFjaGFsaSBsYW5ndWFnZXNcIixcbiAgICAgICAgXCIgV2VzdGVybiBQYWhhcmkgbGFuZ3VhZ2VzXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiaGl0XCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJoaXRcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJoaXRcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiSGl0dGl0ZVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImhtblwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiaG1uXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiaG1uXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkhtb25nXCIsXG4gICAgICAgIFwiIE1vbmdcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJoc2JcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImhzYlwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImhzYlwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJVcHBlciBTb3JiaWFuXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiaHVwXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJodXBcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJodXBcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiSHVwYVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImliYVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiaWJhXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiaWJhXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkliYW5cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJpam9cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImlqb1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImlqb1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJJam8gbGFuZ3VhZ2VzXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiaWxvXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJpbG9cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJpbG9cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiSWxva29cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJpbmNcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImluY1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImluY1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJJbmRpYyBsYW5ndWFnZXNcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJpbmVcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImluZVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImluZVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJJbmRvLUV1cm9wZWFuIGxhbmd1YWdlc1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImluaFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiaW5oXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiaW5oXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkluZ3VzaFwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImlyYVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiaXJhXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiaXJhXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIklyYW5pYW4gbGFuZ3VhZ2VzXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiaXJvXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJpcm9cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJpcm9cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiSXJvcXVvaWFuIGxhbmd1YWdlc1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImpib1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiamJvXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiamJvXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkxvamJhblwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImpwclwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwianByXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwianByXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkp1ZGVvLVBlcnNpYW5cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJqcmJcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImpyYlwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImpyYlwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJKdWRlby1BcmFiaWNcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJrYWFcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImthYVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImthYVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJLYXJhLUthbHBha1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImthYlwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwia2FiXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwia2FiXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkthYnlsZVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImthY1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwia2FjXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwia2FjXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkthY2hpblwiLFxuICAgICAgICBcIiBKaW5ncGhvXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwia2FtXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJrYW1cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJrYW1cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiS2FtYmFcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJrYXJcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImthclwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImthclwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJLYXJlbiBsYW5ndWFnZXNcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJrYXdcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImthd1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImthd1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJLYXdpXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwia2JkXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJrYmRcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJrYmRcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiS2FiYXJkaWFuXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwia2hhXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJraGFcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJraGFcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiS2hhc2lcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJraGlcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImtoaVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImtoaVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJLaG9pc2FuIGxhbmd1YWdlc1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImtob1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwia2hvXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwia2hvXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIktob3RhbmVzZVwiLFxuICAgICAgICBcIiBTYWthblwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImttYlwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwia21iXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwia21iXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIktpbWJ1bmR1XCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIkFHT1wiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwia29rXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJrb2tcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJrb2tcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiS29ua2FuaVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIixcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImtvay1JTlwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJLb25rYW5pIC0gSW5kaWFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDU3XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImtvc1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwia29zXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwia29zXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIktvc3JhZWFuXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwia3BlXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJrcGVcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJrcGVcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiS3BlbGxlXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwia3JjXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJrcmNcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJrcmNcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiS2FyYWNoYXktQmFsa2FyXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwia3JsXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJrcmxcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJrcmxcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiS2FyZWxpYW5cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJrcm9cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImtyb1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImtyb1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJLcnUgbGFuZ3VhZ2VzXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwia3J1XCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJrcnVcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJrcnVcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiS3VydWtoXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwia3VtXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJrdW1cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJrdW1cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiS3VteWtcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJrdXRcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImt1dFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImt1dFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJLdXRlbmFpXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibGFkXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJsYWRcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJsYWRcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTGFkaW5vXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibGFoXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJsYWhcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJsYWhcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTGFobmRhXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibGFtXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJsYW1cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJsYW1cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTGFtYmFcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJsZXpcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImxlelwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImxlelwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJMZXpnaGlhblwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImxvbFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwibG9sXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibG9sXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIk1vbmdvXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibG96XCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJsb3pcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJsb3pcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTG96aVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcImx1YVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwibHVhXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibHVhXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkx1YmEtTHVsdWFcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJsdWlcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImx1aVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImx1aVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJMdWlzZW5vXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibHVuXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJsdW5cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJsdW5cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTHVuZGFcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJsdW9cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImx1b1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImx1b1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJMdW8gKEtlbnlhIGFuZCBUYW56YW5pYSlcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJsdXNcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcImx1c1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcImx1c1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJMdXNoYWlcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJtYWRcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcIm1hZFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcIm1hZFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJNYWR1cmVzZVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIm1hZ1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwibWFnXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibWFnXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIk1hZ2FoaVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIm1haVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwibWFpXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibWFpXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIk1haXRoaWxpXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibWFrXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJtYWtcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJtYWtcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTWFrYXNhclwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIm1hblwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwibWFuXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibWFuXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIk1hbmRpbmdvXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibWFwXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJtYXBcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJtYXBcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiQXVzdHJvbmVzaWFuIGxhbmd1YWdlc1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIm1hc1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwibWFzXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibWFzXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIk1hc2FpXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibWRmXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJtZGZcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJtZGZcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTW9rc2hhXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibWRyXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJtZHJcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJtZHJcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTWFuZGFyXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibWVuXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJtZW5cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJtZW5cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTWVuZGVcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJtZ2FcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcIm1nYVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcIm1nYVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJJcmlzaCwgTWlkZGxlICg5MDAtMTIwMClcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJtaWNcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcIm1pY1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcIm1pY1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJNaSdrbWFxXCIsXG4gICAgICAgIFwiIE1pY21hY1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIm1pblwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwibWluXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibWluXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIk1pbmFuZ2thYmF1XCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibWlzXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJtaXNcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJtaXNcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiVW5jb2RlZCBsYW5ndWFnZXNcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJta2hcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcIm1raFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcIm1raFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJNb24tS2htZXIgbGFuZ3VhZ2VzXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibW5jXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJtbmNcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJtbmNcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTWFuY2h1XCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibW5pXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJtbmlcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJtbmlcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTWFuaXB1cmlcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJtbm9cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcIm1ub1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcIm1ub1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJNYW5vYm8gbGFuZ3VhZ2VzXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibW9oXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJtb2hcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJtb2hcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTW9oYXdrXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibW9zXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJtb3NcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJtb3NcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTW9zc2lcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiQkZBXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJtdWxcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcIm11bFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcIm11bFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJNdWx0aXBsZSBsYW5ndWFnZXNcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJtdW5cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcIm11blwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcIm11blwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJNdW5kYSBsYW5ndWFnZXNcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJtdXNcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcIm11c1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcIm11c1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJDcmVla1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIm13bFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwibXdsXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibXdsXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIk1pcmFuZGVzZVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIm13clwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwibXdyXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibXdyXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIk1hcndhcmlcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJteW5cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcIm15blwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcIm15blwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJNYXlhbiBsYW5ndWFnZXNcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJteXZcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcIm15dlwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcIm15dlwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJFcnp5YVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIm5haFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwibmFoXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibmFoXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIk5haHVhdGwgbGFuZ3VhZ2VzXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibmFpXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJuYWlcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJuYWlcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTm9ydGggQW1lcmljYW4gSW5kaWFuIGxhbmd1YWdlc1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIm5hcFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwibmFwXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibmFwXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIk5lYXBvbGl0YW5cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJuZHNcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcIm5kc1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcIm5kc1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJMb3cgR2VybWFuXCIsXG4gICAgICAgIFwiIExvdyBTYXhvblwiLFxuICAgICAgICBcIiBHZXJtYW4sIExvd1wiLFxuICAgICAgICBcIiBTYXhvbiwgTG93XCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibmV3XCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJuZXdcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJuZXdcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTmVwYWwgQmhhc2FcIixcbiAgICAgICAgXCIgTmV3YXJpXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibmlhXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJuaWFcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJuaWFcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTmlhc1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIm5pY1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwibmljXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibmljXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIk5pZ2VyLUtvcmRvZmFuaWFuIGxhbmd1YWdlc1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIm5pdVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwibml1XCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibml1XCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIk5pdWVhblwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIm5vZ1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwibm9nXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibm9nXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIk5vZ2FpXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibm9uXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJub25cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJub25cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTm9yc2UsIE9sZFwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIm5xb1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwibnFvXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibnFvXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIk4nS29cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJudWJcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcIm51YlwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcIm51YlwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJOdWJpYW4gbGFuZ3VhZ2VzXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibndjXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJud2NcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJud2NcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiQ2xhc3NpY2FsIE5ld2FyaVwiLFxuICAgICAgICBcIiBPbGQgTmV3YXJpXCIsXG4gICAgICAgIFwiIENsYXNzaWNhbCBOZXBhbCBCaGFzYVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIm55bVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwibnltXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibnltXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIk55YW13ZXppXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwibnluXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJueW5cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJueW5cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTnlhbmtvbGVcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJueW9cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcIm55b1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcIm55b1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJOeW9yb1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIm56aVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwibnppXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwibnppXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIk56aW1hXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwib3NhXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJvc2FcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJvc2FcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiT3NhZ2VcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJvdGFcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcIm90YVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcIm90YVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJUdXJraXNoLCBPdHRvbWFuICgxNTAwLTE5MjgpXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwib3RvXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJvdG9cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJvdG9cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiT3RvbWlhbiBsYW5ndWFnZXNcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJwYWFcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInBhYVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInBhYVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJQYXB1YW4gbGFuZ3VhZ2VzXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwicGFnXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJwYWdcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJwYWdcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiUGFuZ2FzaW5hblwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInBhbFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwicGFsXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwicGFsXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlBhaGxhdmlcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJwYW1cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInBhbVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInBhbVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJQYW1wYW5nYVwiLFxuICAgICAgICBcIiBLYXBhbXBhbmdhblwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInBhcFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwicGFwXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwicGFwXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlBhcGlhbWVudG9cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiQUJXXCIsXG4gICAgICAgIFwiQ1VXXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJwYXVcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInBhdVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInBhdVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJQYWxhdWFuXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwicGVvXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJwZW9cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJwZW9cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiUGVyc2lhbiwgT2xkIChjYS42MDAtNDAwIEIuQy4pXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwicGhpXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJwaGlcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJwaGlcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiUGhpbGlwcGluZSBsYW5ndWFnZXNcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJwaG5cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInBoblwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInBoblwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJQaG9lbmljaWFuXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwicG9uXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJwb25cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJwb25cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiUG9obnBlaWFuXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwicHJhXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJwcmFcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJwcmFcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiUHJha3JpdCBsYW5ndWFnZXNcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJwcm9cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInByb1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInByb1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJQcm92ZW7vv71hbCwgT2xkICh0byAxNTAwKVwiLFxuICAgICAgICBcIk9jY2l0YW4sIE9sZCAodG8gMTUwMClcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJxYWEtcXR6XCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJxYWEtcXR6XCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwicWFhLXF0elwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJSZXNlcnZlZCBmb3IgbG9jYWwgdXNlXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwicmFqXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJyYWpcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJyYWpcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiUmFqYXN0aGFuaVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInJhcFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwicmFwXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwicmFwXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlJhcGFudWlcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJyYXJcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInJhclwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInJhclwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJSYXJvdG9uZ2FuXCIsXG4gICAgICAgIFwiIENvb2sgSXNsYW5kcyBNYW9yaVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInJvYVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwicm9hXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwicm9hXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlJvbWFuY2UgbGFuZ3VhZ2VzXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwicm9tXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJyb21cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJyb21cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiUm9tYW55XCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwicnVwXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJydXBcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJydXBcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiQXJvbWFuaWFuXCIsXG4gICAgICAgIFwiIEFydW1hbmlhblwiLFxuICAgICAgICBcIiBNYWNlZG8tUm9tYW5pYW5cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJzYWRcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInNhZFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInNhZFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJTYW5kYXdlXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwic2FoXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJzYWhcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJzYWhcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiWWFrdXRcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJzYWlcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInNhaVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInNhaVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJTb3V0aCBBbWVyaWNhbiBJbmRpYW4gbGFuZ3VhZ2VzXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwic2FsXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJzYWxcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJzYWxcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiU2FsaXNoYW4gbGFuZ3VhZ2VzXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwic2FtXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJzYW1cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJzYW1cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiU2FtYXJpdGFuIEFyYW1haWNcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJzYXNcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInNhc1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInNhc1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJTYXNha1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInNhdFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwic2F0XCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwic2F0XCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlNhbnRhbGlcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJzY25cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInNjblwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInNjblwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJTaWNpbGlhblwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInNjb1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwic2NvXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwic2NvXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlNjb3RzXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwic2VsXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJzZWxcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJzZWxcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiU2Vsa3VwXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwic2VtXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJzZW1cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJzZW1cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiU2VtaXRpYyBsYW5ndWFnZXNcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJzZ2FcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInNnYVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInNnYVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJJcmlzaCwgT2xkICh0byA5MDApXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwic2duXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJzZ25cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJzZ25cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiU2lnbiBMYW5ndWFnZXNcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJzaG5cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInNoblwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInNoblwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJTaGFuXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwic2lkXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJzaWRcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJzaWRcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiU2lkYW1vXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwic2lvXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJzaW9cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJzaW9cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiU2lvdWFuIGxhbmd1YWdlc1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInNpdFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwic2l0XCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwic2l0XCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlNpbm8tVGliZXRhbiBsYW5ndWFnZXNcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJzbGFcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInNsYVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInNsYVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJTbGF2aWMgbGFuZ3VhZ2VzXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwic21hXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJzbWFcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJzbWFcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiU291dGhlcm4gU2FtaVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInNtaVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwic21pXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwic21pXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlNhbWkgbGFuZ3VhZ2VzXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwic21qXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJzbWpcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJzbWpcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTHVsZSBTYW1pXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwic21uXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJzbW5cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJzbW5cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiSW5hcmkgU2FtaVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInNtc1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwic21zXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwic21zXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlNrb2x0IFNhbWlcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJzbmtcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInNua1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInNua1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJTb25pbmtlXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiLFxuICAgICAgXCJjb3VudHJpZXNcIjogW1xuICAgICAgICBcIk1MSVwiLFxuICAgICAgICBcIlNFTlwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwic29nXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJzb2dcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJzb2dcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiU29nZGlhblwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInNvblwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwic29uXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwic29uXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlNvbmdoYWkgbGFuZ3VhZ2VzXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwic3JuXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJzcm5cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJzcm5cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiU3JhbmFuIFRvbmdvXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwic3JyXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJzcnJcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJzcnJcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiU2VyZXJcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiU0VOXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJzc2FcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInNzYVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInNzYVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJOaWxvLVNhaGFyYW4gbGFuZ3VhZ2VzXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwic3VrXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJzdWtcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJzdWtcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiU3VrdW1hXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwic3VzXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJzdXNcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJzdXNcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiU3VzdVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInN1eFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwic3V4XCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwic3V4XCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlN1bWVyaWFuXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwic3ljXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJzeWNcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJzeWNcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiQ2xhc3NpY2FsIFN5cmlhY1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInN5clwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwic3lyXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwic3lyXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlN5cmlhY1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIixcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcInN5ci1TWVwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJTeXJpYWMgLSBTeXJpYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0NUFcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwidGFpXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJ0YWlcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJ0YWlcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiVGFpIGxhbmd1YWdlc1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInRlbVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwidGVtXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwidGVtXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlRpbW5lXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwidGVyXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJ0ZXJcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJ0ZXJcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiVGVyZW5vXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwidGV0XCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJ0ZXRcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJ0ZXRcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiVGV0dW1cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiVExTXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJ0aWdcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInRpZ1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInRpZ1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJUaWdyZVwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInRpdlwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwidGl2XCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwidGl2XCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlRpdlwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInRrbFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwidGtsXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwidGtsXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlRva2VsYXVcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJ0bGhcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInRsaFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInRsaFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJLbGluZ29uXCIsXG4gICAgICAgIFwiIHRsaEluZ2FuLUhvbFwiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInRsaVwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwidGxpXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwidGxpXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlRsaW5naXRcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJ0bWhcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInRtaFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInRtaFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJUYW1hc2hla1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInRvZ1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwidG9nXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwidG9nXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlRvbmdhIChOeWFzYSlcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJ0cGlcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInRwaVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInRwaVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJUb2sgUGlzaW5cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiUE5HXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJ0c2lcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInRzaVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInRzaVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJUc2ltc2hpYW5cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJ0dW1cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInR1bVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInR1bVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJUdW1idWthXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwidHVwXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJ0dXBcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJ0dXBcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiVHVwaSBsYW5ndWFnZXNcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJ0dXRcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInR1dFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInR1dFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJBbHRhaWMgbGFuZ3VhZ2VzXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwidHZsXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJ0dmxcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJ0dmxcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiVHV2YWx1XCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwidHl2XCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJ0eXZcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJ0eXZcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiVHV2aW5pYW5cIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJ1ZG1cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInVkbVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInVkbVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJVZG11cnRcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJ1Z2FcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInVnYVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInVnYVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJVZ2FyaXRpY1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInVtYlwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwidW1iXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwidW1iXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlVtYnVuZHVcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCIsXG4gICAgICBcImNvdW50cmllc1wiOiBbXG4gICAgICAgIFwiQUdPXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJ1bmRcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInVuZFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInVuZFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJVbmRldGVybWluZWRcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJ2YWlcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInZhaVwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInZhaVwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJWYWlcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJ2b3RcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInZvdFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInZvdFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJWb3RpY1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIndha1wiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwid2FrXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwid2FrXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIldha2FzaGFuIGxhbmd1YWdlc1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIndhbFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwid2FsXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwid2FsXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIldvbGFpdHRhXCIsXG4gICAgICAgIFwiIFdvbGF5dHRhXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwid2FyXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJ3YXJcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJ3YXJcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiV2FyYXlcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJ3YXNcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcIndhc1wiLFxuICAgICAgXCJpc282MzlfM1wiOiBcIndhc1wiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJXYXNob1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcIndlblwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwid2VuXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwid2VuXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIlNvcmJpYW4gbGFuZ3VhZ2VzXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwieGFsXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJ4YWxcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJ4YWxcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiS2FsbXlrXCIsXG4gICAgICAgIFwiIE9pcmF0XCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwieWFvXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJ5YW9cIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJ5YW9cIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiWWFvXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwieWFwXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJ5YXBcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJ5YXBcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiWWFwZXNlXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwieXBrXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJ5cGtcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJ5cGtcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiWXVwaWsgbGFuZ3VhZ2VzXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwiemFwXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJ6YXBcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJ6YXBcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiWmFwb3RlY1wiXG4gICAgICBdLFxuICAgICAgXCJuYXRpdmVOYW1lXCI6IFtcbiAgICAgICAgXCJcIlxuICAgICAgXSxcbiAgICAgIFwiZGlyZWN0cmlvblwiOiBcIkxUUlwiLFxuICAgICAgXCJmYW1pbHlcIjogXCJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpc282MzlfMVwiOiBcIlwiLFxuICAgICAgXCJpc282MzlfMlwiOiBcInpibFwiLFxuICAgICAgXCJpc282MzlfMmVuXCI6IFwiemJsXCIsXG4gICAgICBcImlzbzYzOV8zXCI6IFwiemJsXCIsXG4gICAgICBcIm5hbWVcIjogW1xuICAgICAgICBcIkJsaXNzeW1ib2xzXCIsXG4gICAgICAgIFwiIEJsaXNzeW1ib2xpY3NcIixcbiAgICAgICAgXCIgQmxpc3NcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJ6ZW5cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInplblwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInplblwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJaZW5hZ2FcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJ6Z2hcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInpnaFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInpnaFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJTdGFuZGFyZCBNb3JvY2NhbiBUYW1hemlnaHRcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJ6bmRcIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInpuZFwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInpuZFwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJaYW5kZSBsYW5ndWFnZXNcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaXNvNjM5XzFcIjogXCJcIixcbiAgICAgIFwiaXNvNjM5XzJcIjogXCJ6dW5cIixcbiAgICAgIFwiaXNvNjM5XzJlblwiOiBcInp1blwiLFxuICAgICAgXCJpc282MzlfM1wiOiBcInp1blwiLFxuICAgICAgXCJuYW1lXCI6IFtcbiAgICAgICAgXCJadW5pXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwienh4XCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJ6eHhcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJ6eHhcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiTm8gbGluZ3Vpc3RpYyBjb250ZW50XCIsXG4gICAgICAgIFwiIE5vdCBhcHBsaWNhYmxlXCJcbiAgICAgIF0sXG4gICAgICBcIm5hdGl2ZU5hbWVcIjogW1xuICAgICAgICBcIlwiXG4gICAgICBdLFxuICAgICAgXCJkaXJlY3RyaW9uXCI6IFwiTFRSXCIsXG4gICAgICBcImZhbWlseVwiOiBcIlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlzbzYzOV8xXCI6IFwiXCIsXG4gICAgICBcImlzbzYzOV8yXCI6IFwienphXCIsXG4gICAgICBcImlzbzYzOV8yZW5cIjogXCJ6emFcIixcbiAgICAgIFwiaXNvNjM5XzNcIjogXCJ6emFcIixcbiAgICAgIFwibmFtZVwiOiBbXG4gICAgICAgIFwiWmF6YVwiLFxuICAgICAgICBcIiBEaW1pbGlcIixcbiAgICAgICAgXCIgRGltbGlcIixcbiAgICAgICAgXCIgS2lyZGtpXCIsXG4gICAgICAgIFwiIEtpcm1hbmpraVwiLFxuICAgICAgICBcIiBaYXpha2lcIlxuICAgICAgXSxcbiAgICAgIFwibmF0aXZlTmFtZVwiOiBbXG4gICAgICAgIFwiXCJcbiAgICAgIF0sXG4gICAgICBcImRpcmVjdHJpb25cIjogXCJMVFJcIixcbiAgICAgIFwiZmFtaWx5XCI6IFwiXCJcbiAgICB9XG4gIF0sXG4gIFwiY291bnRyaWVzXCI6IFtcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkFGXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkFGR1wiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMDA0XCIsXG4gICAgICBcIm5hbWVcIjogXCJBZmdoYW5pc3RhblwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcInByc1wiLFxuICAgICAgICBcInB1c1wiLFxuICAgICAgICBcImZhc1wiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkFYXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkFMQVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMjQ4XCIsXG4gICAgICBcIm5hbWVcIjogXCLDhWxhbmQgSXNsYW5kc1wiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcInN3ZVwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkFMXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkFMQlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMDA4XCIsXG4gICAgICBcIm5hbWVcIjogXCJBbGJhbmlhXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwic3FpXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJzcS1BTFwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJBbGJhbmlhbiAtIEFsYmFuaWFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDFDXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJEWlwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJEWkFcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjAxMlwiLFxuICAgICAgXCJuYW1lXCI6IFwiQWxnZXJpYVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImFyYVwiLFxuICAgICAgICBcImJlclwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiYXItRFpcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiQXJhYmljIC0gQWxnZXJpYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDE0MDFcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkFTXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkFTTVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMDE2XCIsXG4gICAgICBcIm5hbWVcIjogXCJBbWVyaWNhbiBTYW1vYVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkFEXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkFORFwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMDIwXCIsXG4gICAgICBcIm5hbWVcIjogXCJBbmRvcnJhXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiY2F0XCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiQU9cIixcbiAgICAgIFwiY29kZV8zXCI6IFwiQUdPXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIwMjRcIixcbiAgICAgIFwibmFtZVwiOiBcIkFuZ29sYVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImtvblwiLFxuICAgICAgICBcImttYlwiLFxuICAgICAgICBcImt1YVwiLFxuICAgICAgICBcInBvclwiLFxuICAgICAgICBcInVtYlwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkFJXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkFJQVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNjYwXCIsXG4gICAgICBcIm5hbWVcIjogXCJBbmd1aWxsYVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkFRXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkFUQVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMDEwXCIsXG4gICAgICBcIm5hbWVcIjogXCJBbnRhcmN0aWNhXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiQUdcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiQVRHXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIwMjhcIixcbiAgICAgIFwibmFtZVwiOiBcIkFudGlndWEgYW5kIEJhcmJ1ZGFcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJlbmdcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJBUlwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJBUkdcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjAzMlwiLFxuICAgICAgXCJuYW1lXCI6IFwiQXJnZW50aW5hXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwic3BhXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJlcy1BUlwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJTcGFuaXNoIC0gQXJnZW50aW5hXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MkMwQVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiQU1cIixcbiAgICAgIFwiY29kZV8zXCI6IFwiQVJNXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIwNTFcIixcbiAgICAgIFwibmFtZVwiOiBcIkFybWVuaWFcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJoeWVcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImh5LUFNXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkFybWVuaWFuIC0gQXJtZW5pYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MkJcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkFXXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkFCV1wiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNTMzXCIsXG4gICAgICBcIm5hbWVcIjogXCJBcnViYVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcIm5sZFwiLFxuICAgICAgICBcInBhcFwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkFVXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkFVU1wiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMDM2XCIsXG4gICAgICBcIm5hbWVcIjogXCJBdXN0cmFsaWFcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJlbmdcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImVuLUFVXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkVuZ2xpc2ggLSBBdXN0cmFsaWFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwQzA5XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJBVFwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJBVVRcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjA0MFwiLFxuICAgICAgXCJuYW1lXCI6IFwiQXVzdHJpYVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImRldVwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZGUtQVRcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiR2VybWFuIC0gQXVzdHJpYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDBDMDdcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkFaXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkFaRVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMDMxXCIsXG4gICAgICBcIm5hbWVcIjogXCJBemVyYmFpamFuXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiYXplXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJDeS1hei1BWlwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJBemVyaSAoQ3lyaWxsaWMpIC0gQXplcmJhaWphblwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA4MkNcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJMdC1hei1BWlwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJBemVyaSAoTGF0aW4pIC0gQXplcmJhaWphblwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MkNcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkJTXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkJIU1wiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMDQ0XCIsXG4gICAgICBcIm5hbWVcIjogXCJCYWhhbWFzXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiZW5nXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiQkhcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiQkhSXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIwNDhcIixcbiAgICAgIFwibmFtZVwiOiBcIkJhaHJhaW5cIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJhcmFcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImFyLUJIXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkFyYWJpYyAtIEJhaHJhaW5cIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgzQzAxXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJCRFwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJCR0RcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjA1MFwiLFxuICAgICAgXCJuYW1lXCI6IFwiQmFuZ2xhZGVzaFwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImJlblwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkJCXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkJSQlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMDUyXCIsXG4gICAgICBcIm5hbWVcIjogXCJCYXJiYWRvc1wiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImVuZ1wiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkJZXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkJMUlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMTEyXCIsXG4gICAgICBcIm5hbWVcIjogXCJCZWxhcnVzXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiYmVsXCIsXG4gICAgICAgIFwicnVzXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJiZS1CWVwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJCZWxhcnVzaWFuIC0gQmVsYXJ1c1wiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MjNcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkJFXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkJFTFwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMDU2XCIsXG4gICAgICBcIm5hbWVcIjogXCJCZWxnaXVtXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwibmxkXCIsXG4gICAgICAgIFwiZnJhXCIsXG4gICAgICAgIFwiZGV1XCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJubC1CRVwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJEdXRjaCAtIEJlbGdpdW1cIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwODEzXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZnItQkVcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiRnJlbmNoIC0gQmVsZ2l1bVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA4MENcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkJaXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkJMWlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMDg0XCIsXG4gICAgICBcIm5hbWVcIjogXCJCZWxpemVcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJlbmdcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImVuLUJaXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkVuZ2xpc2ggLSBCZWxpemVcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgyODA5XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJCSlwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJCRU5cIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjIwNFwiLFxuICAgICAgXCJuYW1lXCI6IFwiQmVuaW5cIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJmcmFcIixcbiAgICAgICAgXCJmdWxcIixcbiAgICAgICAgXCJ5b3JcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJCTVwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJCTVVcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjA2MFwiLFxuICAgICAgXCJuYW1lXCI6IFwiQmVybXVkYVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkJUXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkJUTlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMDY0XCIsXG4gICAgICBcIm5hbWVcIjogXCJCaHV0YW5cIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJkem9cIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJCT1wiLFxuICAgICAgXCJjb2RlXzNcIjogXCJCT0xcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjA2OFwiLFxuICAgICAgXCJuYW1lXCI6IFwiQm9saXZpYSwgUGx1cmluYXRpb25hbCBTdGF0ZSBvZlwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImF5bVwiLFxuICAgICAgICBcImdyblwiLFxuICAgICAgICBcInF1ZVwiLFxuICAgICAgICBcInNwYVwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZXMtQk9cIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiU3BhbmlzaCAtIEJvbGl2aWFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHg0MDBBXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJCUVwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJCRVNcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjUzNVwiLFxuICAgICAgXCJuYW1lXCI6IFwiQm9uYWlyZSwgU2ludCBFdXN0YXRpdXMgYW5kIFNhYmFcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJCQVwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJCSUhcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjA3MFwiLFxuICAgICAgXCJuYW1lXCI6IFwiQm9zbmlhIGFuZCBIZXJ6ZWdvdmluYVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImJvc1wiLFxuICAgICAgICBcImhydlwiLFxuICAgICAgICBcInNycFwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkJXXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkJXQVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMDcyXCIsXG4gICAgICBcIm5hbWVcIjogXCJCb3Rzd2FuYVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImVuZ1wiLFxuICAgICAgICBcInRzblwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkJWXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkJWVFwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMDc0XCIsXG4gICAgICBcIm5hbWVcIjogXCJCb3V2ZXQgSXNsYW5kXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiQlJcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiQlJBXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIwNzZcIixcbiAgICAgIFwibmFtZVwiOiBcIkJyYXppbFwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcInBvclwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwicHQtQlJcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiUG9ydHVndWVzZSAtIEJyYXppbFwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MTZcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIklPXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIklPVFwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMDg2XCIsXG4gICAgICBcIm5hbWVcIjogXCJCcml0aXNoIEluZGlhbiBPY2VhbiBUZXJyaXRvcnlcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJCTlwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJCUk5cIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjA5NlwiLFxuICAgICAgXCJuYW1lXCI6IFwiQnJ1bmVpIERhcnVzc2FsYW1cIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJtc2FcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcIm1zLUJOXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIk1hbGF5IC0gQnJ1bmVpXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDgzRVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiQkdcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiQkdSXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIxMDBcIixcbiAgICAgIFwibmFtZVwiOiBcIkJ1bGdhcmlhXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiYnVsXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJiZy1CR1wiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJCdWxnYXJpYW4gLSBCdWxnYXJpYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MDJcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkJGXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkJGQVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiODU0XCIsXG4gICAgICBcIm5hbWVcIjogXCJCdXJraW5hIEZhc29cIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJmcmFcIixcbiAgICAgICAgXCJmdWxcIixcbiAgICAgICAgXCJtb3NcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJCSVwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJCRElcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjEwOFwiLFxuICAgICAgXCJuYW1lXCI6IFwiQnVydW5kaVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImZyYVwiLFxuICAgICAgICBcInJ1blwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIktIXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIktITVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMTE2XCIsXG4gICAgICBcIm5hbWVcIjogXCJDYW1ib2RpYVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImtobVwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkNNXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkNNUlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMTIwXCIsXG4gICAgICBcIm5hbWVcIjogXCJDYW1lcm9vblwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImVuZ1wiLFxuICAgICAgICBcImZyYVwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkNBXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkNBTlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMTI0XCIsXG4gICAgICBcIm5hbWVcIjogXCJDYW5hZGFcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJlbmdcIixcbiAgICAgICAgXCJmcmFcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImVuLUNBXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkVuZ2xpc2ggLSBDYW5hZGFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgxMDA5XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZnItQ0FcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiRnJlbmNoIC0gQ2FuYWRhXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MEMwQ1wiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiQ1ZcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiQ1BWXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIxMzJcIixcbiAgICAgIFwibmFtZVwiOiBcIkNhcGUgVmVyZGVcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJwb3JcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJLWVwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJDWU1cIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjEzNlwiLFxuICAgICAgXCJuYW1lXCI6IFwiQ2F5bWFuIElzbGFuZHNcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJDRlwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJDQUZcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjE0MFwiLFxuICAgICAgXCJuYW1lXCI6IFwiQ2VudHJhbCBBZnJpY2FuIFJlcHVibGljXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiZnJhXCIsXG4gICAgICAgIFwic2FnXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiVERcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiVENEXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIxNDhcIixcbiAgICAgIFwibmFtZVwiOiBcIkNoYWRcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJhcmFcIixcbiAgICAgICAgXCJmcmFcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJDTFwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJDSExcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjE1MlwiLFxuICAgICAgXCJuYW1lXCI6IFwiQ2hpbGVcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJzcGFcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImVzLUNMXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlNwYW5pc2ggLSBDaGlsZVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDM0MEFcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkNOXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkNITlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMTU2XCIsXG4gICAgICBcIm5hbWVcIjogXCJDaGluYVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcInpob1wiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiemgtQ05cIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiQ2hpbmVzZSAtIENoaW5hXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDgwNFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcInpoLUNIU1wiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJDaGluZXNlIChTaW1wbGlmaWVkKVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDAwMDRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJ6aC1DSFRcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiQ2hpbmVzZSAoVHJhZGl0aW9uYWwpXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4N0MwNFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiQ1hcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiQ1hSXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIxNjJcIixcbiAgICAgIFwibmFtZVwiOiBcIkNocmlzdG1hcyBJc2xhbmRcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJDQ1wiLFxuICAgICAgXCJjb2RlXzNcIjogXCJDQ0tcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjE2NlwiLFxuICAgICAgXCJuYW1lXCI6IFwiQ29jb3MgKEtlZWxpbmcpIElzbGFuZHNcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJDT1wiLFxuICAgICAgXCJjb2RlXzNcIjogXCJDT0xcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjE3MFwiLFxuICAgICAgXCJuYW1lXCI6IFwiQ29sb21iaWFcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJzcGFcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImVzLUNPXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlNwYW5pc2ggLSBDb2xvbWJpYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDI0MEFcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIktNXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkNPTVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMTc0XCIsXG4gICAgICBcIm5hbWVcIjogXCJDb21vcm9zXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiYXJhXCIsXG4gICAgICAgIFwiZnJhXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiQ0dcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiQ09HXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIxNzhcIixcbiAgICAgIFwibmFtZVwiOiBcIkNvbmdvXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiZnJhXCIsXG4gICAgICAgIFwia29uXCIsXG4gICAgICAgIFwibGluXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiQ0RcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiQ09EXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIxODBcIixcbiAgICAgIFwibmFtZVwiOiBcIkNvbmdvLCB0aGUgRGVtb2NyYXRpYyBSZXB1YmxpYyBvZiB0aGVcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJmcmFcIixcbiAgICAgICAgXCJrb25cIixcbiAgICAgICAgXCJsaW5cIixcbiAgICAgICAgXCJzd2FcIixcbiAgICAgICAgXCJsdWJcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJDS1wiLFxuICAgICAgXCJjb2RlXzNcIjogXCJDT0tcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjE4NFwiLFxuICAgICAgXCJuYW1lXCI6IFwiQ29vayBJc2xhbmRzXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiQ1JcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiQ1JJXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIxODhcIixcbiAgICAgIFwibmFtZVwiOiBcIkNvc3RhIFJpY2FcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJzcGFcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImVzLUNSXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlNwYW5pc2ggLSBDb3N0YSBSaWNhXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MTQwQVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiQ0lcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiQ0lWXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIzODRcIixcbiAgICAgIFwibmFtZVwiOiBcIkPDtHRlIGQnSXZvaXJlXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiZnJhXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiSFJcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiSFJWXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIxOTFcIixcbiAgICAgIFwibmFtZVwiOiBcIkNyb2F0aWFcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJocnZcIixcbiAgICAgICAgXCJpdGFcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImhyLUhSXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkNyb2F0aWFuIC0gQ3JvYXRpYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MUFcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkNVXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkNVQlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMTkyXCIsXG4gICAgICBcIm5hbWVcIjogXCJDdWJhXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwic3BhXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiQ1dcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiQ1VXXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI1MzFcIixcbiAgICAgIFwibmFtZVwiOiBcIkN1cmHDp2FvXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwibmxkXCIsXG4gICAgICAgIFwiZW5nXCIsXG4gICAgICAgIFwicGFwXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiQ1lcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiQ1lQXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIxOTZcIixcbiAgICAgIFwibmFtZVwiOiBcIkN5cHJ1c1wiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImVsbFwiLFxuICAgICAgICBcInR1clwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkNaXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkNaRVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMjAzXCIsXG4gICAgICBcIm5hbWVcIjogXCJDemVjaCBSZXB1YmxpY1wiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImNlc1wiLFxuICAgICAgICBcInNsa1wiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiY3MtQ1pcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiQ3plY2ggLSBDemVjaCBSZXB1YmxpY1wiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MDVcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkRLXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkROS1wiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMjA4XCIsXG4gICAgICBcIm5hbWVcIjogXCJEZW5tYXJrXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiZGFuXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJkYS1ES1wiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJEYW5pc2ggLSBEZW5tYXJrXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQwNlwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiREpcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiREpJXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIyNjJcIixcbiAgICAgIFwibmFtZVwiOiBcIkRqaWJvdXRpXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiYWFyXCIsXG4gICAgICAgIFwiYXJhXCIsXG4gICAgICAgIFwiZnJhXCIsXG4gICAgICAgIFwic29tXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiRE1cIixcbiAgICAgIFwiY29kZV8zXCI6IFwiRE1BXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIyMTJcIixcbiAgICAgIFwibmFtZVwiOiBcIkRvbWluaWNhXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiZW5nXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiRE9cIixcbiAgICAgIFwiY29kZV8zXCI6IFwiRE9NXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIyMTRcIixcbiAgICAgIFwibmFtZVwiOiBcIkRvbWluaWNhbiBSZXB1YmxpY1wiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcInNwYVwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZXMtRE9cIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiU3BhbmlzaCAtIERvbWluaWNhbiBSZXB1YmxpY1wiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDFDMEFcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkVDXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkVDVVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMjE4XCIsXG4gICAgICBcIm5hbWVcIjogXCJFY3VhZG9yXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwic3BhXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJlcy1FQ1wiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJTcGFuaXNoIC0gRWN1YWRvclwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDMwMEFcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkVHXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkVHWVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiODE4XCIsXG4gICAgICBcIm5hbWVcIjogXCJFZ3lwdFwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImFyYVwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiYXItRUdcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiQXJhYmljIC0gRWd5cHRcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwQzAxXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJTVlwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJTTFZcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjIyMlwiLFxuICAgICAgXCJuYW1lXCI6IFwiRWwgU2FsdmFkb3JcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJzcGFcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImVzLVNWXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlNwYW5pc2ggLSBFbCBTYWx2YWRvclwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDQ0MEFcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkdRXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkdOUVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMjI2XCIsXG4gICAgICBcIm5hbWVcIjogXCJFcXVhdG9yaWFsIEd1aW5lYVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImZyYVwiLFxuICAgICAgICBcInBvclwiLFxuICAgICAgICBcInNwYVwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkVSXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkVSSVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMjMyXCIsXG4gICAgICBcIm5hbWVcIjogXCJFcml0cmVhXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiYXJhXCIsXG4gICAgICAgIFwiZW5nXCIsXG4gICAgICAgIFwidGlyXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiRUVcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiRVNUXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIyMzNcIixcbiAgICAgIFwibmFtZVwiOiBcIkVzdG9uaWFcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJlc3RcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImV0LUVFXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkVzdG9uaWFuIC0gRXN0b25pYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MjVcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkVUXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkVUSFwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMjMxXCIsXG4gICAgICBcIm5hbWVcIjogXCJFdGhpb3BpYVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImFtaFwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkZLXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkZMS1wiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMjM4XCIsXG4gICAgICBcIm5hbWVcIjogXCJGYWxrbGFuZCBJc2xhbmRzIChNYWx2aW5hcylcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJGT1wiLFxuICAgICAgXCJjb2RlXzNcIjogXCJGUk9cIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjIzNFwiLFxuICAgICAgXCJuYW1lXCI6IFwiRmFyb2UgSXNsYW5kc1wiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImRhblwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZm8tRk9cIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiRmFyb2VzZSAtIEZhcm9lIElzbGFuZHNcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDM4XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJGSlwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJGSklcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjI0MlwiLFxuICAgICAgXCJuYW1lXCI6IFwiRmlqaVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImVuZ1wiLFxuICAgICAgICBcImZpalwiLFxuICAgICAgICBcImhpblwiLFxuICAgICAgICBcInVyZFwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkZJXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkZJTlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMjQ2XCIsXG4gICAgICBcIm5hbWVcIjogXCJGaW5sYW5kXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiZmluXCIsXG4gICAgICAgIFwic3dlXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJmaS1GSVwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJGaW5uaXNoIC0gRmlubGFuZFwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MEJcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJzdi1GSVwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJTd2VkaXNoIC0gRmlubGFuZFwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA4MURcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkZSXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkZSQVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMjUwXCIsXG4gICAgICBcIm5hbWVcIjogXCJGcmFuY2VcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJmcmFcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImZyLUZSXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkZyZW5jaCAtIEZyYW5jZVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MENcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkdGXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkdVRlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMjU0XCIsXG4gICAgICBcIm5hbWVcIjogXCJGcmVuY2ggR3VpYW5hXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiZnJhXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiUEZcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiUFlGXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIyNThcIixcbiAgICAgIFwibmFtZVwiOiBcIkZyZW5jaCBQb2x5bmVzaWFcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJmcmFcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJURlwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJBVEZcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjI2MFwiLFxuICAgICAgXCJuYW1lXCI6IFwiRnJlbmNoIFNvdXRoZXJuIFRlcnJpdG9yaWVzXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiR0FcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiR0FCXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIyNjZcIixcbiAgICAgIFwibmFtZVwiOiBcIkdhYm9uXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiZnJhXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiR01cIixcbiAgICAgIFwiY29kZV8zXCI6IFwiR01CXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIyNzBcIixcbiAgICAgIFwibmFtZVwiOiBcIkdhbWJpYVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImVuZ1wiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkdFXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkdFT1wiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMjY4XCIsXG4gICAgICBcIm5hbWVcIjogXCJHZW9yZ2lhXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwia2F0XCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJrYS1HRVwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJHZW9yZ2lhbiAtIEdlb3JnaWFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDM3XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJERVwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJERVVcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjI3NlwiLFxuICAgICAgXCJuYW1lXCI6IFwiR2VybWFueVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImRldVwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZGUtREVcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiR2VybWFuIC0gR2VybWFueVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MDdcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkdIXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkdIQVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMjg4XCIsXG4gICAgICBcIm5hbWVcIjogXCJHaGFuYVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImFrYVwiLFxuICAgICAgICBcImVuZ1wiLFxuICAgICAgICBcImV3ZVwiLFxuICAgICAgICBcImdhYVwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkdJXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkdJQlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMjkyXCIsXG4gICAgICBcIm5hbWVcIjogXCJHaWJyYWx0YXJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJHUlwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJHUkNcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjMwMFwiLFxuICAgICAgXCJuYW1lXCI6IFwiR3JlZWNlXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiZWxsXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJlbC1HUlwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJHcmVlayAtIEdyZWVjZVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MDhcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkdMXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkdSTFwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMzA0XCIsXG4gICAgICBcIm5hbWVcIjogXCJHcmVlbmxhbmRcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJHRFwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJHUkRcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjMwOFwiLFxuICAgICAgXCJuYW1lXCI6IFwiR3JlbmFkYVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImVuZ1wiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkdQXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkdMUFwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMzEyXCIsXG4gICAgICBcIm5hbWVcIjogXCJHdWFkZWxvdXBlXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiZnJhXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiR1VcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiR1VNXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIzMTZcIixcbiAgICAgIFwibmFtZVwiOiBcIkd1YW1cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJHVFwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJHVE1cIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjMyMFwiLFxuICAgICAgXCJuYW1lXCI6IFwiR3VhdGVtYWxhXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwic3BhXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJlcy1HVFwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJTcGFuaXNoIC0gR3VhdGVtYWxhXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MTAwQVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiR0dcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiR0dZXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI4MzFcIixcbiAgICAgIFwibmFtZVwiOiBcIkd1ZXJuc2V5XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiR05cIixcbiAgICAgIFwiY29kZV8zXCI6IFwiR0lOXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIzMjRcIixcbiAgICAgIFwibmFtZVwiOiBcIkd1aW5lYVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImZyYVwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkdXXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkdOQlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNjI0XCIsXG4gICAgICBcIm5hbWVcIjogXCJHdWluZWEtQmlzc2F1XCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwicG9yXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiR1lcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiR1VZXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIzMjhcIixcbiAgICAgIFwibmFtZVwiOiBcIkd1eWFuYVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImVuZ1wiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkhUXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkhUSVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMzMyXCIsXG4gICAgICBcIm5hbWVcIjogXCJIYWl0aVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImZyYVwiLFxuICAgICAgICBcImhhdFwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkhNXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkhNRFwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMzM0XCIsXG4gICAgICBcIm5hbWVcIjogXCJIZWFyZCBJc2xhbmQgYW5kIE1jRG9uYWxkIElzbGFuZHNcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJWQVwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJWQVRcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjMzNlwiLFxuICAgICAgXCJuYW1lXCI6IFwiSG9seSBTZWUgKFZhdGljYW4gQ2l0eSBTdGF0ZSlcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJpdGFcIixcbiAgICAgICAgXCJsYXRcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJITlwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJITkRcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjM0MFwiLFxuICAgICAgXCJuYW1lXCI6IFwiSG9uZHVyYXNcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJzcGFcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImVzLUhOXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlNwYW5pc2ggLSBIb25kdXJhc1wiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDQ4MEFcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkhLXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkhLR1wiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMzQ0XCIsXG4gICAgICBcIm5hbWVcIjogXCJIb25nIEtvbmdcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJ6aG9cIixcbiAgICAgICAgXCJlbmdcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcInpoLUhLXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkNoaW5lc2UgLSBIb25nIEtvbmcgU0FSXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MEMwNFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiSFVcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiSFVOXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIzNDhcIixcbiAgICAgIFwibmFtZVwiOiBcIkh1bmdhcnlcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJodW5cIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImh1LUhVXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkh1bmdhcmlhbiAtIEh1bmdhcnlcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDBFXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJJU1wiLFxuICAgICAgXCJjb2RlXzNcIjogXCJJU0xcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjM1MlwiLFxuICAgICAgXCJuYW1lXCI6IFwiSWNlbGFuZFwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImlzbFwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiaXMtSVNcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiSWNlbGFuZGljIC0gSWNlbGFuZFwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MEZcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIklOXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIklORFwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMzU2XCIsXG4gICAgICBcIm5hbWVcIjogXCJJbmRpYVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImJlblwiLFxuICAgICAgICBcImVuZ1wiLFxuICAgICAgICBcImd1alwiLFxuICAgICAgICBcImhpblwiLFxuICAgICAgICBcInBhblwiLFxuICAgICAgICBcInRhbVwiLFxuICAgICAgICBcInRlbFwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZ3UtSU5cIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiR3VqYXJhdGkgLSBJbmRpYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0NDdcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJoaS1JTlwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJIaW5kaSAtIEluZGlhXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQzOVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImtuLUlOXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkthbm5hZGEgLSBJbmRpYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0NEJcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJrb2stSU5cIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiS29ua2FuaSAtIEluZGlhXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQ1N1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcIm1yLUlOXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIk1hcmF0aGkgLSBJbmRpYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0NEVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJwYS1JTlwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJQdW5qYWJpIC0gSW5kaWFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDQ2XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwic2EtSU5cIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiU2Fuc2tyaXQgLSBJbmRpYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0NEZcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJ0YS1JTlwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJUYW1pbCAtIEluZGlhXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQ0OVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcInRlLUlOXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlRlbHVndSAtIEluZGlhXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQ0QVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiSURcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiSUROXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIzNjBcIixcbiAgICAgIFwibmFtZVwiOiBcIkluZG9uZXNpYVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImluZFwiLFxuICAgICAgICBcIm1zYVwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiaWQtSURcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiSW5kb25lc2lhbiAtIEluZG9uZXNpYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MjFcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIklSXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIklSTlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMzY0XCIsXG4gICAgICBcIm5hbWVcIjogXCJJcmFuLCBJc2xhbWljIFJlcHVibGljIG9mXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiZmFzXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJmYS1JUlwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJGYXJzaSAtIElyYW5cIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDI5XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJJUVwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJJUlFcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjM2OFwiLFxuICAgICAgXCJuYW1lXCI6IFwiSXJhcVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImFyYVwiLFxuICAgICAgICBcImt1clwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiYXItSVFcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiQXJhYmljIC0gSXJhcVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA4MDFcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIklFXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIklSTFwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMzcyXCIsXG4gICAgICBcIm5hbWVcIjogXCJJcmVsYW5kXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiZW5nXCIsXG4gICAgICAgIFwiZ2xlXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJlbi1JRVwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJFbmdsaXNoIC0gSXJlbGFuZFwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDE4MDlcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIklNXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIklNTlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiODMzXCIsXG4gICAgICBcIm5hbWVcIjogXCJJc2xlIG9mIE1hblwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIklMXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIklTUlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMzc2XCIsXG4gICAgICBcIm5hbWVcIjogXCJJc3JhZWxcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJhcmFcIixcbiAgICAgICAgXCJoZWJcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImhlLUlMXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkhlYnJldyAtIElzcmFlbFwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MERcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIklUXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIklUQVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMzgwXCIsXG4gICAgICBcIm5hbWVcIjogXCJJdGFseVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImZyYVwiLFxuICAgICAgICBcImRldVwiLFxuICAgICAgICBcIml0YVwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiaXQtSVRcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiSXRhbGlhbiAtIEl0YWx5XCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQxMFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiSk1cIixcbiAgICAgIFwiY29kZV8zXCI6IFwiSkFNXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIzODhcIixcbiAgICAgIFwibmFtZVwiOiBcIkphbWFpY2FcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJlbmdcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImVuLUpNXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkVuZ2xpc2ggLSBKYW1haWNhXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MjAwOVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiSlBcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiSlBOXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIzOTJcIixcbiAgICAgIFwibmFtZVwiOiBcIkphcGFuXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwianBuXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJqYS1KUFwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJKYXBhbmVzZSAtIEphcGFuXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQxMVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiSkVcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiSkVZXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI4MzJcIixcbiAgICAgIFwibmFtZVwiOiBcIkplcnNleVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImZyYVwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkpPXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkpPUlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNDAwXCIsXG4gICAgICBcIm5hbWVcIjogXCJKb3JkYW5cIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJhcmFcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImFyLUpPXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkFyYWJpYyAtIEpvcmRhblwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDJDMDFcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIktaXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIktBWlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMzk4XCIsXG4gICAgICBcIm5hbWVcIjogXCJLYXpha2hzdGFuXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwia2F6XCIsXG4gICAgICAgIFwicnVzXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJray1LWlwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJLYXpha2ggLSBLYXpha2hzdGFuXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQzRlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImt5LUtaXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkt5cmd5eiAtIEthemFraHN0YW5cIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDQwXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJLRVwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJLRU5cIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjQwNFwiLFxuICAgICAgXCJuYW1lXCI6IFwiS2VueWFcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJlbmdcIixcbiAgICAgICAgXCJzd2FcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcInN3LUtFXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlN3YWhpbGkgLSBLZW55YVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0NDFcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIktJXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIktJUlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMjk2XCIsXG4gICAgICBcIm5hbWVcIjogXCJLaXJpYmF0aVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImVuZ1wiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIktQXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIlBSS1wiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNDA4XCIsXG4gICAgICBcIm5hbWVcIjogXCJLb3JlYSwgRGVtb2NyYXRpYyBQZW9wbGUncyBSZXB1YmxpYyBvZlwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImtvclwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIktSXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIktPUlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNDEwXCIsXG4gICAgICBcIm5hbWVcIjogXCJLb3JlYSwgUmVwdWJsaWMgb2ZcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJrb3JcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImtvLUtSXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIktvcmVhbiAtIEtvcmVhXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQxMlwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiS1dcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiS1dUXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI0MTRcIixcbiAgICAgIFwibmFtZVwiOiBcIkt1d2FpdFwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImFyYVwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiYXItS1dcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiQXJhYmljIC0gS3V3YWl0XCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MzQwMVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiS0dcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiS0daXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI0MTdcIixcbiAgICAgIFwibmFtZVwiOiBcIkt5cmd5enN0YW5cIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJraXJcIixcbiAgICAgICAgXCJydXNcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJMQVwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJMQU9cIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjQxOFwiLFxuICAgICAgXCJuYW1lXCI6IFwiTGFvIFBlb3BsZSdzIERlbW9jcmF0aWMgUmVwdWJsaWNcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJsYW9cIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJMVlwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJMVkFcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjQyOFwiLFxuICAgICAgXCJuYW1lXCI6IFwiTGF0dmlhXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwibGF2XCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJsdi1MVlwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJMYXR2aWFuIC0gTGF0dmlhXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQyNlwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiTEJcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiTEJOXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI0MjJcIixcbiAgICAgIFwibmFtZVwiOiBcIkxlYmFub25cIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJhcmFcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImFyLUxCXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkFyYWJpYyAtIExlYmFub25cIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgzMDAxXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJMU1wiLFxuICAgICAgXCJjb2RlXzNcIjogXCJMU09cIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjQyNlwiLFxuICAgICAgXCJuYW1lXCI6IFwiTGVzb3Rob1wiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImVuZ1wiLFxuICAgICAgICBcInNvdFwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkxSXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkxCUlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNDMwXCIsXG4gICAgICBcIm5hbWVcIjogXCJMaWJlcmlhXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiZW5nXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiTFlcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiTEJZXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI0MzRcIixcbiAgICAgIFwibmFtZVwiOiBcIkxpYnlhXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiYXJhXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJhci1MWVwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJBcmFiaWMgLSBMaWJ5YVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDEwMDFcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkxJXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkxJRVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNDM4XCIsXG4gICAgICBcIm5hbWVcIjogXCJMaWVjaHRlbnN0ZWluXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiZGV1XCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJkZS1MSVwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJHZXJtYW4gLSBMaWVjaHRlbnN0ZWluXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MTQwN1wiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiTFRcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiTFRVXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI0NDBcIixcbiAgICAgIFwibmFtZVwiOiBcIkxpdGh1YW5pYVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImxpdFwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwibHQtTFRcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiTGl0aHVhbmlhbiAtIExpdGh1YW5pYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MjdcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkxVXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkxVWFwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNDQyXCIsXG4gICAgICBcIm5hbWVcIjogXCJMdXhlbWJvdXJnXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiZnJhXCIsXG4gICAgICAgIFwiZGV1XCIsXG4gICAgICAgIFwibHR6XCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJmci1MVVwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJGcmVuY2ggLSBMdXhlbWJvdXJnXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MTQwQ1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImRlLUxVXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkdlcm1hbiAtIEx1eGVtYm91cmdcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgxMDA3XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJNT1wiLFxuICAgICAgXCJjb2RlXzNcIjogXCJNQUNcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjQ0NlwiLFxuICAgICAgXCJuYW1lXCI6IFwiTWFjYW9cIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJ6aG9cIixcbiAgICAgICAgXCJwb3JcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcInpoLU1PXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkNoaW5lc2UgLSBNYWNhdSBTQVJcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgxNDA0XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJNS1wiLFxuICAgICAgXCJjb2RlXzNcIjogXCJNS0RcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjgwN1wiLFxuICAgICAgXCJuYW1lXCI6IFwiTWFjZWRvbmlhLCB0aGUgZm9ybWVyIFl1Z29zbGF2IFJlcHVibGljIG9mXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwibWtkXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJtay1NS1wiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJNYWNlZG9uaWFuIChGWVJPTSlcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDJGXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJNR1wiLFxuICAgICAgXCJjb2RlXzNcIjogXCJNREdcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjQ1MFwiLFxuICAgICAgXCJuYW1lXCI6IFwiTWFkYWdhc2NhclwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImZyYVwiLFxuICAgICAgICBcIm1sZ1wiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIk1XXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIk1XSVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNDU0XCIsXG4gICAgICBcIm5hbWVcIjogXCJNYWxhd2lcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJueWFcIixcbiAgICAgICAgXCJlbmdcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJNWVwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJNWVNcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjQ1OFwiLFxuICAgICAgXCJuYW1lXCI6IFwiTWFsYXlzaWFcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJlbmdcIixcbiAgICAgICAgXCJtc2FcIixcbiAgICAgICAgXCJ0YW1cIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcIm1zLU1ZXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIk1hbGF5IC0gTWFsYXlzaWFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDNFXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJNVlwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJNRFZcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjQ2MlwiLFxuICAgICAgXCJuYW1lXCI6IFwiTWFsZGl2ZXNcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJkaXZcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImRpdi1NVlwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJEaGl2ZWhpIC0gTWFsZGl2ZXNcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDY1XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJNTFwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJNTElcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjQ2NlwiLFxuICAgICAgXCJuYW1lXCI6IFwiTWFsaVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImJhbVwiLFxuICAgICAgICBcImZyYVwiLFxuICAgICAgICBcImZ1bFwiLFxuICAgICAgICBcInNua1wiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIk1UXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIk1MVFwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNDcwXCIsXG4gICAgICBcIm5hbWVcIjogXCJNYWx0YVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImVuZ1wiLFxuICAgICAgICBcIm1sdFwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIk1IXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIk1ITFwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNTg0XCIsXG4gICAgICBcIm5hbWVcIjogXCJNYXJzaGFsbCBJc2xhbmRzXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiZW5nXCIsXG4gICAgICAgIFwibWFoXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiTVFcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiTVRRXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI0NzRcIixcbiAgICAgIFwibmFtZVwiOiBcIk1hcnRpbmlxdWVcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJmcmFcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJNUlwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJNUlRcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjQ3OFwiLFxuICAgICAgXCJuYW1lXCI6IFwiTWF1cml0YW5pYVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImFyYVwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIk1VXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIk1VU1wiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNDgwXCIsXG4gICAgICBcIm5hbWVcIjogXCJNYXVyaXRpdXNcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJlbmdcIixcbiAgICAgICAgXCJmcmFcIixcbiAgICAgICAgXCJ0YW1cIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJZVFwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJNWVRcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjE3NVwiLFxuICAgICAgXCJuYW1lXCI6IFwiTWF5b3R0ZVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImZyYVwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIk1YXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIk1FWFwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNDg0XCIsXG4gICAgICBcIm5hbWVcIjogXCJNZXhpY29cIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJzcGFcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImVzLU1YXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlNwYW5pc2ggLSBNZXhpY29cIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwODBBXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJGTVwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJGU01cIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjU4M1wiLFxuICAgICAgXCJuYW1lXCI6IFwiTWljcm9uZXNpYSwgRmVkZXJhdGVkIFN0YXRlcyBvZlwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImVuZ1wiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIk1EXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIk1EQVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNDk4XCIsXG4gICAgICBcIm5hbWVcIjogXCJNb2xkb3ZhLCBSZXB1YmxpYyBvZlwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcInJvblwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIk1DXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIk1DT1wiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNDkyXCIsXG4gICAgICBcIm5hbWVcIjogXCJNb25hY29cIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJmcmFcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImZyLU1DXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkZyZW5jaCAtIE1vbmFjb1wiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDE4MENcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIk1OXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIk1OR1wiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNDk2XCIsXG4gICAgICBcIm5hbWVcIjogXCJNb25nb2xpYVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcIm1vblwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwibW4tTU5cIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiTW9uZ29saWFuIC0gTW9uZ29saWFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDUwXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJNRVwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJNTkVcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjQ5OVwiLFxuICAgICAgXCJuYW1lXCI6IFwiTW9udGVuZWdyb1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIk1TXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIk1TUlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNTAwXCIsXG4gICAgICBcIm5hbWVcIjogXCJNb250c2VycmF0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiTUFcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiTUFSXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI1MDRcIixcbiAgICAgIFwibmFtZVwiOiBcIk1vcm9jY29cIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJhcmFcIixcbiAgICAgICAgXCJiZXJcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImFyLU1BXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkFyYWJpYyAtIE1vcm9jY29cIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgxODAxXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJNWlwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJNT1pcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjUwOFwiLFxuICAgICAgXCJuYW1lXCI6IFwiTW96YW1iaXF1ZVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcInBvclwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIk1NXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIk1NUlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMTA0XCIsXG4gICAgICBcIm5hbWVcIjogXCJNeWFubWFyXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwibXlhXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiTkFcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiTkFNXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI1MTZcIixcbiAgICAgIFwibmFtZVwiOiBcIk5hbWliaWFcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJlbmdcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJOUlwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJOUlVcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjUyMFwiLFxuICAgICAgXCJuYW1lXCI6IFwiTmF1cnVcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJlbmdcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJOUFwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJOUExcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjUyNFwiLFxuICAgICAgXCJuYW1lXCI6IFwiTmVwYWxcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJuZXBcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJOTFwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJOTERcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjUyOFwiLFxuICAgICAgXCJuYW1lXCI6IFwiTmV0aGVybGFuZHNcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJubGRcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcIm5sLU5MXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkR1dGNoIC0gVGhlIE5ldGhlcmxhbmRzXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQxM1wiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiTkNcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiTkNMXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI1NDBcIixcbiAgICAgIFwibmFtZVwiOiBcIk5ldyBDYWxlZG9uaWFcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJmcmFcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJOWlwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJOWkxcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjU1NFwiLFxuICAgICAgXCJuYW1lXCI6IFwiTmV3IFplYWxhbmRcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJlbmdcIixcbiAgICAgICAgXCJtcmlcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImVuLU5aXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkVuZ2xpc2ggLSBOZXcgWmVhbGFuZFwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDE0MDlcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIk5JXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIk5JQ1wiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNTU4XCIsXG4gICAgICBcIm5hbWVcIjogXCJOaWNhcmFndWFcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJzcGFcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImVzLU5JXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlNwYW5pc2ggLSBOaWNhcmFndWFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHg0QzBBXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJORVwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJORVJcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjU2MlwiLFxuICAgICAgXCJuYW1lXCI6IFwiTmlnZXJcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJhcmFcIixcbiAgICAgICAgXCJmcmFcIixcbiAgICAgICAgXCJmdWxcIixcbiAgICAgICAgXCJoYXVcIixcbiAgICAgICAgXCJrYXVcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJOR1wiLFxuICAgICAgXCJjb2RlXzNcIjogXCJOR0FcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjU2NlwiLFxuICAgICAgXCJuYW1lXCI6IFwiTmlnZXJpYVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImVuZ1wiLFxuICAgICAgICBcImhhdVwiLFxuICAgICAgICBcImlib1wiLFxuICAgICAgICBcInlvclwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIk5VXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIk5JVVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNTcwXCIsXG4gICAgICBcIm5hbWVcIjogXCJOaXVlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiTkZcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiTkZLXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI1NzRcIixcbiAgICAgIFwibmFtZVwiOiBcIk5vcmZvbGsgSXNsYW5kXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiTVBcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiTU5QXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI1ODBcIixcbiAgICAgIFwibmFtZVwiOiBcIk5vcnRoZXJuIE1hcmlhbmEgSXNsYW5kc1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIk5PXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIk5PUlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNTc4XCIsXG4gICAgICBcIm5hbWVcIjogXCJOb3J3YXlcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJub2JcIixcbiAgICAgICAgXCJubm9cIixcbiAgICAgICAgXCJub3JcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcIm5iLU5PXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIk5vcndlZ2lhbiAoQm9rbcOlbCkgLSBOb3J3YXlcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDE0XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwibm4tTk9cIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiTm9yd2VnaWFuIChOeW5vcnNrKSAtIE5vcndheVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA4MTRcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIk9NXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIk9NTlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNTEyXCIsXG4gICAgICBcIm5hbWVcIjogXCJPbWFuXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiYXJhXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJhci1PTVwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJBcmFiaWMgLSBPbWFuXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MjAwMVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiUEtcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiUEFLXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI1ODZcIixcbiAgICAgIFwibmFtZVwiOiBcIlBha2lzdGFuXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiZW5nXCIsXG4gICAgICAgIFwidXJkXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJ1ci1QS1wiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJVcmR1IC0gUGFraXN0YW5cIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDIwXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJQV1wiLFxuICAgICAgXCJjb2RlXzNcIjogXCJQTFdcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjU4NVwiLFxuICAgICAgXCJuYW1lXCI6IFwiUGFsYXVcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJlbmdcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJQU1wiLFxuICAgICAgXCJjb2RlXzNcIjogXCJQU0VcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjI3NVwiLFxuICAgICAgXCJuYW1lXCI6IFwiUGFsZXN0aW5lLCBTdGF0ZSBvZlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIlBBXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIlBBTlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNTkxXCIsXG4gICAgICBcIm5hbWVcIjogXCJQYW5hbWFcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJzcGFcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImVzLVBBXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlNwYW5pc2ggLSBQYW5hbWFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgxODBBXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJQR1wiLFxuICAgICAgXCJjb2RlXzNcIjogXCJQTkdcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjU5OFwiLFxuICAgICAgXCJuYW1lXCI6IFwiUGFwdWEgTmV3IEd1aW5lYVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImVuZ1wiLFxuICAgICAgICBcImhtb1wiLFxuICAgICAgICBcInRwaVwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIlBZXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIlBSWVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNjAwXCIsXG4gICAgICBcIm5hbWVcIjogXCJQYXJhZ3VheVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImdyblwiLFxuICAgICAgICBcInNwYVwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZXMtUFlcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiU3BhbmlzaCAtIFBhcmFndWF5XCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4M0MwQVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiUEVcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiUEVSXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI2MDRcIixcbiAgICAgIFwibmFtZVwiOiBcIlBlcnVcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJheW1cIixcbiAgICAgICAgXCJxdWVcIixcbiAgICAgICAgXCJzcGFcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImVzLVBFXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlNwYW5pc2ggLSBQZXJ1XCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MjgwQVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiUEhcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiUEhMXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI2MDhcIixcbiAgICAgIFwibmFtZVwiOiBcIlBoaWxpcHBpbmVzXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiZW5nXCIsXG4gICAgICAgIFwiZmlsXCIsXG4gICAgICAgIFwidGdsXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJlbi1QSFwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJFbmdsaXNoIC0gUGhpbGlwcGluZXNcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgzNDA5XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJQTlwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJQQ05cIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjYxMlwiLFxuICAgICAgXCJuYW1lXCI6IFwiUGl0Y2Fpcm5cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJQTFwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJQT0xcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjYxNlwiLFxuICAgICAgXCJuYW1lXCI6IFwiUG9sYW5kXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwicG9sXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJwbC1QTFwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJQb2xpc2ggLSBQb2xhbmRcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDE1XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJQVFwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJQUlRcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjYyMFwiLFxuICAgICAgXCJuYW1lXCI6IFwiUG9ydHVnYWxcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJwb3JcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcInB0LVBUXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlBvcnR1Z3Vlc2UgLSBQb3J0dWdhbFwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA4MTZcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIlBSXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIlBSSVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNjMwXCIsXG4gICAgICBcIm5hbWVcIjogXCJQdWVydG8gUmljb1wiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcInNwYVwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZXMtUFJcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiU3BhbmlzaCAtIFB1ZXJ0byBSaWNvXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4NTAwQVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiUUFcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiUUFUXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI2MzRcIixcbiAgICAgIFwibmFtZVwiOiBcIlFhdGFyXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiYXJhXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJhci1RQVwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJBcmFiaWMgLSBRYXRhclwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDQwMDFcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIlJFXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIlJFVVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNjM4XCIsXG4gICAgICBcIm5hbWVcIjogXCJSw6l1bmlvblwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImZyYVwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIlJPXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIlJPVVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNjQyXCIsXG4gICAgICBcIm5hbWVcIjogXCJSb21hbmlhXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwicm9uXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJyby1ST1wiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJSb21hbmlhbiAtIFJvbWFuaWFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDE4XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJSVVwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJSVVNcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjY0M1wiLFxuICAgICAgXCJuYW1lXCI6IFwiUnVzc2lhbiBGZWRlcmF0aW9uXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwicnVzXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJydS1SVVwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJSdXNzaWFuIC0gUnVzc2lhXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQxOVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcInR0LVJVXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlRhdGFyIC0gUnVzc2lhXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQ0NFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiUldcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiUldBXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI2NDZcIixcbiAgICAgIFwibmFtZVwiOiBcIlJ3YW5kYVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImVuZ1wiLFxuICAgICAgICBcImZyYVwiLFxuICAgICAgICBcImtpblwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkJMXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkJMTVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNjUyXCIsXG4gICAgICBcIm5hbWVcIjogXCJTYWludCBCYXJ0aMOpbGVteVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImZyYVwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIlNIXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIlNITlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNjU0XCIsXG4gICAgICBcIm5hbWVcIjogXCJTYWludCBIZWxlbmEsIEFzY2Vuc2lvbiBhbmQgVHJpc3RhbiBkYSBDdW5oYVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIktOXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIktOQVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNjU5XCIsXG4gICAgICBcIm5hbWVcIjogXCJTYWludCBLaXR0cyBhbmQgTmV2aXNcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJlbmdcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJMQ1wiLFxuICAgICAgXCJjb2RlXzNcIjogXCJMQ0FcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjY2MlwiLFxuICAgICAgXCJuYW1lXCI6IFwiU2FpbnQgTHVjaWFcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJlbmdcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJNRlwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJNQUZcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjY2M1wiLFxuICAgICAgXCJuYW1lXCI6IFwiU2FpbnQgTWFydGluIChGcmVuY2ggcGFydClcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJQTVwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJTUE1cIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjY2NlwiLFxuICAgICAgXCJuYW1lXCI6IFwiU2FpbnQgUGllcnJlIGFuZCBNaXF1ZWxvblwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImZyYVwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIlZDXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIlZDVFwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNjcwXCIsXG4gICAgICBcIm5hbWVcIjogXCJTYWludCBWaW5jZW50IGFuZCB0aGUgR3JlbmFkaW5lc1wiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImVuZ1wiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIldTXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIldTTVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiODgyXCIsXG4gICAgICBcIm5hbWVcIjogXCJTYW1vYVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImVuZ1wiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIlNNXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIlNNUlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNjc0XCIsXG4gICAgICBcIm5hbWVcIjogXCJTYW4gTWFyaW5vXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiaXRhXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiU1RcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiU1RQXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI2NzhcIixcbiAgICAgIFwibmFtZVwiOiBcIlNhbyBUb21lIGFuZCBQcmluY2lwZVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcInBvclwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIlNBXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIlNBVVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNjgyXCIsXG4gICAgICBcIm5hbWVcIjogXCJTYXVkaSBBcmFiaWFcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJhcmFcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImFyLVNBXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkFyYWJpYyAtIFNhdWRpIEFyYWJpYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MDFcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIlNOXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIlNFTlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNjg2XCIsXG4gICAgICBcIm5hbWVcIjogXCJTZW5lZ2FsXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiZnJhXCIsXG4gICAgICAgIFwiZnVsXCIsXG4gICAgICAgIFwic3JyXCIsXG4gICAgICAgIFwic25rXCIsXG4gICAgICAgIFwid29sXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiUlNcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiU1JCXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI2ODhcIixcbiAgICAgIFwibmFtZVwiOiBcIlNlcmJpYVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcInNycFwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiQ3ktc3ItU1BcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiU2VyYmlhbiAoQ3lyaWxsaWMpIC0gU2VyYmlhXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MEMxQVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcIkx0LXNyLVNQXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlNlcmJpYW4gKExhdGluKSAtIFNlcmJpYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA4MUFcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIlNDXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIlNZQ1wiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNjkwXCIsXG4gICAgICBcIm5hbWVcIjogXCJTZXljaGVsbGVzXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiZW5nXCIsXG4gICAgICAgIFwiZnJhXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiU0xcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiU0xFXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI2OTRcIixcbiAgICAgIFwibmFtZVwiOiBcIlNpZXJyYSBMZW9uZVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImVuZ1wiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIlNHXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIlNHUFwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNzAyXCIsXG4gICAgICBcIm5hbWVcIjogXCJTaW5nYXBvcmVcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJ6aG9cIixcbiAgICAgICAgXCJlbmdcIixcbiAgICAgICAgXCJtc2FcIixcbiAgICAgICAgXCJ0YW1cIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcInpoLVNHXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkNoaW5lc2UgLSBTaW5nYXBvcmVcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgxMDA0XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJTWFwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJTWE1cIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjUzNFwiLFxuICAgICAgXCJuYW1lXCI6IFwiU2ludCBNYWFydGVuIChEdXRjaCBwYXJ0KVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcIm5sZFwiLFxuICAgICAgICBcImVuZ1wiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIlNLXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIlNWS1wiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNzAzXCIsXG4gICAgICBcIm5hbWVcIjogXCJTbG92YWtpYVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImNlc1wiLFxuICAgICAgICBcInNsa1wiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwic2stU0tcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiU2xvdmFrIC0gU2xvdmFraWFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDFCXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJTSVwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJTVk5cIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjcwNVwiLFxuICAgICAgXCJuYW1lXCI6IFwiU2xvdmVuaWFcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJpdGFcIixcbiAgICAgICAgXCJzbHZcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcInNsLVNJXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlNsb3ZlbmlhbiAtIFNsb3ZlbmlhXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQyNFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiU0JcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiU0xCXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIwOTBcIixcbiAgICAgIFwibmFtZVwiOiBcIlNvbG9tb24gSXNsYW5kc1wiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImVuZ1wiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIlNPXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIlNPTVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNzA2XCIsXG4gICAgICBcIm5hbWVcIjogXCJTb21hbGlhXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiYXJhXCIsXG4gICAgICAgIFwic29tXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiWkFcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiWkFGXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI3MTBcIixcbiAgICAgIFwibmFtZVwiOiBcIlNvdXRoIEFmcmljYVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImFmclwiLFxuICAgICAgICBcImVuZ1wiLFxuICAgICAgICBcIm5kZVwiLFxuICAgICAgICBcIm5ibFwiLFxuICAgICAgICBcIm5zb1wiLFxuICAgICAgICBcInNvdFwiLFxuICAgICAgICBcInNzd1wiLFxuICAgICAgICBcInRzb1wiLFxuICAgICAgICBcInRzblwiLFxuICAgICAgICBcInZlblwiLFxuICAgICAgICBcInhob1wiLFxuICAgICAgICBcInp1bFwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiYWYtWkFcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiQWZyaWthYW5zIC0gU291dGggQWZyaWNhXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQzNlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImVuLVpBXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkVuZ2xpc2ggLSBTb3V0aCBBZnJpY2FcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgxQzA5XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJHU1wiLFxuICAgICAgXCJjb2RlXzNcIjogXCJTR1NcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjIzOVwiLFxuICAgICAgXCJuYW1lXCI6IFwiU291dGggR2VvcmdpYSBhbmQgdGhlIFNvdXRoIFNhbmR3aWNoIElzbGFuZHNcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJTU1wiLFxuICAgICAgXCJjb2RlXzNcIjogXCJTU0RcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjcyOFwiLFxuICAgICAgXCJuYW1lXCI6IFwiU291dGggU3VkYW5cIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJlbmdcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJFU1wiLFxuICAgICAgXCJjb2RlXzNcIjogXCJFU1BcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjcyNFwiLFxuICAgICAgXCJuYW1lXCI6IFwiU3BhaW5cIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJzcGFcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImV1LUVTXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkJhc3F1ZSAtIEJhc3F1ZVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MkRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJjYS1FU1wiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJDYXRhbGFuIC0gQ2F0YWxhblwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MDNcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJnbC1FU1wiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJHYWxpY2lhbiAtIEdhbGljaWFuXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQ1NlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImVzLUVTXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlNwYW5pc2ggLSBTcGFpblwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDBDMEFcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkxLXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkxLQVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMTQ0XCIsXG4gICAgICBcIm5hbWVcIjogXCJTcmkgTGFua2FcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJlbmdcIixcbiAgICAgICAgXCJzaW5cIixcbiAgICAgICAgXCJ0YW1cIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJTRFwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJTRE5cIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjcyOVwiLFxuICAgICAgXCJuYW1lXCI6IFwiU3VkYW5cIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJhcmFcIixcbiAgICAgICAgXCJlbmdcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJTUlwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJTVVJcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjc0MFwiLFxuICAgICAgXCJuYW1lXCI6IFwiU3VyaW5hbWVcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJubGRcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJTSlwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJTSk1cIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjc0NFwiLFxuICAgICAgXCJuYW1lXCI6IFwiU3ZhbGJhcmQgYW5kIEphbiBNYXllblwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIlNaXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIlNXWlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNzQ4XCIsXG4gICAgICBcIm5hbWVcIjogXCJTd2F6aWxhbmRcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJlbmdcIixcbiAgICAgICAgXCJzc3dcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJTRVwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJTV0VcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjc1MlwiLFxuICAgICAgXCJuYW1lXCI6IFwiU3dlZGVuXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwic3dlXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJzdi1TRVwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJTd2VkaXNoIC0gU3dlZGVuXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQxRFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiQ0hcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiQ0hFXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI3NTZcIixcbiAgICAgIFwibmFtZVwiOiBcIlN3aXR6ZXJsYW5kXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiZnJhXCIsXG4gICAgICAgIFwiZGV1XCIsXG4gICAgICAgIFwiaXRhXCIsXG4gICAgICAgIFwicm9oXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJmci1DSFwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJGcmVuY2ggLSBTd2l0emVybGFuZFwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDEwMENcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJkZS1DSFwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJHZXJtYW4gLSBTd2l0emVybGFuZFwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA4MDdcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJpdC1DSFwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJJdGFsaWFuIC0gU3dpdHplcmxhbmRcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwODEwXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJTWVwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJTWVJcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjc2MFwiLFxuICAgICAgXCJuYW1lXCI6IFwiU3lyaWFuIEFyYWIgUmVwdWJsaWNcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJhcmFcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImFyLVNZXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkFyYWJpYyAtIFN5cmlhXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MjgwMVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcInN5ci1TWVwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJTeXJpYWMgLSBTeXJpYVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0NUFcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIlRXXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIlRXTlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiMTU4XCIsXG4gICAgICBcIm5hbWVcIjogXCJUYWl3YW4sIFByb3ZpbmNlIG9mIENoaW5hXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiemhvXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJ6aC1UV1wiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJDaGluZXNlIC0gVGFpd2FuXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQwNFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiVEpcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiVEpLXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI3NjJcIixcbiAgICAgIFwibmFtZVwiOiBcIlRhamlraXN0YW5cIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJmYXNcIixcbiAgICAgICAgXCJydXNcIixcbiAgICAgICAgXCJ0Z2tcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJUWlwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJUWkFcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjgzNFwiLFxuICAgICAgXCJuYW1lXCI6IFwiVGFuemFuaWEsIFVuaXRlZCBSZXB1YmxpYyBvZlwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImVuZ1wiLFxuICAgICAgICBcInN3YVwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIlRIXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIlRIQVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNzY0XCIsXG4gICAgICBcIm5hbWVcIjogXCJUaGFpbGFuZFwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcInRoYVwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwidGgtVEhcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiVGhhaSAtIFRoYWlsYW5kXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQxRVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiVExcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiVExTXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI2MjZcIixcbiAgICAgIFwibmFtZVwiOiBcIlRpbW9yLUxlc3RlXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwicG9yXCIsXG4gICAgICAgIFwidGV0XCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiVEdcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiVEdPXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI3NjhcIixcbiAgICAgIFwibmFtZVwiOiBcIlRvZ29cIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJld2VcIixcbiAgICAgICAgXCJmcmFcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJUS1wiLFxuICAgICAgXCJjb2RlXzNcIjogXCJUS0xcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjc3MlwiLFxuICAgICAgXCJuYW1lXCI6IFwiVG9rZWxhdVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIlRPXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIlRPTlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNzc2XCIsXG4gICAgICBcIm5hbWVcIjogXCJUb25nYVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImVuZ1wiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIlRUXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIlRUT1wiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNzgwXCIsXG4gICAgICBcIm5hbWVcIjogXCJUcmluaWRhZCBhbmQgVG9iYWdvXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiZW5nXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJlbi1UVFwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJFbmdsaXNoIC0gVHJpbmlkYWQgYW5kIFRvYmFnb1wiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDJDMDlcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIlROXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIlRVTlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNzg4XCIsXG4gICAgICBcIm5hbWVcIjogXCJUdW5pc2lhXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiYXJhXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJhci1UTlwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJBcmFiaWMgLSBUdW5pc2lhXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MUMwMVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiVFJcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiVFVSXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI3OTJcIixcbiAgICAgIFwibmFtZVwiOiBcIlR1cmtleVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcInR1clwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwidHItVFJcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiVHVya2lzaCAtIFR1cmtleVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MUZcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIlRNXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIlRLTVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNzk1XCIsXG4gICAgICBcIm5hbWVcIjogXCJUdXJrbWVuaXN0YW5cIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJ0dWtcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJUQ1wiLFxuICAgICAgXCJjb2RlXzNcIjogXCJUQ0FcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjc5NlwiLFxuICAgICAgXCJuYW1lXCI6IFwiVHVya3MgYW5kIENhaWNvcyBJc2xhbmRzXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiVFZcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiVFVWXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI3OThcIixcbiAgICAgIFwibmFtZVwiOiBcIlR1dmFsdVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImVuZ1wiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIlVHXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIlVHQVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiODAwXCIsXG4gICAgICBcIm5hbWVcIjogXCJVZ2FuZGFcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJlbmdcIixcbiAgICAgICAgXCJzd2FcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJVQVwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJVS1JcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjgwNFwiLFxuICAgICAgXCJuYW1lXCI6IFwiVWtyYWluZVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcInVrclwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwidWstVUFcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiVWtyYWluaWFuIC0gVWtyYWluZVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MjJcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIkFFXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIkFSRVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNzg0XCIsXG4gICAgICBcIm5hbWVcIjogXCJVbml0ZWQgQXJhYiBFbWlyYXRlc1wiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImFyYVwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiYXItQUVcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiQXJhYmljIC0gVW5pdGVkIEFyYWIgRW1pcmF0ZXNcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgzODAxXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJHQlwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJHQlJcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjgyNlwiLFxuICAgICAgXCJuYW1lXCI6IFwiVW5pdGVkIEtpbmdkb21cIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJlbmdcIixcbiAgICAgICAgXCJjeW1cIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImVuLUdCXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkVuZ2xpc2ggLSBVbml0ZWQgS2luZ2RvbVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA4MDlcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIlVTXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIlVTQVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiODQwXCIsXG4gICAgICBcIm5hbWVcIjogXCJVbml0ZWQgU3RhdGVzXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiZW5nXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJlbi1VU1wiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJFbmdsaXNoIC0gVW5pdGVkIFN0YXRlc1wiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDA0MDlcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIlVNXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIlVNSVwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiNTgxXCIsXG4gICAgICBcIm5hbWVcIjogXCJVbml0ZWQgU3RhdGVzIE1pbm9yIE91dGx5aW5nIElzbGFuZHNcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJVWVwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJVUllcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjg1OFwiLFxuICAgICAgXCJuYW1lXCI6IFwiVXJ1Z3VheVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcInNwYVwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiZXMtVVlcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiU3BhbmlzaCAtIFVydWd1YXlcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgzODBBXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJVWlwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJVWkJcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjg2MFwiLFxuICAgICAgXCJuYW1lXCI6IFwiVXpiZWtpc3RhblwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcInV6YlwiXG4gICAgICBdLFxuICAgICAgXCJsYW5nQ3VsdHVyZU1zXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiQ3ktdXotVVpcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiVXpiZWsgKEN5cmlsbGljKSAtIFV6YmVraXN0YW5cIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwODQzXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibGFuZ0N1bHR1cmVOYW1lXCI6IFwiTHQtdXotVVpcIixcbiAgICAgICAgICBcImRpc3BsYXlOYW1lXCI6IFwiVXpiZWsgKExhdGluKSAtIFV6YmVraXN0YW5cIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgwNDQzXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJWVVwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJWVVRcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjU0OFwiLFxuICAgICAgXCJuYW1lXCI6IFwiVmFudWF0dVwiLFxuICAgICAgXCJsYW5ndWFnZXNcIjogW1xuICAgICAgICBcImJpc1wiLFxuICAgICAgICBcImVuZ1wiLFxuICAgICAgICBcImZyYVwiXG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIlZFXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIlZFTlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiODYyXCIsXG4gICAgICBcIm5hbWVcIjogXCJWZW5lenVlbGEsIEJvbGl2YXJpYW4gUmVwdWJsaWMgb2ZcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJzcGFcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImVzLVZFXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlNwYW5pc2ggLSBWZW5lenVlbGFcIixcbiAgICAgICAgICBcImN1bHR1cmVDb2RlXCI6IFwiMHgyMDBBXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJWTlwiLFxuICAgICAgXCJjb2RlXzNcIjogXCJWTk1cIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjcwNFwiLFxuICAgICAgXCJuYW1lXCI6IFwiVmlldCBOYW1cIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJ2aWVcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcInZpLVZOXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIlZpZXRuYW1lc2UgLSBWaWV0bmFtXCIsXG4gICAgICAgICAgXCJjdWx0dXJlQ29kZVwiOiBcIjB4MDQyQVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiVkdcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiVkdCXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCIwOTJcIixcbiAgICAgIFwibmFtZVwiOiBcIlZpcmdpbiBJc2xhbmRzLCBCcml0aXNoXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiVklcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiVklSXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI4NTBcIixcbiAgICAgIFwibmFtZVwiOiBcIlZpcmdpbiBJc2xhbmRzLCBVLlMuXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiV0ZcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiV0xGXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI4NzZcIixcbiAgICAgIFwibmFtZVwiOiBcIldhbGxpcyBhbmQgRnV0dW5hXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiZnJhXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiRUhcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiRVNIXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI3MzJcIixcbiAgICAgIFwibmFtZVwiOiBcIldlc3Rlcm4gU2FoYXJhXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwic3BhXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29kZV8yXCI6IFwiWUVcIixcbiAgICAgIFwiY29kZV8zXCI6IFwiWUVNXCIsXG4gICAgICBcIm51bUNvZGVcIjogXCI4ODdcIixcbiAgICAgIFwibmFtZVwiOiBcIlllbWVuXCIsXG4gICAgICBcImxhbmd1YWdlc1wiOiBbXG4gICAgICAgIFwiYXJhXCJcbiAgICAgIF0sXG4gICAgICBcImxhbmdDdWx0dXJlTXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJsYW5nQ3VsdHVyZU5hbWVcIjogXCJhci1ZRVwiLFxuICAgICAgICAgIFwiZGlzcGxheU5hbWVcIjogXCJBcmFiaWMgLSBZZW1lblwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDI0MDFcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvZGVfMlwiOiBcIlpNXCIsXG4gICAgICBcImNvZGVfM1wiOiBcIlpNQlwiLFxuICAgICAgXCJudW1Db2RlXCI6IFwiODk0XCIsXG4gICAgICBcIm5hbWVcIjogXCJaYW1iaWFcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJlbmdcIlxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb2RlXzJcIjogXCJaV1wiLFxuICAgICAgXCJjb2RlXzNcIjogXCJaV0VcIixcbiAgICAgIFwibnVtQ29kZVwiOiBcIjcxNlwiLFxuICAgICAgXCJuYW1lXCI6IFwiWmltYmFid2VcIixcbiAgICAgIFwibGFuZ3VhZ2VzXCI6IFtcbiAgICAgICAgXCJlbmdcIixcbiAgICAgICAgXCJuZGVcIixcbiAgICAgICAgXCJzbmFcIlxuICAgICAgXSxcbiAgICAgIFwibGFuZ0N1bHR1cmVNc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImxhbmdDdWx0dXJlTmFtZVwiOiBcImVuLVpXXCIsXG4gICAgICAgICAgXCJkaXNwbGF5TmFtZVwiOiBcIkVuZ2xpc2ggLSBaaW1iYWJ3ZVwiLFxuICAgICAgICAgIFwiY3VsdHVyZUNvZGVcIjogXCIweDMwMDlcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuICBdLFxuICBcImxvY2FsZXNcIjogW1xuICAgIFtcbiAgICAgIFwiYWZcIixcbiAgICAgIFwiWkFcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJhbVwiLFxuICAgICAgXCJFVFwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImFyXCIsXG4gICAgICBcIkFFXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiYXJcIixcbiAgICAgIFwiQkhcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJhclwiLFxuICAgICAgXCJEWlwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImFyXCIsXG4gICAgICBcIkVHXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiYXJcIixcbiAgICAgIFwiSVFcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJhclwiLFxuICAgICAgXCJKT1wiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImFyXCIsXG4gICAgICBcIktXXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiYXJcIixcbiAgICAgIFwiTEJcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJhclwiLFxuICAgICAgXCJMWVwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImFyXCIsXG4gICAgICBcIk1BXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiYXJuXCIsXG4gICAgICBcIkNMXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiYXJcIixcbiAgICAgIFwiT01cIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJhclwiLFxuICAgICAgXCJRQVwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImFyXCIsXG4gICAgICBcIlNBXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiYXJcIixcbiAgICAgIFwiU1lcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJhclwiLFxuICAgICAgXCJUTlwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImFyXCIsXG4gICAgICBcIllFXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiYXNcIixcbiAgICAgIFwiSU5cIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJhelwiLFxuICAgICAgXCJDeXJsXCIsXG4gICAgICBcIkFaXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiYXpcIixcbiAgICAgIFwiTGF0blwiLFxuICAgICAgXCJBWlwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImJhXCIsXG4gICAgICBcIlJVXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiYmVcIixcbiAgICAgIFwiQllcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJiZ1wiLFxuICAgICAgXCJCR1wiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImJuXCIsXG4gICAgICBcIkJEXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiYm5cIixcbiAgICAgIFwiSU5cIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJib1wiLFxuICAgICAgXCJDTlwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImJyXCIsXG4gICAgICBcIkZSXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiYnNcIixcbiAgICAgIFwiQ3lybFwiLFxuICAgICAgXCJCQVwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImJzXCIsXG4gICAgICBcIkxhdG5cIixcbiAgICAgIFwiQkFcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJjYVwiLFxuICAgICAgXCJFU1wiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImNvXCIsXG4gICAgICBcIkZSXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiY3NcIixcbiAgICAgIFwiQ1pcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJjeVwiLFxuICAgICAgXCJHQlwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImRhXCIsXG4gICAgICBcIkRLXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiZGVcIixcbiAgICAgIFwiQVRcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJkZVwiLFxuICAgICAgXCJDSFwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImRlXCIsXG4gICAgICBcIkRFXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiZGVcIixcbiAgICAgIFwiTElcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJkZVwiLFxuICAgICAgXCJMVVwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImRzYlwiLFxuICAgICAgXCJERVwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImR2XCIsXG4gICAgICBcIk1WXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiZWxcIixcbiAgICAgIFwiR1JcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJlblwiLFxuICAgICAgXCIwMjlcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJlblwiLFxuICAgICAgXCJBVVwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImVuXCIsXG4gICAgICBcIkJaXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiZW5cIixcbiAgICAgIFwiQ0FcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJlblwiLFxuICAgICAgXCJHQlwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImVuXCIsXG4gICAgICBcIklFXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiZW5cIixcbiAgICAgIFwiSU5cIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJlblwiLFxuICAgICAgXCJKTVwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImVuXCIsXG4gICAgICBcIk1ZXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiZW5cIixcbiAgICAgIFwiTlpcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJlblwiLFxuICAgICAgXCJQSFwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImVuXCIsXG4gICAgICBcIlNHXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiZW5cIixcbiAgICAgIFwiVFRcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJlblwiLFxuICAgICAgXCJVU1wiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImVuXCIsXG4gICAgICBcIlpBXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiZW5cIixcbiAgICAgIFwiWldcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJlc1wiLFxuICAgICAgXCJBUlwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImVzXCIsXG4gICAgICBcIkJPXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiZXNcIixcbiAgICAgIFwiQ0xcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJlc1wiLFxuICAgICAgXCJDT1wiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImVzXCIsXG4gICAgICBcIkNSXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiZXNcIixcbiAgICAgIFwiRE9cIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJlc1wiLFxuICAgICAgXCJFQ1wiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImVzXCIsXG4gICAgICBcIkVTXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiZXNcIixcbiAgICAgIFwiR1RcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJlc1wiLFxuICAgICAgXCJITlwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImVzXCIsXG4gICAgICBcIk1YXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiZXNcIixcbiAgICAgIFwiTklcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJlc1wiLFxuICAgICAgXCJQQVwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImVzXCIsXG4gICAgICBcIlBFXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiZXNcIixcbiAgICAgIFwiUFJcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJlc1wiLFxuICAgICAgXCJQWVwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImVzXCIsXG4gICAgICBcIlNWXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiZXNcIixcbiAgICAgIFwiVVNcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJlc1wiLFxuICAgICAgXCJVWVwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImVzXCIsXG4gICAgICBcIlZFXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiZXRcIixcbiAgICAgIFwiRUVcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJldVwiLFxuICAgICAgXCJFU1wiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImZhXCIsXG4gICAgICBcIklSXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiZmlcIixcbiAgICAgIFwiRklcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJmaWxcIixcbiAgICAgIFwiUEhcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJmb1wiLFxuICAgICAgXCJGT1wiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImZyXCIsXG4gICAgICBcIkJFXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiZnJcIixcbiAgICAgIFwiQ0FcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJmclwiLFxuICAgICAgXCJDSFwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImZyXCIsXG4gICAgICBcIkZSXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiZnJcIixcbiAgICAgIFwiTFVcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJmclwiLFxuICAgICAgXCJNQ1wiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImZ5XCIsXG4gICAgICBcIk5MXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiZ2FcIixcbiAgICAgIFwiSUVcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJnZFwiLFxuICAgICAgXCJHQlwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImdsXCIsXG4gICAgICBcIkVTXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiZ3N3XCIsXG4gICAgICBcIkZSXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiZ3VcIixcbiAgICAgIFwiSU5cIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJoYVwiLFxuICAgICAgXCJMYXRuXCIsXG4gICAgICBcIk5HXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiaGVcIixcbiAgICAgIFwiSUxcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJoaVwiLFxuICAgICAgXCJJTlwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImhyXCIsXG4gICAgICBcIkJBXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiaHJcIixcbiAgICAgIFwiSFJcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJoc2JcIixcbiAgICAgIFwiREVcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJodVwiLFxuICAgICAgXCJIVVwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImh5XCIsXG4gICAgICBcIkFNXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiaWRcIixcbiAgICAgIFwiSURcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJpZ1wiLFxuICAgICAgXCJOR1wiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImlpXCIsXG4gICAgICBcIkNOXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiaXNcIixcbiAgICAgIFwiSVNcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJpdFwiLFxuICAgICAgXCJDSFwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcIml0XCIsXG4gICAgICBcIklUXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiaXVcIixcbiAgICAgIFwiQ2Fuc1wiLFxuICAgICAgXCJDQVwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcIml1XCIsXG4gICAgICBcIkxhdG5cIixcbiAgICAgIFwiQ0FcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJqYVwiLFxuICAgICAgXCJKUFwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImthXCIsXG4gICAgICBcIkdFXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwia2tcIixcbiAgICAgIFwiS1pcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJrbFwiLFxuICAgICAgXCJHTFwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImttXCIsXG4gICAgICBcIktIXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwia25cIixcbiAgICAgIFwiSU5cIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJrb2tcIixcbiAgICAgIFwiSU5cIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJrb1wiLFxuICAgICAgXCJLUlwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImt5XCIsXG4gICAgICBcIktHXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwibGJcIixcbiAgICAgIFwiTFVcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJsb1wiLFxuICAgICAgXCJMQVwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImx0XCIsXG4gICAgICBcIkxUXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwibHZcIixcbiAgICAgIFwiTFZcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJtaVwiLFxuICAgICAgXCJOWlwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcIm1rXCIsXG4gICAgICBcIk1LXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwibWxcIixcbiAgICAgIFwiSU5cIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJtblwiLFxuICAgICAgXCJNTlwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcIm1uXCIsXG4gICAgICBcIk1vbmdcIixcbiAgICAgIFwiQ05cIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJtb2hcIixcbiAgICAgIFwiQ0FcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJtclwiLFxuICAgICAgXCJJTlwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcIm1zXCIsXG4gICAgICBcIkJOXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwibXNcIixcbiAgICAgIFwiTVlcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJtdFwiLFxuICAgICAgXCJNVFwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcIm5iXCIsXG4gICAgICBcIk5PXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwibmVcIixcbiAgICAgIFwiTlBcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJubFwiLFxuICAgICAgXCJCRVwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcIm5sXCIsXG4gICAgICBcIk5MXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwibm5cIixcbiAgICAgIFwiTk9cIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJuc29cIixcbiAgICAgIFwiWkFcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJvY1wiLFxuICAgICAgXCJGUlwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcIm9yXCIsXG4gICAgICBcIklOXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwicGFcIixcbiAgICAgIFwiSU5cIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJwbFwiLFxuICAgICAgXCJQTFwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcInByc1wiLFxuICAgICAgXCJBRlwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcInBzXCIsXG4gICAgICBcIkFGXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwicHRcIixcbiAgICAgIFwiQlJcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJwdFwiLFxuICAgICAgXCJQVFwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcInF1dFwiLFxuICAgICAgXCJHVFwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcInF1elwiLFxuICAgICAgXCJCT1wiXG4gICAgXSxcbiAgICBbXG4gICAgICBcInF1elwiLFxuICAgICAgXCJFQ1wiXG4gICAgXSxcbiAgICBbXG4gICAgICBcInF1elwiLFxuICAgICAgXCJQRVwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcInJtXCIsXG4gICAgICBcIkNIXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwicm9cIixcbiAgICAgIFwiUk9cIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJydVwiLFxuICAgICAgXCJSVVwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcInJ3XCIsXG4gICAgICBcIlJXXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwic2FoXCIsXG4gICAgICBcIlJVXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwic2FcIixcbiAgICAgIFwiSU5cIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJzZVwiLFxuICAgICAgXCJGSVwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcInNlXCIsXG4gICAgICBcIk5PXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwic2VcIixcbiAgICAgIFwiU0VcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJzaVwiLFxuICAgICAgXCJMS1wiXG4gICAgXSxcbiAgICBbXG4gICAgICBcInNrXCIsXG4gICAgICBcIlNLXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwic2xcIixcbiAgICAgIFwiU0lcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJzbWFcIixcbiAgICAgIFwiTk9cIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJzbWFcIixcbiAgICAgIFwiU0VcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJzbWpcIixcbiAgICAgIFwiTk9cIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJzbWpcIixcbiAgICAgIFwiU0VcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJzbW5cIixcbiAgICAgIFwiRklcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJzbXNcIixcbiAgICAgIFwiRklcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJzcVwiLFxuICAgICAgXCJBTFwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcInNyXCIsXG4gICAgICBcIkN5cmxcIixcbiAgICAgIFwiQkFcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJzclwiLFxuICAgICAgXCJDeXJsXCIsXG4gICAgICBcIkNTXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwic3JcIixcbiAgICAgIFwiQ3lybFwiLFxuICAgICAgXCJNRVwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcInNyXCIsXG4gICAgICBcIkN5cmxcIixcbiAgICAgIFwiUlNcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJzclwiLFxuICAgICAgXCJMYXRuXCIsXG4gICAgICBcIkJBXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwic3JcIixcbiAgICAgIFwiTGF0blwiLFxuICAgICAgXCJDU1wiXG4gICAgXSxcbiAgICBbXG4gICAgICBcInNyXCIsXG4gICAgICBcIkxhdG5cIixcbiAgICAgIFwiTUVcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJzclwiLFxuICAgICAgXCJMYXRuXCIsXG4gICAgICBcIlJTXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwic3ZcIixcbiAgICAgIFwiRklcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJzdlwiLFxuICAgICAgXCJTRVwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcInN3XCIsXG4gICAgICBcIktFXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwic3lyXCIsXG4gICAgICBcIlNZXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwidGFcIixcbiAgICAgIFwiSU5cIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJ0ZVwiLFxuICAgICAgXCJJTlwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcInRnXCIsXG4gICAgICBcIkN5cmxcIixcbiAgICAgIFwiVEpcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJ0aFwiLFxuICAgICAgXCJUSFwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcInRrXCIsXG4gICAgICBcIlRNXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwidG5cIixcbiAgICAgIFwiWkFcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJ0clwiLFxuICAgICAgXCJUUlwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcInR0XCIsXG4gICAgICBcIlJVXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwidHptXCIsXG4gICAgICBcIkxhdG5cIixcbiAgICAgIFwiRFpcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJ1Z1wiLFxuICAgICAgXCJDTlwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcInVrXCIsXG4gICAgICBcIlVBXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwidXJcIixcbiAgICAgIFwiUEtcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJ1elwiLFxuICAgICAgXCJDeXJsXCIsXG4gICAgICBcIlVaXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwidXpcIixcbiAgICAgIFwiTGF0blwiLFxuICAgICAgXCJVWlwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcInZpXCIsXG4gICAgICBcIlZOXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwid29cIixcbiAgICAgIFwiU05cIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJ4aFwiLFxuICAgICAgXCJaQVwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcInlvXCIsXG4gICAgICBcIk5HXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiemhcIixcbiAgICAgIFwiQ05cIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJ6aFwiLFxuICAgICAgXCJIS1wiXG4gICAgXSxcbiAgICBbXG4gICAgICBcInpoXCIsXG4gICAgICBcIk1PXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiemhcIixcbiAgICAgIFwiU0dcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJ6aFwiLFxuICAgICAgXCJUV1wiXG4gICAgXSxcbiAgICBbXG4gICAgICBcInp1XCIsXG4gICAgICBcIlpBXCJcbiAgICBdXG4gIF1cbn0iLCJ2YXIgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKVxuICAsIF9kID0gcmVxdWlyZSgndW5kZXJzY29yZS5kZWVwJylcbiAgLCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKVxuICAsIGRhdGEgPSByZXF1aXJlKCcuL2RhdGEuanNvbicpO1xuXG5fLm1peGluKF9kKTtcblxudmFyIG5vb3AgPSBmdW5jdGlvbihlcnIsIHZhbHVlKSB7XG4gIGlmIChlcnIpIHJldHVybiBlcnI7XG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbmV4cG9ydHMuZ2V0Q291bnRyaWVzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZGF0YS5jb3VudHJpZXM7XG59O1xuXG5leHBvcnRzLmdldExhbmd1YWdlcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGRhdGEubGFuZ3VhZ2VzO1xufTtcblxuZXhwb3J0cy5nZXRMYW5ndWFnZUZhbWlsaWVzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZGF0YS5sYW5ndWFnZUZhbWlsaWVzO1xufTtcblxuZXhwb3J0cy5nZXRMYW5ndWFnZUNvZGVzID0gZnVuY3Rpb24gKGNvZGVUeXBlLCBjYikge1xuICB2YXIgbGFuZ3VhZ2VzID0gZGF0YS5sYW5ndWFnZXNcbiAgICAsIGNUeXBlXG4gICAgLCBjVHlwZU5hbWVzID0gWyAnaXNvNjM5XzEnLCAnaXNvNjM5XzJlbicsICdpc282MzlfMyddXG4gICAgLCBjb2RlcyA9IFtdO1xuXG4gIGNiID0gY2IgfHwgdXRpbHMuaXNGdW5jdGlvbihjb2RlVHlwZSkgPyBjb2RlVHlwZSA6IG5vb3A7XG5cbiAgY29kZVR5cGUgPSAoY29kZVR5cGUgJiYgIXV0aWxzLmlzRnVuY3Rpb24oY29kZVR5cGUpKSA/IGNvZGVUeXBlIDogMTtcbiAgY29kZVR5cGUgPSBNYXRoLmZsb29yKE51bWJlcihjb2RlVHlwZSkpO1xuICBpZiAoaXNOYU4oY29kZVR5cGUpIHx8IGNvZGVUeXBlIDwgMSB8fCBjb2RlVHlwZSA+IGNUeXBlTmFtZXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGNiKCdXcm9uZyBsYW5ndWFnZSBjb2RlIHR5cGUgcHJvdmlkZWQuIFZhbGlkIHZhbHVlczogMSwgMiwgMyBmb3IgaXNvNjM5LTEsIGlzbzYzOS0yLCBpc282MzktMyByZXNwZWN0aXZlbHknKTtcbiAgfVxuICBjVHlwZSA9IGNUeXBlTmFtZXNbY29kZVR5cGUgLSAxXTtcbiAgXy5lYWNoKGxhbmd1YWdlcywgZnVuY3Rpb24gKGxhbmd1YWdlKSB7XG4gICAgaWYgKGxhbmd1YWdlW2NUeXBlXSkgY29kZXMucHVzaChsYW5ndWFnZVtjVHlwZV0pO1xuICB9KTtcblxuICByZXR1cm4gY2IobnVsbCwgY29kZXMpO1xufTtcblxuZXhwb3J0cy5nZXRDb3VudHJ5Q29kZXMgPSBmdW5jdGlvbiAoY29kZVR5cGUsIGNiKSB7XG4gIHZhciBjb3VudHJpZXMgPSBkYXRhLmNvdW50cmllc1xuICAgICwgY1R5cGVcbiAgICAsIGNUeXBlTmFtZXMgPSBbICdudW1Db2RlJywgJ2NvZGVfMicsICdjb2RlXzMnIF1cbiAgICAsIGNvZGVzID0gW107XG5cbiAgY2IgPSBjYiB8fCB1dGlscy5pc0Z1bmN0aW9uKGNvZGVUeXBlKSA/IGNvZGVUeXBlIDogbm9vcDtcblxuICBjb2RlVHlwZSA9IChjb2RlVHlwZSAmJiAhdXRpbHMuaXNGdW5jdGlvbihjb2RlVHlwZSkpID8gY29kZVR5cGUgOiAyO1xuICBjb2RlVHlwZSA9IE1hdGguZmxvb3IoTnVtYmVyKGNvZGVUeXBlKSk7XG4gIGlmIChpc05hTihjb2RlVHlwZSkgfHwgY29kZVR5cGUgPCAxIHx8IGNvZGVUeXBlID4gY1R5cGVOYW1lcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gY2IoJ1dyb25nIGNvdW50cnkgY29kZSB0eXBlIHByb3ZpZGVkLiBWYWxpZCB2YWx1ZXM6IDEsIDIsIDMgZm9yIG51bWVyaWMgY29kZSwgYWxwaGEtMiwgYWxwaGEtMyByZXNwZWN0aXZlbHknKTtcbiAgfVxuICBjVHlwZSA9IGNUeXBlTmFtZXNbY29kZVR5cGUgLSAxXTtcbiAgXy5lYWNoKGNvdW50cmllcywgZnVuY3Rpb24gKGNvdW50cnkpIHtcbiAgICBpZiAoY291bnRyeVtjVHlwZV0pIGNvZGVzLnB1c2goY291bnRyeVtjVHlwZV0pO1xuICB9KTtcblxuICByZXR1cm4gY2IobnVsbCwgY29kZXMpO1xufTtcblxuZXhwb3J0cy5sYW5ndWFnZUNvZGVFeGlzdHMgPSBmdW5jdGlvbiAoY29kZSkge1xuICB2YXIgY29kZXNcbiAgICAsIGV4aXN0cztcblxuICBpZiAoIWNvZGUpIHJldHVybiBmYWxzZTtcbiAgY29kZSA9IGNvZGUudG9Mb3dlckNhc2UoKTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCA0OyBpKyspIHtcbiAgICBjb2RlcyA9IGV4cG9ydHMuZ2V0TGFuZ3VhZ2VDb2RlcyhpKTtcbiAgICBleGlzdHMgPSBfLmluZGV4T2YoY29kZXMsIGNvZGUpICE9IC0xO1xuICAgIGlmIChleGlzdHMpIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIGV4aXN0cztcbn07XG5cbmV4cG9ydHMuY291bnRyeUNvZGVFeGlzdHMgPSBmdW5jdGlvbiAoY29kZSkge1xuICB2YXIgY29kZXNcbiAgICAsIGV4aXN0cztcblxuICBpZiAoIWNvZGUpIHJldHVybiBmYWxzZTtcbiAgY29kZSA9IGNvZGUudG9VcHBlckNhc2UoKTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCA0OyBpKyspIHtcbiAgICBjb2RlcyA9IGV4cG9ydHMuZ2V0Q291bnRyeUNvZGVzKGkpO1xuICAgIGV4aXN0cyA9IF8uaW5kZXhPZihjb2RlcywgY29kZSkgIT0gLTE7XG4gICAgaWYgKGV4aXN0cykgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gZXhpc3RzO1xufTtcblxuZXhwb3J0cy5nZXRDb3VudHJ5ICA9IGZ1bmN0aW9uIChjb2RlLCBjYiwgbm9MYW5nSW5mbykge1xuICB2YXIgY291bnRyaWVzID0gZGF0YS5jb3VudHJpZXNcbiAgICAsIGNvdW50cnlcbiAgICAsIGNvZGVGbGRcbiAgICAsIGxhbmdzO1xuXG4gIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIGNvZGUpIHtcbiAgICByZXR1cm4gY2IoJ05vIGNvdW50cnkgY29kZSBwcm92aWRlZCcpO1xuICB9XG4gIGNiID0gY2IgfHwgbm9vcDtcbiAgY29kZSA9IGNvZGUudG9VcHBlckNhc2UoKTtcblxuICBpZiAoY29kZS5sZW5ndGggPT0gMikge1xuICAgIGNvZGVGbGQgPSAnY29kZV8yJztcbiAgfSBlbHNlIGlmIChjb2RlLmxlbmd0aCA9PSAzKSB7XG4gICAgY29kZUZsZCA9ICdjb2RlXzMnO1xuICB9XG5cbiAgaWYgKGNvZGVGbGQpIHtcbiAgICBjb3VudHJ5ID0gXy5maW5kKGNvdW50cmllcywgZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBjW2NvZGVGbGRdID09IGNvZGU7XG4gICAgfSk7XG4gICAgaWYgKCFjb3VudHJ5KSB7XG4gICAgICByZXR1cm4gY2IoJ1RoZXJlIGlzIG5vIGNvdW50cnkgd2l0aCBjb2RlIFwiJyArIGNvZGUgKyAnXCInKTtcbiAgICB9XG4gICAgY291bnRyeSA9IF8uZGVlcENsb25lKGNvdW50cnkpO1xuICAgIGlmICghbm9MYW5nSW5mbykge1xuICAgICAgbGFuZ3MgPSBjb3VudHJ5Lmxhbmd1YWdlcztcbiAgICAgIGNvdW50cnkubGFuZ3VhZ2VzID0gW107XG4gICAgICBfLmVhY2gobGFuZ3MsIGZ1bmN0aW9uIChsKSB7XG4gICAgICAgIGNvdW50cnkubGFuZ3VhZ2VzLnB1c2goZXhwb3J0cy5nZXRMYW5ndWFnZShsLCBudWxsLCB0cnVlKSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGNiKG51bGwsIGNvdW50cnkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjYignV3JvbmcgdHlwZSBvZiBjb3VudHJ5IGNvZGUgcHJvdmlkZWQnKTtcbiAgfVxufTtcblxuZXhwb3J0cy5nZXRMYW5ndWFnZSA9IGZ1bmN0aW9uIChjb2RlLCBjYiwgbm9Db3VudHJ5SW5mbykge1xuICB2YXIgbGFuZ3VhZ2VzID0gZGF0YS5sYW5ndWFnZXNcbiAgICAsIGxhbmd1YWdlXG4gICAgLCBjb2RlRmxkID0gW11cbiAgICAsIGNvdW50cnM7XG5cbiAgY2IgPSBjYiB8fCBub29wO1xuXG4gIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIGNvZGUpIHtcbiAgICByZXR1cm4gY2IoJ05vIGxhbmd1YWdlIGNvZGUgcHJvdmlkZWQnKTtcbiAgfVxuICBjb2RlID0gY29kZS50b0xvd2VyQ2FzZSgpO1xuXG4gIGlmIChjb2RlLmxlbmd0aCA9PSAyKSB7XG4gICAgY29kZUZsZC5wdXNoKCdpc282MzlfMScpO1xuICB9IGVsc2UgaWYgKGNvZGUubGVuZ3RoID09IDMpIHtcbiAgICBjb2RlRmxkLnB1c2goJ2lzbzYzOV8yJyk7XG4gICAgY29kZUZsZC5wdXNoKCdpc282MzlfMmVuJyk7XG4gICAgY29kZUZsZC5wdXNoKCdpc282MzlfMycpO1xuICB9XG5cbiAgaWYgKGNvZGVGbGQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvZGVGbGQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxhbmd1YWdlID0gXy5maW5kKGxhbmd1YWdlcywgZnVuY3Rpb24gKGwpIHtcbiAgICAgICAgcmV0dXJuIGxbY29kZUZsZFtpXV0gPT0gY29kZTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGxhbmd1YWdlKSBicmVhaztcbiAgICB9XG4gICAgaWYgKCFsYW5ndWFnZSkge1xuICAgICAgcmV0dXJuIGNiKCdUaGVyZSBpcyBubyBsYW5ndWFnZSB3aXRoIGNvZGUgXCInICsgY29kZSArICdcIicpO1xuICAgIH1cbiAgICBsYW5ndWFnZSA9IF8uZGVlcENsb25lKGxhbmd1YWdlKTtcbiAgICBpZiAoIW5vQ291bnRyeUluZm8pIHtcbiAgICAgIGNvdW50cnMgPSBsYW5ndWFnZS5jb3VudHJpZXM7XG4gICAgICBsYW5ndWFnZS5jb3VudHJpZXMgPSBbXTtcbiAgICAgIF8uZWFjaChjb3VudHJzLCBmdW5jdGlvbiAoYykge1xuICAgICAgICBsYW5ndWFnZS5jb3VudHJpZXMucHVzaChleHBvcnRzLmdldENvdW50cnkoYywgbnVsbCwgdHJ1ZSkpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBjYihudWxsLCBsYW5ndWFnZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNiKCdXcm9uZyB0eXBlIG9mIGxhbmd1YWdlIGNvZGUgcHJvdmlkZWQnKTtcbiAgfVxufTtcblxuZXhwb3J0cy5nZXRDb3VudHJ5TGFuZ3VhZ2VzID0gZnVuY3Rpb24gKGNvZGUsIGNiKSB7XG4gIHZhciBjb2RlcyA9IFtdO1xuXG4gIGNiID0gY2IgfHwgbm9vcDtcblxuICBleHBvcnRzLmdldENvdW50cnkoY29kZSwgZnVuY3Rpb24gKGVyciwgY291bnRyeSkge1xuICAgIGlmIChlcnIpIHJldHVybiBjYihlcnIpO1xuICAgIF8uZWFjaChjb3VudHJ5Lmxhbmd1YWdlcywgZnVuY3Rpb24gKGwpIHtcbiAgICAgIGNvZGVzLnB1c2goe1xuICAgICAgICAgIGlzbzYzOV8xOiBsLmlzbzYzOV8xXG4gICAgICAgICwgaXNvNjM5XzI6IGwuaXNvNjM5XzJlblxuICAgICAgICAsIGlzbzYzOV8zOiBsLmlzbzYzOV8zXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBjYihudWxsLCBjb2Rlcyk7XG59O1xuXG5leHBvcnRzLmdldExhbmd1YWdlQ291bnRyaWVzID0gZnVuY3Rpb24gKGNvZGUsIGNiKSB7XG4gIHZhciBjb2RlcyA9IFtdO1xuXG4gIGNiID0gY2IgfHwgbm9vcDtcblxuICBleHBvcnRzLmdldExhbmd1YWdlKGNvZGUsIGZ1bmN0aW9uIChlcnIsIGxhbmd1YWdlKSB7XG4gICAgaWYgKGVycikgcmV0dXJuIGNiKGVycik7XG4gICAgXy5lYWNoKGxhbmd1YWdlLmNvdW50cmllcywgZnVuY3Rpb24gKGMpIHtcbiAgICAgIGNvZGVzLnB1c2goe1xuICAgICAgICAgIGNvZGVfMjogYy5jb2RlXzJcbiAgICAgICAgLCBjb2RlXzM6IGMuY29kZV8zXG4gICAgICAgICwgbnVtQ29kZTogYy5udW1Db2RlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBjYihudWxsLCBjb2Rlcyk7XG59O1xuXG5leHBvcnRzLmdldENvdW50cnlNc0xvY2FsZXMgPSBmdW5jdGlvbiAoY29kZSwgY2IpIHtcbiAgdmFyIGNvZGVzID0gW107XG5cbiAgY2IgPSBjYiB8fCBub29wO1xuXG4gIGV4cG9ydHMuZ2V0Q291bnRyeShjb2RlLCBmdW5jdGlvbiAoZXJyLCBjb3VudHJ5KSB7XG4gICAgaWYgKGVycikgcmV0dXJuIGNiKGVycik7XG4gICAgY29kZXMgPSBjb3VudHJ5LmxhbmdDdWx0dXJlTXM7XG4gIH0pO1xuICByZXR1cm4gY2IobnVsbCwgY29kZXMpO1xufTtcblxuZXhwb3J0cy5nZXRMYW5ndWFnZU1zTG9jYWxlcyA9IGZ1bmN0aW9uIChjb2RlLCBjYikge1xuICB2YXIgY29kZXMgPSBbXTtcblxuICBjYiA9IGNiIHx8IG5vb3A7XG5cbiAgZXhwb3J0cy5nZXRMYW5ndWFnZShjb2RlLCBmdW5jdGlvbiAoZXJyLCBsYW5ndWFnZSkge1xuICAgIGlmIChlcnIpIHJldHVybiBjYihlcnIpO1xuICAgIGNvZGVzID0gbGFuZ3VhZ2UubGFuZ0N1bHR1cmVNcztcbiAgfSk7XG4gIHJldHVybiBjYihudWxsLCBjb2Rlcyk7XG59O1xuXG5leHBvcnRzLmdldExhbmd1YWdlRmFtaWx5TWVtYmVycyA9IGZ1bmN0aW9uIChmYW1pbHksIGNiKSB7XG4gIHZhciBsYW5ndWFnZXMgPSBkYXRhLmxhbmd1YWdlc1xuICAgICwgY2hlY2tcbiAgICAsIG1lbWJlcnNcbiAgICAsIHJldCA9IFtdO1xuXG4gIGNiID0gY2IgfHwgbm9vcDtcblxuICBpZiAoJ3N0cmluZycgIT09IHR5cGVvZiBmYW1pbHkpIHtcbiAgICByZXR1cm4gY2IoJ05vIGxhbmd1YWdlIGZhbWlseSBwcm92aWRlZCcpO1xuICB9XG4gIGZhbWlseSA9IGZhbWlseS50b0xvd2VyQ2FzZSgpO1xuXG4gIGNoZWNrID0gXy5maW5kKGRhdGEubGFuZ3VhZ2VGYW1pbGllcywgZnVuY3Rpb24gKGYpIHtcbiAgICByZXR1cm4gZi50b0xvd2VyQ2FzZSgpID09IGZhbWlseTtcbiAgfSk7XG4gIGlmICghY2hlY2spIHtcbiAgICByZXR1cm4gY2IoJ1RoZXJlIGlzIG5vIGxhbmd1YWdlIGZhbWlseSBcIicgKyBmYW1pbHkgKyAnXCInKTtcbiAgfVxuXG4gIG1lbWJlcnMgPSBfLmZpbHRlcihsYW5ndWFnZXMsIGZ1bmN0aW9uIChsKSB7XG4gICAgcmV0dXJuIGwuZmFtaWx5LnRvTG93ZXJDYXNlKCkgPT0gZmFtaWx5O1xuICB9KTtcbiAgXy5lYWNoKG1lbWJlcnMsIGZ1bmN0aW9uIChsKSB7XG4gICAgcmV0LnB1c2goZXhwb3J0cy5nZXRMYW5ndWFnZShsLmlzbzYzOV8zKSk7XG4gIH0pO1xuICByZXR1cm4gY2IobnVsbCwgcmV0KTtcbn07XG5cbmV4cG9ydHMuZ2V0TG9jYWxlcyA9IGZ1bmN0aW9uIChtb2RlKSB7XG4gIHZhciBsb2NhbGVzID0gZGF0YS5sb2NhbGVzXG4gICAgLCByZXQgPSBbXVxuICAgICwgbG9jMjtcbiAgbG9jYWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChsb2MpIHtcbiAgICBsb2MyID0gbG9jWzJdID8gJy0nICsgbG9jWzJdIDogJyc7XG4gICAgaWYgKG1vZGUpIHtcbiAgICAgIHJldC5wdXNoKGxvY1swXSArIGxvYzIgKyAnLScgKyBsb2NbMV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXQucHVzaChsb2NbMF0gKyAnLScgKyBsb2NbMV0gKyBsb2MyKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmV0O1xufSIsImV4cG9ydHMuaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIChmbikge1xuICB2YXIgZ2V0VHlwZSA9IHt9O1xuICByZXR1cm4gZm4gJiYgZ2V0VHlwZS50b1N0cmluZy5jYWxsKGZuKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhc3NpZ24gICAgICAgID0gcmVxdWlyZSgnZXM1LWV4dC9vYmplY3QvYXNzaWduJylcbiAgLCBub3JtYWxpemVPcHRzID0gcmVxdWlyZSgnZXM1LWV4dC9vYmplY3Qvbm9ybWFsaXplLW9wdGlvbnMnKVxuICAsIGlzQ2FsbGFibGUgICAgPSByZXF1aXJlKCdlczUtZXh0L29iamVjdC9pcy1jYWxsYWJsZScpXG4gICwgY29udGFpbnMgICAgICA9IHJlcXVpcmUoJ2VzNS1leHQvc3RyaW5nLyMvY29udGFpbnMnKVxuXG4gICwgZDtcblxuZCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRzY3IsIHZhbHVlLyosIG9wdGlvbnMqLykge1xuXHR2YXIgYywgZSwgdywgb3B0aW9ucywgZGVzYztcblx0aWYgKChhcmd1bWVudHMubGVuZ3RoIDwgMikgfHwgKHR5cGVvZiBkc2NyICE9PSAnc3RyaW5nJykpIHtcblx0XHRvcHRpb25zID0gdmFsdWU7XG5cdFx0dmFsdWUgPSBkc2NyO1xuXHRcdGRzY3IgPSBudWxsO1xuXHR9IGVsc2Uge1xuXHRcdG9wdGlvbnMgPSBhcmd1bWVudHNbMl07XG5cdH1cblx0aWYgKGRzY3IgPT0gbnVsbCkge1xuXHRcdGMgPSB3ID0gdHJ1ZTtcblx0XHRlID0gZmFsc2U7XG5cdH0gZWxzZSB7XG5cdFx0YyA9IGNvbnRhaW5zLmNhbGwoZHNjciwgJ2MnKTtcblx0XHRlID0gY29udGFpbnMuY2FsbChkc2NyLCAnZScpO1xuXHRcdHcgPSBjb250YWlucy5jYWxsKGRzY3IsICd3Jyk7XG5cdH1cblxuXHRkZXNjID0geyB2YWx1ZTogdmFsdWUsIGNvbmZpZ3VyYWJsZTogYywgZW51bWVyYWJsZTogZSwgd3JpdGFibGU6IHcgfTtcblx0cmV0dXJuICFvcHRpb25zID8gZGVzYyA6IGFzc2lnbihub3JtYWxpemVPcHRzKG9wdGlvbnMpLCBkZXNjKTtcbn07XG5cbmQuZ3MgPSBmdW5jdGlvbiAoZHNjciwgZ2V0LCBzZXQvKiwgb3B0aW9ucyovKSB7XG5cdHZhciBjLCBlLCBvcHRpb25zLCBkZXNjO1xuXHRpZiAodHlwZW9mIGRzY3IgIT09ICdzdHJpbmcnKSB7XG5cdFx0b3B0aW9ucyA9IHNldDtcblx0XHRzZXQgPSBnZXQ7XG5cdFx0Z2V0ID0gZHNjcjtcblx0XHRkc2NyID0gbnVsbDtcblx0fSBlbHNlIHtcblx0XHRvcHRpb25zID0gYXJndW1lbnRzWzNdO1xuXHR9XG5cdGlmIChnZXQgPT0gbnVsbCkge1xuXHRcdGdldCA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICghaXNDYWxsYWJsZShnZXQpKSB7XG5cdFx0b3B0aW9ucyA9IGdldDtcblx0XHRnZXQgPSBzZXQgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoc2V0ID09IG51bGwpIHtcblx0XHRzZXQgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIWlzQ2FsbGFibGUoc2V0KSkge1xuXHRcdG9wdGlvbnMgPSBzZXQ7XG5cdFx0c2V0ID0gdW5kZWZpbmVkO1xuXHR9XG5cdGlmIChkc2NyID09IG51bGwpIHtcblx0XHRjID0gdHJ1ZTtcblx0XHRlID0gZmFsc2U7XG5cdH0gZWxzZSB7XG5cdFx0YyA9IGNvbnRhaW5zLmNhbGwoZHNjciwgJ2MnKTtcblx0XHRlID0gY29udGFpbnMuY2FsbChkc2NyLCAnZScpO1xuXHR9XG5cblx0ZGVzYyA9IHsgZ2V0OiBnZXQsIHNldDogc2V0LCBjb25maWd1cmFibGU6IGMsIGVudW1lcmFibGU6IGUgfTtcblx0cmV0dXJuICFvcHRpb25zID8gZGVzYyA6IGFzc2lnbihub3JtYWxpemVPcHRzKG9wdGlvbnMpLCBkZXNjKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9pcy1pbXBsZW1lbnRlZCcpKClcblx0PyBPYmplY3QuYXNzaWduXG5cdDogcmVxdWlyZSgnLi9zaGltJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgYXNzaWduID0gT2JqZWN0LmFzc2lnbiwgb2JqO1xuXHRpZiAodHlwZW9mIGFzc2lnbiAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGZhbHNlO1xuXHRvYmogPSB7IGZvbzogJ3JheicgfTtcblx0YXNzaWduKG9iaiwgeyBiYXI6ICdkd2EnIH0sIHsgdHJ6eTogJ3RyenknIH0pO1xuXHRyZXR1cm4gKG9iai5mb28gKyBvYmouYmFyICsgb2JqLnRyenkpID09PSAncmF6ZHdhdHJ6eSc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5cyAgPSByZXF1aXJlKCcuLi9rZXlzJylcbiAgLCB2YWx1ZSA9IHJlcXVpcmUoJy4uL3ZhbGlkLXZhbHVlJylcblxuICAsIG1heCA9IE1hdGgubWF4O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkZXN0LCBzcmMvKiwg4oCmc3JjbiovKSB7XG5cdHZhciBlcnJvciwgaSwgbCA9IG1heChhcmd1bWVudHMubGVuZ3RoLCAyKSwgYXNzaWduO1xuXHRkZXN0ID0gT2JqZWN0KHZhbHVlKGRlc3QpKTtcblx0YXNzaWduID0gZnVuY3Rpb24gKGtleSkge1xuXHRcdHRyeSB7IGRlc3Rba2V5XSA9IHNyY1trZXldOyB9IGNhdGNoIChlKSB7XG5cdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGU7XG5cdFx0fVxuXHR9O1xuXHRmb3IgKGkgPSAxOyBpIDwgbDsgKytpKSB7XG5cdFx0c3JjID0gYXJndW1lbnRzW2ldO1xuXHRcdGtleXMoc3JjKS5mb3JFYWNoKGFzc2lnbik7XG5cdH1cblx0aWYgKGVycm9yICE9PSB1bmRlZmluZWQpIHRocm93IGVycm9yO1xuXHRyZXR1cm4gZGVzdDtcbn07XG4iLCIvLyBEZXByZWNhdGVkXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nOyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vaXMtaW1wbGVtZW50ZWQnKSgpXG5cdD8gT2JqZWN0LmtleXNcblx0OiByZXF1aXJlKCcuL3NoaW0nKTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cdHRyeSB7XG5cdFx0T2JqZWN0LmtleXMoJ3ByaW1pdGl2ZScpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGtleXMgPSBPYmplY3Qua2V5cztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG5cdHJldHVybiBrZXlzKG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogT2JqZWN0KG9iamVjdCkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGZvckVhY2ggPSBBcnJheS5wcm90b3R5cGUuZm9yRWFjaCwgY3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcblxudmFyIHByb2Nlc3MgPSBmdW5jdGlvbiAoc3JjLCBvYmopIHtcblx0dmFyIGtleTtcblx0Zm9yIChrZXkgaW4gc3JjKSBvYmpba2V5XSA9IHNyY1trZXldO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucy8qLCDigKZvcHRpb25zKi8pIHtcblx0dmFyIHJlc3VsdCA9IGNyZWF0ZShudWxsKTtcblx0Zm9yRWFjaC5jYWxsKGFyZ3VtZW50cywgZnVuY3Rpb24gKG9wdGlvbnMpIHtcblx0XHRpZiAob3B0aW9ucyA9PSBudWxsKSByZXR1cm47XG5cdFx0cHJvY2VzcyhPYmplY3Qob3B0aW9ucyksIHJlc3VsdCk7XG5cdH0pO1xuXHRyZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4pIHtcblx0aWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IFR5cGVFcnJvcihmbiArIFwiIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuXHRyZXR1cm4gZm47XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRpZiAodmFsdWUgPT0gbnVsbCkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB1c2UgbnVsbCBvciB1bmRlZmluZWRcIik7XG5cdHJldHVybiB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9pcy1pbXBsZW1lbnRlZCcpKClcblx0PyBTdHJpbmcucHJvdG90eXBlLmNvbnRhaW5zXG5cdDogcmVxdWlyZSgnLi9zaGltJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBzdHIgPSAncmF6ZHdhdHJ6eSc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXHRpZiAodHlwZW9mIHN0ci5jb250YWlucyAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGZhbHNlO1xuXHRyZXR1cm4gKChzdHIuY29udGFpbnMoJ2R3YScpID09PSB0cnVlKSAmJiAoc3RyLmNvbnRhaW5zKCdmb28nKSA9PT0gZmFsc2UpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbmRleE9mID0gU3RyaW5nLnByb3RvdHlwZS5pbmRleE9mO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzZWFyY2hTdHJpbmcvKiwgcG9zaXRpb24qLykge1xuXHRyZXR1cm4gaW5kZXhPZi5jYWxsKHRoaXMsIHNlYXJjaFN0cmluZywgYXJndW1lbnRzWzFdKSA+IC0xO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGQgICAgICAgID0gcmVxdWlyZSgnZCcpXG4gICwgY2FsbGFibGUgPSByZXF1aXJlKCdlczUtZXh0L29iamVjdC92YWxpZC1jYWxsYWJsZScpXG5cbiAgLCBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSwgY2FsbCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsXG4gICwgY3JlYXRlID0gT2JqZWN0LmNyZWF0ZSwgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHlcbiAgLCBkZWZpbmVQcm9wZXJ0aWVzID0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXNcbiAgLCBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHlcbiAgLCBkZXNjcmlwdG9yID0geyBjb25maWd1cmFibGU6IHRydWUsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSB9XG5cbiAgLCBvbiwgb25jZSwgb2ZmLCBlbWl0LCBtZXRob2RzLCBkZXNjcmlwdG9ycywgYmFzZTtcblxub24gPSBmdW5jdGlvbiAodHlwZSwgbGlzdGVuZXIpIHtcblx0dmFyIGRhdGE7XG5cblx0Y2FsbGFibGUobGlzdGVuZXIpO1xuXG5cdGlmICghaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLCAnX19lZV9fJykpIHtcblx0XHRkYXRhID0gZGVzY3JpcHRvci52YWx1ZSA9IGNyZWF0ZShudWxsKTtcblx0XHRkZWZpbmVQcm9wZXJ0eSh0aGlzLCAnX19lZV9fJywgZGVzY3JpcHRvcik7XG5cdFx0ZGVzY3JpcHRvci52YWx1ZSA9IG51bGw7XG5cdH0gZWxzZSB7XG5cdFx0ZGF0YSA9IHRoaXMuX19lZV9fO1xuXHR9XG5cdGlmICghZGF0YVt0eXBlXSkgZGF0YVt0eXBlXSA9IGxpc3RlbmVyO1xuXHRlbHNlIGlmICh0eXBlb2YgZGF0YVt0eXBlXSA9PT0gJ29iamVjdCcpIGRhdGFbdHlwZV0ucHVzaChsaXN0ZW5lcik7XG5cdGVsc2UgZGF0YVt0eXBlXSA9IFtkYXRhW3R5cGVdLCBsaXN0ZW5lcl07XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5vbmNlID0gZnVuY3Rpb24gKHR5cGUsIGxpc3RlbmVyKSB7XG5cdHZhciBvbmNlLCBzZWxmO1xuXG5cdGNhbGxhYmxlKGxpc3RlbmVyKTtcblx0c2VsZiA9IHRoaXM7XG5cdG9uLmNhbGwodGhpcywgdHlwZSwgb25jZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRvZmYuY2FsbChzZWxmLCB0eXBlLCBvbmNlKTtcblx0XHRhcHBseS5jYWxsKGxpc3RlbmVyLCB0aGlzLCBhcmd1bWVudHMpO1xuXHR9KTtcblxuXHRvbmNlLl9fZWVPbmNlTGlzdGVuZXJfXyA9IGxpc3RlbmVyO1xuXHRyZXR1cm4gdGhpcztcbn07XG5cbm9mZiA9IGZ1bmN0aW9uICh0eXBlLCBsaXN0ZW5lcikge1xuXHR2YXIgZGF0YSwgbGlzdGVuZXJzLCBjYW5kaWRhdGUsIGk7XG5cblx0Y2FsbGFibGUobGlzdGVuZXIpO1xuXG5cdGlmICghaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLCAnX19lZV9fJykpIHJldHVybiB0aGlzO1xuXHRkYXRhID0gdGhpcy5fX2VlX187XG5cdGlmICghZGF0YVt0eXBlXSkgcmV0dXJuIHRoaXM7XG5cdGxpc3RlbmVycyA9IGRhdGFbdHlwZV07XG5cblx0aWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdvYmplY3QnKSB7XG5cdFx0Zm9yIChpID0gMDsgKGNhbmRpZGF0ZSA9IGxpc3RlbmVyc1tpXSk7ICsraSkge1xuXHRcdFx0aWYgKChjYW5kaWRhdGUgPT09IGxpc3RlbmVyKSB8fFxuXHRcdFx0XHRcdChjYW5kaWRhdGUuX19lZU9uY2VMaXN0ZW5lcl9fID09PSBsaXN0ZW5lcikpIHtcblx0XHRcdFx0aWYgKGxpc3RlbmVycy5sZW5ndGggPT09IDIpIGRhdGFbdHlwZV0gPSBsaXN0ZW5lcnNbaSA/IDAgOiAxXTtcblx0XHRcdFx0ZWxzZSBsaXN0ZW5lcnMuc3BsaWNlKGksIDEpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRpZiAoKGxpc3RlbmVycyA9PT0gbGlzdGVuZXIpIHx8XG5cdFx0XHRcdChsaXN0ZW5lcnMuX19lZU9uY2VMaXN0ZW5lcl9fID09PSBsaXN0ZW5lcikpIHtcblx0XHRcdGRlbGV0ZSBkYXRhW3R5cGVdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuZW1pdCA9IGZ1bmN0aW9uICh0eXBlKSB7XG5cdHZhciBpLCBsLCBsaXN0ZW5lciwgbGlzdGVuZXJzLCBhcmdzO1xuXG5cdGlmICghaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLCAnX19lZV9fJykpIHJldHVybjtcblx0bGlzdGVuZXJzID0gdGhpcy5fX2VlX19bdHlwZV07XG5cdGlmICghbGlzdGVuZXJzKSByZXR1cm47XG5cblx0aWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdvYmplY3QnKSB7XG5cdFx0bCA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cdFx0YXJncyA9IG5ldyBBcnJheShsIC0gMSk7XG5cdFx0Zm9yIChpID0gMTsgaSA8IGw7ICsraSkgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG5cblx0XHRsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuc2xpY2UoKTtcblx0XHRmb3IgKGkgPSAwOyAobGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV0pOyArK2kpIHtcblx0XHRcdGFwcGx5LmNhbGwobGlzdGVuZXIsIHRoaXMsIGFyZ3MpO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRjYXNlIDE6XG5cdFx0XHRjYWxsLmNhbGwobGlzdGVuZXJzLCB0aGlzKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgMjpcblx0XHRcdGNhbGwuY2FsbChsaXN0ZW5lcnMsIHRoaXMsIGFyZ3VtZW50c1sxXSk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIDM6XG5cdFx0XHRjYWxsLmNhbGwobGlzdGVuZXJzLCB0aGlzLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSk7XG5cdFx0XHRicmVhaztcblx0XHRkZWZhdWx0OlxuXHRcdFx0bCA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KGwgLSAxKTtcblx0XHRcdGZvciAoaSA9IDE7IGkgPCBsOyArK2kpIHtcblx0XHRcdFx0YXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG5cdFx0XHR9XG5cdFx0XHRhcHBseS5jYWxsKGxpc3RlbmVycywgdGhpcywgYXJncyk7XG5cdFx0fVxuXHR9XG59O1xuXG5tZXRob2RzID0ge1xuXHRvbjogb24sXG5cdG9uY2U6IG9uY2UsXG5cdG9mZjogb2ZmLFxuXHRlbWl0OiBlbWl0XG59O1xuXG5kZXNjcmlwdG9ycyA9IHtcblx0b246IGQob24pLFxuXHRvbmNlOiBkKG9uY2UpLFxuXHRvZmY6IGQob2ZmKSxcblx0ZW1pdDogZChlbWl0KVxufTtcblxuYmFzZSA9IGRlZmluZVByb3BlcnRpZXMoe30sIGRlc2NyaXB0b3JzKTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZnVuY3Rpb24gKG8pIHtcblx0cmV0dXJuIChvID09IG51bGwpID8gY3JlYXRlKGJhc2UpIDogZGVmaW5lUHJvcGVydGllcyhPYmplY3QobyksIGRlc2NyaXB0b3JzKTtcbn07XG5leHBvcnRzLm1ldGhvZHMgPSBtZXRob2RzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2ZyYW5jJyk7XG4iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwiTGF0aW5cIjoge1xuICAgIFwic3BhXCI6IFwiIGRlfG9zIHxkZSB8IGxhfGxhIHwgeSB8IGEgfGVzIHzDs24gfGnDs258cmVjfGVyZXxkZXJ8IGNvfGUgbHxlbCB8ZW4gfGllbnxjaG98ZW50fGVjaHxjacOzfGFjaXxvIGF8YSBwfCBlbHxhIGx8YWwgfGFzIHxlIGR8IGVufG5hIHxvbmF8cyBkfGRhIHxudGV8IHRvfGFkIHxlbmV8Y29ufCBwcnwgc3V8dG9kfCBzZXxobyB8bG9zfCBwZXxwZXJ8ZXJzfCBsb3xvIGR8IHRpfGNpYXxuIGR8Y2lvfCBlc3xpZGF8cmVzfGEgdHx0aWV8aW9ufHJzb3x0ZSB8ZG8gfCBpbnxzb258IHJlfCBsaXx0byB8ZGFkfHRhZHxlIHN8ZXN0fHByb3xxdWV8bWVufCBwb3xhIGV8b2RhfG5jaXwgcXV8IHVufHVlIHxuZSB8biBlfHMgeXxsaWJ8c3UgfCBuYXxzIGV8bmFjfGlhIHxlIGV8dHJhfCBwYXxvciB8YWRvfGEgZHxuZXN8cmEgfHNlIHx1YWx8YSBjfGVyIHxwb3J8Y29tfG5hbHxydGF8YSBzfGJlcnwgbyB8b25lfHMgcHxkb3N8csOhIHxzdGF8bGVzfGRlc3xpYmV8c2VyfGVyYXxhciB8ZXJ0fHRlcnwgZGl8YWxlfGwgZHxudG98aG9zfGRlbHxpY2F8YSBhfHMgbnxuIGN8b2NpfGltaXxpbyB8byBlfHJlIHx5IGx8ZSBjfGFudHxjY2l8IGFzfGxhc3xwYXJ8YW1lfCBjdXxpY2l8YXJhfGVuY3xzIHR8bmRpfCBzb3xvIHN8bWllfHRvc3x1bmF8YnJlfGRpY3xjbGF8cyBsfGUgYXxsIHB8cHJlfG50cnxvIHR8aWFsfHkgYXxuaWR8biBwfGEgeXxtYW58b21vfHNvIHxuIGx8IGFsfGFsaXxzIGF8bm8gfCBpZ3xzIHN8ZSBwfG50YXx1bWF8dGVufGd1YXxhZGV8eSBlfHNvY3xtbyB8IGZ1fGlndXxvIHB8biB0fGh1bXxkIGR8cmFufHJpYXx5IGR8YWRhfHRpdnxsIGV8Y2FzfCBjYXx2aWR8bCB0fHMgY3xpZG98ZGFzfGRpc3xzIGl8IGh1fHMgb3xuYWR8ZnVufCBtYXxyYWN8bmRhfGVsaXxzYXJ8dW5kfCBhY3x1bml8bWJyfGEgdXxkaWV8ZSBpfHF1aXxhIGl8IGhhfGxhcnwgdHJ8b2RvfGNhIHx0aWN8byB5fGN0aXxsaWR8b3JpfG5kb3xhcml8IG1lfHRhIHxpbmR8ZXNhfGN1YXx1biB8aWVyfHRhbHxlc3B8c2VnfGVsZXxvbnN8aXRvfG9udHxpdmF8cyBofGQgeXxub3N8aXN0fHJzZXwgbGV8Y2llfGlkZXxlZGl8ZWNjfGlvc3xsIG18ciBlfG1lZHx0b3J8c3RpfG4gYXxyaW18dWllfHBsZXx0cml8aWJyfHN1c3xsbyB8ZWN0fHBlbnx5IGN8YW4gfGUgaHxuIHN8ZXJufHRhcnxsIHl8ZWd1fGd1cnx1cmF8aW50fG9uZHxtYXR8bCByfHIgYXxpc2Z8b3RlXCIsXG4gICAgXCJlbmdcIjogXCIgdGh8dGhlfCBhbnxoZSB8bmQgfGFuZHxpb258IG9mfG9mIHx0aW98IHRvfHRvIHxvbiB8IGlufGFsIHxhdGl8aWdofGdodHxyaWd8IHJpfG9yIHxlbnR8YXMgfGVkIHxpcyB8bGwgfGluIHwgYmV8ZSByfG5lIHxvbmV8dmVyfGFsbHxzIHR8ZXZlfHQgdHwgZnJ8cyBhfCBoYXwgcmV8dHkgfGVyeXwgb3J8ZCB0fCBwcnxodCB8IGNvfCBldnxlIGh8ZSBhfG5nIHx0cyB8aGlzfGluZ3xiZSB8eW9ufCBzaHxjZSB8cmVlfGZyZXxyeW98biB0fGhlcnxtZW58bmF0fHNoYXxwcm98bmFsfHkgYXxoYXN8ZXMgfGZvcnwgaGl8aGFsfGYgdHxuIGF8biBvfG50IHwgcGV8cyBvfCBmb3xkIGl8bmNlfGVyIHxvbnN8cmVzfGUgc3xlY3R8aXR5fGx5IHxsIGJ8cnkgfGUgZXxlcnN8ZSBpfGFuIHxlIG98IGRlfGN0aXxkb218ZWRvfGVlZHxodHN8dGVyfG9uYXxyZSB8IG5vfCB3aHwgYSB8IHVufGQgZnwgYXN8bnkgfGwgYXxlIHB8ZXJlfCBlbnwgbmF8IHdpfG5pdHxudGV8ZCBhfGFueXx0ZWR8IGRpfG5zIHxzdGF8dGggfHBlcnxpdGh8ZSB0fHN0IHxlIGN8eSB0fG9tIHxzb2N8IGFyfGNoIHx0IG98ZCBvfG50aXxzIGV8ZXF1fHZlIHxvY2l8bWFufCBmdXxvdGV8b3RofGVzc3wgYWx8IGFjfHdpdHxpYWx8IG1hfHVuaXwgc2V8cmVhfCBzb3wgb258bGl0fGludHxyIHR8eSBvfGVuY3x0aGl8dWFsfHQgYXwgZXF8dGF0fHF1YXxpdmV8IHN0fGFsaXxlIHd8bCBvfGFyZXxmIGh8Y29ufHRlIHxsZWR8IGlzfHVuZHxjaWF8ZSBmfGxlIHwgbGF8eSBpfHVtYXxieSB8IGJ5fGh1bXxmIGF8aWMgfCBodXxhdmV8Z2UgfHIgYXwgd298byBhfG1zIHxjb218IG1lfGVhc3xzIGR8dGVjfCBsaXxuIGV8ZW4gfHJhdHx0aXR8cGxlfHdoZXxhdGV8byB0fHMgcnx0IGZ8cm90fCBjaHxjaWV8ZGlzfGFnZXxhcnl8byBvfGFuY3xlbGl8bm8gfCBmYXwgc3V8c29ufGluY3xhdCB8bmRhfGhvdXx3b3J8dCBpfG5kZXxyb218b21zfCBvdHxnIHR8ZW1lfHRsZXxpdGl8Z25pfHMgd3xpdGx8ZHVjfGQgd3x3aGl8YWN0fGhpY3xhdyB8bGF3fCBoZXxpY2h8bWlufGltaXxvcnR8byBzfHNlIHxlIGJ8bnRyfHRyYXxlZHV8b3VufHRhbnxlIGR8bnN0fGwgcHxkIG58bGQgfG50YXxzIGl8YmxlfG4gcHwgcHV8biBzfCBhdHxpbHl8cnRofHRob3xmdWx8c3NpfGRlcnxvIGV8Y2F0fHVjYXx1bnR8aWVufCBlZHxvIHB8aCBhfGVyYXxpbmR8cGVufHNlY3xuIHd8b21tfHIgc1wiLFxuICAgIFwicG9yXCI6IFwib3MgfGRlIHwgZGV8IGEgfCBlIHxvIGR8dG8gfMOjbyB8IGRpfGVudHxkYSB8aXRvfGVtIHwgY298ZWl0fGFzIHxkaXJ8ZXMgfGlyZXxyZWl8IHNlfMOnw6NvfGFkZXxhIHB8ZGFkfGUgZHxzIGR8bWVufG50ZXxkbyB8cyBlfCBwcnwgcGV8ZG9zfCB0b3wgZGF8YSBhfG8gZXwgbyB8byBhfGVzc3xjb258dG9kfHF1ZXwgcXV8dGUgfGUgYXwgZG98YWwgfHJlc3xpZGF8bSBkfCBpbnwgb3V8ZXIgfHNzb3wgbmF8IHJlfCBwb3xhIHN8IGxpfHVtYXxjaWF8YXIgfHByb3xlIGV8YSBkfCB0ZXxhw6fDo3xhIHR8IGVzfCBzdXxvdSB8dWUgfHMgcHx0b3N8YSBlfGRlc3xyYSB8Y29tfG5vIHxhbWV8aWEgfGUgcHx0ZW18bnRvfCBwYXxpcyB8ZXN0fHRyYXzDtWVzfG5hIHxzIG98b2RhfGRhc3xzZXJ8c29hfHMgbnxwZXN8byBwfHMgYXxvIHN8ZSBvfCBlbXwgYXN8IMOgIHxvIG98YWlzfGJlcnxhZG98b2EgfG8gdHxlIHN8bWFufHN1YXx1YSB8IG5vfCBvc3xhIGN8dGVyfMOnw7VlfGVyZHxsaWJ8cmRhfHMgc3xuY2l8aWJlfGUgbnxpY2F8b2RvfHNvIHxuYWx8bnRyfHMgdHxodW18dXJhfCBhb3xvbmF8dWFsfCBzb3xvciB8bWEgfHN0YXxvIGN8YSBufHByZXxhcmF8ZXJhfG9uc3xlIHR8ciBhfHBhcnxvIMOgfCBodXxpbmR8cG9yfGNpb3xyaWF8bSBhfHMgY3wgdW18YSBsfGd1YXxyYW58IGVufG5kaXxvIGl8ZSBjfHJhw6d8aW9ufG5pZHxhY2l8YW5vfHNvY3xlIHJ8b2NpfCBhY3x1bmR8c2VufG5vc3xuc2l8cmVjfGltZXxhbGl8aW50fHVtIHxwZXJ8bmFjfCBhbHxtIG98ciBwfCBmdXxuZG98b250fGHDp8O1fCBpZ3xpZ3V8ZnVufG50YXwgbWF8dW5pfGPDp8OjfGVyZXwgZXh8YSBpfCBtZXxlc2V8cmlvfGwgZHxhIG98cyBofHBlbHxhZGF8cHJpfGlkZXxhbSB8bSBwfHBvZHxzIGZ8w6ltIHxhIGZ8aW8gfG9kZXxjYSB8aXRhfGxpZHx0aXZ8ZSBmfHZpZHxyIGV8ZXNwfG5kYXxvbW98ZSBsfG5hw6d8byByfGFudHxhIHF8dGFkfGxpY3xpdmF8IGZhfHZlcnxzIGx8aWFsfGNsYXxuZ3V8aW5nfCBjYXxtbyB8ZGVyfCB2aXxlbGl8aXN0fHRhIHxzZSB8YXRpfGlvc3xpZG98ciBvfGVjaXxkaXN8IHVufGUgaXxyIGR8ZWPDp3xvIHF8cyBpfHF1YXzDqm5jfGEgbXxzZXV8c3RpfG5pbnx1ZXJ8cmFyfGNhc3xhb3N8ZW5zfGd1w6l8aWFzfHNpZHx1w6ltfHR1cnxkYW18c3NlfGFvIHxlbGF8bCBlfGZvcnx0ZWN8b3RlfCBwbHxlbmF8IHRyfG0gY3x0cm98IG5pfGljb3xyb3RcIixcbiAgICBcImluZFwiOiBcImFuIHxhbmd8IGRhfG5nIHwgcGV8YWsgfCBrZXwgbWV8YXRhfCBzZXxkYW58a2FufCBkaXwgYmV8aGFrfGJlcnxwZXJ8cmFufG5nYXx5YW58ZW5nfCB5YXwgaGF8YXNhfGdhbnxtZW58YXJhfG55YXxuIHB8biBkfG4ga3xhIGR8dGFufCBhdHxhdCB8b3JhfGFsYXxzYW58IGJhfGFwIHxlcmh8biBifHJoYXx5YSB8IG1hfGcgYnxhIHN8cGVufGViYXxhcyB8YWFufHVrIHxudHV8IG9yfGV0aXx0YXN8YWthfHRpYXxiYW58c2V0fCB1bnxuIHN8dGVyfG4geXwgdGV8ayBtfHR1a3xiYXN8aWFwfGxhbXxiZWJ8YW0gfCBkZXxrIGF8a2VifG4gbXxpIGR8dW50fGFtYXxkYWx8YWggfGlrYXxkYWt8ZWJlfHAgb3xzYSB8cHVufG1lbXxuIGh8ZW5kfGRlbnxyYSB8ZWxhfHJpIHxuZGF8IHNhfGRpIHxtYSB8YSBtfG4gdHxrIGR8biBhfG5nZ3x0YXV8bWFufGdhcnxlcml8YXNpfCB0aXx1biB8YWwgfGFkYXx1bSB8YSBwfGxha3xhcml8YXUgfCBuZXxuZWd8YSBifG5nc3x0YSB8b2xlfGxlaHxlcnR8ZXJzfGlkYXxrIGh8YW5hfGdzYXxkYXJ8dWthfHRpZHxiYXR8c2lhfGVyYXxlaCB8ZGFwfGlsYXxkaWx8aCBkfGF0dXxzYW18aWEgfGkgbXwgaW58bGFufGFoYXx1YW58dHUgfGFpIHx0IGR8YSBhfGcgZHxoYXJ8c2VtfG5hIHxhcGF8c2VyfGVuYXxrYXR8dWF0fGVyYnxlcmx8bWFzfHJ0YXxlZ2F8dW5nfG5hbnxlbXB8biB1fGt1bXxsIGR8ZyBzfCBodXxrYSB8ZW50fHBhdHxtYmF8YWdhfG50YXxhZGl8IHN1fGVuaXx1a3V8biBpfGh1a3xpbmR8YXIgfHJnYXxpIHN8YWt1fG5kaXxzdWF8bmkgfHJ1c3xoYW58c2kgfGNhcnxubnl8IGxhfGluIHx1IGR8aWsgfHVhIHxsYWh8cmlrfHVzaXxlbWJ8YW5ufG1lcnxpYW58Z2dhfGxhaXxtaW58YSB1fGx1YXxlbWF8ZW11fGFyZ3xkdW58ZGlwfGEgdHxtYXR8YXlhfHJidXxhcnV8ZXJrfHJrYXxpbml8ZWthfGEga3xyYWt8a2VzfHlhdHxpYmF8bmFzfHJtYXxlcm58ZXNlfHMgcHxudXN8IHB1fGFudXxpbmF8IHRhfG1lbHxtdWF8a2VsfGsgc3x1cyB8bmR1fG5ha3xkYSB8c3lhfGRhc3xwZW18bGlufHV0IHx5YXJ8YW1pfHVwdXxzZW98YWlrfGVvcnxpbnl8YXVwfHRha3xpcGV8aW5nfHRpbnwgYW58ZGlrfHVhcnxpbGl8ZyB0fHJzZXxzYXJ8YW50fGcgcHxhIG58YWtzfGFpbnwgamF8dCBwfCB1bXxnIG18ZGlyfGtzYXx1bXV8a2VwfG11bXxpIGt8ZWNhfHJhdHxtIHB8aCBwfGFiYXxzZXN8bSBtXCIsXG4gICAgXCJmcmFcIjogXCIgZGV8ZXMgfGRlIHxpb258bnQgfGV0IHx0aW98IGV0fGVudHwgbGF8bGEgfGUgZHxvbiB8bmUgfG9pdHxlIGx8bGUgfCBsZXxzIGR8ZSBwfHQgZHxhdGl8cm9pfCBkcnxkcm98aXQgfCDDoCB8IGNvfHTDqSB8bnMgfHRlIHxlIHN8bWVufHJlIHwgdG98Y29ufCBs4oCZfHRvdXxxdWV8IHF1fGxlc3wgc298ZGVzfHNvbnwgcGV8b25zfCB1bnxzIGx8cyBlfCBwcnx1ZSB8IHBhfGUgY3x0IGx8dHMgfG9ubnwgYXV8ZSBhfGVtZXxlIGV8IGxpfG9udHxhbnR8b3V0fHV0ZXx0IMOgfHJlc3xlcnN8IHNhfGNlIHwgYSB8dHJlfHBlcnxhIGR8Y3RpfGVyIHxsaWJ8aXTDqXwgZW58dXggfCByZXxlbiB8cnNvfMOgIGx8IG91fCBpbnxsbGV8dW4gfG5hdHxvdSB8bm5lfG4gZHx1bmV8IGTigJl8IHNlfHBhcnxudGV8dXMgfHVyIHxzIHN8YW5zfGRhbnxhIHB8ciBsfHByb3xpdHN8w6lzIHx0IHB8aXJlfGUgdHxzIHB8c2EgfCBkw6l8b25kfMOpIGR8YSBsfG5jZXxlcnR8YXV4fG9tbXxuYWx8bWUgfCBuYXwgZm98aXF1fCBjZXxydMOpfGVjdHxhbGV8YmVyfHQgYXxzIGF8IGRhfG1tZXxpYmV8c2FufGUgcnwgcG98Y29tfGFsIHxzIGN8cXVpfG91cnx0IGV8IG5lfGUgbnxvdXN8ciBkfGFsaXx0ZXJ8IGRpfGZvbnxlIG98YXUgfCBjaHxhaXJ8dWkgfGVsbHwgZXN8bGl0fHMgbnxpc3N8w6lyYXx0ZXN8c29jfGF1dHxvY2l8w6p0cnxpZW58aW50fGR1IHxlc3R8w6l0w6l8dHJhfHBvdXwgcGx8cmF0fGFyIHxyYW58cmFpfHMgb3xvbmF8YWlufGNsYXzDqWdhfGFuY3xycyB8ZXVyfHByaXxuIGN8ZSBtfHMgdHzDoCB1fCBkb3x1cmV8YnJlfHV0IHwgw6p0fGFnZXwgw6l0fG5zaXxzdXJ8ZWlufHNlbnxzZXJ8bmRpfGVuc3xlc3N8bnRyfGlyIHwgbWF8Y2lhfG4gcHxzdCB8YSBjfCBkdXxsIGV8IHN1fGJsaXxnZSB8csOpc3wgcsOpfGUgcXxhc3N8bmRhfHBldXzDqWUgfGzigJlhfCB0ZXxhIHN8dGF0fGlsIHx0w6lzfGFpc3x1IGR8aW5lfGluZHzDqSBlfHF14oCZfCBhY3xzIGl8biB0fHQgY3xuIGF8bOKAmWh8dCBxfHNvaXx0IHN8Y3VufHJpdHwgw6lnfG9pcnzigJllbnxudGF8aG9tfCBvbnxuIGV8IG1vfGllIHxpZ258cmVsfG5uYXx0IGl8bCBufCB0cnxpbGx8cGxlfHMgw6l8bOKAmWV8cmVjfGEgcnxvdGV8c3NlfHVuaXxpZMOpfGl2ZXxzIHV8dCDDqnxpbnN8YWN0fCBmYXxuIHN8IHZpfGdhbHwgYXN8bGlnfHNzYXxwcsOpfGxldXxlIGZ8bGljfGRpc3x2ZXJ8IG51fHRlbnxzc2l8cm90fHRlY3xzIG18YWJsXCIsXG4gICAgXCJkZXVcIjogXCJlbiB8ZXIgfGRlcnwgdW58bmQgfHVuZHxlaW58dW5nfGNodHwgZGV8aWNofHNjaHxuZyB8IGdlfGllIHxjaGV8ZWNofCBkaXxkaWV8cmVjfGdlbnxpbmV8ZWl0fCByZXxjaCB8IGRhfG4gZHx2ZXJ8aGVufCB6dXx0IGR8IGF1fGh0IHwgaGF8bGljfGl0IHx0ZW58cmVpfCBiZXxpbiB8IHZlfCBpbnwgZWl8bmRlfGF1ZnxkZW58ZWRlfHp1IHxuIHN8dWYgfGZyZXxuZSB8dGVyfGVzIHwgamV8amVkfG4gdXwgYW58c2VpfGFuZHwgZnJ8cnVufGF0IHwgc2V8ZSB1fGRhc3xoZWl8cyByfGh0ZXxoYXR8bnNjfG5nZXxyIGh8YXMgfGVuc3wgYWx8ZXJlfGxsZXx0IGF8IHdlfG4gZ3xyZGV8bnRlfGVzZXxtZW58IG9kfG9kZXxuZXJ8ZyBkfGFsbHx0IHV8ZXJzfHRlIHxuZW58IHNvfGQgZHxuIGF8YmVufGxlaXwgZ3J8IHZvfHdlcnxlIGF8ZWdlfGlvbnwgc3R8aWdlfGxlIHxjaGF8IG1lfGhhZnxhZnR8biBqfHJlbnwgZXJ8ZXJrfGVudHxiZWl8IHNpfGVpaHxpaGV8a2VpfGVyZHx0aWd8biBpfG9uIHxsdW58ciBkfGxlbnxnZW18aWVzfGdydXx0bGl8dW50fGNodXxlcm58Z2VzfGVuZHxlIHN8ZnQgfHN0IHxpc3R8dGlvfGF0aXwgZ2x8c3RhfGd1bnxtaXR8c2VufG4gbnwgbmF8biB6fGl0ZXwgd2l8ciBnfGVpY3xlIGV8ZWkgfGxpZXxyIHN8biB3fGdsZXxtZWl8ZGUgfHVjaHxlbSB8Y2hsfG5hdHxyY2h8dCB3fGRlc3xuIGV8aHJlfGFsZXxzcHJ8ZCBmfGFjaHxzc2V8ciBlfCBzY3x1cmN8ciBtfG5pZXxlIGZ8ZmVufGUgZ3xlIGR8IG5pfGR1cnxkYXJ8aW50fCBkdXxnZWh8aWVkfHQgc3wgbWl8YWx0fGhlcnxoYWJ8ZiBnfHNpY3xzdGV8dGFhfGFhdHxoZSB8YW5nfHJ1Y3xobGl8dHogfGVtZXxhYmV8aCBhfG4gdnxudW58Z2VnfGFyZnxyZiB8ZWhlfHBydXwgaXN8ZXJmfGUgbXxhbnN8bmRsfGUgYnx0dW58biBvfGQgZ3xuIHJ8ciB2fHdpZXxiZXJ8ciBhfGFyYnxiZXN8dCBpfGggZHxyIHd8ciBifCBpaHxkIHN8aWdrfGdrZXxuc3B8ZGlnfGVtYXxlbGx8ZXJ1fG4gZnxpbnN8cmJlfGZmZXxlc2N8aWd1fGdlcnxzdHJ8a2VufGUgdnxnZXd8aGFufGluZHxydCB8IGFyfGllw598biBofHJuIHxtYW58ciBpfGh1dHx1dHp8ZCBhfGxzIHxlYmV8dm9ufGx0ZXxyIG98cmxpfGV0enx0cmF8YXVzfGRldHxodWx8ZSBpfG9uZXxubmV8aXNjfHNvbnxzZWx8ZXQgfG9obnx0IGd8c2FtfCBmYXxyc3R8cmtsfHNlcnxpZW18ZyB2fHQgenxlcnJcIixcbiAgICBcImphdlwiOiBcIm5nIHxhbiB8YW5nfCBrYXxpbmd8a2FufCBzYXxhayB8bGFufCBsYXxoYWt8IGhhfCBwYXwgbWF8bmdnfGFyYXxzYSB8YWJlfG5lIHwgaW58biBrfGFudHwgbmd8dGFufG5pbnwgYW58bmdhfGF0YXxlbiB8cmFufCBiYXxtYW58YmFufGFuZXxoaSB8biB1fG9uZ3xyYSB8bnRofGFrZXxrZSB8dGhpfCBkYXx3b258dXdvfHVuZ3xuZ3N8IHV3fGFzYXxnc2F8YmVufHNhYnxhbmF8YWthfGJlYnxhIGt8ZyBwfG5hbnxuZGF8YWRpfGF0IHxhd2F8c2FufG5pIHxkYW58ZyBrfHBhbnxlYmF8IGJlfGUga3xnIHN8YW5pfGJhc3wgcHJ8ZGhhfGF5YXxnYW58eWEgfHdhIHxkaSB8bWFyfG4gc3wgd2F8dGEgfGEgc3xnIHV8IG5hfGUgaHxhcmJ8YSBufGEgYnxhIGx8biBufCB1dHx5YW58biBwfGFzaXxnIGR8aGFufGFoIHxnIG58IHR1fCB1bXxhcyB8d2VufGRha3xyYmV8ZGFyfCBkaXxnZ298c2FyfG1hdHxrIGh8YSBhfGl5YXwgdW58dW5kfGVuaXxrYWJ8YmUgfGFydHxrYSB8dW1hfG9yYXxuIGJ8YWxhfG4gbXxuZ2t8cnRhfGkgaHwgb3J8Z2FyfHlhdHxrYXJ8YWwgfGEgbXxuIGl8bmEgfGcgYnxlZ2F8cHJhfGluYXxrYWt8ZyBhfGEgcHx0dW18bnlhfGthbHxnZXJ8Z2dlfCB0YXxrYXR8aSBrfGVuYXxvbml8a2FzfCBwZXxkYWR8YWdhfGcgbXxkdXd8ayBrfHV0YXx1d2V8IHNpfCBuZXxhZGh8cGEgfG4gYXxnbyB8YW5kfGkgbHwga2V8bnVufG5hbHxuZ3V8dWp1fGFwYXxhIGR8dCBtfGkgcHxtaW58aWJhfGVyIHwgbGl8YW51fHNha3xwZXJ8YW1hfGdheXx3YXJ8cGFkfGdndXxoYSB8aW5kfHRhd3xyYXN8biBsfGFsaXxlbmd8YXdpfGEgdXwgYml8d2UgfGJhZHxuZHV8dXdhfGF3ZXxiYWt8YXNlfGVoIHwgbWV8bmVnfHByaXwga3V8cm9ufGloIHxnIHR8YmlzfGlqaXxpIHR8ZSBwfCBwaXxhYmF8aXNhfG1iYXxpbml8YSB3fGcgbHxpa2F8biB0fGVidXxuZGh8YXIgfHNpbnxsYWt8dXIgfG1yYXxtZW58a3UgfCB3ZXxlIHN8YSBpfGxpeXwgaWt8YXlvfHJpYnxuZ2x8YW1pfGFyZ3xuYXN8eW9tfHdhZXx1dCB8a29ufGFlIHxyYXB8YWt1fCB0ZXxkaWx8dGlufHJnYXxqdWR8dW11fCBhc3xyYWt8YmVkfGsgYnxpbCB8a2FwfGgga3xqaW58ayBhfCBuZHxlIGR8aSBzfCBsdXxpIHd8ZWthfG11bXx1bSB8dWhhfGF0ZXwgbWl8ayBwfGdvbnxlZGF8IHRpfGJ1dHxuIGR8ciBrfG9uYXx1dG98dG93fHdhdHxna2F8c2kgfHVtcnxrIGx8b21hXCIsXG4gICAgXCJ2aWVcIjogXCJuZyB8zKNjIHzMgWMgfCBxdXwgdGh8YcyAIHxuaCB8IG5nfMyjaSB8IG5ofHZhzIB8IHZhfMyAbiB8dXnDqnwgcGh8IGNhfHF1eXzDqsyAbnx5w6rMgHzMgGkgfCBjaHzMgG5ofCB0cnwgY3V8bmfGsHxpIG58Z8awxqF8xrDGocyAfMyBdCB8xqHMgGl8IGdpfGHMgWN8IGNvfMyjdCB8b8yBIHxjIHR8xrDMoyB8biB0fGNhzIF8w7RuZ3wga2h8xrDGocyjfMahzKNjfCB0xrB8IMSRxrB8acOqzKN8xJHGsMahfGnMgG58zIFpIHwgaGF8Y2/MgXxpIMSRfGdpYXwgxJHDqnxwaGF8IG1vfG/Mo2l8bW/Mo3xuaMawfG4gbnxjdcyJfCBiYXzMo24gfMyJYSB8dcyJYXxuIGN8zIB1IHzMg25nfMOibiB8w6rMgHV8w6LMgXR8IGJpfHTGsMyjfGjDtG58IHZpfGcgdHwgbGF8biDEkXzEkcOqzIB8bmjDonwgdGl8dCBjfCDEkcO0fMOqbiB8YmHMiXxoacOqfHUgY3wgdMO0fGRvIHxow6JufCBkb3xjaCB8zIEgcXzMgCB0fCBuYXzMgW4gfGF5IHwgaGl8YcyAbnzMoyBkfMahzIFpfGhhzIF8IMSRaXxoYXl8ZyBufCBtw7R8w7TMgWN8dcO0zIF8biB2fMO0zKNpfGjGsMyDfHRoxrB8zIFwIHxxdcO0fCBob3zMo3AgfG5hzIB8YcyAb3zMgG5nfMyJbiB8acyjIHzMgWNofMO0biB8zIBvIHxraMO0fGMgaHxpIGN8YyDEkXwgaMO0fGkgdnx0cm98IMSRYXzMgW5nfG3DtMyjfGkgdHzDtMyjdHxnIHZ8aWEgfMyjbmd8YcyJbnzGsMahzIF8xrDMg258zIluZ3xoIHR8aMawIHzDqsyjbnxuIGJ8w7TMo2N8YcyJIHxsYcyAfGMgY3xnIGN8IMSRb3zMiSBjfG4gaHxoYcyAfGjDtMyjfCBiw6J8YcyDIHzMgHkgfCB2xqF8zKMgdHzMiWkgfGnDqsyBfCBjw7R8dCB0fGcgxJF8xrDMgWN8acOqbnwgdsOqfHZpw6p8dsahzIF8aCB2fMahzIFjfMawzKNjfMOizKN0fHRoYXzMiW0gfHJvbnxvbmd8YcyBcHxnIGJ8aMawxqF8IHPGsHxhIGN8c8awzKN8zIlvIHxhzIlvfGggY3zDqsyJIHxvIHZ8dcOizKN8YSBtfMOqzIEgfGlhzIF8zIAgY3xjaG98cXVhfGhhzKN8dcyjY3wgbWl8zIAgbnxwaMOifGMgcXxjw7RufG8gY3xhzIEgfGkgaHxhzKNpfCBoxqF8zIMgaHwgY8awfG4gbHxiacyjfCBsdXxiw6LMgXxjYcyJfGnMgW58aCDEkXwgeGF8xJHDtMyjfGcgaHxjIG58YyBwfHRodXxhzIlpfMOqzKMgfCBoxrB8zIEgY3xvIG58IG7GsHzDtMyBbnzMgW8gfGHMgW98eGHMg3xvYcyAfHkgdHxoYcyJfHTDtMyjfMyjIGN8IHTDonx0aMO0fCBkdXxtIHZ8bWnMgHxobyB8aMawzIF8w6rMo2N8zIEgdHxoxqHMo3xhzIFufG4gcHxjdcyDfHXMg258acOqzIl8w7TMgWl8dGnDqnzDqsyAIHxow6LMgXzGocyjcHxob2F8eSDEkXxjaGl8byBofMahzIkgfGHMgHl8zIkgdHzEkW/MgXxjIGx8dsOqzIB8zIAgxJF8aSBifGtoYXxjIGJ8IMSRw6J8bHXDonxhaSB8zIkgbnzEkcO0zIF8w6rMgXR8aMawzKN8dHJpfHAgcXxuxrDGoXxkdcyjfGhpzIF8ZyBxfHnDqm58aG/Mo3zMgW5ofCB0YXwgYsSDfGMgZ3xuIGd8dGjDqnxvIHR8YyB2fGFtIHxjIG18YW4gXCIsXG4gICAgXCJpdGFcIjogXCIgZGl8dG8gfCBkZXxpb258IGlufGxhIHxlIGR8ZGkgfG5lIHwgZSB8emlvfHJlIHxsZSB8bmkgfGVsbHxvbmV8bGxhfHJpdHxhIGR8byBkfGRlbHxpdHR8aXJpfGRpcnwgY298dGkgfGVzc3xlbnR8IGFsfGF6aXx0dG98dGUgfGkgZHxpIGl8ZXJlfHTDoCB8IHByfG5kaXxlIGx8YWxlfG8gYXxpbmR8ZSBlfGUgaXxnbml8bnRlfGNvbnxpIGV8bGkgfGEgc3wgdW58bWVufG9nbnwgbmV8dW8gfCBvZ3xpZHV8ZSBhfGl2aXxkdW98dmlkfCBlc3x0dGl8IGhhfGRpdnwgbGl8YSBwfG5vIHxhbGx8cHJvfHphIHxhdG98cGVyfHNzZXxzZXJ8IHNvfGkgc3wgbGF8IHN1fGUgcHwgcGV8aWJlfG5hIHxhIGx8IGlsfGJlcnxlIG58aWwgfGFsaXxsaWJ8aGEgfGNoZXxpbiB8byBzfGUgc3wgcXV8byBlfGlhIHxlIGN8IHJpfG56YXx0YSB8bnRvfGhlIHxvbml8byBpfCBvIHxzdGF8byBjfG5lbHwgYSB8byBwfG5henxlIG98c28gfCBwb3xvIGh8Z2xpfGkgdXxvbmR8aSBjfGVyc3xhbWV8aSBwfGxsZXx1biB8ZXJhfHJpIHx2ZXJ8cm8gfGVsIHx1bmF8YSBjfCBjaHxlcnR8dWEgfGkgYXxzc2l8cnTDoHxhIGV8ZWkgfGRpc3xhbnR8IGwgfHRhdHxhIGF8b25hfHVhbHwgbGV8aXTDoHxhcmV8dGVyfCBhZHxuaXR8IGRhfHByaXxkZWl8w6AgZXxjaWF8IHN0fCBzaXxuYWx8ZXN0fHR1dHxpc3R8Y29tfHVuaXwgZWR8b25vfCBuYXxzdWF8YWwgfHNpIHxhbnp8IHBhfCByZXxyYXp8Z3VhfGl0YXxyZXN8ZGVyfHNvY3xtYW58byBvfGFkIHxpIG98ZXNlfHF1ZXxlbnp8ZWQgfCBzZXxpbyB8ZXR0fG9uIHwgdHV8ZGljfMOgIGR8c2lhfGkgcnxyc298b2NpfHJpb3xhcml8cXVhfGlhbHxwcmV8aWNofHJhdHxpZW58dHJhfGFuaXx1bWF8c2UgfGxsIHxlcml8YSBufG8gbnwgdW18ZG8gfGFyYXxhIHR8enphfGVyIHx0cml8YXR0fGljb3xwb3N8c2NpfGkgbHxzb258bmRhfHBhcnxlIHV8Zm9ufCBmb3xudGl8dXppfHN0cnx1dHR8YXRpfHNlbnxpbnR8bmVzfGlhcnwgaSB8aGlhfG4gY3xzdGl8Y2hpfGFubnxyYSB8IGVnfGVndXxpc3B8YmlsfG9udHxhIHJ8IG5vfHJvcHwgbWV8b3ByfG9zdHwgbWF8dWVzfGljYXxzc298dGFsfGNpZXxzdW58bGl0fG9yZXxpbmF8aXRlfHRhbnwgcmF8bm9ufGdpb3xkIGF8ZSByfGRldnxpIG18bCBpfGV6enxpeml8IGN1fG5ub3xyw6AgfGEgaXx0dGF8cmlhfGxpYXxjb3N8c3N1fGRhbHxsIHB8IGFzfGFzc3xvcG98dmUgfGV2ZVwiLFxuICAgIFwidHVyXCI6IFwiIHZlfCBoYXx2ZSB8bGVyfGxhcnxpciB8aW4gfGhha3wgaGV8aGVyfGJpcnxlciB8YW4gfGFyxLF8ZXJpfHlhIHwgYml8YWsgfHIgaHxldGl8xLFuIHxpeWV8eWV0fCBrYXxhc8SxfMSxbsSxfCBvbHx0bGV8ZXlhfGtrxLF8YXJhfGFra3xldGx8c8Sxbnxlc2l8bmEgfGRlIHxlayB8IHRhfG5kYXxpbml8IGJ1fGlsZXxyxLFufHJpbnx2ZXl8bmUgfGtsYXxlIGh8aW5lfMSxciB8ZXJlfGFtYXxkxLFyfG4gaHwgc2F8xLFuYXxzaW58ZSBrfGxlIHwgZ2V8bWFzfMSxbmR8bsSxbnzEsSB2fCB2YXxsYW58bG1hfGVya3xya2V8bm1hfHRpbnxybGV8IHRlfG5pbnxha2x8YSB2fGRhIHwgZGV8bGV0fGlsbHxlIG18YXJkfGVuIHxyaXl8YXlhfG7EsSB8IGjDvHwgxZ9hfGUgYnxrIHZ8a8SxbnxrIGh8IG1lfG1pbHxzYW58IGlsfHNpIHxyZMSxfGUgZHxkYW58aMO8cnx2YXJ8YW5hfGUgYXxrZXN8ZXQgfG1lc3zFn2FofGRpcnwgbWl8cmV0fHJyaXwgc2V8b2xhfMO8cnJ8aXJsfGJ1IHxtYWt8IG1hfG1la3xuIGV8a8SxIHxuIHZ8biBpfGxpa3xsbGV8IGVkfCBoaXxuIGJ8YSBofCBiYXxuc2F8IGnFn3xlbGl8a2FyfCBpw6d8xLEgaHxhbGF8bGkgfHVsdXxyYWt8ZXZsfGUgaXxuaSB8cmUgfHIgxZ98ZW1lfGV0bXxlIHR8aWsgfGUgc3xhIGJ8acWfIHxuIGt8aGFpfG5kZXxhaXp8IGXFn3xpemR8dW4gfG9sbXxoacOnfHpkaXxhciB8dW5tfG1hIHwgZ8O2fGlsbXxsbWV8aW0gfG4gdHx0aXJ8ZGlsfG1hbHxlIGd8aSB2fCBrb3xsdW58ZSBlfG1lbHxrZXR8xLFrIHxuIHN8ZWxlfGxhIHxlbCB8ciB2fGVkZXzFn2l0fGlsaXxlxZ9pfHlsYXxhIGl8IGFufGFuxLF8IGV0fHLEsSB8YWhzfCB5YXxzxLEgfGVkaXxzaXl8dCB2fGkgYnxzZSB8acOnaXzDp2lufGJ1bHxhbWV8IGRhfG1pxZ98bWF5fHRpbXxhIGt8dG1lfHIgYnxpbnN8eWFufG5sYXxtbGV8IGRpfGV5ZXxnZXJ8eWUgfHXEn3V8ZXJkfGRpbnxzZXJ8IG3DvHxtZW18dmxlfCBrZXxuYW18aW5kfGxlbnxla2V8ZXMgfCBraXxuIG18aXQgfCBpbnwga3V8csWfxLF8YSBzfGFyxZ98IGF5fGVtbHxsZWt8b3J1fHJtZXxrb3J8cmRlfGkgbXwgc298dMO8cnxhbCB8bGFtfGVuaXxudW58IHV5fGtlbnxoc8SxfGkgaXxhIGR8cmkgfGRldnzDvG4gfGEgbXxyIGF8bWV5fGNha3zEsXlsfG1henxlIHZ8ZWNlfGFkZXxpw6cgfMWfbWF8bXNlfHRlIHx0w7xufGltc3xraW18ZSB5fMWfxLEgfGVuZHxrIGd8bmRpfGFsxLF8IGNlfGxlbXzDtsSfcnzDvHTDvHxrIGl8ciB0fCDDtsSffGLDvHR8YW5sfCBiw7xcIixcbiAgICBcInBvbFwiOiBcIiBwcnxuaWV8IGkgfGllIHxwcmF8IHBvfGFuaXxyYXd8aWEgfG5pYXx3aWV8Z28gfCBkb3xjaCB8ZWdvfGlla3xvd2l8IG5pfMWbY2l8Y2kgfGEgcHxkbyB8YXdvfCBjenxvxZtjfHljaHwgbWF8ZWsgfHJ6ZXwgbmF8cHJ6fCB3IHx3byB8ZWogfCB6YXxub8WbfGN6xYJ8esWCb3xlbml8d2EgfCBqZXzFgm93fGkgcHx3b2x8b2xufCBsdXxyb2R8IGthfCB3b3xsbm98d3N6fHkgY3xtYSB8bnkgfGthxbx8YcW8ZHxvIGR8c3R3fG93YXxkeSB8xbxkeXwgd3l8cnp5fHN0YXxlY3p8IHN3fGR6aXxpIHd8ZSBwfGN6bnx0d2F8bmEgfHp5c3zDs3cgfHN6eXx1YiB8bHVifGEgd3xlc3R8a2llfGsgbXx3YW58IHNwfGFqxIV8IHdzfGUgd3xwb3d8cG9zfG55Y3xyYWN8c3BvfGHEhyB8YSBpfGN6ZXxzemV8bmVnfHlzdHxqYWt8IGphfG8gcHxwb2R8YWNqfG5lIHzFhHN0fGFyb3xtaSB8IHogfGkgaXxuYXJ8IGtvfG9ib3xhd2F8IHJvfGkgbnxqxIVjfHplY3x6bmV8emFufGRvd3wgcsOzfGllanx6eSB8emVufG5pY3xvbnl8YXcgfGkgenxjenl8bm8gfG5lanxvIHN8csOzd3xvZG58Y3kgfMOzd258b2R6fG8gd3xvIHp8amVnfGVkbnxvIG98YWtpfG1pZXxpZW58a29sfCBpbnx6aWV8YmV6fGFtaXxlxYRzfG93b3xkbm98IG9ifCBvcnwgc3R8YSBzfG5pIHxvcnp8byB1fHltIHxzdMSZfHTEmXB8xYJlY3xqZWR8aSBrfCBvc3x3IGN8bHdpfGV6IHxvbHd8b8WCZXxwb8WCfGNqaXx5IHd8byBufHdpYXwgYmV8a3TDs3xhIGp8em5hfHp5bnxvd2V8d29ifGthIHx3eWN8b3d5fGppIHwgb2R8YWxufGlubnxqZXN8aWN6fGggcHxpIHN8c2nEmXxhIG98asSFIHxvc3R8a3JhfHN0IHxzemF8c3dvfHdhcnxjemF8cm96fHkgc3xyYXp8bmlrfGFyYXxvcmF8bHVkfGkgb3xhIHp8emVzfCBrcnxyYW58b3dzfGVjaHx3IHB8ZMOzd3zEhSBwfHBvcHxhIG58dGtpfHN0a3xnYW58em9ufHJhanxlIG98aWVjfGkgbHwgc2l8xbxlIHxla2F8IGt0fCBkZXxlbSB8dMOzcnxpxJkgfHduaXxsbml8ZWpzfGluaXxvZG98ZG5pfGXFgm58a293fHBlxYJ8YSBkfHJvbnxkZWt8cGllfHVkenxib2R8bmFufGggaXxkc3R8aWVnfHRhd3x6IHB8eiB3fHplxYR8Z29kfGl1IHxhbm98bGFyfCB0b3x5IHp8YSBrfGFsZXxrbGF8dHJ6fHphd3xpY2h8ZSBpfGllcnxpa298ZHp5fGNobnx3IHp8YnkgfGvDs3d8YWR6fGVrbHx5d2F8anUgfG9jaHxrb3J8c29ifG9jenxvc298dSBwfGR1IHx0eWN8dGFufMSZZHp8IG1pfGUgc3wgdGF8a2kgXCIsXG4gICAgXCJnYXhcIjogXCJhYSB8YW4gfHV1IHwga2F8bmkgfGFhbnx1bW18aWkgfG1tYXxtYWF8IHdhfHRpIHxuYW18IGZpfHRhIHx0dGl8IG5hfHNhYXxmaSB8IG1pfHJnYXxpIGt8YSBufCBxYXxkaGF8aXl5fG9vdHxpbiB8bWlyfGlyZ3xyYWF8cWFifGEgaXxhIGt8a2FufGFra3xpc2F8Y2h1fGFtdXxhIGZ8aHV1fGFiYXxra2F8IHRhfGthbXxhIGF8IGlzfGFtbnxhbWl8YXR0fGFjaHxtbml8eWFhfCBiaXx5dXV8eXl1fGVlIHx3YWx8bWl5fHdhYXxnYSB8YXRhfGFhdHx0aWl8b28gfGEgZXxtb298IG5pfCBlZXxiYSB8IGFrfG90YXxhIGh8aSBxfCBnYXwgZGh8ZGFhfGhhYXxhIG18YW1hfHlvb3xhIGJ8aSBhfGthIHxrYWF8IGhpfHN1bXxhYXN8YXJnfG1hbnwgaHV8IHV1fHUgbnwgeW98IGFyfCBrZXwgaGF8ZWVzfCBiYXx1ZiB8aSBpfHRhYXx1dWZ8aWlufGFkYXxhIHd8aSBmfGFuaXxycmF8bmEgfGlzdXwgYWR8aSB3fGEgdXxueWF8aXJyfGRhIHxodW58aGlufGVzc3wgaG98IG1hfGkgbXx1bmR8aSBifGJhcnxhbmF8ZWVufG11IHxpcyB8YnUgfGYgbXwgaXJ8IHNhfHUgYXxhZGR8YWFkfCBsYXxpIGR8biBofGVlZ3xpIGh8c2EgfGhvanxhYnV8IHlhfGtlZXxhbCB8dWRofG9va3xnb298YWxhfGlyYXxuZGF8aXR0fGdhY3xhcyB8biBrfG11bXxzZWV8cmdvfHV1bXxyYSB8biB0fG4gaXxhcmF8bXV1fHVtc3xtYXR8bmlpfHNpaXxzc2F8YSBkfGEgcXwgZGF8aGF3fGEgZ3x5eWF8YXN1fGVlZnx1IGh8dHVtfGJpeXwgbW98YSB0fGF0aXxlbnl8Z2FtfGFic3xhd2F8cm9vfHVtYXxuIGJ8biBtfHUgeXxhIHN8c2F0fGJhYXxnYXJ8biBhfG1tb3xuaXN8IHFvfG5uYXwga3V8ZWVyfCB0b3xra298YmlsfGlsaXxsaXN8YmlyfG90dXx0ZWV8eWEgfG1zYXxhYWZ8c3V1fG4gZHxqaWl8biB3fG9ra3xya2F8Z2FhfGFsZHx1biB8cnVtfCB5ZXxhbWV8IGZ1fG1lZXx5ZXJ8ZXJvfGFtbXxlcmF8a3VufGkgeXxvdGl8dG9rfGFudHxhbGl8bm5pfCBhbXxsZGF8bGlpfG4gdXxsZWV8dXJhfGxhYnxhYWx8dGFufGxhYXxpIGd8aWxhfGRkdXxhcnV8dSBtfG9qaXxndW18aGFufGVnYXwgc2V8ZmZhfGRhcnxmYWF8YXJrfG4geXxoaWl8cWl4fGdhbHxuZGl8IHFpfGFzYXxhcnR8ZWYgfHV1ZHwgYnV8amlyfCBqaXxhcmJ8biBnfGNoaXx0YW18dSBifGRkYXxiYXR8ZGkgfGthcnxsYW18YSBsfCBnb3xic2l8c2FkfG9rYXxhIGp8ZWd1fHUgdHxiZWV8dSBmfHV1blwiLFxuICAgIFwic3doXCI6IFwiYSBrfHdhIHxuYSB8IHlhfCBrdXx5YSB8IG5hfCB3YXxhIG18IGhhfGkgeXxhIGh8YSBufGFuYXxraSB8YWtpfGt3YXwga3d8aGFrfCBrYXwgbWF8bGEgfGEgd3x0dSB8bGkgfGEgdXxuaSB8aSBrfGEgYXxpbGF8IGtpfGFsaXxhIHl8YXRpfHphIHxpbGl8aWZhfCBtdHxrZSB8IGFufGtpbHxrYXR8bXR1fGFrZXxvdGV8dGUgfGthIHxpa2F8bWEgfHdlIHxhIHN8eW8gfGZhIHxpIG58YXRhfGUga3xhbWF8emkgfGFtYnx1IGF8aWEgfHUgd3wgeW98YXppfGt1dHxpbmF8aSB6fGFzaXwgemF8byB5fHVodXx5YWt8YXUgfGlzaHxtYmF8ZSBhfHUga3xodXJ8aGEgfHRpa3x3YXR8IGF1fHVydXwgYml8c2hhfG11IHxhcmF8dSBufCBhc3xoaSB8IGhpfHJ1IHxhaWZ8dGFpfGNoYXxheW98YSBifGhhbHwgdWh8IGNofHlvdHxpIGh8IHppfGF3YXxjaGl8YXR1fGUgbnxuZ2l8dSB5fG1hdHxzaGl8YW5pfGVyaXwgYW18dWxpfGVsZXxzYSB8amEgfGUgeXxhIHR8b2phfG8ga3xuY2h8aSBhfGEganwgbmN8aW1hfCBzaHxhbWl8IHRhfGVuZHxhbnl8bW9qfGkgd3xhcml8aGFtfHV0YXxpaSB8aWtpfHJhIHxhZGF8d2FufHdha3xuYXl8eWUgfHV3YXwgbGF8dGkgfGV6YXxvIGh8aXJpfGl3YXxrdXd8aXdlfCB3b3xmYW58IHNhfHNoZXxidSB8a2FufGFvIHxqYW18d2VufGxpbXxpIG18aGVyfHV0b3xyaWF8IGphfCBuaXxrYW18ZGkgfCBodXx6byB8YSBsfGRhIHxrYXp8YWhpfGFtdXx3b3R8byB3fHNpIHxkaGF8YmlufGluZ3xhZGh8YSB6fGJpbHxlIHd8bnlhfGt1cHxoYXJ8cmkgfGFuZ3xha2F8c3RhfGFqaXxuZSB8a3VzfGUgbXx6aW18aW5pfGluZHxsaW58a3VsfGFndXxrdWZ8aXRhfGJhcnxvIG58dXUgfGl5b3x1IGh8bmFkfG1hYXxtd2V8aW5lfGdpbnxueWV8bmRlfGRhbXx0YSB8IG5kfG5kaXxyaWt8YXNhfCBiYXxyaWZ8dW5pfG5nYXxoaWl8bGV6fGJvIHxhem98dXppfG1ib3xzaWx8dXNofHRhaHx3YW18aWJ1fHViYXxpbXV8IHllfGVzaHwgdXR8dGFhfGFhcnx3ZXp8aSBzfGUgYnwgc2l8YWxhfGRoaXxlbmd8YXphfHRha3xoaXJ8c2F3fGl6b3xrb3N8dG9rfG9rYXx5YW58YSBjfHdhbHxkZWx8aSBifHBhdHwgdW18bmRvfHp3YXxtYW18YSBpfGd1enxhaXN8ZWxpfG1haXxsYXp8aWFufGFiYXxtYW58dGVufHppbnxiYSB8bmRhfG9hIHx1IG18dWt1fHVmdXwgbXd8bGl3fGFoYXxuZHd8a3VofHVhIHx1cGF8IGVsfHVtaXxzaWFcIixcbiAgICBcInN1blwiOiBcImFuIHxuYSB8ZXVufCBrYXxuZyB8IHNhfGFuYXxhbmd8IGRpfGFrIHwgaGF8bmdhfGhha3x1biB8dW5nfGtldXxhbnV8IGJhfCBhbnxudSB8YSBifCBib3wgamV8YSBofGF0YXxhc2F8amV1fGluYXwgbmd8YXJhfG5hbnxhd2F8Z2FufGFoIHxzYSB8YSBrfCBuYXxuIGt8a2FufGFoYXxhIHB8YSBzfGdhIHxiYW58IG1hfGEgbnxpbmd8b2dhfGJvZ3xzYXJ8IHBhfCBrdXxtYW58YSBhfGhhIHxzYW58YWUgfGJhZXxkaW58ZyBzfGFnYXxzYWh8cmEgfHRhbnxuIHN8IHBlfGFsYXwgc2l8a2F0fG1hIHxwZXJ8IHRpfGF5YXxzaW58IGF0fCBwaXwgdGV8biBhfGFhbnxsYWh8cGFufGdhcnxuIG58dSBkfHRhIHxldSB8YXJpfGt1bXxuZ3N8YSBtfG4gYnxuIGR8cmFufGEgZHxnc2F8d2EgfHRhd3xrIGh8YW1hfGt1IHxpa2V8biBwfGViYXxiYXN8IGphfGFsIHxhIHR8aWthfGF0IHxiZWJ8a2FifHBpa3xhc2l8YXR1fG5kYXx1bmF8YSBqfG5hZ3xlIGJ8biBofGVuIHxnIGt8b2ggfGFiYXxpbGF8cnRhfGFrdXxib2h8bmdnfGFiZXxhcnR8YXIgfG4ganxkaSB8aW1hfHVtIHxvbGF8Z2V1fHVzYXxhY2F8c2FrfGFkaXxrIGF8dWR1fHRldXxjYXJ8dGlufCBtZXwgYXl8aCBrfCBwb3xlaCB8dSBzfGFrYXxyaW18dGkgfHNhY3xrIG58bmd0fGplbnxhd2V8ZW50fHUgYXx1bWF8dGVofGxhd3x1ciB8aCBzfGRhbnxiYXJ8dWt1fGdhd3xhcnV8YXRlfGliYXxkaWx8cG9sfGFqYXxpZXV8ZXJlfGphbHxuYXJ8IGh1fG4gdHxueWF8cGEgfGFyZXx1cGF8bWFzfGFrZXx1dCB8d2FufCBnZXxrYWx8bnVzfCBzb3xuZ2t8eWEgfHlhbnxodWt8IGR1fHR1bnwgbWl8bXBhfGlzYXxsYW58dXJhfHUgbXx1YW58ZXJufGVuYXxudGV8cnVwfHRheXxuIG18IGtlfGthIHxoYW58dW5kfHVzIHxoIGJ8a3VkfHVsYXx0dXR8IHR1fCBpZXxobmF8a2F3fHUga3xsYWt8Z2FtfG1uYXx1bW58ZyBkfCBudXx5dW58cmkgfGF5dXx3YXR8IHdhfGVyaXxnIG58YSB1fGkgbXx1IHB8IHRhfGR1IHxkaXR8dW11fGsga3xyZW58bWJhfHJpa3xndGF8IGJlfGFsaXxoIHB8aCBhfGV1c3x1IG58YWxtfGlsIHwgZGF8c2FzfGFtaXxtaW58bG1hfG5ndXxuYXN8eWF0fHJha3xhbXB8bWVyfGsganxzYWJ8bXVtfCByYXxydWF8YW1lfHVhIHx0ZXJ8c2FsfGtzYXxtZW58a2FzfG5nZXxrIGR8b25hfCBiaXxiaXN8c2lvfGlvbnxuYWx8dGFhfCBkZXx1aCB8Z2FsfGRpcHx3ZSB8YmFkXCIsXG4gICAgXCJyb25cIjogXCIgZGV8yJlpIHwgyJlpfHJlIHwgw65ufGFyZXx0ZSB8ZGUgfGVhIHx1bCB8cmVwfGxlIHxlcHR8ZHJlfGUgZHwgZHJ8aWUgfMOubiB8ZSBhfGF0ZXxwdHV8IHNhfHR1bHwgcHJ8b3IgfGUgcHwgcGV8bGEgfGUgc3xvcml8IGxhfCBjb3xsb3J8IG9yfGlpIHxyZWF8Y2UgfGF1IHx0YXR8YcibaXwgYSB8IGNhfGVudHwgZml8YWxlfMSDIGF8YSBzfCBhcnxlcnN8cGVyfGljZXwgbGl8dXJpfGEgZHxhbCB8IHJlfGUgY3xyaWN8bsSDIHxpIHN8ZSBvfGVpIHx0dXJ8IHPEg3xsaWJ8Y29ufG1lbnxpYmV8YmVyfHJzb3xzxIMgfHTEg8ibfHNhdXwgYWN8aWxvfHByaXzEg8ibaXxpIGF8aSBsfGNhcnxsIGx8dGVyfCBpbnzIm2llfGPEgyB8c29hfG9hbnzIm2lpfGzEgyB8dGVhfHJpIHxhIHB8IGFsfHJpbHxlIMiZfGFuxIN8aW4gfG5hbHxwcmV8aSDDrnx1bml8dWkgfHNlIHxlIGZ8ZXJlfGkgZHxlIMOufGl0YXwgdW58ZXJ0fGlsZXx0xIMgfGEgb3wgc2V8aSDImXxwZW58aWEgfGVsZXxmaWV8aSBjfGEgbHxhY2V8bnRlfG50cnxlbml8IGPEg3xhbMSDfCBuaXxpcmV8xIMgZHxwcm98ZXN0fGEgY3wgY3V8IG51fG4gY3xsdWl8ZXJpfG9uYXwgYXN8c2FsfMOibmR8bmHIm3xlY3V8aSBwfHJpbnxpbsibfCBzdXxyxIMgfGUgbnwgb218aWNpfG51IHxpIG58b2F0fMSDcml8bCBkfCB0b3x0b3J8IGRpfCBuYXxpdW58IHBvfG9jaXx0cmV8bmkgfHN0ZXxzb2N8ZWdhfGkgb3xnYWx8IHNvfCB0cnzEgyBwfGEgYXxuIG18c3RhfHZhIHzEgyDDrnxmaSB8cmVzfHJlY3x1bHV8bmljfGRpbnxzYSB8Y2xhfG5kIHwgbW98IGNlfCBhdXxhcmF8bGl0fGludHxpIGV8Y2VzfHVpZXxhdCB8cmFyfHJlbHxpZWl8b25zfGUgZXxsZWd8bml0fMSDIGZ8IMOubXxhIMOufGFjdHxlIGx8cnUgfHUgZHxudGF8YSBmfGlhbHxyYSB8xIMgY3wgZWd8yJvEgyB8IGZhfGkgZnxydMSDfHRydXx0YXJ8yJtpIHzEgyDImXxpb258bnR1fGRlcHxhbWV8aSBpfHJlYnxlY3R8YWxpfGwgY3xlbWV8bmRlfG4gYXxpdGV8ZWJ1fGJ1aXzDonQgfGlsaXx0b2F8ZGVjfCBvIHxwbGl8dsSDyJt8bnQgfGUgcnx1IGN8yJthIHx0IMOufGwgyJl8Y3UgfHJ0YXxjaWF8YW5lfMibaW98Y2EgfGl0xIN8cG9hfGPIm2l8w65tcHxiaWx8ciDImXwgc3R8b211fMSDyJvEg3zIm2l1fHJpZXx1bWF8bcOibnwgbWF8YW5pfG7Im2F8Y3VyfGVyYXx1IGF8dHJhfG9hcnwgZXh8dCBzfGlpbHx0YSB8cml0fHJvdHxtb2R8dHJpfHJpdnxvZCB8bGljfHJpaXxlemV8bWFufMOubnZ8bmUgfG52xIN8YSDImXxjdGlcIixcbiAgICBcImhhdVwiOiBcImRhIHwgZGF8aW4gfGEga3x5YSB8YW4gfGEgZHxhIGF8IHlhfCBrb3wgd2F8IGEgfHNhIHxuYSB8IGhhfGEgc3x0YSB8a2lufHdhbnx3YSB8IHRhfCBiYXxhIHl8YSBofG4gZHxuIGF8aXlhfGtvIHxhIHR8bWEgfGFyIHwgbmF8eWFufGJhIHwgc2F8YXNhfCB6YXwgbWF8YSB3fGhha3xhdGF8IGthfGFtYXxha2t8aSBkfGEgbXwgbXV8c3UgfG93YXxhIHp8aWtpfGEgYnxuY2l8IMaZYXwgY2l8IHNofGFpIHxrb3d8YW5jfG5zYXxhIMaZfGEgY3wgc3V8c2hpfGthIHwga3V8IGdhfGNpIHxuZSB8YW5pfGUgZHx1bWF84oCYeWF8Y2lrfGt1bXx1d2F8YW5hfCBkdXwg4oCYeXzJl2FufGFsaXxpIGt8IHlpfGFkYXzGmWFzfGFrYXxra2l8dXR1fG4geXxhIG58aGkgfCByYXxtdXR8IGRvfCBhZHx0YXJ8IMmXYXxuZGF8IGFifG1hbnxhIGd8bmFufGFyc3xhbmR8Y2lufGFuZXxpIGF8eWkgfG4ga3xtaW58c2FtfGtlIHxhIGl8aW5zfHlpbnxraSB8bmlufGHJl2F8YW5ufG5pIHx0dW18emEgfGUgbXxhbWl8ZGFtfGthbnx5YXJ8ZW4gfHVtIHxuIGh8b2thfGR1a3xtaSB8IGphfGV3YXxhYml8a2FtfGkgeXxkYWl8bWF0fG5uYXx3YcmXfG4gc3xhc2h8Z2EgfGtva3xva2l8cmUgfGFtIHxpZGF8c2FyfGF3YXxtYXN8YWJ1fHVuaXxuIGp8dW5hfHJhIHxpIGJ8IMaZdXxkdW58YSDigJh8Y2V3fGEgcnxhYmF8xpl1bnxjZSB8ZSBzfGEgyZd8c2FufHNoZXxhcmF8bGkgfGtrb3xhcml8biB3fG0gbnxidXd8YWlrfHUgZHxrYXJ8IGFpfG5peXwgbmV8aGFsfHJpbnxidWJ8emFtfG9taXwgbGF8cnNhfHVidXxoYW58YXJlfGF5YXxhIGx8aSBtfHphaXxiYW58byBufGFkZHxuIG18aSBzfCBmYXxiaW58ciBkfGFrZXxuIOKAmHx1bnN8c2FzfHRzYXxkb218IGNlfGFuc3wgaHV8bWUgfGtpeXzGmWFyfCBhbXzJl2lufCBhbnxpa2F8amFtfGkgd3x3YXR8biB0fHl5YXxhbWV8biDGmXxhYmJ8YmF5fGhhcnxkaW58aGVufGRva3x5YWt8biBifG5jZXxyYXl8Z2FufGZhIHxvbiB8IGtpfGFpZHwgdHN8cnN1fCBhbHxheWV8IGlkfG4gcnx1IGt8aWxpfG5zdXxiYmF8YXVyfGtrYXxheXV8YW50fGFjaXxkYW58dWtrfGF5aXx0dW58YWdhfGZhbnx1bmN8IGxvfG8gZHxsb2t8c2hhfHVuIHxsaW58a2FjfGHJl2l8ZmkgfGdhbXxpIGl8eXV3fHN1bnxhaWZ8YWphfCBpcnx5YXl8aW1pfHdhcnwgaXl8cml5fGFjZXxudGF8dWthfG8gYXxiYXR8bWFyfGJpIHxzYWt8biBpfCBha3x0YWJ8YWZpfHNhYlwiLFxuICAgIFwiYm9zXCI6IFwiIHByfCBpIHxqZSB8cmF2fCBuYXxwcmF8bmEgfGRhIHxtYSB8aW1hfCBzdnxhIHN8bmplfGEgcHwgZGF8IHBvfGFuanxhIGl8dm8gfHZhIHxrbyB8amEgfCB1IHxha298byBpfG5vIHwgemF8ZSBzfGp1IHxhdm98IGltfHRpIHxzdmF8YXZhfGkgcHxvIG58bGkgfGlsaXxpIHN8dmFufG9zdHwga298dmFrfGloIHxuZSB8YSB1fCBzbHxuamF8a29qfCBkcnwgbmV8amVkfCBiaXxpIGR8aWplfHN0dnx1IHN8bG9ifGltIHxzbG98IGlsfGJvZHxvYm98IHJhfHN0aXxwcml8IGplfCBzdXx2amV8b20gfGEgZHxzZSB8ZSBpfCBvYnxhIG58aSBpfCBzZXxkcnV8ZW5qfCBvc3x2b2p8Y2lqfGUgcHxhIGJ8c3UgfG8gZHx1amV8dSBwfHJhenxpIG58YSBvfCBvZHxsbyB8dSBvfG92YXx1IGl8ZWRufGkgdXwgbmp8b3ZvfGplbnxsanV8bmkgfG9qZXxub3N8YSBrfHJhbnxkamV8aXRpfG8gcHxhY2l8xb5hdnxhIGp8aSBvfGUgb3xwcmV8cHJvfGJyYXxuaWh8amkgfCBrYXxlIGR8amVnfG9nIHxzdGF8IHRyfHRyZXxidWR8dSBufGRyxb58dSB6fHLFvmF8Yml0fHN2b3xpamF8ZWxqfHJlYnxlIGJ8bWlqfGplbXxhdm58cG9zfCBidXxrYSB8YWp1fCBpenxiYSB8dmUgfHJvZHxkZSB8YXJvfGUgdXxpdmF8YSB6fGVtIHzFoXRpfGlsb3xlbml8bGplfMSHaSB8cmVkfGJpbHxqZWx8amVyfCBuaXxvZG58bSBpfGR1IHx0dmF8bmFyfGdvdnwgc2F8b2ppfCBkb3x0dSB8dmltfHUgZHwgc3R8byBrfGUgbnxhIHR8emEgfG5pbXwgZGp8IHNtfHXEh2l8acSNbnxkbmF8aSBtfG9kYXx2bm98ZWJhfGlzdHxuYWN8ZSBrfMSNbm98bmFrfGF2ZXx0aXZ8ZcSRdXxub3Z8b2xqfHNub3xhbml8YWxufGFuIHxub218aSBifHN0dXxuc3R8ZW5vfG9qIHxvc258YSByfG92anxuYXB8c21pfG5vZ3zEjW92fG9qYXxuanV8YXJhfG51IHxkbm98YW5zfG92aXxqYW58ZWRpfG0gc3wga3J8aCBwfHR1cHwgb3B8IMSNb3xpa298amVrfHR2b3wgdmp8IG1pfHRlbHx2dSB8b2JyfMW+aXZ8dGl0fG8gb3x1bmF8b2R1fCBtb3wgb3Z8a3JpfGVnb3xkaW58cnVnfG5pa3xyYWR8cG9kfG5qaXxzYW18c3RvfGxqYXxkc3R8cmltfGl0ZXxyaXZ8IHRlfG0gbnx2b2x8aSB2fGUgdHx2bml8YWt2fGl0dXxnIHB8IHRhfGHFoXR8emHFoXxzdml8YW8gfHRlIHxvIHN8YWsgfG1qZXxhIMSNfG9kcnx1ZHV8a2xhfGkgdHxhdml8dG5vfG5pxI18IHZyfG5pY3xkbml8dSB1fGluYXwgZGV8b2JhfG9kIHxqaWh8c3QgXCIsXG4gICAgXCJocnZcIjogXCIgcHJ8IGkgfGplIHxyYXZ8cHJhfG1hIHwgbmF8aW1hfCBzdnxuYSB8dGkgfGEgcHxuamV8IHBvfGEgc3xhbmp8YSBpfHZvIHxrbyB8ZGEgfHZhdHx2YSB8bm8gfCB6YXxpIHN8byBpfGphIHxhdm98IHUgfCBpbXxzdmF8aSBwfCBiaXxlIHN8anUgfHRrb3xvIG58bGkgfGlsaXx2YW58YXZhfCBzbHxpaCB8bmUgfG9zdHwgZHJ8aWplfCBuZXxqZWR8c2xvfCByYXx1IHN8bG9ifG9ib3wgb3N8Ym9kfCBkYXwga298b3ZhfG5qYXxrb2p8aSBkfGF0a3xpdGl8IGlsfHN0dnxwcml8b20gfGltIHwgamV8IG9ifCBzdXwga2F8aSBpfGkgbnxlIGl8dmplfGkgdXxzZSB8ZHJ1fGJpdHx2b2p8YXRpfGkgb3zEh2VufGEgb3xvIHB8YSBifGEgbnx1xIdpfCBzZXxlbmp8c3RpfGEgdXxlZG58ZGplfGxvIHzEh2F2fCBtb3xyYXp8dSBwfCBvZHxyYW58bmkgfHJvZHxhIGt8c3UgfGFyb3xkcsSHfHN2b3xha298dSBpfHLEh2F8YSBqfG1panxqaSB8bmlofGVuaXxlIG58ZSBvfCBuanxwcmV8cG9zfMSHaXZ8b2plfGVub3xlIHB8bmFyfG9kYXxuaW18b3ZvfGFqdXxyYSB8xIdpIHxvZyB8bm92fGl2YXxhIGR8bm9zfGJyYXxiaWx8aSBifGF2bnxhIHp8amVufGUgZHx2ZSB8b3JhfHR2YXxqZWx8c3RhfG1vcnx1IG98Y2lqfHByb3xvdml8emEgfGplcnxrYSB8c25vfGlsb3xqZW18cmVkfGVtIHxsanV8b3NufG9qaXwgaXp8YWNpfCBkb3xsamV8aSBtfCBuaXxvZG58bm9tfGplZ3wgZGp8dm5vfHZpbXxlbGp8dSB6fG8gZHxyYWR8byBvfG0gaXxkdSB8dWplfCBzYXxuaXR8ZSBifCBzdHxvaiB8dGl0fGEgxId8ZG5vfGUgdXxvIHN8dSBkfGXEh3V8YW5pfGRuYXxuYWt8bnN0fHN0dXwgc218ZSBrfHUgdXxhbiB8Z292fG5qdXxqdcSHfGFsbnxtIHN8dHUgfGEgcnzEh292fGphbnx1IG58byBrfGlzdHzEh3UgfHRlIHx0dm98YW5zfMWhdGl8bnUgfGFyYXxuYXB8bSBwfG5pxId8b2xqfGJ1ZHwgYnV8ZWRpfG92anxpIHZ8cG9kfHNhbXxvYnJ8dGVsfCBtaXxpbmF8emHFoXxlIG18YcWhdHwgdmp8b25hfG5qaXxqZWt8IHRhfGR1xId8aWphfCDEh298dHVwfGggcHxvamF8c21pfGFkYXwgb3B8b3NvfHVuYXxzb2J8b2R1fGRuaXxydWd8dWR1fGFvIHxkaSB8YXZpfHRub3xqaW18aXR1fGl0a3zEh2UgfG9kcnxhdmV8bWXEh3xub2d8ZGlufHN2aXwgxIdpfGtha3xrbGF8cmltfGFrdnxlbG98xaF0dnxpdGV8dm9sfGpldHxvcMSHfHBvdHx0YW58YWsgfG5pY3xuYWN8dcSHZXwgc2t8IG1lfHZlblwiLFxuICAgIFwibmxkXCI6IFwiZW4gfGRlIHxhbiB8IGRlfHZhbnwgdmF8IGVufCBoZXxpbmd8Y2h0fGRlcnxuZyB8biBkfG4gdnxldCB8ZWVufCBnZXxlY2h8biBlfHZlcnxyZWN8bmRlfCBlZXwgcmV8IGJlfGVkZXxlciB8ZSB2fGdlbnxkZW58aGV0fHRlbnwgdGV8IGlufCBvcHxuIGl8IHZlfGxpanwgeml8ZXJlfGVsaXx6aWp8aWprfHRlIHxvb3J8aHQgfGVuc3xuIG98YW5kfHQgb3xpam58aWVkfGtlIHwgb258ZWlkfG9wIHwgdm98am4gfGlkIHxvbmR8aW4gfHNjaHwgdnJ8YWFyfG4genxhYW58IGllfHJkZXxyaWp8bWVufHJlbnxvcmR8aGVpfGh0ZXwgd2V8ZWZ0fG4gZ3xmdCB8biB3fG9yIHxuIGh8ZWVmfHZyaXx3b3J8IG1lfGhlZXxhbCB8dCByfG9mIHxsZSB8IG9mfGF0aXxnIHZ8ZSBifGVuaXwgYWF8bGxlfCB3b3xuIGF8ZSBvfG5kIHxyIGh8dm9vfCBhbHxlZ2V8biB0fGVya3wgZGF8IG5hfHQgaHxzdGF8amtlfGF0IHxuYXR8bmdlfGUgZXxlbmR8IHN0fG9tIHxlIGd8dGllfG4gYnxzdGV8ZGllfGUgcnxlcnd8d2VsfGUgc3xyIGR8IG9tfGlqIHxkaWd8dCBlfGlnZXx0ZXJ8aWUgfGdlbHxyZSB8amhlfHQgZHwgemF8ZSBtfGVyc3xpamh8bmlnfHphbHxuaWV8ZCB2fG5zIHxkIGV8ZSB3fGUgbnxlc3R8ZWxlfGJlc3wgZG98ZyBlfGNoZXx2b2x8Z2UgfGV6ZXxlIGR8aWcgfGdpbnxkYXR8aGFwfGNoYXxla2V8IGRpfG9uYXxlIGF8bGtlfG5zdHxhcmR8IGdyfHRlbHxtaW58IHRvfHdhYXxsZW58ZWxrfGxpbnxlbWV8amsgfG4gc3xkZWx8c3RyfGhhbnxldmV8Z3JvfGljaHx2ZW58ZG9vfCB3YXx0IHZ8aXQgfG92ZXxyaW58YWF0fG4gbnx3ZXR8dWl0fGlqZHx6ZSB8IHpvfGlvbnwgb3Z8ZGV6fGdlbXxtZXR8dGlvfGJiZXxhY2h8IG5pfGhlZHxzdCB8YWxsfGllc3xwZXJ8aGVifGViYnxlIGl8dG9lfGVzIHx0YWF8biBtfG50ZXxpZW58ZWwgfG5pbnxhbGV8YmVufGRhYXxzdGl8IG1hfG1lZXxraW58cGVufGUgaHx3ZXJ8b250fGlldHx0aWd8ZyBvfHMgZXwgZXJ8aWdkfGV0ZXxhbmd8bGFufG5zY3xlbWF8bWFufHQgZ3xpcyB8YmVnfGhlcnxlc2N8YmlqfGQgb3xyb258dGlufG5hbHxlZXJ8cCB2fGVkaXxlcm18aXRlfHQgd3x0IGF8IGh1fHJ3aXx3aWp8aWpzfHIgZXx3ZWd8anMgfHJtaXxuYWF8dCBifGFwcHxyd2V8IGJpfHQgenxrZXJ8YW1lfGVyaXxrZW58IGFufGFyIHwgbGF8dHJlfGdlcnxyZGl8dGFufGVpdHxnZGV8ZyBpfGQgenxvZXBcIixcbiAgICBcInNycFwiOiBcIiBwcnwgaSB8cmF2fHByYXwgbmF8bmEgfG1hIHwgcG98amUgfCBzdnxkYSB8YSBwfGltYXxqYSB8YSBpfHZvIHxuamV8dmEgfGtvIHxhbmp8dGkgfGkgcHwgdSB8YWtvfGEgc3wgZGF8YXZvfGkgc3xqdSB8b3N0fCB6YXxzdmF8byBpfHZha3wgaW18ZSBzfG8gbnxhdmF8IHNsfG5qYXwga298bm8gfG5lIHxsaSB8b20gfCBuZXxpbGl8IGRyfHUgc3xzbG98a29qfGEgbnxvYm98aWggfGxvYnxib2R8aW0gfHN0aXxzdHZ8YSBvfCBiaXwgaWx8IHJhfHByaXxhIHV8b2cgfCBqZXxqZWR8ZSBwfGVuanxuaSB8dmFufHUgcHxub3N8YSBkfGl0aXxhIGt8ZWRufGkgdXxwcm98byBkfG92YXwgc3V8cmFufGNpanxpIGl8c3RhfHNlIHwgb3N8ZSBpfGRydXwgb2J8aSBvfHJvZHxhanV8b3ZlfCBkZXxpIG58IGthfGFjaXxlIG98IG5pfCBvZHxvdm98aSBkfHZlIHwgc2V8ZW5pfHZvanxpamF8c3UgfHUgaXzFvmF2fGF2bnx1amV8IHN0fHJlZHxtIGl8ZG5hfGEgYnxvZGl8YXJhfGRyxb58amkgfG5vdnxsanV8ZSBifHLFvmF8dHZhfMWhdG98dSBvfG9qYXwgb3Z8YSBqfG9kbnx1IHV8amFufHBvxaF8amVufCBuanxuaW18a2EgfG/FoXR8ZHUgfHJhenxhIHp8IGl6fHNub3xvIHB8dnUgfHUgbnx1IGR8xaF0aXxvc258ZSBkfHByZXx1IHp8ZGUgfGF2ZXxuaWh8Yml0fGFyb3xvaml8YmV6fHR1IHxnb3Z8bGplfGnEjW58IHNhfGxqYXxzdm98bG8gfHphIHx2bm98ZSBufGXEkXV8IHRyfG5hcnwgbWV8dmltfMSNbm98b2RhfGFuaXzEkWVufG5hY3xuYWt8YW4gfHRvIHx0cmV8YcWhdHwga3J8c3R1fG5vZ3xvIGt8bSBzfHRpdHxhbG58bm9tfG9qIHxwb3N8ZSB1fHJlYnwgdnJ8b2xqfGRub3xpa298a3UgfG1lIHxuaWt8IGRvfGlrYXxlIGt8amVnfG5zdHx0YXZ8ZW0gfGkgbXxzbWV8byBzfGRuaXxicmF8bmp1fMWhZW58b3ZpfHRhbnx0ZSB8YXZpfHZvbHwgbGl8emHFoXxpbG98cnVnfHZhcnxrYW98YW8gfHJpdnx0dXB8c3QgfMW+aXZ8YW5zfGVub3zEjW92fMWhdHZ8a2xhfHZyZXxidWR8ZW5hfCB2ZXx2ZXJ8b2R1fG1lxJF8b2p1fHXFoXR8IGJ1fGtvbXxrcml8cG9kfHJ1xaF8bSBufGkgYnxiYSB8YSB0fHVnaXxlZGl8IG1vfGxhIHx1IHZ8a2FrfCBzbXxlZ298YWt2fG8ganxyYWR8ZHN0fGphdnxkZWx8dHZvfCBvcHxudSB8cG9yfHZsanxhdmx8bSBwfG9kIHxqZW18b2plfCDEjW98YSByfHNhbXxpIHZ8ZXJlfHBvdHxvIG98xaF0ZXxyZW18dmVrfHN2aXwgb258cm90fGUgclwiLFxuICAgIFwiY2tiXCI6IFwiIGhlfCDDuyB8w6puIHwgYml8IG1hfGluIHxuYSB8IGRpfG1hZnxhbiB8a3UgfCBkZXwga3V8IGppfHh3ZXxoZXJ8IHh3fGl5YXx5YSB8a2VzfGtpcnxyaW58aXJpfCBuZXxqaSB8YmkgfHnDqm58YWbDqnxlIGJ8ZGUgfHRpbnxlIGh8aXnDqnxrZSB8ZXMgfHllIHwgd2V8ZXIgfGRpIHx3ZSB8w6ogZHxpIGJ8IGJlfGVya3xpbmF8IG5hfCBhbnzDriDDu3x5w6ogfGV5ZXzDriB5fGvDriB8cmtlfG7DqiB8ZGl5fGV0ZXxla2V8YmVyfGhlbXxoZXl8IGxpfCBjaXx3ZWt8bGkgfG4gZHxmw6ogfCBiw6p8IHRlfG5lIHx5w64gfCBzZXxuZXR8csOuIHx0ZXd8eWVrfHN0aXxhZiB8IGtpfHJlIHx5YW58biBifGthcnxoZXZ8ZSBrfGF6YXxuIMO7fHfDriB8IGV3fGkgaHxuIGt8w7sgYnzDriBifCBtaXwgYXp8ZGFufCB3w658ZWvDrnzDriBhfGEgbXx6YWR8ZSBkfG1pcnxiaW58ZXN0fGFyYXxpcm98bmF2fHNlcnxhIHd8YWRpfHJvdnxuIGh8YW7Dqnx0w6ogfGV3ZXxiZSB8ZXdsfGV2IHxtw7sgfCB5YXx0w64gfHRhIHxlbcO7fCB5w6p8YXN0fHdsZXwgdMOqfG4gbXwgYm98d2V5fHMgbXxibyB8IHR1fG4ganxyYXN8IGRhfCBtZXxkaW58w64gZHzDqiBofG4gbnxuIHd8aW5nfHN0IHwga2V8IGdlfMOubiB8YXIgfCBww6p8aXllfMOubmF8YmF0fHIga3xlbWF8Y2lofMOqIGJ8d2VkfMO7IG18ZMOuIHzDuyBhfHZha3zDqiB0fGVraHxwYXJ8IHllfHbDriB8Y2l2fG4gZXxhbmF8w64gaHzDqiBrfGtoZXxnZWh8bmdlfMO7bmF8ZsOqbnxhbmV8YXYgfMOuIG18YmlrfGV5w6p8ZXnDrnxlIMO7fCByZXxtYW58ZXJifGEgeHx2w6ogfMOqIG18aXZhfGUgbnxow64gfGLDu258a8OqIHwgcGF8ZXLDrnxqw64gfGVuZHwgdGF8ZWxhfG7Dqm58biB4fGEga3xpa2F8ZiDDu3xmIGh8w64gbnxhcml8bcOuIHxhIHN8ZSBqfGV6YXx0w6pufG5la3wgbml8cmEgfGVow658dGl5fG4gYXxiZXN8cmJlfMO7IGh8cndlfHphbnwgYSB8ZXJ3fG92IHxpbsOqfGFtYXxlayB8bsOubnxiw6ogfG92w658aWtlfGEgbnwgcmF8cml5fGkgZHxhbsOufMO7IGR8ZSBlfGV0w6p8w6ogeHx5ZXR8YXllfMOqIGp8dGVtfGUgdHxlcmR8aSBufGV0YXxpYmV8YSBnfHUgZHx4ZWJ8YXTDqnxpIG18dHUgfCB3aXxkZXd8bWFsfGxldHxuZGF8ZXdhfCDDqm58YXdhfGUgbXxhIGR8bWFtfGhhbnx1IGh8YSBifHDDqsWffGVyZXwgYmF8bGF0fGlzdHwgemF8YmlifHVrZXx0dWt8YXJlfGFzw658cnRpfGFyw658aSBhfGjDrm58IGjDrnxlZGl8bsO7bnxhbsO7fHFhbnwgcWF8IGhpfCDFn2V8aW5lfG4gbHxtw6pufMO7biB8ZSBhXCIsXG4gICAgXCJ5b3JcIjogXCJ0aSB8IG7DrXzDs8ypIHwgw6jMqXxuw60gfCBsw6F8zKluIHxvzKlufMOpzKkgfHdvzKl8w6BuIHwgZcypfGthbnxhbiB8dMOtIHwgdMOtfHTDs8ypfCBrw7J8w7LMqSB8zKl0w7N8IMOgd3wgw6B0fMOozKkgfMOozKl0fGXMqW58YsOtIHzDoHRpfGzDoXR8w6F0aXwgZ2J8bMOozKl8c8ypZXwgbMOzfCDDsyB8w6B3b3xnYm98zKluw6x8biBsfCBhIHwgdMOzfMOtIMOofHJhIHwgc8ypfG4gdHzDssypa3xzw60gfHTDsyB8zKlrYXxrw7LMqXzDrHnDoHxvzKkgfCBzw618w61sw6h8b3LDrXxuaSB8ecOgbnxkw6ggfMyp4oCQw6h8w6wga3zMqSDDoHzDqGTDqHwgb3J8w7puIHxyw61sfMOozKnigJB8w60gw6B8asOpzKl84oCQw6hkfMOgYsOtfMypw7LMqXzDssypw7J8dMOgYnxuw6wgfMOtIMOzfG4gw6B8IHTDoHzMqSBsfGpvzKl8IHRpfMypZSB8zKkgdHwgd298bsOseXzDrSDDrHzDsyBufCBqw6l8IHPDrHxsw7MgfGvDsiB8biDDqHx3w7PMqXwgYsOhfG4gbnxzw6wgfCBmw7p8zKkgc3zDrSBhfHLDqMypfGbDum58IHDDqXwgw7JtfMypbml8Z2LDoHwga8OtfCDDqG58w6huw6x8aW4gfMOybcOsfMOsw60gfGJhIHxuaXJ8cMOpIHxpcmF8bcOsbnzDrG5pfG4gb3xyw6BufMOsZ2J8IMOsZ3xiw6EgfGXMqSB8IHLDqHzMqSBufGvDrSB8biBlfHVuIHxnYmF8zKkgcHzDrSDDsnxuw7ogfCBvzKl8bsOtbnxnYsOpfHnDqSB8IGthfMOtbsO6fGEga3xmaSB8IGZpfG1vzKl8YsOpzKl8b8ypZHxkw7LMqXzMqWTDsnzDsyBzfGkgbHzMqSBvfMypIMOsfHfDoCB8w60gaXxpIMOsfGh1bnxiw7IgfGkgw7J8ZMOhIHxib8ypfG/MqW18zKltb3zMqXfDs3xibyB8w6HDoCB8zKkga3zDsyBqfGzDs8ypfMOgZ2J8b2h1fCBvaHwgYsOtfCDDssypfGLDoCB8YXJhfHnDrMOtfG9nYnzDrXLDoHxuIHN8w7ogw6x8IMOsYnxww7LMqXzDrSBrfCBsw6h8Ym9nfGkgdHzDoCB0fMOzw7IgfHnDs8OyfGvDs8ypfGfDqcypfMOgIGx8w7PMqW58csO6IHxsw6ggfCB5w7N8zKkgw7J8zKkgZXxhIHd8zKkgeXzDssypcnzMqSBmfCB3w6B8w7IgbHzDrSB0fMOzIGJ8aSBufMOzzKl3fMypZ2J8ecOtIHzDrSB3fMOsa8OpfMypIGF8bMOhw6B8d8O5anzDoGLDsnxpIMOofMO5am98ZmlufMOpzKlufG4ga3zDrSBlfGkganzDuiDDoHwgw6xrfMOyZml8IMOyZnwgYXJ8aSBzfG3DrMOtfMOsw61yfCBtw6x8IGlyfHJpbnxuw6HDoHwgbsOhfGrDuiB8zKkgYnwgecOsfMOzIHR8zKnDqcypfCBpIHzMqSBtfGbDqcypfGvDoG58csOtIHzDuiDDqHzDoCBufHfDuSB8c8ypw6l8w6kgw6B8IG3Dunwgw6h0fMOhecOpfMOtIGd8zKlrw7N8zKlkw6F8w6jMqWR8w6B3w7l8w6jMqWt8IMOsZHxpcsO6fMOtIG98aSBvfGkgw6B8bMOhw6x8w60gbnzDrXBhfCBrw7p8bsOtcHwgw6xtfGEgbHxrw6nMqXxiw6kgfGkgZ3xkZSB8w6Fiw6l8w6xuIHxiw6F5fMypw6jMqXzDrWdifHfDssypfG7DrWd8bcO6IHxsw6FifCDDoMOgfG4gZnzDqMypc3zMqSB3fMO5biB8aSBhfGF5w6l8w6h5w618IMOoeXxtw7PMqXzDoSDDqHwgbml8biBifCB3w7N8amXMqXwgw6xqfGdiw6F8w7LMqW58w7PMqWdcIixcbiAgICBcInV6blwiOiBcImxhcnxpc2h8YW4gfGdhIHxhciB8IHZhfCBiaXxkYSB8dmEgfGlyIHwgaHV8aWdhfHNoIHx1cXV8c2hpfGJpcnxxdXF8aHVxfGdhbnwgYm98IGhhfGluaXxuZyB8YSBlfHIgYnwgdGF8bGlzfG5pIHxpbmd8bGlrfGlkYXxvyrtsfGlsaXxhcml8bmlufG9uIHxpbnN8IGlufGFkaXxuc298c29ufGl5IHwgb8q7fGxhbnwgbWF8ZGlyfGhpIHxraW58aGFyfGkgYnxhc2h8IHlvfGJvyrt8IG11fGRhbnx1cWl8aWxhfGVnYXxxbGF8ciBpfHFpZ3xvyrt6fCBlZ3xrbGF8YSBifHFpbHxlcmt8a2kgfCBlcnxvbGl8bmxpfGF0IHwgb2x8Z2FkfGxnYXxya2l8b2tpfGkgaHxhIG98IHFhfHlva3xsaWd8b3NofGlnaXxpYiB8bGFzfG4gYnxhdGx8biBtfCBiYXxhcmF8IHFpfHJpIHwgc2h8aXlhfGFsYXxsYXR8aW4gfGhhbXxiaWx8YSB0fGEgeXxib3N8ciBofHNpeXxuIG98eWF0fGlubHxpayB8YSBxfGNoYXxhIGh8IGV0fGV0aXxuaXN8YSBzfHRpbHxhbml8aCBofGkgdnxtYXN8dGxhfG9zaXxhc2l8IHFvfMq7bGl8YXRpfGkgbXxybml8aW0gfHVxbHxhcm58cmlzfHFhcnxhIGl8Z2kgfCBkYXxuIGh8aGEgfHNoYXxpIHR8bWxhfHJjaHwgeGF8aSBvfGxpIHxodW58YmFyfGxpbnzKu3ogfGFyY3xybGF8IGJ1fGEgbXxhIGF8IGFzfG11bXwgYmV8IHR1fGFyb3xyIHZ8aWtsfGxpYnx0Ycq8fGggdnx0Z2F8dGlifHVuIHxsbGF8bWRhfCBrZXxzaGd8IHRvfG4gcXxzaWR8biBlfG1hdHxhbWR8c2h1fGhnYXwgdGV8dGFzfGFsaXx1bWt8b3lhfGhsYXxvbGF8YW1sfGlyb3xpbGx8dGlzfGlyaXxyZ2F8bWtpfGlybHwgeWF8eGFsfGRhbXwgZGV8Z2lufGVuZ3xyZGF8dGFyfHVzaHxyYWt8YXlvfCBlyrx8IHNvfHRlbnxhbHF8IHNhfHVyIHwgaXN8aW1vfHIgdHwga2l8bWlsfCBtaXxlcmF8emFyfGhxYXxhemF8ayBifCBzaXxuZGF8aGRhfGthdHxhayB8b8q7cnxuIHZ8YSBrfG9yIHxyYXR8YWRhfMq7bGd8bWl5fHRuaXxpIHF8c2hxfG9kYXxzaGx8YnUgfGRhdnxuaWR8eSB0fGNoIHxhc2x8c29zfGlsZ3xhc298biB0fGF0bnxzaW58YW0gfHRpIHxhcyB8YW5hfHJpbnxzaXp8eW90fGxpbXx1bml8bmdhfGxha3xuIGl8YSB1fHFvbnxpIGF8aCBrfHZsYXxhdmx8YW1pfGRla3wgamF8ZW1hfGEgZHxuYSB8IGVtfGVrbHxnyrtpfHNpIHxpIGV8aW5vfCBrYXx1Y2h8Ym9yfGtlcnwgY2h8bG1hfGxpeXxhIHZ8yrx0aXxsbGl8YWthfG11aHxyaWd8ZWNofGkgeXx1cml8cm9yXCIsXG4gICAgXCJpYm9cIjogXCJhIG58ZSBufGtlIHwgbmF8bmEgfCDhu40gfCBi4bulfCBuIHxud2V8ZXJlfOG7jSBifHJlIHxueWV8IG5rfHlhIHxsYSB8IG53fCBpa3wgbWF8eWUgfGUg4buNfGlrZXxhIG98bmtlfGEgbXzhu6UgbnwgeWF8YSDhu418bWEgfGLhu6VsfOG7pWxhfCBvbnwgYSB8ZSBpfGtpa3xpa2l8a2EgfG9ueXx0YSB8YuG7pSB8a3dhfCBuZHxhIGl8aSBufGRpIHxhIGF8d2EgfHdlcnxkbyB8IG1tfGThu6UgfGUgYXxoYSB8IGdhfGFueXwgb2J8bmRpfCBva3xoZSB8ZSBtfGUgb3xhIGV84buNIG58aXRlfHLhu6UgfGhpIHxtbWF8Z2HigJB8d3UgfGFyYXwgZOG7i3xha2F8Y2hlfG9rZXx3ZSB8byBufCBpaHxuIG98YWThu6V8bWFkfG9ib3xib2R8YSBnfG9kb3wga2F8IGV6fHRlIHxo4buLIHxiZSB84buldGF8ZOG7iyB8IGFufHppIHwgb2h8YeKAkGV8YWt3fGdiYXxpIG18bWUgfCBha3x1IG58bnlhfGloZXxhbGF8b2hlfGdoaXxyaSB8IOG7jXp8aGVyfHJhIHx3ZWd8IG50fCBpd3wgbWJ8YmEgfHDhu6V0fCBzaXxybyB8b3JvfGl3dXxjaGl8YeKAkGF8cuG7iyB84bulIGl84bulIOG7jXwgZWJ8aXJpfGViZXzhu6Vy4bulfHrhu40gfCBpbnxhIHl8ZXppfGUg4buLfGtwYXxsZSB8aWxlfOG7i3Lhu4t8biBlfGtwZXxtYmF8IGhhfGJpIHxzaXR8ZSBlfGlud3xuaWx8YXPhu4t8IGVufG1ha3xhIHV8IG5pfGFw4bulfGNo4buLfGkgaXxnaOG7i3xpIOG7jXxpIG98c2kgfCBlIHxpZGV8byBpfGUgeXzhu6UgbXxhIHN8dSBvfGt3dXxvenV8eWVyfHJ1IHxlbnd84bulIG984buNeuG7jXxnaWR8aOG7pSB8biBhfGFo4bulfG5rd3xzb3J8ZWdofGVkb3xhIOG7pXx0YXJ8biBpfHRvenzhu4sgb3xwYSB8aSBhfCBtZXxpbWV8dXJ1fGt3ZXwgbWt8dHUgfGFtYXxlbnl8dXNvfGRlIHwgaW184buNIGR8b3NpfGhlZHxhIGR8IGt3fG1rcHx3ZXR8IOG7jXJ8IOG7jW58b2JpfOG7jXLhu6V8IOG7i2t8IHRvfGdhc3wgY2h84buLY2h8bmhhfOG7jW7hu418buG7jWR8IG5jfCBhbHxuIOG7pXzhu4sgbXwgdXN8buG7jSB8dSDhu418bmNofCBvIHxldGF8biB1fCBvdHxvdHV8c2lyfHPhu4tyfCBuaHxhIGt8YWxpfG8gbXwgYWd8IGdifGUgc3zhu410YXxud2F84buLIG58bGl0fGVnYXxqaSB84buNZOG7pXxlIGt8YmFufGUgZ3zhu4sga3xlc2l8YWdifGVtZXxodSB8aWtwfHp1IHxwZSB8bnRhfG5h4oCQfGNo4buNfHUgYXxhIGJ8dWNofG4g4buNfG9ud3xyYW18a3fhu6V8ZWvhu418aSBlfCBu4buNfCB1Z3zhu41jaHx1IG18Z3d1fGEgaHx64bulenx1Z3d8bWVnfOG7iyBlfG5hdHxlIGh8ZOG7i2d8byB5fGtwdXxw4bulcnxjaGF8euG7pSB8aOG7i2N8aWNofCBuZ3xhY2h8IG9nfHdhcHx3YW584buLZ2h8dXdhfCBkaXwgbm58aSDhu4tcIixcbiAgICBcImNlYlwiOiBcInNhIHwgc2F8bmcgfGFuZ3wga2F8YW4gfCBwYXxnYSB8IG1hfG5nYXxwYWd8IG5nfGEgcHxvbiB8a2F0fGEga3x1ZyB8b2QgfCB1Z3xnIG18IGFufGFuYXxuIHN8YXkgfHVuZ3xhdGF8bmdvfGEgbXxhdHV8YWxhfHNhbnxhZyB8dHVufGcgc3xnIGt8Z29kfGQgc3xhIHN8b25nfG1nYXwgbWd8ZyBwfG4gdXx5b258YSBhfHBhbnxpbmd8dXNhfHRhbnx0YWd8dW5hfGFnYXxtYXR8YWxpfGcgdXxoYW58bmFufCB1c3xtYW58eSBrfGluYXxub258a2lufCBuYXxzeW98bGFufGEgYnxhc2F8bmF5fG4gbnxhIGl8YXdhfCB0YXx0YXd8Z2F3fG5zYXxhIG58bmFzfCBvIHxiYW58YWdwfGlzYXxkdW58d2FzfGl5YXwgZ2l8YXN5fGFkdXxpbml8YmlzfCBhZHxpbGl8byBzfCBiaXxnIGF8bmFofG5hZ3xhIHR8IGtpfGxpbnxsYXl8YWhpfHNhbXxhbCB8d2FsfCBkaXxuYWx8YXN1fCBiYXxhbm98YWd0fCB3YXxhbWF8eWFufGEgdXwgaXl8a2FufGhpbXxuIGt8Z2FufGFnc3xuIGF8a2FnfCB1bnx5YSB8a2FzfGdwYXxnIHR8IHN1fGFoYXx3aGF8YWdrfGF3aHxna2F8YSBnfGthbHxsIG58Z2xhfGdzYXxzdWR8Z2FsfGltb3x1ZCB8ZCB1fHJhbnx1a2F8aWcgfGFrYXxhYmF8aWthfGcgZHxhcmF8aXBvfG5nbHxnIG58dW5zfG4gb3xrYXV8aSBzfHkgc3xvZyB8dXRhfGQgbnxsaSB8IHNpfGdpa3xnIGl8bXRhfG90IHxpaW58IGxhfCBvZ3xvIGF8YXlvfG9rIHxhd298YWtpfGthYnxhaG98biBtfGhhdHxvIHB8Z3BpfGEgd3xhcGF8bGlwfGlwIHwgaHV8IGdhfGEgaHx1YmF8bmEgfCB0aXxiYWx8Z29ufGxhIHxhdGl8d28gfGFkIHxoaW58c2FsfGdiYXxidWh8IGJ1fCB1Ynx1aGF8YWdifGhvbnxtYSB8bmlufHVnYXx0IG58aWhpfCBwaXxtYXl8IHB1fG1ha3xuaSB8IG5pfGQgYXxwaW58YWJ1fGFnaHxhaHV8dW1hfGFzIHxkaWx8c2F5fCBpbnxhdCB8aW5zfGxha3xodW58aWxhfG1vIHxzIHN8c2FrfGFtdHxvIHV8cG9kfG5ncHx0aW58YSBkfGJ1dHx1cmF8bGFtfGFvZHx0IHN8YmFofGFtaXxhdWd8bWFsfHNvc3xvcyB8ayBzfCBpbHx0cmF8IGF0fGd0YXxiYXR8YWFufHVsb3xpaGF8aGEgfG4gcHwgYWx8ZyBifGxpaHxrYXJ8bGFvfGFnaXxhbWJ8bWFofGhvIHxzeWF8b25hfGF5YXxuZ2J8aW4gfGludXxhIGx8IGhpfG1hZ3xpa298aXQgfGFnbHxtYm98b29ufHRhcnxvIG58dGlsfGdoaXxyYWJ8eSBwfCByZXx5YWx8YXcgfG5hYnxvc3l8ZGFuXCIsXG4gICAgXCJ0Z2xcIjogXCJuZyB8YW5nfCBwYXxhbiB8c2EgfCBzYXxhdCB8IGthfCBuZ3wgbWF8YWxhfGcgcHxhcGF8IG5hfGF0YXxwYWd8cGFufCBhbnwgYXR8YXkgfGFyYXxnYSB8YSBwfHRhbnxnIG18bWdhfCBtZ3xuIG58cGF0fCBiYXxuIGF8YXlhfG5hIHxhbWF8ZyBrfGF3YXxrYXJ8YSBrfGxhbnxyYXB8Z2thfG5nYXxuIHN8ZyBufGFoYXxnIGJ8YSBhfCB0YXxhZ2t8Z2FufHRhb3xhc2F8YWthfHlhbnxhbyB8YSBtfG1heXxtYW58a2FsfGluZ3xhIHN8bmFufGFnYXwgbGF8YmFufGFsaXxnIGF8YW5hfHkgbXxrYXR8c2FufGthbnxnIGl8b25nfHBhbXxtYWd8YSBufG8gYXxiYXd8aXNhfHdhdHwgeSB8bGF5fGcgc3x5IGt8aW4gfGlsYXx0IHR8IGF5fGFhbnxvIHl8a2FzfGluYXx0IG58YWcgfHQgcHx3YWx8dW5hfHlvbnwgbyB8IGl0fG5hZ3xsYWx8dGF5fHBpbnxpbGl8YW5zfGl0b3xuc2F8bGFofGtha3xhbnl8YSBpfG50YXxueWF8dG8gfGhheXxnYWx8bWFtfGFiYXxyYW58YW50fGFndHxvbiB8dCBzfGFncHwgd2F8IGdhfGdhd3xoYW58a2FwfG8gbXxsaXB8eWEgfGFzIHxnIHR8aGF0fHkgbnxuZ2t8dW5nfG5vIHxnIGx8Z3BhfHdhIHxsYWd8Z3RhfHQgbXxrYWl8eWFhfHNhbHxhcml8bGlufGEgbHxwYXB8YWhpfCBpc3wgZGl8aXRhfCBwaXxwdW58YWdpfGlwaXxtYWt8YSBifHkgc3xiYXR8eWFnfGFnc3xvIG58YWtpfHRhdHxwYWh8bGEgfGdheXxoaW58IHNpfGRpIHxpIG58c2FzfGl0aXxhIHR8dCBrfG1hbHxhaXN8cyBufHQgYXxhbCB8aXB1fGlrYXxsaXR8Z2lufCBpcHxhbm98Z3NhfGFsb3xuaW58dW1hfGhhbHxpcmF8YXAgfGFuaXxvZCB8aSBhfGdnYXx5IHB8cGFyfHRhc3xpZyB8c2FwfGloaXxuYWh8aW5pfCBidXxuZ2l8c3lvfG8gc3xuYXB8byBwfGEgZ3wgaGF8dWthfGEgaHxhcnV8YSBvfG1haHxpYmF8YXN5fGxpIHx1c2F8ZyBlfHVoYXxpcGF8bWJhfGxhbXxraW58a2lsfGR1a3xuIG98aWdhfCBkYXxkYWl8YWlnfGlnZHxnZGl8cGlsfGRpZ3xwYWt8IHR1fGQgbnxzYW18bmFzfG5ha3xiYSB8YWQgfGxpbXxzaW58YnVofHJpIHxsYWJ8aXQgfHRhZ3xnIGd8bHVufGFpbnxhbmR8bmRhfHBhc3xrYWJ8YWhvfGxpZ3xuYXJ8dWxhfCBlZHxlZHV8IGlifGdpdHxtYSB8bWFzfGFnYnxhbWl8YWdnfGdpIHxzYXJ8aSBtfHNpeXxnIHd8YXBpfHB1bHxpeWF8YW1ifG5pbHxhZ2x8c3RhfHVsaXxpbm98YWJ1fGF1bnxheXV8IGFsfGl5b1wiLFxuICAgIFwiaHVuXCI6IFwiIHN6fCBhIHxlbiB8IHZhfMOpcyB8IMOpc3xtaW58ZWsgfCBtaXwgam98am9nfGluZHxhbiB8bmVrfHN6ZXxzw6FnfCBhenxneSB8c3phfG5kZXxhbGF8YXogfGRlbnxhIHZ8dmFsfGVsZXwgZWx8b2dhfG3DqWx8ZWd5fCBlZ3xuIGF8Z2EgfHphYnwgbWV8emVtfGVtw6l8YWJhfGludHx2YW58YmFkfHRlbHx0ZXR8IHRlfGFrIHx0w6FzfMOpbnl8dCBhfCBuZXxneWV8w6lseXx0dCB8biBzfGJlbnxzw6lnfHpldHxsYW18bWVnfG5ha3xuaSB8IHNlfGV0ZXxzZW58YWd5fGxldHxseW58cyBhfHluZXxyYSB8eiBlfGV0IHwgYWx8bWVsfGtpbnxrIGp8ZXTDqXxvayB8dGVrfCBraXx2YWd8cmUgfG4gbXxveiB8aG96fGV6IHxzIHN8ZXR0fGdva3xvZ3l8IGvDtnxtYmV8ZXMgfGVtIHxuZW18ZWx5fCBsZXxlbGx8ZW1ifGhvZ3xrIGF8YXTDoXxrw7Z6fG50IHwgaG98eWVufGhlenxlbCB8eiBhfGxlbnxkc8OhfMOhc8OhfHTDqXN8YWRzfGsgbXwgw6FsfCBlbXxhIHN8bnRlfGEgbXxzenR8YSB0fMOhbGx8w6FzIHx5IGF8b2dvfHNlbXxhIGh8ZW5rfG55ZXxlc2V8bmtpfMOhZ298dCBzfGxhcHxhbWV8YmVyfGzDsyB8ayDDqXxueWl8YmFufG3DqW58cyBlfGkgbXx0IG18IHbDqXxsbGF8bHkgfMOpYmV8bGF0fMOhZyB8YW1pfG9uIHxtemV8biB2fGVtenxmZWx8YSBufGzFkSB8YSBhfGVraXxlcml8eWVzfCBjc3xsbGV8dGF0fGVsxZF8bmQgfGkgw6l8w6lnIHzDqXPDqXxsaXN8eWlsfHZldHzDoXQgfGvDvGx8w6lydHwga2V8w6l0ZXxyw6lzfGwgYXxoZXR8c3pvfGFydHxhbMOhfCBueXx0YXJ8a296fCBhbXxhIGp8w6lzenxlbmx8ZWzDqXzDs2wgfHMga3x0w6FyfHMgw6l8w6lsZXxzIHR8bGVtfHPDrXR8Z2VzfG90dHwgZmV8biBrfHRrb3x6w6FzfHQgw6l8a2VsfGphIHwgaGF8YWzDs3x6w6lzfG5sxZF8w6lzZXxvdCB8cmkgfGxla3xtw6FzfHTFkSB8dmVsfGkganxzZSB8ZWhlfHRlc3xldmV8c3PDoXx0b3R8dCBrfG9sZ3xlemV8aSB2fMOhemF8bGVofG4gZXzDvGwgfHR0ZXxvcyB8dGkgfGF0a3x6dG98ZSBhfHRvc3zDoW55fMOhbmF8enRlfGZlanxkZWx8w6Fyc3xrIGt8a29yfMOpZ2V8c3rDoXx0IG58IGJpfHphdHx2w6lkfG5ldnxlbG18w6lkZXx6ZXJ8dMOpYnxiaXp8cnJhfGlmZXxpenR8ZXJlfGF0IHxsbCB8ayBlfG55IHxzZWx8IG7DqXzDoWJhfGx0IHxhaSB8c8O8bHxow6F6fGtpZnx0IGV8IGFyfGxlZ3xkIGF8aXMgfGkgZXxhcnJ8dCB0fMOhc298aXQgfGV0xZF8YWwgfCBtw6F8dCB2fCBiw6F8YsOhcnxhIMOpfGVzw7x8bHllfG0gbHwgZXN8bnlvXCIsXG4gICAgXCJhempcIjogXCIgdsmZfHbJmSB8yZlyIHxsYXJ8IGjJmXxpbiB8aXIgfCBvbHwgaMO8fCBiaXxow7xxfMO8cXV8cXVxfG5hIHxsyZlyfGTJmSB8aMmZcnwgxZ/JmXxiaXJ8YW4gfGxpa3wgdMmZfHIgYnxtYWx8bG1hfGFzxLF8aW5pfHIgaHzJmXhzfMWfyZl4fMmZbiB8YXLEsXxxbGF8YSBtfGRpcnxhcSB8dXF1fGFsaXwgbWF8dW5hfGlsyZl8xLFuIHx5yZl0fCB5YXxhcmF8aWtkfMmZcml8YXIgfMmZc2l8yZl0aXxyIMWffHJpbnx5ecmZfG4gaHwgYXp8ZMmZbnxuaW58yZlyyZl8dGlufGl5eXxtyZlrfHphZHwgbcO8fHNpbnwgbcmZfG5pIHxuZGF8yZl0IHxuZMmZfGF6YXxyxLFufMO8biB8xLFuxLF8yZkgYXxpIHZ8bsSxbnxvbHV8cXVufCBxYXwgZXR8aWxtfGzEsXF8yZkgeXzJmWsgfGxtyZl8bMmZIHxrZGl8aW5kfMSxbmF8b2xtfGx1bnxtYXN8eHMgfHPEsW58yZkgYnwgaW58biBtfHEgdnxuyZkgfMmZbWl8biB0fHlhIHxkYSB8IGLJmXx0bcmZfGRsxLF8YWRsfGLJmXJ8IG9ufMmZeWF8yZkgaHxzxLEgfG51bnxtYXF8ZGFufGluyZl8ZXRtfHVuIHzJmSB2fHJsyZl8biBifHNpIHxyYXF8IHZhfMmZIG18biBhfMSxbmR8csSxIHxhbsSxfCDDtnp8yZlyYXxubWF8biBpfGFtYXxhIGJ8aXJsfGFsYXxsaSB8aW5zfGJpbHxpayB8IGFsfCBkaXzEscSfxLF8yZkgZHxsyZl0fGlsIHzJmWzJmXzJmSBpfMSxcSB8bsSxIHxubGF8ZGlsfG3DvGR8biB2fMmZIGV8dW5tfGFsxLF8IHPJmXx4c2l8yZkgb3x1cSB8dXFsfG5zYXzJmXRsfCBkyZl8aWxpfMO8ZGF8YXNpfCBoZXxvbGF8c2FufMmZbml8bcmZc3wgZGF8bGFufCBidXx0yZlyfGjJmW18ZMSxcnxraWx8acWfIHx1IHZ8IGtpfG1pbnxleW58bWkgfHlpbnwgaGF8c29zfGhlw6d8YnUgfGXDpyB8IGVkfGtpbXxsxLHEn3xhbHF8eGFsfCBhc3xzaWF8b3NpfHIgdnxxIGh8csmZIHx5YW58aSBzfCDJmXN8ZGFmfGFmaXwgacWffMSxIGh8ZmnJmXwgdGF8yZkgcXzEsXFsfGEgcXx5YXJ8c2FzfGzEsSB8aWxsfG1pbHzJmXNhfGxpeXx0bMmZfHNpeXxhIGh8bcmZenx0w7xufMmZIHR8IGlzfGlzdHxpeWl8IHNvfG4gyZl8YWwgfGlmYXxpbmF8bMSxZHzEsSBvfMSxZMSxfMmZbcmZfMSxciB8yZlkyZl8aWFsfCBtaXzJmXlpfG1peXzDp8O8bnxuIGV8aXlhfGVkaXwgY8mZfCBiw7x8YsO8dHzDvHTDvHx4aWx8w7zDp8O8fG3JmW58YWTJmXx0IHZ8YSB2fGF4aXxkYXh8ciBhfG9udXwgw7zDp3xzZcOnfCBuyZl8IHNlfG1hbnxyaWx8c2lsfMmZeiB8acmZIHzDtnogfMSxbMSxfGF5YXxxYW58aSB0fMWfyZlyfHTJmW18dWxtfHLJmWZ8bcmZaHwgeGF8xJ/EsW58IGTDtnwgbml8c3RpfGlsZHxhbcmZfHF1IHxuYW18biBvfG4gZHx2YXJ8YWQgfHphbXx0YW18dMmZaFwiLFxuICAgIFwiY2VzXCI6IFwiIHByfCBhIHxuw60gfCBuZXxwcsOhfHLDoXZ8b3N0fCBzdnwgcG98bmEgfGNoIHxobyB8IG5hfG5vc3xvIG58IHJvfMOhbsOtfHRpIHx2byB8bmVifMOhdm98bcOhIHxibyB8ZWJvfCBtw6F8a2HFvnwga2F8b3UgfGHFvmR8IHphfCBqZXxkw70gfHN2b3zFvmTDvXwgcMWZfGEgc3wgc3R8c3RpfMOhIHB8IHYgfG9ib3x2b2J8IHNwfGJvZHwgesOhfMO9Y2h8cHJvfHJvZHx2w6FufGVuw618bsOpIHzDvSBtfMOpaG98IGJ5fCBuw6F8c3BvfG7EmyB8byBwfG1pIHzDrSBhfHRlcnxyb3p8b3bDoXx0byB8IGphfCBsaXzDoXJvfG7DoXJ8YnkgfGpha3xhIHB8YSB6fG55IHwgdsWhfGt0ZXxpIGF8bGlkfMOtbSB8byB2fMOtIHB8dSBwfG11IHxhdCB8IHZ5fG9kbnwgc298IG1hfGEgdnwga3R8w60gbnx6w6FrfGxpIHxvbGl8dsOtIHxrbGF8dG7DrXxwb2R8c3TDoXxlbiB8ZG8gfHQgc3xtw60gfGplIHxlbSB8w6F2YXwgZG98YnlsfCBzZXxiw710fMOtIHN8cm92fCBrIHzEjWlufCB2ZXzDvXQgfMOtIGJ8aXQgfGRuw618dsWhZXxwb2x8byBzfCBiw718dHbDrXxuw71jfHN0bnxub3V8ZWpufHNvdXxyYW58Y2kgfHZvbHxzZSB8bmVzfGEgbnxwxZnDrXxlaG98bsO9bXx0w6F0fHZhIHxuw61tfG1lenxhasOtfGkgc3xzdHZ8a8OpIHzDrWNofGXEjW58xb5lbnxlIHN8dsOpIHxvdmF8c3bDqXzDvW0gfGtvbHxkdSB8dSBzfGplaHxrb258YXZlfGVjaHxlcsOpfG51IHwgemV8aSB2fG8gZHzDrSB2fGhyYXxpZHN8bSBwfMOpbXV8b2xlfHkgc3wgaSB8bWFqfG8genwgdG98YWJ5fHN0YXwgYWJ8bSBhfHByYXwgdGF8Y2hufCBuaXzFvmUgfG92bnxha298bsOpaHxsZW58ZHNrfHJhY3xsYWR8Y2hyfCDFvmV8dmF0fCBvc3xzb2J8YWvDqXxpIHB8c23DrXxlc218c3QgfGkgbnxtIG58YSBtfGxuxJt8bG7DrXxwxZlpfGJlenxkeSB8w6FsbnxlbnN8emVtfHQgdnzEjWVufGxlxI18a2RvfMO9bWl8IGppfG9jaXxpIGt8IHMgfMOtIG18asOtIHwgxI1pfMOhdiB8c3RlfG9jaHwgb2N8dm91fMOha2x8IHZ6fHJhdnxvZHV8bmV6fGlubnxza8O9fG5pdHxpdm98YSBqfHUga3xpw6FsfCBtZXxleml8c2vDqXx2ZW58c3R1fHUgYXx0ZWp8b2xufHNsdXx6ZW58w60genx5IGJ8b2tvfHphY3xuw61jfGppbnxreSB8YSBvfMWZw61zfG9iZXx1IHZ8dGFrfHbEm2R8b2plfCB2w718aWtkfGggbnwgb2R8xI1ub3xvc298Y2nDoXxoIHB8IGRlfGEgdHzFr20gfHNvY3xqw61jfG9kxa98bsSbbnxhZG58dHVwfGTFryB8ZMSbbHxqbm98a8OpaHxwb3J8b8W+ZXxob3Z8YWNpfG5lbXzDqSB2fHJva3xpIGp8dSBvfG9kIHzDrWhvfHZpbnxvZGlcIixcbiAgICBcInBsdFwiOiBcIm55IHxuYSB8YW5hfCBueXx5IGZ8YSBufHN5IHxhaGF8cmEgfGEgYXwgZmF8biBufHkgbnxhIG18YW4gfCBmaXx0cmF8YW55fCBtYXxoYW58bmFufGFyYXx5IGF8IGFtfGthIHxpbiB8eSBtfGFtaXxvbG98IHRzfGxvbnxtaW58IG1pfCBzeXwgbmF8YSB0fCBvbHxmYW58IGhhfGEgaXxtYW58aXphfCBpenxpbmF8b25hfHkgaHxha2F8byBhfGlhbnxhIGh8cmVofGV0cnxhIHN8aGV0fG9uIHxhIGZ8aXJlfGZhaHx0c3l8bWJhfCBhcnwgaGl8emFufGF5IHxuZHJ8eSBvfGlyYXx5IHR8IGFufGVoZXxvIGh8YWZhfHkgaXxyZW58cmFufCB6b3xlbmF8YW1ifGRpYXxhbGF8YW1wfHpvIHxpa2F8IGRpfHRhbnx5IHN8eSB6fCBhenxpYSB8bSBwfHJpbnxqbyB8biBqfCBqb3wgZHJ8enkgfHJ5IHxhIGR8YW8gfGFuZHxkcmV8aGFmfG5lbnxtcGl8cmFofCBrYXxlbyB8biBkfCBpcnxobyB8YW0gfHJhaXxmYSB8ZWxvfGVuZXxvYW58b21ifCB0YXwgcGl8IGhvfGF2YXxhem98ZHJhfGl0cnxpbnl8YW50fHRzaXx6b258YXNhfHRzYXwgdG98YXJpfGhhIHxhIGt8dmFufG4gaXxmaWF8cmF5fCBmb3xtYmV8b255fHNhIHxpc3l8YXp5fG8gZnxsYWx8bHkgfG92YXxsb218IHZvfG5hdHxmaXJ8c2FtfG90b3x6YXl8bWlzfGhhbXxiZWx8IHJhfGEgcnxiYW58a2FufGloYXxuaW58YSBlfGFyeXxpdG98IGhlfCByZXwgbm98aXRhfHZvYXxuYW18Zml0fGlhcnwga298dG9rfGlzYXxmb3R8bm8gfG90cnxtYWh8YWx5fGhhcnx5IHZ8eSByfCBzYXxvIG58YWlufGthbXxhemF8biBvfG9rYXxpYWx8aWxhfGFub3xhdHJ8b2EgfCBsYXx5IGx8ZXJpfHkgZHxhdGF8aGV2fHNpYXxwaWF8aXRzfHJlb3wgYW98cGFufGFuanxhcm98dG92fG5qYXxvIHN8ZmFtfHBpcnwgYXN8dHkgfG50b3xva298eSBrfHNpcnxhaXJ8dGlufGhpYXxhaXN8bWl0fGJhIHwgaXR8IGVvfG8gdHxtcGF8a29ufGEgenxhIHZ8aXR5fHRvbnxyYWt8ZXJhfGFuaXxpdmV8bWlrfGF0aXx0b3R8dnkgfGhpdHxob2F8YWhvfGFua3xhbWV8dmVyfHZhaHx0YW98byBtfGlub3xkeSB8ZHJpfG9uaXxvcml8IG1vfGhhaHxuYW98a29hfGF0b3xlbmR8biB0fCB6YXxlaGF8bmdhfGpha3xiYXJ8bGFofG1pYXxsbmF8YWxufHZhIHwgbWJ8bGFufCBwYXxhb3Z8YW1hfGV2ZXx6YSB8ZHJvfHJpYXx0byB8bmFyfGl6eXxpZmF8YWRpfHZpYXxhamF8IHZhfGluZHxuIGt8aWRpfGZpdnxyb3Z8dmVsXCIsXG4gICAgXCJtYWRcIjogXCJhbiB8ZW5nfGJhbnxuZyB8IHNhfCBrYXxkaGF8IGJhfHJlbnxhayB8YW5nfCBzZXwgaGF8aGFrfCBkaHxuYSB8IHBhfHNlIHxhZGh8YSBzfGFiYXxuIHN8YXJhfG5nZ3xhcmV8aGEgfGFnYXxzYSB8IG9yfG9yZXxhc2F8c2FyfGFuYXwgbWF8YWFufGEga3xhbGV8Z2kgfCBhZ3xnYWR8YSBifG4gb3xuIGt8ZWJhfGFsYXxyYSB8Z2FufCBrZXxkaHV8b3RhfGFqYXxiYXN8biBifGthIHxtYW58dGFifGRoaXxiZWJ8c2FifGFtYXxha298YWJifGF0IHxnZ3V8bmdhfCB0YXxwYW58d2kgfGh1d3x1d2l8ZWthfGF0YXxhIGR8c2FufCBvdHxhZ2l8bGFrfGhhbHxiYSB8YmJhfGkgaHxvbmd8ZW0gfGthYnxnIGF8bGVtfGEgb3wgcGV8IG5hfGFuZXxwYXJ8bmdzfG5nZXxnYXJ8YSBhfHRhbnxnc2F8YSBwfHJhbnxpIHN8ayBofG4gcHx1eSB8Z3V5fGtlbnxuIGF8YWwgfGFkYXwgZ2F8YXBhfHBvbnxlIGR8IGUgfG5la3wgYW58ZyBzfHRhIHxrYWF8b24gfGthbHxhIG18c3NhfG9uYXxhYmV8a2F0fCBsYXxhIGV8ZSBlfHNhbHxhdGV8amFufHJpIHxuYW58bGFifGFzaXxzYWR8aSBwfGUgYXxsYW58YWthfGEgaHxhcml8IGJpfGVuYXxzaSB8ZGFqfCBuZ3x0b258ZSBrfGhhcnxvc3N8Z2VufGkga3xnIGt8Y2FyfGFzZXxhbm98ZXJhfGtvbnwgYmV8bnlhfG4gZHxuYWd8YmFkfGFyIHxlcG98IGRhfG1hc3wga2x8IGFsfG4gdHxtYXR8bm9zfG4gbnxlbGF8ZyBlfGEgbnxrIGt8dXdhfGFkaXxwYWR8Z2dpfHVhbnxpIGR8bmUgfCBzb3xoaSB8c2FlfG9hbnx3YW58YXMgfGxlIHxnYXB8dGVyfHlhdHxvbSB8a2xhfGsgYXxlIGJ8aW5hfGFoIHxrIHN8a29hfGkgYXxlZ2F8bmVnfG4gaHxtIHB8YWhhfCBhc3wgamF8YWJpfG1hIHxrYXN8YmkgfCBtb3xhb258IGRpfG9uZXwgZXB8cGVyfGF5YXxlIHN8bnRvfHRlIHxiYXR8ZXBhfG5kYXxuIGV8IGNhfGludHxwYW18ZGkgfGFubnwgcmF8YWVufGsgZHxhbXB8YSB0fG50YXxhbmR8ZSBwfHJnYXxwZW58eWFyfG1wb3xzdGV8ZHJhfG9rIHxva298aWxhfGcgcHxrIGJ8aSBifHNldHx0byB8aXNhfG5hb3xubmF8biBtfGV0dHwgYSB8YmlzfGhpZHxiaW58aSBtfG5hc3wgaG98a2FyfHQgc3wgcG98ZGlsfCB0b3xhanV8aWthfGtvbXxhcmd8YW50fHJhanxhIGx8ZGFzfHR0b3xvc3R8bW9zfGxhZXxnYSB8cmVrfGlkaHx0YWR8aGlnfGVuIHxybnl8YXJufG5kaHxldGF8YWR1fCBkcnxqYXR8anVhfGdhbVwiLFxuICAgIFwibnlhXCI6IFwibmRpfGFsaXxhIGt8YSBtfCBrdXwgbmR8d2EgfG5hIHxudGh8IG11fCBhbHx5ZW58dGh1fHNlIHxyYSB8bnNlfGh1IHxkaSB8YSBufGxhIHwgcGF8bXVufCB3YXxuZ2F8dW50fCBsYXxhIHV8dSBhfGUgYXxvbnN8emEgfCBtYXwgbG98aXllfGFjZXxjZSB8YSBsfGlkd3xhbmd8IGthfGtoYXxsaXl8ZW5zfGxpIHxhbGF8aXJhfGVuZXxwYSB8aSBufHdlIHxlIG18YW5hfGR3YXxlcmF8aGFsfHVsdXxsbyB8a28gfGR6aXwgY2l8eW8gfG8gd3xpa298Z2EgfGEgcHxjaGl8IG1vfGx1IHxvIGx8byBtfG95b3x1ZnV8IHVtfG1veXx6aWt8IGFufG5lcnxhbmR8dW1vfGVuYXwgdWZ8ZGFufGlyaXxmdWx8YSBhfGthIHx0byB8aGl0fG5jaHwgbmN8YSBjfGl0b3xmdW58ZHdlfCBkYXxrdWt8d2FjfCBkenxlIGx8YSB6fGFwZXxrYXB8dSB3fGUga3xlcmV8dGkgfGxpcnwgemF8cGVufHRoYXxheWV8a3V0fG11IHxybyB8b2Z1fGluZ3xsaWR8IHpvfGFtdXxvIGN8aSBtfG1hbHxrd2F8bXdhfG8gYXxlemF8aSBwfG8gbnxzbyB8aSBkfGxpbnxuc298IG13fGlyb3x6byB8IGEgfGF0aXwgbGl8aSBsfGEgZHxyaSB8ZWR3fGt1bHx1bmF8dXRpfGxhbnxhIGJ8aWtpfGkgY3xhbG98aSBrfCBjYXxsYW18byBrfGR6YXx1bmd8byB6fG11bHx1bG98dW5pfGdhbnxhbnR8bnppfCBuYXxua2h8ZSBufHNhbnxvbGl8d2lyfHRzYXx1IGt8b21lfGNhIHxnd2l8dW56fGxvbnxkaXB8aXBvfHlhbnxnd2V8cG9ufGFraHx1bGl8YWt1fG1lcnxuZ3d8Y2l0fCBwb3wga298a2lyfG1iYXx1a2h8dHNpfGJ1bnxpeWF8b3BlfGt1cHxidm98aGFufCBidXxwYW58YW1lfHZvbXxhbWF8IHlhfHNpeXwgYW18cmV6fHUgbnx6aWR8bWVufG9zYXxhbyB8cGV6fGkgYXwga3d8IG9ufHUgb3xsYWN8ZXpvfGFrYXxuZGF8aHVufHUgZHxhbmt8ZGl6fGluYXxpdHN8YWR6fCBraHxuZSB8bmlrfGUgcHxvIG98a3UgfHBodXxla2F8IHVufGV6ZXxtb2x8bWEgfCBhZHxwYXR8b21hfGV0c3x3ZXp8a3dlfGtob3x5YSB8aXpvfHNhIHxvIHB8a3VzfG9jaXxraHV8b2tofGFuc3xhd2l8aXppfHppIHxuZHV8aXphfG5vIHxzYXl8IHNpfGkgdXxhaWt8amlyfGF0c3xvZ3d8ZHUgfG1ha3x1a3d8bmppfG1haXxqYSB8c2FtfGlrYXxhcGh8c2lkfGlzYXxhbWJ8dWxhfG9zaXxoYXd8dSBtfCB6aXxveWV8bG9rfHdpbnxsYWx8YW5pfCBiYXxzaSB8IHlvfGUgb3xvcGF8aGEgfG1hcHxlbWJcIixcbiAgICBcInF1Z1wiOiBcInVuYXx0YSB8IGthfG5hIHxrYSB8YXNofGNoYXxhIGt8YXJpfGlzaHxrdW58a3RhfGFuYXxwYWt8aGthfHNoa3xhcGF8bWkgfGFjaHxoYXl8YWt0fHNocHxtYW58YWsgfCBjaHwgaGF8cmlufGF0YXx0YWt8bGxhfGl0YXxhbWl8YW1hfGFrdXxoYXJ8IHBhfHBhc3xhecOxfHnDsWl8aW5hfCBtYXwgcnV8dWt1fHNoIHxocGF8cnVufGFsbHxrdXl8YWthfGFuIHwgdHV8dHVrfHl0YXxjaGl8Y2h1fGEgY3zDsWl0fGluIHxuYWt8YSBofG5rYXxyaXN8dGFwfGthbnwga2l8YXl0fHBpIHwgc2h8cGEgfGkga3xhIHB8bmFwfGthbXxrYXd8cGF5fG5hbXxheXB8YXdzfGlyaXx3c2F8YSBzfGFua3xudGF8dXkgfGEgdHxoaW58YSBtfGF5IHwgbGl8YW50fGxpYXxrYXl8bmF0fGEgcnxzaGl8aWFrfGxha3x1eWF8IHdhfHl1eXxzYXl8a2lzfHkgcnx5cGF8aHVufGEgYXwgeXV8biB0fHRhbXwgdGl8eWF5fG4ga3wgeWF8YSB3fGhwaXxsbGl8IGFsfGFwaXx5a3V8dW4gfGlwYXxhIGl8aWt1fGF5a3xzaHV8IHNhfHVzaHxwaXJ8aWNofGthdHxodSB8aHVrfCBpbHxpbGx8a2FzfGEgeXxyaWt8eWFjfGEgbHwga3V8a2FjfGhpa3x0YW58d2FufHlwaXxpbmt8aWthfCBuaXxpbGF8aW1hfGkgY3x5bGx8YXlsfCB3aXxtYWN8bmlzfCB0YXxpIHl8a3VzfHRpbnxuIHN8aSBwfHlhbnxsbHV8bGEgfGlrc3x0aWt8a3BpfCBwaXxhd2F8bWF5fGxhbnxsaSB8IHJpfGtsbHx5YXN8a2lufGtha3xheWF8a3NpfGsgaHxheW18d2FyfHVyYXwgYXl8bGF0fHVrdHxpIHR8aXlhfHVsbHxtYXN8c2hhfGtpcnx1Y2h8aCBrfG5jaHxha3B8dW1hfHBpcHxoYW58a2lrfGlraXxyaXl8YWtpfCBpaXxpIHN8biBwfGggbXxrYXJ8bmFsfHkgaHx0YWN8IHN1fG5hY3xtYWt8biBtfG5raXxrIGF8bWFtfGl3YXxrIHR8ayBrfGkgbXx5bWF8IMOxYXx3aWx8YXNpfG5taXxrYXB8cGFsfHNhbXxwYW18ayBpfGsgbHxpIGl8cGFufHN1bXxpIHd8IGh1fGhpc3wgbXV8aWlhfG11bnxrIG18dSB0fHBpa3x3YXN8aWsgfG1hIHxoYXR8ayByfGFrbHxodWN8IGltfG1hbHx1eWt8aW1pfG4geXxhbmN8eSBrfGEgbnxpw7FpfCBpw7F8d2FrfHVua3x5a2F8IG1pfGnDsWF8YSB1fGhhc3x5d2F8IGFrfGxscHxpYW58aGEgfHRhcnxybWl8aSBhfGFybXxsYXN8YXRpfHB1cnxzYWt8YXl3fGhhcHx5YXJ8dXRpfHNpIHxpeXR8dXJpfGtpbXwgYXJ8c2FufGggcHxha2t8aXkgfHdhdHx3cGF8eSBpfHUga1wiLFxuICAgIFwia2luXCI6IFwicmEgfCBrdXwgbXV8c2UgfGEga3xudHV8bmdhfHR1IHx1bXV8eWUgfGxpIHwgdW18bXVufHVudHxhIG58aXJhfCBuIHxlcmV8d2EgfHdlIHwgZ3V8bXUgfGtvIHxhIGJ8ZSBufG8ga3xlIGF8YSB1fGEgYXx1IGJ8ZSBrfG9zZXx1bGl8YWJhfHJvIHwgYWJ8Z29tfGUgYnxiYSB8dWd1fCBhZ3xvbWJ8YW5nfCBpYnxlbmd8bWJhfG8gYXxndSB8IHVifGFtYXwgYnl8IGJ1fHphIHxpaHV8Z2EgfGUgdXxvIGJ8IGJhfGt3aXxodWd8YXNofHJlbnx5byB8bmRpfGUgaXwga2F8IGFrfCBjeXxpeWV8IGJpfG9yYXxyZSB8Z2lofGlnaXxiYW58dWJ1fCBudHwga3d8ZGkgfGdhbnxhIGd8YSBtfGFrYXxudGF8YWdhfCBhbXxhIGl8a3UgfGlyb3xpIG18dGEgfGthIHxhZ298YnlvfGFsaXxhbmR8aWJpfG5hIHx1YmF8aWxpfCBid3xzaGF8Y3lhfHUgbXx5YW58byBufCBpZ3xlc2V8bm8gfG9ib3xhbmF8aXNofGthbnxzaG98IHdlfGVyYXx5YSB8YWNpfHdlc3x1cmF8aSBhfHVrb3xlIG18biBhfG8gaXxrdWJ8dXJ1fGhvYnxiZXJ8cmFufGJvcnwgaW18dXJlfHUgd3x3byB8Y2lyfGdhY3xhbml8YnVyfHUgYXxvIG18dXNofCBub3xlIHl8IHkgfHJ3YXxla2V8bmdlfGFyYXx3aXl8dWdhfHpvIHxuZSB8aG8gfGJ3YXx5b3N8YW56fGFoYXxpbmR8bXdlfHRlZ3xlZ2V8YXJlfHplIHxuIGl8cmFnfGFuZXx1IG58Z2UgfG1vIHx1IGt8YnVsfCB1a3xid298YnllfGl6YXxhZ2V8bmdvfHUgZ3xnaXJ8Z2VyfHppcnxrdWd8aXRlfGJhaHwgYWx8IGtpfHVoYXxnbyB8bXVsfHVnb3xuIHV8dGFufGd1aHx5IGl8IHJ5fGdhcnxiaWh8aWtpfGF0dXxoYSB8bWJlfGJhdHxvIGd8YWt3fGlieXxpbWl8a2ltfGF0ZXxhYm98ZSBjfGFob3xvIHV8ZXllfHR1cnxraXJ8IG5pfGplIHxibyB8YXRhfHUgdXwgbmd8c2h5fGEgc3xnZWt8IHJ1fGlrb3wgYm98Ym9zfGkgaXwgZ2l8bmlyfGkgbnxndXN8ZXphfG56aXxpIGJ8a3VyfCB5YXxvIHJ8dW5nfHJlenx1Z2l8bmdpfG55YXwgc2V8bWF0fGVrb3xvIHl8IGlufHVraXwgYXN8YW55fGJpc3xha298Z2F6fGltd3xyZXJ8YmFrfGlnZXxtdWd8aW5nfGJ5aXxrb3J8ZW1lfG51IHwgYXR8Yml0fCBpa3xoaW58aXJlfGthcnxzaGl8eWVtfHlhbXwgeWl8Z2VufHRzZXxldHN8aWhlfGhha3x1Yml8a2V5fHJla3xpY3l8IG5hfGJhZ3x5ZXJ8IGljfGV6ZXxhd2V8YnV0fGlyd3wgdXJ8Zml0fHJ1a3x1Ynd8cnlhfHVrYXxhZmlcIixcbiAgICBcInp1bFwiOiBcIm5nZXxva3V8bG8gfCBuZ3xhIG58dW5nfG5nYXxsZSB8bHVufCBub3xlbG98d2EgfGxhIHxlIG58ZWxlfG50dXxnZWx8dHUgfHdlIHxuZ298IHVtfGUgdXx0aGl8dXRofGtlIHxoaSB8bGVrfG5pIHxleml8IGt1fG1hIHxub218byBufHBoYXxnb2t8bmtlfG9ua3xhIHV8bmVsfHVsdXxvbWF8byBlfG8gbHxrd2V8dW50fGFuZ3xsdWx8a3VsfCB1a3xhIGt8ZW5pfHVrdXxobGF8IG5lfCB3b3xtdW58IGxvfGtlbHxhbWF8YXRofHVtdXxobyB8ZWxhfGx3YXx3b258endlfGJhbnxlbHd8dWxlfGEgaXwgdW58YW5hfHVuZXxsb2t8aW5nfGVsdXx3ZW58YWthfHRob3xhYmF8IGt3fGdhbnxrbyB8YWxhfGVuenxvIHl8a2hlfGFraHx0aHV8dSB1fG5hIHxlbmt8a2hvfGEgZXx6aW58Z2VufGkgbnxrdW58YWx1fG1hbHxsZWx8ZSBrfG5rdXxlIGF8ZWtvfCBuYXxrYXR8bGFufGhlIHxoYWt8IGV6fG8gYXxrd2F8byBvfGF5b3xva3d8a3V0fGt1Ynxsd2V8IGVtfHlvIHxueml8YW5lfG9idXwgb2t8ZXRofGhldHxpc2V8c28gfGlsZXxub2t8IGJhfGJlbnxla2l8bnllfGlrZXxpIGt8aXNpfCBpc3xhcGh8ZXNpfG5obHxtcGh8IGFifGZhbnxlIGl8aXNhfCB5ZXxuZW58aW5pfGdhIHx6aSB8ZnV0fCBmdXx1YmF8dWtofGthIHxhbnR8dWhsfGhvbHxiYSB8YW5kfGRvIHxrdWt8YWJlfHphIHxuZGF8IHlhfGUgd3xraWx8dGhlfCBpbXxla2V8YSBhfG9sb3xzYSB8b2x1fGl0aHxrdWh8byB1fHllIHxuaXN8IGlufGVraHxlIGV8IGFrfGkgd3xhbnl8a2h1fGVuZ3xlbGl8eW9rfG5lIHxubyB8dW1lfG5kbHxpcGh8YW1ifGVtcHwga298aSBpfCBsZXxpc3d8em8gfGEgb3xlbWl8dW55fG1lbHxla2F8bXRofHVwaHxuZG98dmlrfCB5b3xobG98YWxvfGt1Znx5ZW58ZW5ofG8gd3xuYXl8bGlufGh1bHxlend8aW5kfGV6ZXxlYmV8a2FufGt1enxwaGV8a3VnfG5lenxha2V8bnlhfHdlenx3YW18c2VifHVmYXxibyB8ZGlufGFobHxhend8ZnVufHllenx1bmR8YSBsfGxpIHxidXN8YWxlfHVsYXxrdXF8b2xhfGl6aXxpbmt8aSBlfGRhIHxuYW58YXNlfHBoaXxhbm98bmVtfGhlbHxhIHl8aHV0fGtpc3xrdXB8c3dhfGhhbnxpbGl8bWJpfGt1dnxvIGt8a2VrfG9tcHxwaG98a29sfGkgdXxva298aXp3fGxvbnxlIGx8IGVsfHVrZXxrdXN8a29tfHVsb3x6aXN8aHVufG5qZXxsYWt8dSBufGh1a3xzZWt8aGFtfCBvbHxhbml8byBpfHVidXxtYmF8IGFtXCIsXG4gICAgXCJzd2VcIjogXCIgb2N8b2NofGNoIHxlciB8aW5nfGbDtnJ8dHQgfGFyIHxlbiB8w6R0dHxuZGV8IGbDtnxyw6R0fGlsbHxldCB8YW5kfCByw6R8IGVufCB0aXwgZGV8dGlsfGhldHxsbCB8ZGUgfG9tIHx2YXJ8bGlnfGdlbnwgZnJ8ZWxsfHNrYXxuaW58bmcgfHRlcnwgaGF8YXMgfCBpbnxrYSB8YXR0fGxsZXxkZXJ8c2FtfCBpIHx1bmR8bGxhfGdoZXxmcml8YWxsfGVuc3xldGV8bmEgfGxlcnwgYXR8w7ZyIHxkZW58IGVsfGF2IHwgYXZ8IHNvfGlnaHxyIGh8bnZhfGdhIHxyIHJ8ZW52fGxhIHx0aWd8bnNrfGlnYXxoYXJ8dCBhfHNvbXx0dGl8IHV0fGlvbnx0IHR8YSBzfG5nZXxucyB8YSBmfHIgc3xtw6RufGEgb3wgc2t8IHNpfHJuYXxpc2t8YW4gfCBzdHzDpHIgfHJhIHwgdml8IGFsfHQgZnwgc2F8YSByfGF0aXwgw6RyfCBtZXwgYmV8biBzfCBhbnx0aW98bm5hfGxhbnxlcm58dCBlfG1lZHwgdmF8aWcgfMOkbnN8IMOldHxzdGF8dGEgfG5hdHwgdW58a2xpfHRlbnwgZ3J8dmlzfMOkbGx8IGxhfG9uZXxoYW58w6RuZHx0IHN8c3TDpHx0IGl8bmVyfGFuc3xncnV8IGdlfHZlcnwgbcOlfCBsaXxsaWt8aWhlfGVyc3xyaWh8ciBhfCByZXxtw6UgfHNuaXxuIGZ8dCBvfCBtw6R8IG5hfHIgZXxyaSB8YWQgfGVudHxrbGF8ZGV0fCB2w6R8cnVufHJrbHxkYSB8aCByfHVwcHxkcmF8cmlufGlndHxkaWd8biBlfGVya3xrYXB8dHRhfGVkIHxkIGZ8cmFufGUgc3x0YW58dXRhfG5vbXxsYXJ8Z3QgfHMgZnwgcMOlfCBvbXxrdGV8bGlufHIgdXx2aWR8ZyBvfMOkbm58ZXJ2fGlrYXxhcml8YSBpfGxhZ3xydml8aWQgfHIgb3xzIHN8dmlsfHIgbXzDtnJrfG90IHxuZGx8c3RyfGVsc3xybyB8YSBtfG1vdHwgbW98aSBvfHDDpSB8ciBkfG9uIHxkZWx8aXNufHNreXxlIG18cmFzfCBow6R8ciBmfGkgc3xhIG58bmFkfG4gb3xnYW58dG5pfGVyYXzDpHJkfGEgZHx0w6RsfGJlcnxuZ2F8ciBpfGVubnxuZCB8biBhfCB1cHxzaW58ZGQgfMO2cnN8amUgfGl0dHxrYWx8biBtfGFtdHxuIGl8a2lsfGxzZXxza2l8bmFzfGVuZHxzIGV8IHPDpXxpbm58dGF0fHBlcnx0IHZ8YXJqfGUgZnxsIGF8cmVsfHQgYnxpbnR8dGV0fGcgYXzDtnJhfGwgdnxreWR8eWRkfHJqZXwgZmF8YmV0fHNlIHx0IGx8bGl0fHNhIHxuw6RyfGjDpGx8bCBzfG5kcnxuaXN8eWNrfGggYXxsbG18bGtlfGggZnxhcmJ8bG3DpHxuZGF8YmFyfGNrbHx2IHN8csOkbnxnYXJ8dHJhfHJlIHxlZ2V8ciBnfGFyYXxlc3N8ZCBlfHbDpHJ8bXQgfGFwIFwiLFxuICAgIFwibGluXCI6IFwibmEgfCBuYXwgeWF8eWEgfGEgbXwgbW98YSBifHRvIHwga298IGJvfGxpIHxvIG58IGxpfGkgbnwgcGV8aSB5fGEgeXxhIG58bmdvfGtpIHwgYmF8IG1hfGtva3xwZSB8bGEgfGEgbHx6YWx8b2tpfGFsaXxuc298b3RvfGFsYXxvbnN8c28gfG1vdHxhIGt8bnlvfGVuZ3xrb2x8Z28gfG5nZXwgbnl8eW9ufG8gZXxhbmd8ZWtvfHRlIHxvIHl8b2tvfG9sb3xtYSB8aWtvfGEgZXxlIG18ZSBifGxpa3xrbyB8byBhfGFrb3xvbmd8IHllfG1ha3x5ZSB8aXNhfCBla3xzaSB8bG8gfGF6YXxzYWx8YW1hfCB0ZXxiYXR8byBwfG95b3xlIG58IGF6fGEgcHxhbml8c2VufG8gbXxlbGF8dGEgfGFtYnxpIGt8YmFufG5pIHwgZXN8eW8gfG1pIHxtYmF8b3NhfCBveXxha2F8bGlzfGkgcHxlbGl8YSB0fG1va3xpIG18YmEgfG1ib3wgdG98IG1pfGlzaXxib2t8bG9ufGF0b3xpbmd8byBifCBuZHxvdGF8Ym90fCBlenxnZSB8bmdhfGV6YXxvIHR8bmRlfGthIHxibyB8Z2VsfGthbnxlIGt8bGFtfHNhIHxlc2V8a296fCBwb3xkZW58Z2EgfG9iYXxvbWJ8b2xpfHlhbnxrb3B8Ym9ufG1vc3xlIGV8a29ifG9rYXxrb3N8YmlrfGxpbnxwbyB8ZSBhfCBsb3wgYml8a290fOKAmHRlfG5naXxzYW18IOKAmHR8b21pfGUgeXx0aSB8aSBifCBlbHxlbG98c29tfGxva3xlc2F8Z29tfGF0ZXxrYW18aSB0fGlrYXxhIHN8YXRhfGthdHxhdGl8d2EgfG9wZXxvemF8aWtpfGkgZXwga2F8Ym9tfHRhbHxvIGx8YmVrfHp3YXxva2V8cGVzfCBzZXxib3N8byBvfG9sYXxiYWt8bGFrfG1pc3xvbW98b3NvfG56YXwgYXR8bmRhfGJhbHxuZGl8bXUgfG1vYnxvc3V8ZSB0fGFzaXxiaXN8YXNlfGkgbHxlbGV8c3VzfHVzdXxzdSB8b3p3fGFuZHxtb2x8dGVsfGxpYnxtYml8YW1pfCBuenxuZSB8ZW5lfGtlbHxheWV8ZW1ifHllYnxuaXN8Z2kgfG9ib3xsZSB8a3VtfG1hbHx3YW58YSDigJh8cG9ufCBlcHxiYXp8dGFufHNlbXxueWF8ZSBsfCB0YXxnaXN8b3BvfGFuYXxpbmF8dGlufG9iZXwgdGl8c2FufCBha3xtYWJ8Ym9sfG9rdXx1IHl8bWF0fG90aXxiYXN8b3RlfG1pYnxlYml8YSBvfGRhIHxiaSB8IG1ifGxlbHx0ZXl8aWJlfGV0YXxib3l8dW1ifGUgcHxlbml8emEgfGJlIHxtYmV8YndhfGlrZXxzZSB8IGV0fGlib3xlYmF8YWxlfHlva3xrb218IGVufGkgYXxtaWt8YmVufGkgb3wgc298Z29ifGJ1IHxzb258c29sfHNpa3xpbWV8ZXNvfGFib3wgYXN8a29ufGV5YXxtZWxcIixcbiAgICBcInNvbVwiOiBcIiBrYXxheSB8a2EgfGFuIHx1dSB8b28gfGRhIHx5byB8YWhhfCBpeXxhZGF8YWFufGl5b3xhIGl8IHdhfCBpbnxzaGF8IGFofCB1IHxhIGF8IHFvfGFtYXwgbGF8aGF5fGdhIHxtYSB8YWFkfCBkaHwgeGF8YWggfHFvZnxpbiB8IGRhfGEgZHxhYSB8aXlhfGEgc3xhIHd8IHNpfCBvb3xpc2F8eWFofGVleXx4YXF8a3UgfCBsZXxsZWV8IGt1fHUgbHxsYSB8dGFhfCBtYXxxIHV8ZGhhfHkgaXx0YSB8YXEgfGV5YXxzdGF8YXN0fGEga3xvZiB8aGEgfHUgeHxrYXN8d3V4fCB3dXxkb298c2EgfGFyYXx3YXh8dXh1fCBhbXx4dXV8aW51fG51dXxhIHh8aWlzfGFsYXxhIHF8cm8gfG1hYXxvIGF8IHFhfG5heXxvIGl8IHNofCBhYXxrYWx8bG9vfCBsb3xsZSB8YSB1fCB4b3wgeHV8byB4fGYga3wgYmF8YW5hfG8gZHwgdXV8aWdhfGEgbHx5YWR8ZGlpfHlhYXxzaSB8YSBtfGd1IHxhbGV8dSBkfGFzaHxpbWF8YWRrfGRvIHxhYXN8IGNhfG8gbXxsYWd8c2FufGRrYXx4b3J8YWRpfGFkZHwgc298byBrfCBpc3xsbyB8IG1pfGFxYXxuYSB8IGZhfHNvb3xiYWF8IGhlfGthcnxtaWR8ZGFkfHJrYXxoYWR8aWlufGEgb3xhcm98YWRvfGFhcnx1IGt8cWFhfCBoYXxhZCB8bnRhfG8gaHxoYXJ8YXhhfHF1dXwgc2F8biBrfCBheXxtYWR8dSBzfCBnYXxlZWR8YWdhfGRkYXxoaWl8YWFsfGhhYXxuIGx8ZGFhfHh1cXxvIHF8byBzfHVxdXx1dXF8YXlhfGkga3xoZWx8aWQgfG4gaXwgZWV8bmthfCBob3xpbmF8d2FhfGRhbnxuaW18ZWxvfGFndXxpaGl8bmFhfG1hcnxhcmt8c2FhfHJpeXxycml8cWRhfHVxZHwgYnV8YXggfGEgaHxvIHd8eWEgfGF5c3xnZ2F8ZWUgfGFua3wgbm98biBzfG9vbnx1IGh8biBhfGFiIHxoYXF8aXJpfG8gbHwgZ3V8dXVyfGxrYXxsYWF8dSBhfGlkYXxpbnR8bGFkfGFhbXxvb2R8b2ZrfGRoaXxkYWh8b3JyfGVsaXwgeGl8eXNhfGFyY3xyY2l8dG8gfHlpaHxvb2x8a2lpfGggcXxhIGZ8IHVnfGF5bnxhc2F8IGdlfHNob3xuIHh8c2l5fGlkb3xhIGd8Z2VsfGFtaXxob298aSBhfGplZXxuIHF8YWdnfGFsIHwgZGl8IHRhfGUgdXxvIHV8IGppfGdvb3xhIGN8c2FnfGFsa3xhYmF8c2lnfCBtdXxjYWF8YXFvfHUgcXxvb2N8b29ifGJhcnxpaSB8cmEgfGEgYnxhZ298eGlyfGFhcXwgY2l8ZGFsfG9iYXxtbyB8aWlyfGhvcnxmYWx8cWFufCBkdXxkYXJ8YXJpfHVtYXxkIGt8YmFufHkgZHxxYXJ8dWd1fCB5YXx4YXl8YSBqXCIsXG4gICAgXCJobXNcIjogXCJhbmd8Z2QgfG5nZHxpYiB8IG5hfG5hbnxleCB8aWQgfCBqaXxhZCB8ZWIgfG5sIHxiIG58ZCBufCBsaXx1ZCB8amlkfCBsZXxsZWJ8IGdhfG90IHxhbmx8YW90fGQgZ3xsIGx8YiBsfCBtZXxvYiB8eCBufGdzIHxuZ3N8bWV4fG5kIHxkIGR8IG5lfGphbnx1bCB8IG5pfG5qYXwgbmp8IGd1fCB6aHxsaWJ8bCBufG9uZ3wgZ2h8Z2FvfGIganxiIGd8bmIgfGwgZ3xlbmR8Z2FufCBhZHwgamV8amV4fG5nYnxnYiB8aGFufGVsIHwgc2h8IGRhfHViIHxkIGp8ZCBsfHQgbnwgbmh8bmhhfGIgbXxpcyB8ZCB6fHggZ3wgeWF8b3VsfGwganwgd3V8c2hlfGlsIHxuZXh8IGNofGIgeXxkIHN8Z3VlfGdob3x1ZWx8d3VkfGQgeXwgZ2l8ZCBifGhvYnxuaXN8cyBnfCB6aXwgeW98bGllfGVzIHxueCB8aXQgfGFvYnxnaWF8aWVzfCBkZXxlaWJ8eW91fCBiYXwgaHV8aWFufHppYnxkIG18cyBqfG91ZHxiIGR8Y2h1fG9sIHx1dCB8IGRvfHQganxuZW58aHVkfGF0IHxzIG58aGVufGlhZHxhYiB8ZW5sfCBnb3xkYW98IG1pfHQgZ3x6aGF8YiB6fGVuYnx4IGp8IHplfGVpdHxoZWl8ZCBjfG50IHxiIHN8IHNlfGFsIHwgeGl8aW5sfGhhb3wgcmV8IGZhfGQgaHxndWF8eWFkfHJlbnwgaG98YW5ifGd4IHxuZ3h8aXggfG5pYnx4IHp8YW5kfGIgaHxiIHd8ZmFsfCB4YXxkIHh8dCBsfHggbXxkb258Z291fGJhb3xhbnR8cyB6fGhhZHxkIHB8eWFufGFueHxsIGR8emhlfGhpYnwgcHV8b3ggfCBkdXxodWl8c2VufHVpYnx1YW58bGlsfGRhbnxzIG18IGRpfCB3ZXxnaGF8eGlufGIgeHxvZCB8emhpfHB1ZHwganV8IG5nfG91Ynx4YW58IGdlfHQgenxodWJ8dCBofGhvbHx0IG18amlsfGhlYXx4IGx8IG1hfGV1ZHxqdWx8ZW54fGwgenxsIHN8YiBhfCBsb3wgaGV8bmdhfGQgcnx6ZW58IHlpfGRpZHxob258emhvfGd0IHxoZWJ8bmd0fG9zIHxkIGF8cyBsfGFvc3wgc2l8ZGVpfGR1ZHxiIGJ8Z2V1fHdlaXxkIHd8eCBjfHggYnxkIGt8ZG91fGwgaHxsb3V8IGJpfHggYXx4IGR8YiBjfCBzYXxzIGF8IGJvfGV1dHxibG98IGJsfG5pYXxsb2x8dCB3fGJhZHxhb2R8IHFpfGF4IHxkZWJ8IGphfGVhYnwgbmR8eCBzfGNhbnxwYW98IHBhfGdsIHxuZ2x8Y2hlfHNhdHxzIHl8bCBtfHQgc3xiIGZ8aGV1fHMgd3wgdG98bGlhfCBjYXxhb3h8dW5ifGdodXx1eCB8IGN1fGQgZnxpbmJ8aWVsfCBwaXxqaWJ8dCBwfHggeHx6ZWl8ZXVsfGwgdHxsIHl8bWlufGRhZFwiLFxuICAgIFwiaWxvXCI6IFwidGkgfGl0aXxhbiB8bmdhfGdhIHwgbmd8IHBhfCBpdHxlbiB8IGthfCBrZXwgbWF8YW5hfCBhIHwgdGl8cGFufGtlbnxhZ2l8YW5nfGEgbnxhIGt8YXlhfGdhbnxuIGF8aW50fGxpbnxhbGl8biB0fGEgbXxkYWd8Z2l0fGEgYXxpIHB8dGVnfGEgcHwgbmF8bnRlfG1hbnxhd2F8a2FsfGRhIHxuZyB8ZWdhfGFkYXx3YXl8bmFnfG4gaXwgZGF8bmEgfGkga3xzYSB8biBrfHlzYXxuIG58bm8gfGEgaXxhbCB8YWRkfGFiYXwgbWV8aSBhfGV5c3xubmF8ZGRhfG5nZ3xtZXl8IHNhfHBhZ3xhbm58eWEgfGdhbHwgYmF8bWFpfCB0dXxnZ2F8a2FkfGkgc3x5YW58dW5nfG5ha3x0dW58d2VufGFhbnxuYW58YWthfCBhZHxlbm58IGFnfGFzYXwgd2V8eWF3fGkgbnx3YW58bm5vfGF0YXwgdGF8bCBtfGkgdHxhbWl8YSB0fCBzaXxvbmd8YXBhfGthc3xsaSB8aSBtfGluYXwgYW58YWtpfGF5IHxuIGR8YWxhfGdwYXxhIHN8ZyBrfGFyYXxldCB8biBwfGF0IHxpbGl8ZW5nfG1ha3xpa2F8YW1hfGRhZHxuYWl8ZyBpfGlwYXxpbiB8IGF3fHRveXxveSB8YW8gfHlvbnxhZyB8b24gfGFlbnx0YSB8YW5pfGlseXxiYWJ8dGFvfGtldHxseWF8c2lufGFpa3wga2l8YmFsfG9tYXxhZ3B8bmdpfGEgZHx5IG58aXdhfG8ga3xraW58bmFhfHVtYXxkYWF8byB0fGdpbHxiYWV8aSBpfGcgYXxtaWx8IGFtfCB1bXxhZ2F8a2FifHBhZHxyYW18YWdzfHN5b3xhciB8aWRhfHl0b3xpIGJ8Z2ltfHNhYnxpbm98biB3fCB3YXwgZGV8YSBifG5pYXxkZXl8biBtfG8gbnxtaW58bm9tfGFzaXx0YW58YWFyfGVnIHxhZ3R8c2FufHBhcHxleXR8aWFtfGkgZXxzYWF8c2FsfHBhbXxiYWd8bmF0fGFrIHxzYXB8ZWQgfGdzYXxsYWt8dCBufGFyaXxpIHV8IGdpfG8gcHxuYXl8a2FufHQga3xzaWF8YXcgfGcgbnxkYXl8aSBsfGtpdHx1a2F8bGFufGkgZHxhaWJ8cGFrfGltb3x5IGF8aWFzfG1vbnxtYSB8IGxpfGRlbnxpIGd8dG8gfGR1bXxzdGF8YXB1fG8gaXx1Ym98Z2VkfGx1YnxhZ2J8cHVsfGJpYXxpIHd8aXRhfGFzeXxtaWR8dW1pfGFiaXxha2R8a2FyfGthcHxrYWl8IGFyfGdpbnxrbml8IGlkfGJhbnxiYXN8YWQgfGJvbnxhZ2t8bmlifG8gbXxpYml8aW5nfHJhbnxrZGF8ZGlufGFic3xpYmF8YWtufG5udXx0IGl8aXN1fG8gYXxhaXB8YXMgfGlubnxzYXJ8IGxhfG1hYXxudG98YW1tfGlkaXxnIHR8dWxvfGxhbHxic2F8d2F3fGtpcHx3IGt8dXJhfGQgbnx5IGlcIixcbiAgICBcInVpZ1wiOiBcImlzaHwgaGV8aW5pfGluZ3xuaW58Z2hhfG5nIHxpbGl8IHdlfHdlIHxzaCB8aW4gfCBib3xxdXF8b3F1fG5pIHxob3F8IGhvfHVzaHxzaGl8bGlrfHFpbHxib2x8c2hxfGVuIHxsaXN8cWEgfGhxYXxuIGJ8aGVtfCBxaXxraSB8ZGVtfGl5IHwgYWR8YWRlfGlnaHxlIGF8ZW0gfGhhbnxsaXF8ZXQgfGdlIHx1cSB8bmRhfGRpbnwgdGV8IGJpfGlkaXxsZXR8cWFufG5saXxpZ2V8YXNofHRpbnxoYSB8a2lufGlraXxoZXJ8ZGUgfCBlcnwgYmF8YW5kfGl0aXxvbHV8YW4gfCBkw7Z8ZMO2bHxhcSB8bHVxfCB5YXxtZSB8bHVzfMO2bGV8bW1lfGVtbXwgcWF8ZGFxfHJraXxsZ2h8ZXJxfGVya3xzaGt8ZXNofHJxYXxpcSB8dXFpfGlsZXxyaW18aSB3fGVyIHxpayB8eWFrfGFraXxhcmF8YSBofCBiZXxtZW58IGFyfGR1IHxzaHV8dXFsfGhyaXxoaSB8cWx1fHEgaHxpbmx8bGFyfGRhIHxpIGJ8aW1lfCBhc3xsZXJ8ZXRsfG5pc3wgw7Z6fGVocnxsaW58ZSBxfGFyIHxpbGF8IG11fGxlbnwgbWV8cWkgfGFzaXxiZWh8YSBifGF5ZHxxIGF8YmlyfGJpbHwgc2h8Y2hlfHJsaXxrZSB8YmFyfGhrZXx5ZXR8w6lsaXxzaGx8dG5pfHUgaHxlayB8bWF5fGUgYnwga8OpfGggaHwgaWd8eWR1fGlzaXxhbGl8aGxpfGsgaHwgcW98aXJpfGVtZHxhcml8ZSBofGlkYXxlIHR8dGxlfHJuaXwgYWx8c2l5fGxpZHxvbG18aXllfGFubHwgdHV8aXFpfGxtYXxpcCB8bWRlfGUgZXx0dXJ8YSBpfHVydXxpIGt8cmF3fGh1IHxtdXN8a2lsfCBpc3xpIGF8aXIgfMOpdGl8ciBifMO2eml8cmlzfGFzYXxpIGh8c2FzfCBqZXxoZSB8IGNofHFpZ3xiYXN8biBxfGFsZ3xldHR8bGVzfCB4aXx0aWR8IMOpbHx0ZXN8dGkgfGF3YXxpbWF8bnVufGEgYXwgeGV8IGJ1fGhpbHxuIGh8IHhhfGFkaXxkaWd8YW51fHVuaXxtbml8IHNhfGFybHxyZWt8w6lyZXwgaMO2fGvDqXJ8IGppfG1pbnxpIHF8dGlzfHJxaXwgaXl8ZWxxfHhlbHxwIHF8IHFlfHkgaXxpIHN8bGlnfCBtYXxpeWF8aSB5fHNpenxhbml8IGtpfHF0aXwgZGV8cSB3fGVtbnxtZXR8amlufG5peXxpIGl8dGltfGlybHwgdGl8cmlufMOpcml8aSBkfGF0aXxzaSB8dGV3fGkgdHx0bGl8ZWxpfGUgbXxydXN8b2xpfGFtaXxnZW58aWRlfGluYXxjaGl8ZGlsfG5heXxrZW58ZXJufG4gd3wgdG98YXlpfCBpanxlbGd8c2hlfHR0aXxhcnF8aGVrfGUgaXxuIGF8emlufHIgYXxpanR8ZyBifGF0bnxxYXJ8aGlzfHVjaHxsaW18aGtpfGRpa1wiLFxuICAgIFwiaGF0XCI6IFwib3UgfGFuIHwgbGl8b24gfHdhIHx5b258IHBvfGxpIHxwb3V8dGUgfCB5b3xvdW58IG1vfHVuIHxtb3V8YWsgfCBuYXxlbiB8biBwfG5hbnx0b3V8c3lvfCBkd3wgdG98eW8gfCBmw6h8ZHdhfCBha3wga2l8a2kgfCBwYXwgc2F8b3V0fCBsYXwga298IGdlfHV0IHxuIHN8Z2VufCBkZXxzZSB8YXN5fMOodCB8aSBwfG4gZHwgYSB8IHNvfG4gbHxhIGF8ZsOoIHxuIGt8IHNlfHBhIHxlIGR8dSBsfCByZXxpdGV8c2EgfCBjaHxrb258biBufGUgbHx0IHB8bmkgfGNoYXxhIHB8bm4gfGFuc3xwaSB8dCBtfCBrYXwgYW58bm0gfGbDqHR8aSBzfHNvbnxtYW58IG1lfG4gbXxuIGF8ZSBwfHN3YXxzb3V8ZSBrfGhha3zDsnQgfG4geXxtZW58aSBsfGVwaXwgcGV8b3RlfHNhbnwgZXB8aSBrfCBzaXx5ZW58ZXlpfGEgbHwgYXB8aSBhfHlpIHxwZXl8amUgfG4gdHxlIGF8ayBtfGUgc3wgbml8bGlifGUgbnxpIHR8bGl0fHJhbnxsw6ggfGVubnxhbCB8YSBzfCBwcnxhIGZ8bnMgfCBsw7J8YXAgfGzDsnR8ZW5tfGsgbHxuIGV8dCBsfGtsYXxhbm18ZSB5fGEga3wgbWF8ZSB0fGF5IHxpIG18YWxpfCBsw6h8w6ggYXx5ZSB8YSB5fGFudHwgb3N8IGJhfGkgZ3wgdMOofGFzb3x1IHR8YSBufCBwd3xyYXN8IHDDqHxuIGZ8bmFzfGthIHxuIGd8b3N3fCB0YXxkZWt8aSBkfHB3b3xlIG18IGRpfCB2aXxsYSB8aSBufHUgc3xzb3N8YmxpfCB0ZXxvIHR8IHRyfGx3YXzDqHRlfGEgdHxsZSB8dSB5fGkgZnx0YW58YSBjfGxhcnxhIG18ZXRlfGFyYXx0IGt8IHBpfGliw6h8YsOodHxyZSB8b3N5fGRlIHxhdGl8a2UgfHJlc3x0aXN8aSB5fHTDqCB8bmVufCBmYXxla2x8emUgfG5hbHxvbnN8a3N5fGluaXxjaGV8IGxlfGUgcnxhIGR8IGVufGF5ZXxoZSB8byBwfGFsd3wga8OyfGxhbHwgbm98ZXNwfGEgZ3xhdmF8a291fGxhc3x3YXl8dSBmfGlzeXwgemF8IG9rfG9rZXxrYWx8a2VufHN5ZXx0YSB8b25ufGsga3xuamV8cHJhfHZhbnxlc2l8cMOoc3xrb3R8cmV0fHN5YXxuIHZ8bGVrfGphbnxpayB8YSBifGVrc3x3b3R8w6ggbnxkaSB8w7JsIHx0cmF8dSBrfGkgcnxub3V8IGFzfGsgYXx1IGR8aXN0fMOoc298aWIgfCBuZXxpdGl8dGkgfGlzIHx5IGF8ZGVzfMOoIGx8YSByfG9udHwga2V8bnNhfHBhdHxyaXR8c2l0fHDDsnR8b25hfGFiIHzDqCBzfCBzd3xvbmR8aWRlfCBqYXxyYXZ8dCBhfHJpIHxib258dml2fCBzw6h8cHJlfHZheXxrIHB8bCBsfGvDsm18aSBvfCByYXxlcmF8ZmFufGRldlwiLFxuICAgIFwiYWthXCI6IFwic8mbIHxhIGF8IHPJm3xuZSB8cmEgfGEgbnwgd8mUfCBhIHxhcmF8YW4gfGXJmyB8bm8gfCBuZXwgYml8IG5vfCBhc3xpYXJ8YmlhfHnJmyB8bXUgfGFhIHwgYW58yZsgc3xlIGF8bWEgfCBob3xiaSB8bWFufGRlyZt8IG11fGhvIHzJmyBhfG5hIHxhIMmbfCBvYnxvYml8ZSBufGEgYnxuIGF8c28gfG8gbnxwYSB8YW1hfMmbIG98byBhfGlwYXxuaXB8yZsgbnxuYWF8IG5hfGEgd3xhbmF8IHNvfCBhZHwgbm58yZsgyZR8yZtkZXxhc8mbfGt3YXwgb258b25pfHdhbnwgYW18YSDJlHxzyZtkfHfJlCB8IGFofMmbecmbfCBueXxvyZQgfCBuIHxtbWF8aSBhfCBtbXxubml8IGt3fGllIHx3yZRufMmbIHd8ZGUgfCDJm3l8IGJhfGFzZXzJlCBufG8gYnxpIG18yZQgYXx1byB8biBufGEgbXxvIHN8aXJpfCB5aXxuaSB8ZSBzfG55aXxkaSB8dSBufGEgb3xhaG98IGRlfHR1bXwgyZtufMmUbiB8bnlhfGkgbnzJlG1hfGUgbXxhZHd8IHnJm3x1bWl8ZGllfG1pIHzJmyDJm3xvIGt8IGFifMmbbSB8YSBzfCBtYXxuYW18IMmUbXwgyZtzfHlpbnwgYXR8IGLJlHxvIGR8aW5hfHDJmyB8c8mbbXx1YSB8biBzfGLJlCB8YWRpfHlhIHxlIGh8YXNvfG1hcnxhbml8a3VvfHLJmyB8ZmEgfGEga3zJlGRlfGEgaHxiYSB8biBifHJlIHx1bWF8d3VtfG9tIHzJlCBofG0gbnx5aSB8dSBhfCBzYXxzZSB8ZHd1fMmUIGJ8IG50fG0gYXxlcsmbfCBryZR8YSB5fG9yyZR8IG5rfCBiyZt8IMmUZHx0ZW58csmUIHxoecmbfHNhYXxrYSB8yZsgYnxlIGJ8aSBzfGFkZXxhbSB8bmthfGtvcnxpIMmbfGVuZXxlbmF8IG5zfGJhbnzJm25zfCBrdXzJm3PJm3xhbmV8bnPJm3xmb2Z8yZvJmyB8IGZpfGd5ZXzJlHR1fCBkaXxhbm98aSBrfG8gbXwgyZR0fCBrb3x5yZvJm3xiaXJ8IGFrfGltIHxreWV8IHDJm3xhIGR8eWllfGtvIHxudGl8aSBifGV0ZXxvZm98YW1tfHllIHxyaSB8Zm/JlHxryZQgfGJvbXxhYm98yZQgc3zJlG5lfCDJm2J8c2/JlHxmb3J8aXPJm3xtIGt8YXNhfG5vZHzJmyBtfGZpcnx0aSB8IGRhfGUgeXxzdWF8IGJlfG5paXxzZcmbfHdhIHxiZXJ8IGF3fGR3ZXxuIGZ8IGZvfG8gyZt8aSBofHUgYnzJlCBtfCBtZnxoyZQgfGthYnx3yZsgfHRvIHxyaWJ8aHfJm3xpYml8IGR3fGRpc3xuc298YW5zfHRpcnx1IMmbfCB0aXwgaMmUfHNhIHxlIG98IHR1fG9kaXzJmyB5fGlhIHxvZmF8IMmUbnxvIHd8yZtiyZt8YWJhfCBrYXxpaSB8d2VufMmbc2l8bSBtfHNpYXxhZGF8eWVyfGlhbnxkYSB8c2V0fCBneXxkdWF8aSBkfHNvbXxtZmF8yZQgd3wgYWZ8aSB5fGFueXxvcmF8cmltfHfJlGR8ZHdhfG5zaVwiLFxuICAgIFwiaGlsXCI6IFwibmdhfGFuZ3wga2F8Z2EgfG5nIHwgc2F8YW4gfHNhIHwgbmd8IHBhfCBtYXxhZyB8b24gfHNhbnxwYWd8IGFufHVuZ3xrYWd8YSBwfG4gc3xhIGt8biBufGEgbXxhdGF8a2F0fCB0YXxnYW58ZyBwfGF5IHx0YXJ8ZyBrfGFnc3xydW58YWxhfGFydXxnc2F8dGFnfGEgc3xnIG18IG1nfG1nYXxuIGt8YSB0fG9kIHxrb258ZyBzfGEgbnxpbmd8YSBpfG1hbnxnIHR8YWdwfHRhbnwgc2l8biBhfHkga3xtYWd8Z3BhfG1heXxoaWx8cGFufHlhIHxhaGl8bGEgfGcgYXxzaW58Z2lufGluYXxheWF8YW5hfGlsaXwgcHV8aGFufGcgaXx5b258bmFufCBpbnx3YXl8dWtvfGdrYXwgZ2l8YWhhfCB1a3xpbHd8bHdhfGFzYXxhcGF8a2FzfHN5b3xhdCB8YmFufGxpbnxpeWF8a2FofG4gcHwgbmF8byBufGxhbnxhIGF8aW4gfG5na3xnIG58aW5pfGFiYXxwYXR8cHVufGEgZ3xhbGl8byBzfCBpeXx5YW58YWd0fHRhb3xuZ3N8Z2JhfGthYnx3YWx8bmdvfGFsIHxuYWd8YWdrfG8gbXxuaSB8aSBzfGFnYXxhbm98IHdhfGlzYXxhYnV8a2FsfGEgaHxkYXB8b25nfGEgZHxtYXR8IHR1fGdzb3xubyB8YWhvfGFraXxzb2R8YWdifCBkYXxhc3l8aWxhfGQga3xwYXN8IGhpfGFnaHxkIHN8biBtfG5hIHxsYWx8eW8gfGRpIHx0aWx8IGxhfG8ga3xzIG58bm9ufGdheXxzYWx8YSBifGdvZHxhbyB8YXRpfGFhbnx1aGF8IGlzfGthIHxha2F8YXN1fG5nYnxvIGF8YW1hfGF0b3xhdHV8dWdhfHBhYXxidXR8dW5hfG4gdXxiYWh8dWFufGliYXwgZGl8IGJhfHBhaHxiYXR8IGR1fHVsb3xvcyB8eSBzfG5haHwga298YWFnfGFnaXxzaWx8Z2kgfGkgbXxoYXl8eWFnfGdvbnx5IG58c3RhfG4gZHxvdCB8b2hhfHR1bnxpZGF8IHByfCBzdXxhIGx8dXRhfG0gc3wgYWx8ZG8gfHVsaXxzdWd8biB0fGFzIHxsb258c3VsfG9nIHxwYW18cHJvfGhpbXxndWF8YWxvfGxpZ3wgYml8YmlzfGFzaXx1bGF8dG9ufGtzeXxndHV8YSBlfGsgc3wgaWJ8biBifG1hYXx1Z3V8a28gfGxpYnxyb258aSBhfGhpIHxoaW58dGVrfGxhYnxhYml8aWthfG1ha3xib3R8YW9ofG9rIHwgaHV8Z2hpfGluZHxvdGV8dG9rfGkgbnx0IG58ZyBlfGVrc3xkYWx8dW1hfHVib3x0dW18aGF0fHRvIHxhZG98a2lufCBlZHxyb3R8aG8gfG5kaXxpbnV8aWJ1fHkgYXxudGF8YWQgfGdrb3xsYWh8ZHVrfGFib3xpa298bmRhfGFyb3xnYWx8bW8gfGcgb3wgYnV8aW50fCBvIHxuIG98YWF5fGRhIHxnc3VcIixcbiAgICBcInNuYVwiOiBcIndhIHxhIGt8YW5hfHJvIHxuYSB8IGt1fCBtdXxuaHV8ZHplfGh1IHxhIG18IHp2fG11bnxva3V8Y2hpfGEgbnxha2F8ZHppfGthIHx6ZXJ8ZXJvfCBjaHxjaGV8c2UgfHVuaHxvZHp8cndhfHJhIHxrb2R8enZpfCBuZXwgcGF8a2FufCB3ZXwgZHp8IG5vfGlrYXx2YSB8aXJpfCBhbnxrdXR8bnlpfG8geXx5aWt8dmFufG5la3xlc2V8ZWtvfHp2YXxpZHp8ZSBhfCBrYXxhbmV8YW5vfG5ndXxla3V8Y2hhfHVuZ3wgeW98cmkgfGFrZXxrZSB8YWNofHVkenxpcm98YSB6fHUgd3wgdmF8aXJhfHdlc3xhbmd8ZWNofG5nZXxpIHB8ZW5nfHlva3xub2t8ZWR6fG8gaXxpcnd8YW5pfGlub3x1dmF8aWNofG5nYXx0aSB8emlyfGFuaHxyaXJ8a28gfGR6YXxvIG58d2FufHdvIHx0YW58c3VufGlwaXxkend8ZW55fGFzaXxoZW58enZlfGt1cnx2YWt8YSBwfHNoYXx1bnV8endhfGl0YXxrd2F8ZSBrfHJ1ZHxudW58dXJ1fGd1a3xhIGN8YSBkfCB5YXxhIHl8YmF0fHBhc3xlenZ8dGEgfGUgbnx1dGl8IGt3fG8ga3xvIGN8byBtfGFyYXwgbWF8c2kgfGdhIHx1a298YXRhfG9zZXxlbWF8ZHpvfHVjaHxoaXB8a3V2fG5vIHxydXN8aGVjfG9tdXxpIHp8d2FrfG8gcnxrdXN8a3dlfGVyZXxyZSB8IHJ3fCBwb3xvIGF8bXdlfHlha3xtbyB8dXN1fGlzaXx6YSB8c2EgfGUgenx1dGF8Z2FyfCBpbnxoaW58bmVtfHBhY3xrdWN8d2UgfGV0ZXwgeWV8dHdhfHBvc3xvIGR8YSBpfGh1cnxnZXR8YXJpfG9uZ3xwYW58ZXJ3fHVrYXxyd298dm8gfCBha3x0ZW18em8gfGVtdXxlbW98b3J1fCBoYXx1aXR8d2VufHV5ZXxrdWl8IHV5fHZpbnxoYWt8a3VifGkgbXxhIGF8a3VkfCBzZXwga298eW8gfGFuZHxkYSB8bm9yfHNpbnx1YmF8YSBzfGEgdXwgaWN8enZvfG11dHxtYXR8bmV6fGUgbXxhIHd8YWR6fHVyYXxldmF8YXZhfHBpIHxhIHJ8ZXJhfHV0ZXxva298dmlzfCBpeXxoYSB8dSBhfGhhbnxjaG98YXJ1fGFzYXxmYW58YWFufHBpcnxpbmF8Z3V2fHVzaHx0b258IGh1fHVueXxlbnp8cmFufHlvcnx0ZWR8YWl0fGhla3wgbnl8dXJpfGhva3xuZW58b3NofCBhY3xuZ2l8bXVrfG5nb3xvIHp8YXp2fGt1bnxuaWR8dW1hfGkgaHx2ZW18YSBofG1pcnx1c2F8byBwfGkgbnxhIHZ8aSBrfGFtYnx6YW58bnphfGt1enx6aSB8a2FrfGluZ3x1IHZ8bmd3fG11bXxtYmF8bmlyfHNhcnxld298ZSBwfHV3YXx2aWN8aSBpfGd3YXxhZ2F8YW1hfGdvIHx5ZXd8cGFtXCIsXG4gICAgXCJ4aG9cIjogXCJsbyB8bHVufG9rdXxuZ2V8ZWxvfG50dXx0dSB8ZSBufGVsZXwga3V8bnllfHllIHxuZ2F8dW5nfGxhIHwgbmd8bGVrfGEgbnxvIG58eW8gfG8gbHxlIHV8bmVsfGdlbHxhIGt8a28gfGhvIHx1bHV8a2UgfCBuZXwgbmF8bHVsfHdlIHxsZSB8d2EgfG5nb3wga3d8dWxlfGt1Ynwgbm98YSB1fG9ua3wgdW18bmtlfG8gZXwgbG98ZWxhfGt1bnxhbWF8YW55fHVudHxhbmd8ZWtvfHViYXxlbHV8ZXppfG1udHwgd298YSBpfGV5b3xhbHV8bGVsfHVtbnxsd2F8a3dlfG9sdXxiYSB8IHVrfGt1a3x3b258dWtofHVuZXx1a3V8Z29rfG5va3xlbnp8IHVufGtodXwgb2t8dGhlfGUga3x6d2V8a2FufGVraXxhcGh8YW5lfHVueXxpbGV8byB6fGFrdXxsZXl8bG9rfCBlenxoZXR8ZXRofGF0aHxva2F8cGhhfHNlbHxhbGF8byB5fGt1bHxha2h8a2lsfGVua3wgaW58ZXNpfG8ga3wgeW98dXNlfGh1bHx1IHV8dGhvfG9idXx3ZW58YW5hfG5rdXxraGV8byBvfGUgYXxuYSB8a2hvfGJhbnxhIGV8aXNlfGVudHxnYW58dXRofG5pIHxrZWx8IHpvfGhlIHxpend8byB3fGhpIHxlbHd8bmFtfGluZ3xlbGl8ZnVufHphIHxsd2V8ZW5nfHlhIHxrd2F8ZmFufGlzYXxvIGF8bmRsfG50bHxheW98ZW5pfGdlbnxodXN8dWhsfGlwaHx0aGF8bnppfGlzd3xzYSB8cGhpfGFiYXxiZW58dW5kfHVtZXx0aGl8aGEgfGFsb3xrYSB8aW5rfGhsYXxsYWx8d2FufGkga3wgbHd8aSBufGJlbHwgYmF8byB1fGF6aXxlIG98c3dhfG5ndXxiYWx8cGhvfCBhYnxtYW58a3V0fGVtZnxlIGl8bWZhfGEgYXxlIGV8ZWVufGludHx1cGh8ZWthfGViZXxzZWJ8bGFufG5lZXx6aSB8byBpfG1hbHxzaGF8c2VrfGRsZXx6aXp8bXRofG5lbnx6ZWx8IHNlfG9rd3x0eWF8aWtlfGxpbnx0bGF8ZW5lfHNpc3xpbWF8YXNlfHlhbHx1YnV8IGFrfGFudHxzZW58b2xvfHdha3wga298YSBvfG1mdXxlem98c2lkfG5heXxva298IHVifHVsb3x6byB8ZG8gfGlzaXx3ZXp8aXNvfGhhbnxudGV8IHBofHppbXwgeWF8Z2EgfGxpIHwgbGV8aWJhfGhhbXx1YmV8a3VwfGF6YXxqaWt8IHVsfCBlbnxlZW18cGh1fCBvbHxhbmR8aW1mfCBlc3xvIHN8IGltfGt1Znx1IGt8a3dpfG5ha3xtYSB8bmFufGV0eXxrdWh8a3VzfHlvbHwgYW18aGVsfGlkaXwgc298bGlzfCBuanxuamV8amVufHRzaHxha2F8emlufGt1enzigJBqaXxubyB8dWZ1fGFsZXxvbmd8IGVsfGJvIHxhIHl8ZSBsfG1lbnx5ZW58bHVtXCIsXG4gICAgXCJtaW5cIjogXCJhbiB8YWsgfGFuZ3wgbWF8IGRhfCBrYXwgc2F8YXJhfCBoYXx5byB8bnlvfGhha3wgYmF8cmFufGRhbnxtYW58bmFufG5nIHwgcGF8IGRpfGthbnx1cmF8IG5hfGF0YXxhc2F8b2sgfG5kYXxhbGF8IHB1fHB1bnx1YWt8bnR1fG4gZHxrIG18IHRpfGFoIHxvIGh8biBzfGsgdXxuIGt8IHVyfCB1bnx0dWF8biBifGFuZHx1bnR8IHRhfHVueXxuIHB8dGlvfGlva3xhbWF8cGFufGVrIHxiYW58am8gfG4gbXxrIGh8ayBkfGFkb3xuZ2F8YWFufGcgcHx0YW58YWthfGluZHxhdCB8ZGFrfGRhcHxvIHB8dGF1fHBla3x1YW58IGF0fGFtb3xtYXJ8YXBlfGF1IHxrYXR8bW8gfHNhc3xhcml8YXNpfGRpIHxvIHN8aWEgfG5nZ3xiYXN8aWthfHNhbXxhbSB8bGlhfG8gZHxzYW58Z2FufHNpYXx0YXJ8biBufCBqb3wgc3V8YW51fGxhbXxnYXJ8byB0fCBpbnxwYXJ8c3VhfGRla3xzYXJ8ayBzfHJpIHxvIG18YW5hfGJhdHxhc3V8a28gfGFpIHwgbGF8YW50fGRhbHxsYWt8YWdhfGFsdXxpYWh8byB1fG4gYXx0dSB8ayBhfGFkaXxyYWR8aSBtfG1hbHxkb2t8dXNpfGFrdXxpIGR8ayBrfGFsIHxhcm98ZWthfG5lZ3xlZ2F8YXRvfHRvIHwgbmV8bWFtfG8gYnxlYmF8aWFufGJlYnxuIHV8dW0gfHNpIHxhYmF8cmF0fHVhaHxybyB8bWFzfGlsYXxhIGR8YWxpfHVrYXxhcmR8a2FtfHRpIHxhdHV8bnVzfGRhcnxhbWl8biB0fHNhIHxpbiB8YW1wfGthbHxjYXJ8bGFufGFoYXxrYWJ8c28gfHJkZXx1biB8aSBrfGdzYXxkYXN8bmdzfGFjYXx5YXJ8a2EgfGF0aXxhciB8IGFufHVrdXxyYXN8IGtvfHN5YXxtYXR8ayBufGF5YXxudGF8bG8gfGFueXxzdXJ8a2FhfGRpbHxrYXJ8byBhfHUgZHxrIHR8cGFtfGRpYXxyYSB8aWJhfGxhaXxpIHR8bGFofCBidXxtcGF8a3VtfGFiZXxuIGh8aWxpfG5ueXwgYXN8dSBwfGFraXxhbWJ8c2FjfGFzIHxrIGJ8aCBkfHVsaXxham98YSBufHJhanxuIGl8ZHVhfG5kdXxrIHB8aSBwfGl0dXxsaW58aGFufGh1a3xvIGt8cmlrfGEgYnwgbGl8aWsgfGdndXxqYW18YmFpfGEgYXxpIGF8bmlhfCBhZHxpIGp8IGh1fGdhbXxzYWx8YXNvfG5na3xzYWR8YXBhfGFubnwgbXV8b255fGRpa3xiYWR8YWlufGRpZHxtaW58bCBkfGFkYXxidWx8cmdhfHRpbnxnYSB8YW5pfGFsb3wgZGV8YXJnfGFobnxzaW98aG55fG4gbHxzdGl8YXdhfHVqdXxwZXJ8YmFrfCBwZXx0aWt8YW5zfCBwaXxhIHN8IHVtfGJhZ3xuZGl8YW5qfG1iYVwiLFxuICAgIFwiYWZyXCI6IFwiaWUgfGRpZXxlbiB8IGRpfCBlbnxhbiB8aW5nfG5nIHx2YW58IHZhfHRlIHxlIHZ8cmVnfCByZXxuIGR8IGdlfGVuc3xldCB8ZSByfGUgZXwgdGV8IGJlfGxlIHx2ZXJ8ZWVufCBpbnxrZSB8IHZlfCBoZXxlZyB8aGV0fGxrZXxsaWt8biBofGRlIHxuaWV8YWFufHQgZHxpZCB8bWVufCB2cnxuZGV8ZWlkfGUgb3wgYWF8aW4gfG9mIHxkZXJ8aGVpfG9tIHxnIHZ8IG9wfCBuaXxlIGJ8IGVsfGFsIHxhbmR8ZWxrfGVyIHwgbWV8b3JkfGUgd3xnIHR8IHRvfCBvZnxlcnN8IHdlfCBzYXwgdm98b3QgfGVya3xuIHZ8dnJ5fGdlIHxrZWV8YXNpfHRvdHwgd2F8c2llfGVyZXwgb218YWFyfHNhbHxkaWd8d29yfGVndHxndGV8cmRpfHJkIHxhdCB8bmQgfGUgc3xlZGV8aWdlfCBkZXwg4oCZbnxuIGF8ZW5pfCB3b3xlIGd8IG9ufG4gc3zigJluIHxlIHR8ZXJkfG5zIHxvb3J8YmVzfG9uZHxzZSB8c2thfGFha3xuaWd8bGxlfHloZXxyeWh8aXMgfGVsaXxlc2t8aWVufHN0YXx2b2x8ZWxlfGUgbXwgdml8aWsgfHIgZHx2aXJ8ZWRpfGthcHxnIGV8aXIgfGVzIHxzeSB8YW5nfGRpbnwgc3R8ZXdlfGdlbXxnZWx8ZyBvfCBpc3xlbCB8ZSBpfG9wIHxrZXJ8YWsgfHVpdHxpa2V8bnNlfGhpZXx1ciB8ZXVyfCBhbHxlIGF8bmFzfGUgbnxuZ2V8aWVyfG4gb3x3ZXJ8ZSBkfGFwIHwgaHV8YWxlfHJpbnwgaGl8ZW1lfGRldXxtaW58d2F0fG4gZXxzIG98IGFzfCBzb3xhcyB8ZSBofGRlbHxkIHZ8dGVyfHRlbnxnaW58ZW5kfGtpbnxpdCB8IGRhfCBzeXxwZXJ8cmUgfG4gd3xnZXN8d2V0fGdlcnxlIGt8b2VkfHMgdnxudGV8cyBlfG9uYXxuYWx8d2FhfGQgdHxlZXN8c29vfCBtYXxkIHN8aWVzfHRlbHxlbWF8ZCBlfHJlZHxpdGV8IG5hfHNrZXxlbHl8bHlrfHJlbnxuc2t8ZCBvfG9vbnx0IGV8ZWtlfGVzaXxlc2V8ZXJpfGh1bHwgZ3J8aWcgfHNpb3xtYW58cmRlfGlvbnxuIGJ8biBnfHZvb3xoZWR8aW5kfHRlZXwgcGV8cnNvfHQgdnxzIGR8YWxsfG4gdHxyc2V8biBpfGVlbXxkIHd8b3J0fG5kaXxkYWF8bWFhfHQgZ3xlcm18b250fGVudHxhbnN8YW1lfHlrZXxhcml8biBtfGxhbnx2b2V8biDigJl8bmxpfHJrbHxyIG18c2lhfG9kc3xhcmR8aWVtfGcgc3x3ZWV8ciBlfGwgZ3x0YWF8c2VrfGJhcnxndGl8biBufGxpbnxzZW58dCBvfHQgYXxyYWF8ZW5lfG9wdnxwdm98ZXRlfCB0eXxhcmJ8IHNsfGlnaHxkZWV8ZyBhfHN0cnxuc2x8c2VsfGVybnxzdGVcIixcbiAgICBcImx1YVwiOiBcIm5lIHx3YSB8IG5lfGEgbXwga3V8YSBrfCBtdXxkaSB8IGJ1fGEgYnwgZGl8ZSBifHR1IHxuZ2F8YndhfG50dXwgYnd8dWRpfGEgZHxlIG18aSBifCBiYXwgbWF8c2hpfGFkaXx1IGJ8YSBufGxhIHxvbnN8bXVufGkgbnx1bmd8bnN1fGdhIHx5aSB8eWEgfG5hIHx1bnR8IGR5fGlkaXxlIGt8YnVrfG11IHxpa2F8ZXNofHN1IHx1IG18a3UgfG5kZXxhbnl8IGJpfGx1IHxueWl8ZW5kfHlvbnxkaWt8YmEgfCBjaXwga2F8YW5nfHUgbnx1IHl8IG13fGthIHxpIG18IHlvfHdlIHxva2V8dHVufGRlIHxrZXN8aGkgfGtva3xtd2F8IGt3fGUgbnxiYW58ZHlhfHNoYXx1IGR8a2VufGt3YXxqaSB8aGEgfHdlbnxkaXR8IHVkfGEgYXwgYW58bXdlfGl0dXwgcGF8bGUgfCBhIHwgd2F8bmppfGthbnxrdW18aWJ3fGJ3ZXxhIGN8YW50fGVuYXx5ZW58bWJhfGRpZHxlIGR8YWxhfHUgdXxpc2h8bWFrfGJ1bHxpIGF8bmRhfGVuanx1IGF8aWxhfHBhIHxha298YW5zfHVrZXxhbmF8bnNvfGFtYnxoaW58dW13fGthbHx1a298aSBrfGJhZHxha2F8ZWxhfGVsZXx1IHd8dSBrfGR1IHxqYSB8YnUgfCBtaXxpbmR8bmR1fGt3aXwgbnN8bWJ1fGF0dXxidWR8ZGlsfGlsZXxzdW58ZW5nfHVsYXxlbnp8bmFufG5zaHxrYWR8YWx1fCBjeXxiaXN8a3VkfGxvbnx1IGN8Z2FufGRpYnxkYSB8ZHllfGJpZHwgYnl8dWt3fGkgZHxhYSB8bmd1fGEgcHxzYW18aXNhfCBhYXxpbHV8IG5hfGFiYXxsZWx8eWUgfGRpbXxjeWF8a3VifHNvIHxvbmR8a3VzfG1hdHxuZ2V8ZSBjfCBib3xha3V8YmFrfG11c3x0YSB8dW1ifHVsb3xlbHV8bWFufGlraXxtb258bmdpfGFidXxtdWR8a3VrfG9tYnwgbW98dW5kfGRpeXxrd2V8dW11fG1hbHwga2V8dXNofGdpbHx1YmF8aW11fGRpc3x3aWx8d3UgfHNhbnxnYWR8dWthfGJvbnxtYSB8YWNpfG1pa3x3aWt8IG1lfHBhbnxpa3V8bnphfGJlbnx1bHV8aWZ1fGliYXxrYWt8YXRhfHNvbXxvbmd8ZSBhfGFwYXwgdHV8byBifHVtb3xieWF8dXR1fHVqYXx5YW58IGJlfGtlIHxha3d8YWxlfGlsb3x1a3V8Y2lsfHR1cHxrdWx8Y2lrfGt1cHx1cGV8YmVsfGFtd3xvbmF8IHVtfGlrb3xhd3V8YW5kfHphIHxpa2V8YSB1fGltYXxtdWt8IHlhfG11bXxtZSB8bWFwfGl0YXxpeWV8b2xlfGx1bXx3YWJ8YW5lfCBsdXxudSB8a2lzfG1iZXxrYWJ8aW5lfGJ1bXxsYW18cGV0fCBhZHxmdW58YW1hfCBtYnxpc3V8dXBhfGFtZXx1IHB8dWJpXCIsXG4gICAgXCJmaW5cIjogXCJlbiB8aXNlfGphIHxpc3R8IGphfG9uIHx0YSB8c3RhfGFuIHxuIGp8YWlzfHNlbnxuIG98a2V1fGlrZXxvaWt8bGlzfCB2YXxlbGx8bGxhfG4gdHx1a3N8IG9ufGtzaXwgb2l8biBrfCBrYXxhYW58ZWVufGxhIHxsbGl8a2FpfGEganwgdGF8c2EgfGluIHxtaXN8IGpvfGEgb3zDpMOkbnzDpG4gfHNlbHxuIHN8a3NlfGEgdHxhIGt8dGFpfHVzIHx0dGF8YW5zfHNzYXxrdW58ZGVufHTDpCB8ZXVzfG5lbnxrYW58bnNhfGFwYXxhbGx8ZXN0fCBzZXxlaXN8aWxsfGllbnxzZWV8dGFhfCB5aHxqb2t8biB5fHZhcHxhIHZ8dHTDpHxva2F8biB2fGFpIHxpdHR8YWEgfGFpa3xldHR8dHVrfHRpIHx1c3R8IGt1fGlzaXxzdMOkfHNlc3wgdMOkfCB0dXxsYWl8biBwfHN0aXxhc3R8biBlfG4gbXx0w6TDpHxzaWF8dW5ufMOkIGp8dWRlfMOkIG98c3RlfHNpIHx0ZWl8aW5lfHBlcnxhIHN8aWEgfGvDpCB8w6RuZXwgbWl8bWFhfCBwZXxhIHB8ZXNzfGEgbXxhaW58w6Rtw6R8dGFtfHlodHwganV8anVsfHlrc3xow6RufMOkIHR8IGjDpHx1dHR8aWRlfGV0IHxsbMOkfHZhbHxzZWt8c3R1fG4gYXxsw6QgfGFtaXxobWl8IGtlfGlra3xsbGV8aWlufHPDpCB8ZXVrfHTDpG18aWhtfHRlZXwgaWh8bHRhfHBhdXwgc2F8aXNrfG3DpMOkfG9pc3x1biB8dGF2fHRlbnxkaXN8aHRlfG4gaHxpc3N8c3PDpHxhIGh8YXZhfCBtYXxhIHl8IGVpfCB0ZXwgc2l8IG9sfGVrw6R8c3R5fGFsdHx0b2l8YXR0fG9sbHx0ZXR8IGrDpHwgcmF8dmF0fCBtdXxpZWx8IHRvfG1haXxzYWx8aXN1fGEgYXxra2l8YXQgfHN1dXxuIGx8dsOkbHzDpMOkIHx1bGl8dHVufHRpZXxlcnV8IHlrfGV0dXx2YWF8cnVzfG11a3wgaGV8ZWkgfGEgZXxraWV8c2t1fGVpZHxpaXR8IHN1fG5uYXxzaWx8b21hfG1pbnwgeWx8bGlufGF1dHx1dXR8c2tvfCBrb3x0dGl8bGUgfHNpZXxrYWF8YSByfCByaXxzaWl8bm5vfGVsaXx0dXJ8c2FhfGFhdHxsZWl8b2xpfG5hIHwgbGF8b29ufHVydnxsbWF8cnZhfGl0ZXxtaWV8dmFzfMOkIG18IGVkfHR1c3xpYWF8aXTDpHzDpCB2fHVvbHx5bGV8IGFsfGxpdHxzdW98YW1hfGpvaXx1bnR8dXRlfGkgb3x0eWt8biByfGFsaXxsaWl8bmVlfHBhYXxhdml8b21pfG9pdHxqZW58a8Okw6R8dm9pfHloZHzDpCBrfCBraXxlZXR8ZWtzfCBzeXxpdHl8aWzDtnxpbG18b2ltfG9sZXxzaXR8aXRhfHVvbXx2YWl8dXNrfGFsYXxoZW58b3BlfCBwdXxhdWt8cGV0fG9qYXxpIHN8cmlpfHV1ZHxoZGl8w6RsaXx2YSB8IG9tXCIsXG4gICAgXCJydW5cIjogXCJyYSB8d2UgfHdhIHwgbXV8ZSBhfHNlIHwgbiB8YSBrfGlyYXxudHV8dHUgfCBrdXwgdW18a28gfGEgaXxtdSB8aXJpfG11bnxoaXJ8eWUgfHVudHxpbmd8YXNofGVyZXxzaGl8YSBufHVtdXx6d2F8IGJpfGd1IHxlZ2V8YSBhfHphIHx0ZWd8YW1hfGUga3xnbyB8dWJhfGFiYXxuZ298b3JhfG8gYXxpc2h8IGJhfCBhcnx1bmd8YSBtfCB3ZXxlIG58bmEgfHNob3xlc2V8bmdhfCBhYnxlIG18bXdlfHVndXwga3d8bmRpfCBndXxhdGV8a3dpfHdlc3xyaXp8Z2VyfHUgd3wgYXR8ZGkgfGdpaHxpemF8biB1fG5naXxiYW58eW8gfGthIHxlIGJ8YSBifCBhbXwgY2F8YXJhfGUgaXxvYm98aG9ifHJpIHx1IGJ8Y2FufG5rZXxybyB8Ym9yfCBpbnxiYWh8YWhpfGV6d3xhIHV8Z2lyfGtlIHxpZ2l8aWtpfGl3ZXxyZXp8aWh1fGh1Z3xha3V8YXJpfGFuZ3xhIGd8YW5rfG9zZXx1IG58byBufHJ3YXxrYW58IGFrfG50YXxhbmR8bmd1fCB2eXxha2F8biBpfHJhbnwgbnR8IHVifGt1bnxhdGF8aSBufGt1cnxhbmF8ZSB1fCBrb3xnaW58bnllfHJlIHwga2F8YW55fHRhIHx1a298YW13fGl5ZXwgeml8Z2EgfGl0ZXwgaWJ8YWhhfCBuZ3xlcmF8byBifGFrb3xvIGl8IGJ1fG8ga3xvIHV8byB6fCBpZ3xvIG18aG8gfG1ha3xzaGF8IGFzfCBpdnxpdnl8biBhfGkgYnxpend8byB5fCB1a3x1YnV8YWdhfGJhIHxraXJ8dnlpfGFob3wgaXN8bnlhfGdhbnx1cml8IGl0fCBpbXx1IG18a3VifHJpa3xoaW58Z3VrfGVuZXxiYXR8bmdlfGp3ZXxpbWl8IHkgfHZ5b3xpbXd8YW5pfGt1Z3x1IGF8aW5hfGdla3xoYW18aSBpfGUgY3x6ZSB8dXNofGUgeXx1cnV8YnVyfGFtYnxpYml8YWdpfHV6YXx6aSB8ZXllfHUgZ3xndXN8aSBhfCBua3xubyB8YWJpfGhhIHxyYWh8YmVyfGVtZXxyYXN8dXJhfGtpenxuZSB8dHVufHJvbnwgenV8bWEgfGdlbnx3byB8enVifHcgaXxrb3J8emlufHd1YnxpbmR8IGdpfHkgaXx1Z2l8amUgfGlyb3xtYmV8IG13fGJha3wgbWF8cnlvfGVrYXxtYXR8IGljfG9ua3xhIHp8IGJvfGlrYXxla298aWhlfHVrd3x3aXJ8YndhfCByeXwgaGF8YndvfCBhZ3x1bXd8eWl3fHRzZXwgeWF8aGUgfGVuZ3wga2l8bmthfGJpcnxhbnR8YXJvfGdpc3x1cnl8dHdhfCB5b3xiaWt8cmVrfG5pIHwgYWh8IGJ3fHVyb3xtdyB8dGFufGkgeXxuZGV8ZWp3fCBub3x6YW18cHV6fGt1IHx5IGF8YSBjfGJpaHx5YSB8bXVyfHV0dXxlbnl8dWtpfGJvc1wiLFxuICAgIFwic2xrXCI6IFwiIHByfCBhIHxwcsOhfHLDoXZ8IHBvfGllIHxjaCB8b3N0fCByb3xobyB8IG5hfHZvIHxhbml8bmEgfCBuZXxub3N8YcW+ZHxrdG98a2HFvnwga2F8bcOhIHxuw6kgfMOhdm98b20gfCBtw6F8ZWJvfHRpIHwgdiB8IGFsfGFsZXxsZWJ8Ym8gfCBqZXwgemF8w71jaHxvIG58xb5kw718ZMO9IHxpYSB8IHNsfG1pIHxvdmF8c3RpfG5pZXx2YW58dG8gfGVuaXxuZSB8w6F2YXxsb2J8w6lob3xzbG98cm9kfHRvcnxyb3Z8IHNwfCB6w6F8w6EgcHxvIHZ8YSBwfCBrdHzDvSBtfCBzdnx2b2p8Ym9kfG9ib3xuaWF8IG7DoXwgdnl8ZWogfGplIHxhxaUgfG8gcHxhIHZ8YSBzfMOhcm98YSB6fCBzYXwgbWF8YSBufGUgYXxlIHN8bXUgfG1pZXxrbGF8bsOhcnxzdm98c3BvfCBieXxvdm58YnkgfHJvenxzYSB8xL51ZHxpxaUgfG9kbnwgdsWhfG92IHxpIGF8bsOpaHx2xaFlfG8gc3x2YSB8byBhfCDEvnV8b2NpfHByZXxudSB8YSBtfHUgYXxlbsO9fGUgdnxuw70gfG5lc3xhIGt8esOha3xwb2R8bsO9bXwgZG98dSBwfCBrIHx1IHN8w6FjaXxhasO6fGJ5xaV8ecWlIHxuw71jfGVob3xyYW58cG9sfHTDoXR8c3RufGplaHxhIHJ8xaFldHzDvW1pfGxhZHzEjWlufMOpbXV8YSBvfGVkenzFpSBzfGtvbnxzdHZ8b3LDqXwgc8O6fCBuaXxlIHp8cHJpfG9jaHxueSB8xaF0w6F8c8WlIHxvamV8dm5hfHRyZXx1IGt8IMSNaXxrbyB8w6kgcHxtYWp8c21pfGEgYXxldGt8bmFrfMO9bSB8bWVkfGRvdnxwcsOtfCBvYnxpdSB8dWRzfG9zxaV8ZXNtfGUgYnxtIGF8aHJhfGkgc3xyw6FjfGJlenx2YcWlfGNocnxlIHB8IGFifGrDuiB8IMWhdHzFvmVufCBob3zEjWVufCBkZXxpIHB8xaUgdnwgdm98ZHNrfHByb3xub218IGlufG91IHxkdSB8xb5lIHxhYnl8ZXN0fCBib3xyw6kgfGJvbHwgc298bsO6IHxvbG98a2VqfMOhbG58IG9jfG9iZXxreSB8ZHppfGRvbXzDoXYgfHBvcnxsbmV8cmF2fGFrw6l8ZW5zfHByYXxvayB8IMW+ZXx0bsOpfCB0YXxha298cmVzfCB2enxpIGt8YW1pfCB0cnwgYWt8bsOtIHxsZW58byBkfGRlbHxza8O9fGNob3xhY2h8aXZvfGggcHxvxb5lfGnDoWx8aW5ufHNsdXxrcmF8bG/EjXxvxI1ufGp1IHwgb3N8YW51fG9qdXx2b8S+fMOha2x8c3RyfMOpIHN8ZW7DqXwgxb5pfG5pdXxzdGF8IHN0fHZlZHx0dm98IG1lfGRub3xtIHB8ZGUgfGvDqSB8a8O9bXxpa3R8c3R1fMOpIHZ8aSB2fHZ5aHwgdG98diBhfG9kdXxob2N8YSB0fMOtbSB8bHkgfGhvdnx5IHN8c29jfGrDumN8w7ogcHxvZGl8dm9kfGxpdnxhbsOtfGNpw6F8IHZlfHJlanxrdSB8Y2kgfHNrZXxzb2J8xI1ub3xvc29cIixcbiAgICBcInR1a1wiOiBcImxhcnwgd2V8d2UgfCBiaXx5xYggfGFyeXxhZGF8ZGEgfCBoZXwgaGF8YW4gfHlueXxrbGF8ZGFtfGRlIHwgYWR8eW5hfGVyIHxuYSB8IMO9YXxpciB8ZHlyfGnFiCB8YmlyfHIgYnx5ZHl8bGVyfGFyYXxhbSB8eXIgfGluaXxsYW58ciBhfGtseXxseWR8IMO2enxtYWd8bnnFiHzDtnogfGhlcnxneW58YWdhfGVuIHxyeW58YWtsfGFsYXxkYW58aGFrfGVyaXxuZSB8dWt1fGFyIHxyIGh8Z2EgfG55IHxodWt8IGRlfGlsaXx5Z3l8bGkgfGt1a3xhIGh8bmRhfGFzeXxsZW58IGVkfGJpbHxhdGx8aW5lfGVkaXxuacWIfGx5Z3wgaHV8IGdhfGUgaHxuZGV8ZGlsfHJ5xYh8YXphfHphdHxhIGd84oCQZGF8YeKAkGR8ZXRpfHVrbHwgZ8O2fGx5IHwgYm98dGx5fGdpbnwgYXp8bG1hfGFtYXxoZW18ZGlyfHlrbHzigJBkZXxlIGR8aWxlfMO9YW58YSBkfMO9ZXR8w71h4oCQfHluZHxseWt8YcO9eXxlIGF8w7xuZHxnZSB8IGdvfGVnaXxpbG18c3kgfG5pIHxldG18ZW3igJB8bG1lfG3igJBkfGFseXxhbnl8IGJlfHRsZXxzeW58cmlufHkgYnxsZXR8bWFrfGEgd3xhIMO9fGRlbnzDpGdlfHJhIHwgw6RofG3DpGd8IGR1fG4gZXxib2x8bWVnfGVsZXzFiCBofCBldHxpZ2l8xYggd3xpbSB8acO9YXwgw71lfCBkaXxyIGV8ZWsgfCBiYXxhayB8ZXNpfHJpbHxhIGJ8aW4gfHAgYnxkZcWIfGV0bHxhZ3l8IGJ1fCBqZXxidSB8ZSDDtnx5IGR8IGhpfG1lenwgZXN8YXJkfCBzYXzDpGhsfGUgYnx5bHl8IGthfGVzYXxtZWt8IGd1fG4gYXxlIHR8bGlrfCBkb3xlIGd8c2FzfGlsbHxubWF8xYggYXxyYW18b2xhfGhhbHx5IHd8w71hcnwgYXJ8YW5tfG1lbHxpcml8c2nDvXxuZGl8ZWRlfGdhbHxlbmR8bWlsfHJsYXxnw7Z6fCBtYXxuIGJ8ZSDDvXzDtsWIw7x8xYjDvG58biBofCB0dXxoacOnfHnDvWV8IGdlfG15IHxpw6cgfCDDtsWIfG4gw718dGxhfMWIIMO9fGxpbnxyZGF8YWwgfGxpZ3xnYXJ8IG1pfGkgZ3xkYWx8cmxlfG1hbHxrYW58Z2F0fHRtZXxzaW58YW5kfMWIIGd8Z29yfCB0YXzDtndsfMO9bGV8eSBnfGUgd3xvcmF8dGnFiHxla2x8IHlufGFsa3xkw7Z3fCBkw7Z8ZXJlfG0gaHwgbWV8ZHVyfCBlcnxhc2l8dHV0fGF0IHzDp2lufGlybHx1bXl8ZWxpfGVya3xubWV8d2xlfGd1cnxhIMO2fGHDvWF8IMOnw6R8bnVufCBraXxyYXN8YW1sfHVwIHzDvWHFn3x0eW58IGHDvXxyeSB8xYggZHxiYcWffGlwIHxnaSB8eiBofGtpbnx6IMO2fG4gd3x0ZXJ8aW5tfGXDvWx8aSDDvXxraW18bmFtfGXFiCB8YmXDvXxkb2x8IHNlfCB0ZXxyIGR8dXR1fGd5w718ZXogfHVtdXxtdW1cIixcbiAgICBcImRhblwiOiBcImVyIHxvZyB8IG9nfGRlcnwgZGV8Zm9yfGVuIHxldCB8dGlsfCBmb3wgdGl8aW5nfGRlIHxuZGV8cmV0fCByZXxoZWR8aWwgfGxpZ3wgaGF8bGxlfGRlbnwgZW58ZWQgfHZlcnxlbHN8dW5kfGFyIHwgZnJ8IG1lfHNlIHxsc2V8YW5kfGhhcnxnZW58ZWRlfGdlIHxlbGx8bmcgfGF0IHwgYWZ8bm5lfGxlIHxuZ2V8ZSBmfGdoZXxlIG98aWdofGVzIHxhZiB8ZW5ufCBhdHxsZXJ8IGkgfHNrZXxodmV8ZSBlfHIgaHxuZSB8ZW5ofHQgdHxpZ2V8ZXNrfCBlbHwgYmV8aWcgfHRpZ3xmcml8b3IgfHNrYXxuaW58ZSBzfGlvbnwgZXJ8bmh2fHJlIHxtZW58ciBvfGUgYXwgc3R8YXRpfCBza3wgaW58bCBhfHRpb3wgcMOlfGV0dHxlbnN8YWwgfHR0aXxtZWR8ciBmfG9tIHxlbmR8ciBlfGRlbHxnIGZ8a2UgfCBzb3xww6UgfGVsaXxnIG98IGFufHIgcnxucyB8IGFsfG5hdHxoYW58IHZlfHIgc3xyIGF8IHVufCBoZXx0IGZ8bGlufCBzaXxyIGR8dGVyfGVyZXxuZXN8ZGV0fGUgcnwgdWR8YWxlfHNhbXxpaGV8bGFufHR0ZXxyaW58cmlofGVudHxuZGx8ZSBtfGlza3xlcmt8YW5zfHQgc3xrYWx8IG5hfHNvbXxob2x8bGRlfGluZHxlIG58cmVufG4gc3xuZXJ8a2VsfG9sZHxkaWd8dGUgfG9yc3xlIGl8IGh2fHNuaXxza3l8ZW5lfHbDpnJ8IGxpfCBzYXxzIGZ8ZCBkfGVyc3xzdGV8bnRlfG1tZXxvdmV8ZSBofG5hbHxvbmF8Z2VyfCBncnxhZ2V8ZyBhfHZpbHxhbGx8ZSBkfGZyZXx0ZWx8cyBvfGcgaHx0IG98dCBkfHIgaXxlIHR8IG9tfGFyYnxkIGV8ZXJufHIgdXwgdsOmfGQgb3xyZXN8ZyB0fGtsw6Z8w7hyZXxuIGZ8IHZpfCBtw6V8dmVufHNrIHwgbGF8Z3RlfGthYnxzdHJ8biBtfHJlbHxlIGJ8cnVufHJiZXxiZWp8dCBpfGVqZHxra2V8dCBlfGcgZHxya2x8aWxrfGdydXx2ZWR8YmVzfCBkYXxuZCB8IGZ1fGzDpnJ8w6ZyaXxyZGl8w6ZyZHxsZCB8dCBtfGRsaXxmdW58c2lnfCBtb3xzdGF8bnN0fHJ0IHxvZCB8IGFyfCBvcHx2aXN8aWd0fMOmcmV8dGV0fHQgYXxlbW18ZyBlfG1vZHxyaG98aWUgfGcgdXxrZXJ8cmVtfCBub3xuIGh8IGZhfHJza3xvcm18ZSB1fHMgc3xlbSB8ZCBofCBnZXxldHN8ZSBnfGcgc3xwZXJ8IGV0fGxlbXwgdHJ8aSBzfGRhIHxkcmV8biBhfGRlc3xkdCB8a3l0fHJkZXx5dHR8ZXJpfGhlbnxlcnZ8bCBlfHJ2aXxmZmV8b2ZmfGlzbnxyIHR8IG9mfGtlbnxsIGh8cmtlfGcgaXx0YWx8bcOlIHxyIGt8bGtlfGd0IHx0IHZ8dCBiXCIsXG4gICAgXCJhbHNcIjogXCJ0w6sgfCB0w6t8ZGhlfGhlIHwgZGh8bsOrIHzDqyBkfGUgdHwgZSB8ZXQgfMOrIHR8aW1pfHDDq3J8ZWp0fGRyZXxyZWp8IHDDq3wgZHJ8IG7Dq3xpdCB8Z2ppfHNodHx2ZSB8aml0fMOrIHB8IGdqfGl0aHwgc2h8IGkgfCBsaXxoZXR8ZSBwfCBuanx0IHR8w6tyIHzDqyBufGluIHwgdmV8bWUgfGp0w6t8ZSBufCBrYXxhcmF8ZSBkfHVzaHxuIGV8dGV0fCBwYXxqZXJ8aGt1fGEgdHxyZSB8w6tuIHzDqyBzfHNoIHwga3V8c8OrIHx0IGR8w6sgbXxrdXN8bWl0fGxpcnxrYSB8w6sga3xqw6sgfHNlIHwgc2l8IHHDq3wgYmF8ZXTDq3xxw6sgfMOrIGJ8c2kgfMOrIGd8ZXJpfHRoa3xuamV8ZXZlfGUga3xlIHN8amV0fG9zZXxiYXN8b2hlfCBvc3xyYSB8IG1ifGlyaXxoIGt8bWlufHNoa3xhc2h8cmltfG5kw6t8IG5kfG5qw6t8anRhfGUgbXwgbWV8ZXRpfGRvIHwgZHV8ZXMgfHLDqyB8ZSBsfG1pIHxhbsOrfHRhcnx0IG58IGFzfGTDq3J8aHRlfGVuZHx0w6tufHZldHx1YXJ8dW5kfMOrc2l8a29tfHRqZXxkdWh8bmRpfGF0IHxhdmV8IGtvfHJpIHx0YSB8w6sgdnxzaG18IGRlfGFyIHxvbWJ8aSBkfCBrw6t8aSBwfGplc3wgbmd8dWhlfG5nYXxpIG58ZW4gfMOrIGV8Z2EgfCBhcnxlIGF8w6tzIHxobWV8YmFyfCBwZXxodMOrfMOrIGx8dXIgfMOrIGl8aXPDq3xpbWV8c2ltfHJpc3x0w6tzfGFydHzDq20gfGNpbHx0aW18dHlyfMOrc2h8IG1hfHNow6t8b3IgfHQgYXxrw6t0fGdqZXwgY2l8ciBufGUgdnxwYXJ8bnVrfMOrdGF8cmdqfGkgaXxpc2h8dWsgfCBudXzDqyByfGFyZXwgamV8w6sgY3wgcHV8YXTDq3xsaW18bGxpfCDDq3N8w6sgYXxpIHR8bWFyfG9yZXwgc8OrfHRpdHxsYXJ8cGVyfHQgcHxyYXR8aXRlfGluw6t8dCBzfHJpdXxrZSB8w6tyZ3xhIG58ZWRofCBwcnxlc2l8aXLDq3zDq3JrfCBwb3xow6sgfMOrIGp8aSBzfGEgZXxodCB8bWJhfHJvaHxpbSB8YXJpfGUgYnxsaXR8dGkgfGFzbnx0YXZ8c25qfHQgZXxpayB8dGlqfGsgZHxxw6tyfGjDq218cmFzfHJlc3xvdMOrfG5hbHxtdW58IGFufGtsYXx2ZW58ZSBxfHRhdHx0IGl8IGZhfGlqIHwgdGp8aWdqfHRlIHxhbGl8YnJvfCBkaXxyb2p8IHRpfHVyaXxvasOrfMOrIHF8w6dkb3xkZXR8biBwfCBwbHxla2x8aW5kfGVyw6t8dmVwfGRla3xuaW18aXZlfHJvcnxzaG98aG9xfG9xw6t8w6tyaXxwcml8ciBkfHNocHxlc8OrfGxlIHxhIGR8c2hpfCBtdXxkaXN8ciB0fGV0ZXwgdCB8w6sgZnzDq3pvfHppbXwgw6dkfG1icnwgcmV8ZSBmfGplbnxpIG18aXV0fG4ga3x0aGF8cyBzfGxvdFwiLFxuICAgIFwibm9iXCI6IFwiZXIgfCBvZ3xvZyB8ZW4gfCBkZXxmb3J8dGlsfGluZ3xldHR8IHRpfGV0IHwgaGF8IGZvfCByZXxyZXR8aWwgfGhldHxsbGV8dmVyfHR0IHxhciB8bm5lfCBlbnxvbSB8ZWxsfG5nIHxoYXJ8IG1lfGVubnx0ZXJ8ZGUgfGxpZ3wgZnJ8IHNvfHIgaHxsZXJ8YXYgfGxlIHxkZW58YW5kfCBpIHwgZXJ8c29tfCDDpSB8aHZlfG9yIHx0IHR8bmUgfCBlbHxlbHN8cmUgfCBhdnxzZSB8ZXNrfGVuaHxuZ2V8c2thfG5kZXxlIG98ZXRlfGdlbnxrZSB8bHNlfGdoZXx0ZW58bWVufCBzdHxyIHN8ZnJpfGlnaHxpZyB8IGJlfGUgZXxuaHZ8ciByfHR0ZXxza2V8dGUgfCBww6V8IHV0fCBza3xhbCB8IGlufHNqb3xww6UgfGRlcnxlIHN8bmVyfHJpbnxqb258dCBvfHVubnxlIGZ8aGFufGFzanx0aWd8ZWQgfGVzIHxnIGZ8c2FtfGVudHx0dGl8ZW5lfG5lc3xtZWR8Z2UgfCBhbHxyIG98ZW5zfHIgZXxlbGl8aXNrfGxpbnwgdmV8bmlufGcgb3wgc2F8IGFufHQgZnxpdHR8bGlrfGVuZHxrYWx8ciBmfHQgc3xyaWh8aWhlfG5hc3xudGV8ZSByfG5zIHwgc2l8bGFufGcgc3xtbWV8aWdlfGwgw6V8ZXJrfGRpZ3wgZ3J8biBzfHJlbnxyIGF8YWxsfCBuYXxrdGV8ZXJkfGVyZXxlIG18dW5kfHIgdXxyZXN8dGVsfHN0ZXxncnV8aW5ufGzDpnJ8ZXJzfCB1bnxkZXR8dCBlfGFyYnxhbGV8ZGVsfGVrdHx2ZW58dCBpfGcgZXxiZWl8ZWlkfGUgYXxuIG18ZSBkfCBhcnxyYmV8ZSBnfCBibHxhbnN8a2zDpnwgbGl8IGhlfGcgdHzDpnJpfHNreXxydW58cmtsfCBsYXxzdGF8c25pfGtrZXxtIGV8cnQgfG1vdHwgbW98ZSBufHRhdHxhdCB8ZSBofGUgYnxvdmV8ZSB0fGplbnx0IGR8c3RyfCBtw6V8ciBtfG4gZXxvcnN8cmVsfGtlcnwgZXR8biBhfGJlc3xvbmV8IHZpfG5uIHxnIHJ8ZSBpfGthcHxzayB8b3QgfG5kaXxubmx8aSBzfCBkYXxzIG98IG5vfGlkIHxnZXJ8ZyBofHZpc3xuIG98YmFyfHMgZnxuZGx8dCBtfGcgYXxvcHB8dCBhfGRpc3xuYWx8ciBkfHBlcnxkcmV8b25hfMOmcmV8cmRpfGRhIHx1dGV8bnNlfGJsaXxvcmV8dGV0fHJpdHwgb3B8a3JhfGVyaXxob2x8b2xkfCBrcnx5dHR8a3l0fGZmZXxlbW18ZyBkfGwgZnwgb218aXNufCBnanzDpSBkfHNlcnxyIGJ8IGRpfCBmYXxuIHR8ciBrfGx0IHxzZXR8IHNsfGRvbXxydml8bWUgfGwgZXxncmV8w6Ugc3xtw6UgfCB0cnxuZCB8bSBzfGcgaXxpa2t8biBofCBhdHx0ZXN8dmlsfGRsaXxnIGJ8ZCBkfCBodnxyYXZcIixcbiAgICBcInN1a1wiOiBcIm5hIHwgbXV8IGJ1fCBuYXxhIGJ8eWEgfGh1IHxhIG58d2UgfCBndXxuaHV8YSBnfCBiYXxhIG18aWxpfHdhIHwgeWF8bGkgfHVuaHwgYm98bXVufGFsaXxidWx8aGFufGJvIHxpIG18aWx3fHVsaXxhbmd8bGlsfGxhIHxpIGJ8ZSBufGdhIHwgd2l8a2lsfG11IHwgYWx8IHNlfHUgYXxnZSB8a2dlfGVrZ3xzZWt8bHdlfG9zZXxsZSB8bG8gfGJpIHx1bHV8ZSB5fGt3ZXxpbGF8YW5kfGUgYnxpIG58eW8gfG5n4oCZfGEgc3xuZ2F8IG5zfHNpIHxhYml8bnNpfGluYXxsaW58YWtpfHNlIHxiYW58IGx5fCBnd3xkYWt8bHUgfG5naXxnaWx8YSB3fG8gZ3xha3d8dSBifGlsZXxhbmh8a2EgfGlsb3xhIGx8dWJpfGUgZ3wgbnV8byBufGphIHxnYW58IG5nfCBtYXxseWF8bnVsfGfigJl3fGFuaXxuZGl8dSBtfGl5YXx3aXl8IGppfGpvIHwga2F8eWFifGx3YXxhZGF8byBifGUga3wgYWR8Z3dpfGhvIHxndWJ8IGt1fGluZ3xvIGF8byBsfHVsYXxpa2F8YSBpfHUgbnxkaWt8aWhhfHNoaXxheW98Z3VufCBqYXxoYSB8Yml6fG8ganxsYWd8bWEgfHdlbnwgc2h8ZWxlfHVuZ3xvIHN8Z2kgfGd1bHxtbyB8bGFufGl3YXxhIGt8YWxhfGlraXxqaWx8b2xhfGppIHxhIGF8eWFrfCBsaXxuaWx8aXphfGFnaXxhaGF8bWFufGJvc3xpZ2F8a3VqfCBoYXxhbmF8IGx1fCBnaXxpdGl8IG1ofHVnYXx1eW98d2lufCBnYXx6YSB8YSB5fGtpIHwgbmR8b21hfGVuZXxvIHd8YSB1fG1haHx5b3N8c29sfGhheXwgbWl8aWtvfG9uZ3xhZ2F8aWt1fGd3YXxpIGF8bmR1fHBhbnx1IGd8ZSBpfCBhYnx1am98aWRhfG55YXxpYml8ZHVofGJ1dHxpIHl8dSB3fGlqaXxuaHl8IHdlfG5pa3xheWF8dWh1fG5kYXwgaWx8amUgfGFib3xhaml8bGVsfHVidXxuYXl8YmEgfGx1Z3xsb258YWxlfG1pbHxkYSB8YSBqfGR1bHxvIG18bWhhfGFrYXxlIHV8Z+KAmWh8dWR1fGx5b3xlIG18ZSBhfGdpa3xidXN8YmFsfHNoYXx3aXR8dHdhfG5naHxuZWt8d2lnfCB1bXxva3d8YW55fHVtYXxpbWF8dXNvfGJ1ZHzigJl3ZXwgaWp8aGlsfGJpbHxhIGh8aW1vfGl0YXxubyB8IGlofGd1dHxuaGF8bmUgfGlzb3x1bG98dW5vfHlvbXzigJloYXx1IGx8ZWxvfGVraXx3ZWx8aHlhfG5ndXxvbWJ8c29tfG1iaXxpIGd8byBpfHUgaXxiYWt8IGlzfHVndXwgeWl8dXR1fGVuaXx0dW18dW1vfHUgc3x0b2d8aW5ofOKAmXdpfGxpdHx3YWp8ZSBqfHVsZXxqaXd8dSB1fGt1YnxrdWx8bGlrfHV0b3wgdXl8dXBhXCIsXG4gICAgXCJzYWdcIjogXCJ0w64gfCB0w658bmEgfCBuYXwgbmd8YSBufG5nYnxnw7YgfG5nw7Z8bmdhfG7DriB8IGxvfGxvIHx6byB8YmkgfGxhIHxnYml8YW5nfCBzw7R8c8O0IHzDriBsfGdhbnzDtiB0fCB6b3xvIG58IHdhfGEgdHzDrm5nfGkgdHxuZ8O8fGfDvCB8IGFsfGzDrm58IG5kfGEgbHzDqiB0fCBrw7t8w6RuZ3zDriBufCB0ZXx3YWx8YWxhfGFsw658w64ga3zDqyB0fMOuIG18w6IgdHzDriDDonzDtCBhfMOuIGJ8IG1ifMO7w6ogfGfDoiB8w7Zyw7Z8bmfDonxrw7vDqnwgbMOqfG8ga3xhIMOifGUgbnxrbyB8w64gc3wga8O2fHRlcnxkw7ZyfGvDtmR8w7Zkw7Z8w68gbnxhIGt8bMOqZ3xnw6sgfMO0a298w6tww6t8bcO7IHxww6twfCBww6t8byBhfMOqZ8OrfGVrZXx5ZWt8a2UgfMO8IHR8w64gdHwgYXl8byB0fGLDqm58w6ogbnxyw6ogfHDDq2V8cmEgfMOrZSB8ZXLDqnxyw7YgfHTDryB8a3VhfGF5ZXwgbsOufCDDtGt8dWEgfGEgenzDpCB0fCDDomx8w6IgbnzDr25nfMOuIGR8w7YgbnzDom5nfMOqbsOufCBhbXzDriB6fHRlbnzDomxhfCB5w6J8w6ogYXxtYsOqfGEgbXzDuyBufGEgeXxuZSB8ZW5lfHLDpCB8w64gZ3xhIHN8YsOqIHwga3V8YXLDpHxuZGl8Z2EgfGRpw6R8w6tuZ3xpw6QgfCBkdXwgw6JufGFtw7t8ZHV0fMO2bmd8ecOiIHx1dMOvfHJvIHzDtm7Drnxsw68gfGEgcHwgZ8OvfG9yb3xsw6sgfMOuIGF8IMOibXxuZG98IHPDqnxuZ8O0fGRvIHxpIG58byBzfG5kw7Z8w6JyYXxlIHR8IGLDqnxnYmF8w7tuZ3wgbcOkfHPDonJ8IHPDr3zDriBwfCBnYnzDtiBrfGUgYXx5w6ogfGEgYXwgw6JrfGTDtiB8YXJhfGJhIHzDryB0fCB0w7Z8YSB3fHphcnx0w7ZufMOuIHd8d2FyfG5kw6J8YSBnfGFuYXxuw6sgfMOqbmR8IHTDq3x0YSB8YmFufCBsw6t8esO2bnzDriBmfG56w7Z8IHPDonxzw68gfHTDq258byB3fCBuenxzw6pufCDDonp8IGRhfCB6YXzDrnLDrnwgbsOrfG7Dq258YXRlfMOkIHN8YsOiIHwgYXR8byBsfMOrbsOrfG8gw7R8ZmEgfCBrcHwgbWF8byBwfCBtw7t8a8OibnxhIGJ8YmF0fGF0YXzDtCBufHNlIHwga8OifGFsw6t8IGtvfMO0bmd8ZGEgfMOrIHN8w7xuZ3zDqyBufGliw6p8csO2c3xtYsOrfGLDq3R8w6t0w698w6JtYnxtYsOifMOvZ8OufG1iYXxnw64gfHTDpG58IHBvfGLDu258Z8OvIHxhbWJ8w7wgbnxnYsOvfMO0aSB8Z8O0aXwgYWZ8csOrIHxlcsOrfGzDqiB8IGFzfGFmYXzDonpvfGkgcHxzb3J8IGFkfGkgc3wgYmF8Z8OvZ3zDpCBufGLDpHR8ZMOrIHzDtiDDonxrw7tlfMO7ZSB8a3DDpHxww6RsfMOkbMOrfGUgenzDpHTDpHzDtiB3fG5naXwgecOqfGvDtnR8w7Z0w6R8dMOkIHzDqiBzfGtvZHwgaMOvfGhhbHxow69ufGzDq3p8w6t6b3xuZ8OkfGfDpG58b2TDq3zDtiBtfG1hcnxzw6RyfHDDpCB8w6Ryw6R8w65hbnxyw6RufGLDrmF8YSBofGdpIHxib3J8ZHUgXCIsXG4gICAgXCJubm9cIjogXCIgb2d8b2cgfCBkZXwgaGF8ZXIgfGVuIHxhciB8dGlsfCB0aXxsbGV8ZXR0fGlsIHxyZXR8b20gfGV0IHwgcmV8bGUgfGhhcnxlbm58IG1lfCBhbHxhbGx8IGZyfG5lIHx0dCB8cmUgfCDDpSB8IGkgfG5uZXxhbmR8aW5nfHNrYXwgc2t8bWVufCBmb3xkZXR8ZGVufHZlcnxmb3J8ZWxsfHQgdHxkb218IHNvfGRlIHxlIHN8IHZlfCBlaXxlcmV8IHDDpXxhbCB8YW4gfGUgb3xlIGh8ZnJpfHNhbXwgc2F8bCDDpXxww6UgfGxlZ3wgZWx8bGVyfHNvbXxlaW58ZWkgfG5kZXxhdiB8IHN0fGRlaXxvciB8dGVufGVza3xrYWx8Z2plfG4gc3x0dGV8amUgfHNrZXxyaWR8ciByfGkgc3x0ZSB8bmVzfCBnanxlZyB8aWRvfG1lZHxlIGZ8ciBzfHN0IHxrZSB8am9ufCBpbnxyIGZ8c2pvfGFzanxuYXN8dGVyfHVubnxlZCB8a2plfGhhbnxvbmF8IGVyfHQgb3x0IGV8ZyBmfHNraXxlIG18YXN0fGFuZXxlIHR8IGF2fCBncnxsYW58c3RlfHRhbnzDpSBmfCBuYXxkZXJ8IHNsfHQgc3xzZWd8biBvfHIga3xuZ2F8Z2UgfCBhbnxnIG98YXQgfG5hIHxlcm58bnRlfG5nIHwgdXR8bGlrfGUgYXxiZWl8Z3J1fGUgaXxhcmJ8a2lsfGcgc3xsYWd8ZWlkfHIgYXxlIGR8ZyBkfCBzaXwgZsOlfGFtZXxhIHN8ZSByfHJiZXxqZW58biBtfHIgZHxuIGV8bm4gfGUgbnxlcmR8IHRyfCBtw6V8IGJsfCBtb3xyZW58cnVufG5pbnxibGl8a3JhfCBrcnwgYXR8ZWdlfG4gaXxtZSB8bnNrfGluc3zDpXIgfGZyw6V8aW4gfGxvdnx2IHB8ZW5kfG1vdHxhbGV8ZSB2fMOlIGF8ZsOlIHxyYXZ8aW50fG5hbHwgYXJ8c3RhfGUga3x0IGZ8b21lfCBsYXxvdCB8dCBhfHNsYXwgaWt8bmxlfGl0dHwgbGl8IGt2fGlkIHxra2p8aWtrfCBsb3xuYWR8w6Ugdnx0dGF8IGZhfCBzZXxnZW58bGQgfMOlIHN8a2FufGcgdHwga2F8ciBsfGdvZHxuIGF8bGlufGplbHxpbGR8ZGlnfGhhIHxsIGR8a2FwfHZlIHxuZHJ8ZyBpfGcgYXxpbm58dmFyfHJuYXxyIG18ciBnfGEgb3xkcmV8ZCBhfG4gdHxhZyB8a8Olcnxtw6VsfGlnIHx2YSB8aSBkfHQgbXxlIGV8biBkfHR5cnwgb218ZyBlfGV2ZXxkw6UgfGUgdXwgZMOlfHVuZHwgbm98aXIgfGdhcnxnIGd8bCBofHNlIHxnYSB8ZCBkfGwgZnxrZXJ8ciBvfMOlIGR8ZWxkfGlnZXx0IGR8dCBpfHQgaHxva298bm5sfHJlbHxub2t8cnQgfGx0IHzDpXNlfGplcnx0YSB8aWsgfGlhbHxlaWd8ciBwfGkgZXxvbGt8YmFyfG9zaXxrdGV8c29zfGxpcnxvcHB8IHVufGFkIHwgYmVcIixcbiAgICBcIm1vc1wiOiBcIiBuIHxlzINufCBhIHwgc2V8YSB0fHNlzIN8zINuIHwgbmV8YSBzfCB5ZXxlIG58IHRhfCB0yal8biB0fCBwYXx0yakgfCBsYXwgc298bmlufCBuaXwgYiB8IGbDo3xmw6NhfMOjYSB8bmcgfGEgbnwgYnV8IHTDtXxsYSB8ZcyDIHwgdGV8dMO1ZXxuZSB8eWUgfGEgYXxvciB8IHlhfCB0b3xlZCB8bmVkfHBhIHxlIHR8w7VlIHx0YXJ8ZW0gfHRlzIN8ZyBufMOjIG58biBtfGFhbnwgbWF8c29yfGJ1dXxuIHl8bWFhfHV1ZHxhIHl8ciBufGluc3xuIHB8dWQgfHJhIHxwYWF8yakgbnxhIGJ8IHdhfGQgZnwgbmF8bWUgfG4gZHxhcmF8biBifHPDoyB8dGFhfG4gd3xiw6MgfGFuIHx5ZWx8ZW5nfGFhbHzJqSBifG4gbnxnZcyDfMyDbmd8b2cgfCBrYXwgYsmpfGLJqSB8IHTKinxnw6MgfCB5yal8bmEgfGFtIHxlIGJ8YW1lfHdhIHxnIGF8ZCBifGFhbXxhYiB8bWIgfCBiw6N8w6NtYnwgYmF8bSBufHfDoyB8YWFifGEgbXxhYSB8c2FhfGdhIHxuc2F8eWFhfCB3w6N8YSBsfHRvZ3xvcmV8biBzfG5kIHzKisqKbXwgc8O1fCBzw6N8w6NuZ3xzZWd8ZWdkfGQgc3xlbCB8dMqKyop8bmfDo3xiYSB8IHTFqXwgZGF8w6MgdHwgbWV8YiBzfHJlIHxkYXR8bCBzfGQgbnzJqSB5fMOjIHl8ZMmpIHxhb298ZyB0fCBrw6N8bSB0fGluZ3xyIHN8YSBwfGIgeXxiIG58Z2TJqXxtZW58ZMOjIHx2yanJqXwgdsmpfGxnIHxvb3J8w6Mgc3xuIGt8YWwgfHLDoyB8bmdhfGFyIHwgbGV8Z3IgfGQgYXxuZWJ8zINuZHzJqcmpbXzEqW5kfHnJqSB8bGVtfCBwyop8IGLKinxwyopnfG5nZXx0byB8YiB0fMmpIHN8ZyBzfCBtaXwga2V8YSBrfGLDo218IHdlfGthb3xpbGd8d2lsfCB6xKl8IG5vfGtlzIN8IHJhfG0gYnzKimdlfGIga3wgYsWpfG9vZ3zDoyBwfGLFqW18bmdyfGF0IHwgd2l8Z2FtfCBrb3xlYiB8ZyBifHPDtW58w6NhZHzDoyBmfMO1bmd8yaltIHxtIHN8IHlpfMWpbWJ8IHnDo3zKim0gfG95IHx3ZcyDfG5veXzKim1kfGRhIHxyZW58YSB6fHlhIHwgZ8OjfGxlIHxiIHB8yakgdHxuIGd8IGYgfG5pIHxzb2F8b2FifGkgdHwgc8mpfGxhZ3wgdGl8dGUgfG8gYXxzIG58b2dhfGdvIHx0xakgfGdlbXxhZ2V8YSB3fMyDIG58aW4gfCB5w7V8YSBnfGIgYnxhb3J8a2EgfGXMg2V8dMWpdXxhYXN8YSByfGUgeXxhZyB8ZWcgfHIgdHxlIGF8w6Mga3xpaWR8ZSBwfG5lZ3xvIHR8YXRlfG9hIHxlIHN8xakgbnxtw6MgfG1zIHxlbGx8ZWVtfGXMg218YiB3fMyDbXN8dG9vfGlrIHwgesOjfHrEqW58a29nfGJhb3xyIGJ8cyBhfGJ1aXx1aWl8b2dsfGFiYXxhbG98bG9hfGvDo2F8b2QgfGwgYnxsbCB8bmRhfGthdHxha2FcIixcbiAgICBcImNhdFwiOiBcIiBkZXwgaSB8ZXMgfGRlIHxsYSB8IGxhfCBhIHwgcGV8cGVyfGnDsyB8ZW50fHRhdHwgc2V8bnQgfHJldHx0cyB8ZHJlfGF0IHwgZWx8bHMgfCBkcnxtZW58YWNpfGEgcHxjacOzfG9uYXwgY298YSBsfGFsIHxuYSB8cyBkfHF1ZXxlbiB8ZWwgfCB0b3xzIGl8IHF1fCBlbnxlIGx8bnMgfHRvdHxldCB8dCBhfGVyc3wgcHJ8dCBkfG9uc3xlciB8IGxsfGlvbnxhIHN8dGEgfGEgdHxjb258ZWxzfHMgZXwgbOKAmXxyc298cmVzfGFsc3xzb258IHVufGVzdHxjaW98IHJlfHByb3xpdGF8Y2lhfCBpbnxsZXN8IG8gfHVlIHxkZWx8bGxpfHTDqSB8IHTDqXxpYSB8YW1lfMOpIGR8c2V2fG90YXxuYWN8aSBsfCBhbHxzIHB8YSBkfGFyIHxhIGl8dWFsfG5hbHxhIGN8YW50fG5jaXwgbGV8ZXJ0fHN0YXxydGF8c2VyfHQgaXxpIGF8bCBkfCBub3x2YSB8YXRzfCBk4oCZfHMgbnxyZSB8cyBhfGUgY3xldmF8IG5hfHLDoCB8IGNhfHVlc3xjb218bGlifMOpcyB8IHNvfGliZXwgZXN8ZXRzfGJlcnxkYSB8ciBhfG5vIHx1bmF8bOKAmWV8cyBsfHRlcnxzZW58cmFufHVyZXxkZXN8bWFufGkgZXxsIHB8dCBlfG4gZHxlIGR8ZSBlfG9tIHwgZGl8Y2NpfGlndXxhIGF8cyB0fCBwYXxpIGR8dHJhfHMgb3xhcXV8dHJlfHZvbHxlY3R8YSB1fGwgaXxndWF8aWRlfHMgc3xhZGF8ZW5lfGlhbHxudGF8bnRyfGVuc3xzb2N8Y3RlfHJhIHxvY2l8aHVtfHVtYXxjbGF8YWxpfGxpdHxlcsOgfGN0aXwgYXF8IGh1fGljaXxwcmV8ZXJhfGVzc3x1bml8bnRlfCBmb3wgbml8YmxlfHNzZXx0ZXN8YWx0fGVtZXxhc3N8aWNhfHNlZ3xvIHN8b3RlfHJhY3wgaWd8IHBvfGFuc3wgw6lzfGEgZXx1biB8dXMgfG1pdHwgbWF8ciBzfHNlIHxzc2l8cyBofGEgbXxyIGx8bml0fGwgdHzDqG5jfMOzIGR8dGVufCB0ZXxpciB8aSBwfHRhbHxldGF8ZGljfGkgaXxob218dCBxfHBhcnxlZ3V8cyBmfCBhc3xuIGx8cmlhfCBtaXwgYWN8bGljfGludHwgdHJ8YWN0fGVpeHxuIGV8cyBjfG9udHxuc2V8ZWNjfHQgdHxsdHJ8YW1ifHF1YXxs4oCZYXxlbGl8dXJhfGFuIHxpc3R8ZSB0fMOzIGF8b25lfG5hbXxpbmd8bGFyfG8gcHxlc3B8cmVjfGxpZ3xhIGZ8IGhhfGl2YXwgYW18bGxlfHQgc3xyb3R8bWF0fGxpdXx0aXV8aXVyfG4gYXxmb258b3RzfGluY3xuZGl8ZSBwfHNldXxvbHV8Z3VyfGkgY3xtw6lzfGRlcnxybmF8aW5hfGZvcnxpZ2l8Y2llfGJsaXxpYyB8bWIgfGluIHxhcnR8b2wgfHJvbXxuaW58b21wXCIsXG4gICAgXCJzb3RcIjogXCIgbGV8bGUgfG5nIHxobyB8IG1vfCBob3wgYm98YSBofCBlIHxsbyB8eWEgfGJhIHxlIG18YSBsfCB5YXwgdHN8IGJhfG5hIHxvbmd8IGthfGEgYnx0aG98ZSB0fHNhIHxlbG98b2xvfGEgbXxldHN8IGRpfG8gZXxsYSB8bW9ufG90aHx0c2F8byB5fGthIHxlbmd8YSBrfG9rZXxrZWx8YSB0fGcgbHx0b2t8YW5nfG8gdHx0bGF8bW90fCBzZXxvIGx8ZSBifCBuYXwgaGF8bG9rfHdhIHxlIGh8IHRsfCBhIHxhYmF8byBifHRzZXxoYSB8IG8gfGhhYnxlIGt8dGpofGEgZHx0c298amhhfCB0b3xzZSB8c28gfG9rb3xlIGV8dHNofGRpdHxwYSB8YXBhfG8gbnxlIGx8bG9ofGtvbHwgbWF8byBtfGEgZXxlbGF8ZWxlfGFuYXxhIHN8bGV0fGJvbHxvaGl8YSBhfHRzd3xrYXB8IGtlfGhpIHxnIG98b2hsfGVvIHxrZSB8b25hfHNldHxvIGt8byBzfGRpIHwga2d8ZSBkfGFoYXxsYW58Ym90fGJvIHxpdG98byBofCBtbXxobGV8ZXRofGVuYXxpIGJ8YWxhfGF0c3xtb2h8c3dhfGx3YXxnIGt8YXRsfGFiZXxnIG18b2xhfHBoZXxiYXR8YW5lfGEgbnxtZWx8IG1lfG8gYXwgcGh8ZWJlfGVsbHxobG98dGxvfGV0anxtYXR8IHNhfGcgdHwgdGh8ZyB5fGxhdHxtb2x8ZyBifGcgaHwgZW58c2hlfHRoZXxzZWJ8bmFufGxla3xib2h8aGFlfGtnb3xoZWx8ZSBzfGVkaXx3YW58bWUgfGtnYXxhZSB8dG8gfGEgZnxhdGh8bGFvfCBobHxoYW58aWxlfG5haHx3ZSB8dW1lfGthbnxvdGx8bGVufGFrYXxlZmV8aXJlfGJlbHxiZXR8cmVsfHN3ZXxtbWV8c2VufGEgcHwga298ZyBlfGF0anxsZWx8aXRzfGJvbnxvaG98ZWhhfHNoaXxtYW58YW5vfG50c3xoZSB8bGFsfGVrYXwgZnV8byBmfGhlb3xnb3R8YWxsfGFvIHxoZXR8aGF0fGdldHxiYW58aGFsfGtnZXwgd2F8YSB5fGxsYXxmdW18bW1vfGthcnxhbG98IGVmfHRodXxlIHl8d2FsfHRoYXxzYW58aG9ufHRsaHwgaGV8ZSBufGJlbnxobGF8aW5nfHVtYXxwaGF8byBvfHNpIHwgdHV8dHVtfGxsb3xsbGV8IHRhfHBhbnxoZW58bW8gfG5lbnxoaXJ8IGxvfHNvbnxvdHN8dGFifGFtYXxhdG98ZGlufGxhcHxoaWx8IGVvfGRpc3xva2F8ZWx3fHRzaXxsbHd8aSBtfGhvbHxwZWx8aXNvfG5vIHxlIGF8ZmV0fGx3ZXxhZGl8IGZlfGZlbnxod2F8b3BhfGtvcHxhcmV8YW1vfHJldHxlbW98aSBrfGlzYXxvIHB8byBkfGkgbHxnYXR8ZGlrfGkgdHwgbnR8IGxhfGFtZXxzaHd8aGFofCBhbXxueWF8aXRhfG1hYlwiLFxuICAgIFwiYmNsXCI6IFwiYW4gfCBzYXxpbiB8IG5hfG5nIHxzYSB8IHBhfG5hIHxuaW58YW5nfCBrYXwgbml8IG1hfCBhbnxwYWd8IGFzfHNpbnxhc2l8biBzfGlvbnxuIG58Y2lvfGEgbXxvbiB8YmFufCBkZXxuIGF8Z2EgfGthbnwgbWd8YSBwfG1nYXxhIG58b3MgfHJlY3xlcmV8ZGVyfGNob3xlY2h8biBwfGFjaXxhcm98biBtfG1hbnxhIHN8IGxhfG4gZHxvIG58YXNhfG4ga3xnIHN8a2F0fHNhcnxhdGF8YXkgfG8gc3xhbCB8b25nfG4gbHwgbyB8YSBhfGhvIHxhIGt8aWd3fHRhbHxnd2F8YW1ifGthc3xzYWl8bWJhfHdhIHxhcmF8IGlnfGFna3xvIGF8bGFtfHJvIHxvIGl8Z2thfGFsaXxhcGF8bmFjfHNhbnxhYmF8ZyBwfGluYXxhIGR8aXlhfHlhbnxpbmd8bGlufG1heXxpbmt8YWl5fG5rYXwgYmF8YWthfGEgaXx5byB8IGlufGFnIHxhYm98IGRhfGFoYXxpbml8IGdhfHRhbnxzIG58bnRhfGFub3xhZ3R8cyBhfGthaXxhZCB8aGF5fGlkYXxob3N8byBtfG9nIHxpYSB8aWJhfGVudHxoYW58IHRhfHBhcnxuIGl8IGh1fGF0IHxyb258YSBifGcgbnxhbnR8ZyBtfG5hbHxheW98YSBnfGRhcHxtYWd8bm8gfHN0YXxheWF8aXJpfCBwcnxuZ2F8cmFufGNpYXxnIGt8ZXMgfHBhdHxsaSB8IGNvfGRhZHxsIG58eSBufGJvc3wgc2l8bWFrfHByb3xhbGF8bWVufGdhbnxha2l8bnRlfGxhbnxvIGt8Y29ufHQgbnxnYWJ8YSBsfGcgZHxvbmF8biBifHRhIHxkbyB8bmRhfGFhbnxhcyB8dWhhfGFncHxhIGN8dWxpfGF3b3x0YXd8cGFufG4gb3wgc298aHVsfGkgbnx0ZXJ8YWRvfGFnc3xnIGF8dHJhfG1pbnxhbnd8dGF5fGthbXxud2F8d2FhfGcgb3xhIG98a2FwfGFpbnxiYWx8YmlsfGFtaXxnIGl8ZCBhfHJlc3xyYSB8bmFnfGd0YXx0b258biBlfGJhIHxuYW58IG1pfGthYnxlbiB8YmFzfGdwYXxuZXN8byBwfCBkaXxwaW58aWthfGwgYXxuIGd8aW5kfGlzYXxjY2l8aWxpfGlhbHxlY2N8dGVjfG5jaXxpb3N8YmFofCBlc3xvbmV8cGFrfG9tIHxpbWl8YWdpfGljb3wgcmV8YW5hfCBiaXxhIGV8bmlkfHJpbXxyYXJ8IHNlfHJhYnxzIHN8aGFsfGkgYXxidWh8c2FifGNyaXx1Ym98Ym8gfGdpIHx3byB8cmlufGludHxhZ2h8aXBhfHNpaXxpYm98YW5pfHRvIHxzYWR8aG9ufCBsZXxpaXN8YSB0fGFzdHxzYXl8bGFyfG4gY3xhYWd8b3RlfHJvdHxuIHR8eSBtfGljaXxwYWF8bGV5fGV5IHx5YWd8YWVufGRhbnxuaSB8IHB1fGF0dXxsYWJ8c2FsfGljYXwgZ2lcIixcbiAgICBcImdsZ1wiOiBcIiBkZXxvcyB8ZGUgfCBlIHxpw7NufCBhIHxkYSB8dG8gfGNpw7N8ZXJlfMOzbiB8ZGVyfGl0b3xlbiB8YSBwfCBjb3xlbnR8ZWl0fG4gZHwgc2V8cmVpfGFkZXxhcyB8YWNpfGRhZHxzIGR8IHBlfHBlcnxvIGR8cyBlfGUgYXxlIGR8bWVufCBkYXxudGV8ZXJzfCBwcnwgdGV8ZG8gfGFsIHxyc298aWRhfGVzIHx0ZW58c29hfG9hIHxxdWV8IHRvfCBwb3wgbyB8YSB0fCBpbnxhIGV8IGxpfCBkb3xjaWF8dGUgfHRvZHxyZXN8byBhfHByb3wgcmV8dG9zfGVzdHxyYSB8IGVzfCBvdXxkb3N8bGlifGNvbnxhIGR8bmNpfG8gZXwgbmF8ZSBlfGEgYXxhIHN8YmVyfCDDoSB8b2RhfCBwYXxlIG98IHF1fGUgY3x1ZSB8YXIgfG5hY3wgZW58IHPDunx0cmF8cyBwfCB1bnxzw7phfGNvbXxvdSB8aWEgfG50b3xzZXJ8YSBjfGVyIHxucyB8YSBvfHNlIHxkZXN8aXMgfHRlcnxzIG58IGNhfGFkb3xvciB8w7Nuc3xzdGF8w7phIHwgbm98cmRhfHMgc3xpYmV8csOhIHxlcmR8ZXJhfG5vIHxuYWx8IGFzfGljYXxlIHB8ZW1lfGVyw6F8cHJlfHNlbnxkYXN8ZSBufCBuaXxlIHN8cG9yfGFpc3xwYXJ8YW50fGFyYXxhbWV8Y2NpfG9uYXxpbyB8byBwfG4gcHwgZGl8Y3RvfHMgdHwgc298byB0fG8gw6F8bmlufCBtZXwgb3N8Y2lvfGVuY3x1bmh8biBlfG4gY3xuaGF8aGEgfG50cnxpb258biBzfMOhIHN8biB0fHMgb3xlc2V8bnRhfGVjdHxlIGl8byBzfGUgbHxzbyB8bmlkfG9jaXxzb2N8b250fGRpY3xpY2l8ZSB0fHRhZHwgYWN8dGl2fG5kaXxhbGl8Z3VhfGwgZXxyZWN8YSBsfCBpZ3xvbW98Y2FzfG8gbXxyZSB8IG1hfGluZ3xuYSB8aWd1fHZpZHxlbGl8bmd1fHVuZHxzIGl8cmFjfGEgbnxjbGF8Y3RpfHNldXxyaWF8b24gfGFzZXxvIG58bGljfHMgY3xtYW58bGlkfGEgdXx1bml8dGEgfCDDsyB8dWFsfGlkb3xvcml8IGZ1fGluZHxuZGF8c3RlfHMgYXx0ZXN8IHRyfGFjdHxpYWx8ZnVufGRpc3xlY2N8byDDs3xjYWx8bW8gfHVuIHxlIHJ8aXZhfG4gb3xjYSB8biBhfG8gY3xlc3B8b21lfG8gb3xzZWd8c3RpfHIgYXx0b3J8ciBkfGVndXxhZGF8bG8gfG5kZXxyIG98dW1hfG90ZXwgZWx8YWxxfGxxdXx1ZXJ8c3BlfGEgaXx0YXJ8YnJlfHRyaXxodW18b2xvfGNpZXxyZW58ZW5hfGFyaXxtYXR8IGZhfG1lZHx1cmF8bGFyfGVkaXx2ZXJ8aXhpfMOhIHB8aWJyfGd1cnxpbnR8cGVufHJvdHxhIGZ8Y2FjfHMgZnxpbGl8cmlvfG1hIHxhIHZ8IHZpfHJpbXxsZW58aXRhXCIsXG4gICAgXCJsaXRcIjogXCJhcyB8aXIgfCBpcnxlaXN8dGVpfCB0ZXxzIHR8b3MgfHVyaXx0aSB8dXMgfGlzIHxpZWt8IHBhfGFpIHwgdml8dmllfHR1cnwga2l8cmkgfMW+bW98IHR1fCDFvm18aWVufMSXcyB8acWzIHxhbGl8YWlzfG1vZ3x2aXN8IGthfGxhaXwgbGF8aW5pfGkgdHxzIGl8cyDFvnxzxJkgfCDEryB8aXPEmXxlbmF8IG5lfCBwcnwgYsWrfCBqb3xwcml8a2llfCB0YXxrdml8bmFzfCBzdXxla3Z8bWFzfGd1c3xixat0fHRpbnxpc3Z8cyBzfG9ndXxpc2l8bcSFIHxtbyB8YW50fCBhcnxzIGt8YW1hfGthaXzFq3RpfHMgYXxzIHZ8YWNpfCB0aXxzIG58IHNhfHMgcHxva2l8Y2lqfGluxJd8YXIgfHZhbHxtcyB8dGFpfGpvIHxpIGJ8IG5hfGdhbHxzYXZ8a3VyfGF1c3xtZW58cmlufCBhcHxpbcSFfG1hIHxzdGF8xJkgxK98aW5hfGkgcHxpbW98bmltfGkga3wgbnV8aW1hfG90aXxtaXN8IGt1fGpvc3xseWd8ZGFyfGnFoWt8amUgfCBhdHx0YXN8a2FkfHIgdHx0xbMgfGFkIHx0aWt8aSBpfG7El3N8YXJifGkgdnxpam98ZWlrfGF1dHxzIGJ8IMSvc3wgcmV8aWFtfHNpbnxzdW98IGJlfGlzdXwgdmF8bGkgfHN0eXxhc2l8dGllfGFyYXxsaW58aXPEl3xpIHN8xIUgaXxqxbMgfCBseXwgZ2F8dm8gfHNpIHxyIHB8dHVvfGFpa3xyaWV8IG1vfGRpbnxwYXN8bW9rfGlwIHxpIG58cmVpfHlixJd8bW9zfGFpcHxyIGx8bnR1fMSvc3R8xK8gdHxneXZ8IGnFoXxudGl8dHlifMWzIGl8cGFnfGtpYXxraXR8ZXMgfHVvdHwgc2t8amltfHRpc3wgb3J8YXVkfHl2ZXx2ZW58bcWzIHxhbHN8xbMgdHxuYWN8YXZvfGRhbXzEhSBrfGkgYXxzIGp8b2plfGFncnxrbGF8Z2F1fG5lZ3xuacWzfG8ga3xlZ2F8aWtpfGF1Z3xlayB8dGF0fGllxaF8dGFyfGlhIHwgxaFpfGlvc3zFoWthfHN2YXwgdG98dGF1fGludHxzYXV8dXRpfCBhc3xpbyB8b2dhfHNhbnxtb258b21pfGtpbnxpdG98cyBnfG9tZXxyIGp8IHZlfGF0eXxraW18bnQgfGlhaXxsc3R8IGRhfGrEhSB8bWlufHIga3xvIHR8bnVvfHR1IHx2ZXJ8a2FsfGFtIHx1c2l8byBufG8gYXx5bW98dHltfHbEmSB8YXRpfCBqaXxvIHB8dGltfMWzIG58cGHFvnx0ZXJ8cyDFoXwgdnl8YWx0fGtzbHxpbmd8xbMgc3xvbWF8xaFhbHxyYW58ZSB0fCBuaXwgxaFhfGF2YXxhdml8bmllfHVvbXxpcnR8ZWxnfGphbXxpcGF8a2nFs3x0b2t8ZWthfHRvc3xvamF8a2lvfGVueXxuYW18cyBkfG5kaXxhbW98eXRpfGdyaXxzdsSZfCBneXxsaWV8xJdtaXxhdHN8eWdpfHNvY3xzaWV8b2NpfHBhdHxjaWFcIixcbiAgICBcInVtYlwiOiBcImt3ZXxva3V8YSBvfCBva3xuZGF8IGt3fCBvbXxkYSB8d2VufGUgb3xhIGt8bGEgfGtvIHwgbHl8ZW5kfG51IHxrYSB8byBsfG9rb3xtdW58b211fHVudXxrd2F8d2EgfCBrb3xhIHZ8byB5fG9tb3xtb2t8YWxpfCB2eXxla2F8b2xvfGkgb3xvc2l8IHlvfGx5b3xtd2V8c2kgfG9rd3x3ZSB8bG8gfGl3YXxvIGt8aSBrfGxlIHx0ZSB8YSBlfGV0ZXxnaSB8a3V0fHNva3xvbmd8aXNvfCB5YXx2byB8YW5nfCBleXx3ZXR8YXRhfGEgeXxvIG98eW9rfG9mZXxmZWt8a3VrfGVsYXxhIGx8aWxvfCB3b3xvd2l8bmdhfGnDsWd8a3VsfG9rYXx2eW98dWxpfHUgZXwgdmF8bGkgfMOxZ2l8a2FsfHdhdHx0YSB8dSBvfGVjaXxuZ2l8b3ZvfHllIHxzbyB8IGxpfG9jaXx5byB8d2nDsXxuZGV8Z2EgfGluZ3wgbmR8aWxpfG5nZXxjaSB8ZXllfGFsYXx2eWF8ZSBrfGtvbHxpc2F8YSBhfGxvbXxsb258Z28gfGF2b3xha298b3ZpfHBhbnwgb2x8dWthfG5nb3xseWF8dGkgfG8gdnxha3d8eWFsfG9sd3x1dGl8aW13fGVsaXxhbG98Z2UgfHVuZ3wga3V8YSB1fGxpc3wgYWx8b25qfGF0aXx3YWx8YWxlfGUgbHxzYSB8aSB2fGFuZHwgb3Z8IHlpfGlrYXx1a3d8ZWxlfGxpbHx5b3N8aGUgfCBvY3x5b3Z8aWhhfGlrd3xvbWJ8dmFsfGxpbnxsaW18YWhlfGFwb3wga2F8IHllfHlvbXwgdm98bGlrfGkgbHxrb2t8d2F2fGFrYXxjaWh8byBlfHRpd3wga2V8eWkgfGkgd3xhbWF8ZSB5fGxvZnx5b3d8eW9sfCBla3xrb3Z8b2xlfHZha3x2aWt8dGF2fG9td3xhIGN8dXBhfCBlbHxpbGF8IGxvfGFzb3xzdSB8ZSB2fGx5dXxhdmF8w7Fnb3xsd2F8IHdhfGdpc3xnb2x8IGNlfHRpc3xhdmV8IG9ufCBlc3xwbyB8d2lsfHZhIHxlc298a3VwfGNvIHwgbGF8eWFtfCBha3x3YW18aXlvfGVrd3xlIGV8aSBjfHRhdHxpIGF8YSBufHlhaHxla298bHdpfGl0YXxsaXR8IGVjfGt3aXx1cGl8aSB5fGVwYXxrYW58a2l5fG5qYXxkZWN8YXNpfGUgdXx5YXZ8YXN1fG1ha3xsYXB8eWltfHR5YXx2b3N8a2FzfGNpdHwgaGF8bGVsfHUgY3xhIHd8ZW1ifHUgeXxvbGF8eW9ufCBvc3x3aW58bHllfCBjYXxleW98IHVrfCBjaXwgb3d8IHl1fGF5aXx2ZWx8bGl3fGhhc3xpdGl8c2lsfCBldHx5dWt8byB3fHVtYnx1bHV8eWEgfHdpIHxhbmp8a2F0fG5ndXx3b218byBhfHV2YXxlc3V8dXN1fG1ib3wgY298IG9mfG1hdHxvIGN8Y2EgfGNlbHx2aSB8dSBsfGJhIHxrb258bWJlfHdpd1wiLFxuICAgIFwidHNuXCI6IFwiIGxlfGxlIHxnbyB8IG1vfG5nIHwgdHN8IGdvfGxvIHwgYm98eWEgfHdlIHwgZGl8Z3dlfCB5YXxvbmd8bmd3fHNhIHxvbG98ZWxvfGEgYnx0c2F8dHNofCBlIHx0bGh8YSBsfG8gdHxlIHR8YSBnfGUgbXx3YSB8YSB0fG8geXxlbmd8bmEgfGUgbHwga2d8d2FufGtnb3xtbyB8byBufHRzZXxhIGt8IHRsfGV0c3xhbmV8IGJhfGRpdHxtb258ZWxlfGh3YXxzaHd8bGEgfGthIHxhIG18bmVsfCBuYXwga2F8ZSBkfG8gbHwgbyB8byBtfGJhIHxzZSB8ZSBnfGUgZXxib3R8YSBkfCBhIHxkaSB8IGdhfG90c3x0bGF8b3RsfCBzZXxsb2x8byBifHRob3xzbyB8bGhvfHRzb3xvIGd8YW5nfGdvdHxlIGJ8Z2EgfGxlbHxzZWd8byBlfGl0c3xnb2x8b3NlfGhvIHxvdGh8bGV0fGUgb3xsaGF8ZWdvfGFiYXxoYWJ8ZSBrfGFub3xsb3N8YSBufCBubnwgbWF8ZWthfGcgbHzFoWhhfHTFoWh8a2FufGFsb3xvbGF8bGhlfGVsYXxha2F8c2VufGdhdHx0c3d8a2dhfCBudHxtb2x8byBhfG5uZ3xvIG98byBrfGFnYXxhdGx8byBzfGJhdHx0bG98YWdpfHlvIHxsZW58ZyB5fGVkaXxlIHl8IHRofGcgbXxkaWt8dG8gfHRpcnxlIG58IGphfGEgYXxtZWx8byBkfGFuYXxpcmV8ZyBrfHJlbHxzd2V8IHlvfGJvbnxnYWd8bGVrfGUgc3xtb3R8a3dhfGkgbHwgdGV8YSBzfGhlIHxhZ3d8YXRzfGl3YXxpIGt8aXTFoXxvbmF8bm8gfGEgZXxtYWl8YW55fGxhb3xpa2d8c2hlfG50bHxsd2F8ZGlyfGcgdHxsb258YWxlfCBzYXxhbyB8aGVsfHNoaXx0bGV8IHdhfHVtZXxsb2d8andhfGl0bHxwZSB8aGlyfCBqd3xub258aXRpfGEgeXxzZXR8aG9rfGlyYXwgdGl8b2RpfCBtZXxnaSB8ZSBqfHRla3xldGx8YSBwfGtvIHxhdGh8YWxhfGhvbHxib2R8dGV0fG1vZ3xoYW58bnlhfCBtbXxnIGd8bmFnfGkgdHxhZGl8IGxvfG9hZ3xpIGJ8bm5hfCBrb3x0aGV8bGFufHJlIHx0aHV8d2VufGhvdHxueW98aHV0fG8gaXwgbmV8cG9sfG1lIHx0dW18b3BlfGFtZXxnYW58ZW1vfG9yZXx3ZWx8bnRzfG9rb3xva2d8aXJvfHJvIHx0aGF8ZWx3fGFtb3xnb3J8aW5nfGphbHxpc2l8bmFufG9nb3wgaXR8amFhfHNpIHxvZ2F8aGVvfGdvbnxkaXd8cGEgfG9wYXwga3d8bGF0fGFyZXxibyB8byBqfCBrZXxrZSB8aWxlfGdpc3xvIGZ8cmFnfCBwaHxib2t8YWFrfGthcnxyd2F8bnllfGcgYXxhdMWhfG1va3xhZ298b2t3fGhhZ3xhdGV8YXRvfHV0b3xnd2F8bW1lfCBmYXxmYSB8IG9wXCIsXG4gICAgXCJuc29cIjogXCJnbyB8IGxlfGxlIHwgZ298YSBnfGxvIHxiYSB8IGRpfGthIHxvIHl8eWEgfCBrYXwgeWF8bmcgfCBtYXxhIG18IG1vfCB0xaF8ZWxvfGV0xaF8ZSBnfGEgbHxvIGx8IGJvfGEga3xhIGJ8ZSB0fG5hIHxvIHR8dG9rfHdhIHxlIG18YSB0fCBnYXxsYSB8YW5nfCBhIHwgYmF8IHNlfG1hbnx0xaFlfG9rZXxvIGt8xaFhIHxrZWx8ZGl0fHTFoWF8dGhvfHdlIHxlbGV8YSBkfG8gZ3xvIGF8YSBzfG8gYnxnd2V8ZSBkfGhvIHxvIG18ZWdvfGUgbHwgbmF8dMWhaHwgdG98xaFvIHzFoWUgfG9rb3xnYSB8ZGkgfCBvIHxvbG98IGUgfGxldHxvbmd8Z29ifCB5ZXxvYmF8YWdvfCB0bHx0xaF3fG1vIHxlIGJ8cmUgfGcgbHxuZ3d8YWJhfHTFoW98c3dhfMWhaGF8YW5lfHRsYXxoYWJ8byBufG9uYXxpdG98ZWxhfCBrZ3xvZ298IHRofG90aHx3YW58ZW8gfGUga3wgc3d8bG9rfGtnb3xsb2d8eWUgfG8gZHxhIG58b2xhfGcgb3xlIHN8c2V0fGhsb3xrb2x8c2UgfCB3YXxsZWx8YW8gfGVuZ3xvIHN8xaF3YXxtb2x8IHRzfGV0aHxuZXR8YW5vfCBianxhIHl8byBlfCBrZXx0aHV8aHV0fMWhd2V8Z2UgfGl0xaF8bGVnfHJlbHxhbG98dG8gfG9obHwgZ2V8bW9nfGthbnxlIGV8aXJlfG5hZ3xrZSB8ZWJhfGFrYXxwaGF8Z2FnfGJvdHxvIHd8YWdhfGEgYXxtb3R8YXJlfG1va3wgeW98Z29yfG9rYXxrbyB8Z29ufG5vIHxvcmV8YW5hfGFnd3wgd298Ym9ufGJhdHxsd2F8dHNlfGJqYXwgcGh8ZGlufHlvIHxlIHJ8xaFlZ3xlIHl8YXRofG55YXxnZXR8bGFvfHNhIHx3byB8IHJlfHdhZ3xvZGl8IHNhfHNlYnwgbWV8dXTFoXxvcGh8bWVsfGl0aXxrZ2V8YXRvfGthcnxvIG98xaFvbXwgbGF8byBmfHBoZXxlZGl8aGlyfGFsYXxwb2x8bGF0fHXFoW98aSBnfGEgcHxnIHl8dGhlfCBmaXx1bWV8d2VsfGJvcHxoZWx8ZW1vfCBkdXxpbGV8Z3dhfGJvIHxhbGV8dGxlfGx3ZXxsZWt8YmFufHRhIHwgbG98bG9ufG8gxaF8ZGlyfG1hZXwgbW18dGxofGdvZHxwZWx8YSB3fHdlZ3xla2F8ZWx3fGF0xaF8acWhb3xhZW18xaFoaXwga298Z2FtfHJ3YXxtbW98Ym9pfGUgbnxudGx8cGFufGFtbXxpIGx8aSBifGhsZXxobGF8bGVifCBhbXzFoW9ufGpvIHxsZW58aSBzfGtvcHxyZXR8Z2VsfGluZ3xvcGF8eWVvfGR1bXxzZW58ZSBhfGFwZXxhc2V8a3dhfGxlZnxtYWx8YW1vfG9nZXxiam98b2lrfG1vbnxrZ2F8b2tnfGEgZnx0c2h8Ym9ofHV0b3xpa2F8YWhsfGphIHxhZGl8acWhYXxnYWJ8aG9tfGFib1wiLFxuICAgIFwiYmFuXCI6IFwibmcgfGFuIHxhbmd8IHNhfGluZ3xzYW58IG1hfCBwYXxhbmV8cmlufG5lIHxhayB8aGFrfCBoYXwga2F8biBzfCByaXwga2V8bmdhfCBuZ3xtYW58aW4gfGxhbnxhIHN8YXJhfG1hIHwgamF8biBwfG4ga3wgcGV8ZyBzfGcgcHxwdW58YXNhfHV3ZXxnYW58biBtfG5pbnxzYWx8cGFufCBsYXxhbHV8aXJpfHNhIHxsdWl8amFufGFkaXxhIG18YWR1fHVpcnxyYSB8eWFufG1hZHxrYW58d2FufGR1d3x1ciB8dGFufGcganxhbm18d2UgfCB0dXxubWF8aWthfGF3aXxuZ2V8YWggfHR1cnxpaCB8YmFufGthIHxlIGh8IG5lfG4gbnxlbiB8bnRlfHVuIHxuZ3N8ZW5nfGFudXxiZWJ8YXlhfGFuaXxhbmF8aWFufGEgcHxhbGF8YmFzfG5hbnxnc2F8bmdnfHV0YXwgZGF8Z2FyfGFrYXxlYmF8ZGEgfGFwYXxhc2l8YW1hfGxpaHxhaGF8IHdhfHRlbnwgdXR8IHRhfGEgbnxlYmV8YXJlfCB3aXxoYW58YWplfGtlYnxvbml8bmlrfGVudHxha2l8dW5pfGF0YXx3aWF8aWFkfGcgbnwgcHV8amVyfGVyb3xyb258YWFufGsgaHxzYWp8ZGlufHNha3xhIHR8bnVzfGRhbnxuIHd8cGVufHVzYXwgYmF8bmdrfCBwaXxhbnR8c2FtfGUgcHx0YXd8biByfGF0ZXx3aSB8bmVufGkgbXxlZ2F8bmVnfGl3YXxwYXR8YXR1fGUgc3xhbWl8aXB1fGcga3xpbmF8bWFyfGthdHxrYWx8YWdhfHNhcnxyYW58a2lufHBlcnxnIHJ8bmRpfGFyZ3xhciB8a3NhfGUgbXxyZW58bnlhfGFsIHx0YXR8aWRhfGVsYXxoIHB8YWtzfG50dXxuZ3V8YWRvfGxha3wgbnl8b2xpfGF0IHx3ZW58ZXAgfGkga3wgc2V8ZG9zfGggc3xuIGx8ZGFkfGdrYXxla2F8YSBrfHJlcHxlZGF8biBofHBhcnx1cGF8ZW5hfHN3YXwgc3d8IGlufG5heXxld2F8dW5nfGVyYXxhbGl8YSB1fCBtdXxlaCB8bmlwfHIgcHxlIGt8biB0fGsgcHxyYXN8aSBufHVrdXxuIGl8d2FofGVyaXxnIG18cGFrfG4gYnxyIG58YXlvfG5kYXxtYWx8bWkgfHVtIHxkaWt8b3MgfG9zYXwgbWl8eW9tfG5hIHx0ZWh8YXdlfGsgcnxsYXJ8Y2FyfHRhaHxzaWF8ZyBofHRpIHwgaHV8dXQgfGh1a3xrdW18c3RpfGV3ZXx0dWt8IG1lfHJnYXxwaW58aCBtfCBzdXxnaSB8YXJpfG4gZHxhIHd8dGEgfHVhbnxnYXd8Z2VufGggcnxvbiB8d2FyfHR1dHxsYWh8cGFnfGdheXxyIG18biB1fGFkYXxpcmF8YSBifG5naXxlbmR8a2V3fGcgdHxtaW58Z2dpfGdkYXxqYWd8YXMgfHJhcHxhZ3V8IGFufGUgbnxuZ2R8cyBrfGlsYXxldGFcIixcbiAgICBcImJ1Z1wiOiBcIm5hIHxlbmd8bmcgfCBuYXwgcml8YW5nfG5nZXxubmF8bmdufGduZ3xnZSB8c2VufGEgcnwgbWF8IHBhfCBzaXwgdGF8IGhhfHJpIHxoYWt8YXBwfHRhdXxhayB8YXUgfGRkaXxhIHR8YXNlfGVkZHxhbGV8YSBufG5hcHxnZW58bGVufGFzc3xwYSB8ZSBufGFpIHxyaWF8ZW5ufGVnYXwgcnV8dXBhfHJ1cHxpYXN8YSBhfGluZ3xpbm58YSBzfHB1bnxuZ2l8bmlufGUgcHxpbml8bmFpfGdhIHxsYWx8Z2kgfHNpbnxwcHV8YXJlfGFlIHx5ZSB8IHllfGFuYXxnIG58c2VkfGFkYXxsZSB8IGFzfGkgaHxhIHB8YW1hfGcgcnxpIHJ8bWFufCBzZXx1bmF8YXJhfHJhIHxkaSB8c3NhfHJlbnxhIG18cGFkfGUgcnxpbGF8YmFufGFzYXwga2V8c2FufGRpbnxlIGF8dXJhfCBsYXxhbmV8IGRlfG5hc3xlIHN8aSBhfGlwYXxwYW58dSBufGFubnxpIGx8IGFkfGRhIHxhbGF8YWppfG9sZXxhdHR8IHB1fCBlIHxvbmd8aSBzfCBiYXxwdXJ8YWdhfGxhaXxpIHB8bGFufGcgYXxuZ3N8c2FsfG9sYXxnc2F8ZyBzfGEgYnxpIG58cHBhfHJpcHwgd2V8YSBrfGcgbXxhc2l8d2VkfGFra3xtYXN8aSBtfHJpbHx1IHJ8cmVnfGcgcHwgcGV8dW5nfGdhcnxuZWd8c3NlfCBwb3xlIG18ayBofCBhcnxwYXN8IG5lfG1hcHxpYW58IHRlfG5hcnxwb2x8ZXR0fHJhbnwgamF8YmFzfGViYXxqYW18YmVifGVuYXxwYXJ8IGFsfHNpYnxlYmV8bmdrfHVydXxrZWJ8IHNhfGFpbnx0dHV8IG1vfGFrYXx1bm58YWRkfGliYXxzYSB8Z2FufGdrYXxuZW58YmJpfGkgdHwgYXR8YXR1fGthbnxuYW58dWFufGxlYnxydXN8ZGUgfGUgZHx0b258YXRhfHR1IHxzc2l8cm8gfGUgeXxjZW58a3VufGF3YXxlbGx8IHdhfGsgcnxtYWt8d2EgfHV3ZXxpcmV8ZWJifGdhZ3xhcGF8c2FlfCB0dXwgaWF8dHRlfG1hdHxzaW18IHRvfGEgZHxvIHJ8dGEgfG5hdHxlY2V8dHVyfGxhIHxpZSB8ZGVjfGtvIHxrZWx8IGRpfCBodXxuY2F8Y2FqfHBha3xyZWx8bWEgfGx1IHxnIHR8Ym9sfHVrdXxlIGV8dGVyfGphanx0dGF8d2UgfGJpcnxkZWd8aHVrfGUgaHxkYW58dXJlfGJhd3xrb2x8cml0fGtrb3xlbGV8YXJnfHJnYXxsbHV8b2UgfGxpbnx1c2V8YXJpfGF1d3xwYXR8bXVsfGVsb3x1bGF8aXRpfGdhdXxhbiB8dSBwfG5nYXxnIHl8YSBofGVra3xzaWx8a2EgfGUgd3xhZGV8YW5jfGlnYXxzaXB8dGVufGEgeXxlIHR8IG1lfG5yZXxhamF8amkgfHJla3xhIHd8ZGRlfHBlcnxpa298c2lrXCIsXG4gICAgXCJrbmNcIjogXCIgYSB8cm8gfGJlIHxuesmZfHllIHxhIGF8IGhhfCBryZl8YWJlfGFra3wga2F8esmZIHxhZMmZfGEgbnxhIGt8a2tpfGhha3xtYmV8IGxhfCBhZHxuZHV8IG5kfHdhIHxiZW58ZW4gfG1hIHxkyZkgfCB5YXxvIGF8yZliZXzJmSBhfGdhIHxlIGF8yZlnYXxsYW58yZluYXxsYXJ8YXllfGFyb3xraW58aW56fHJkyZl8YXJkfGFuYXx5YXl8IGdhfMmZbGF8a8mZbHxqaSB8YXdhfCBtYnxiZWp8ZWppfGvJmW58IGJhfGFuIHx1cm98ZHUgfCBuYXwga3V8YW56fGTJmWd8bsmZbXxrYWx8IG7JmXxlIG18bmEgfGdhbnwgZHV8IHNofHNoaXxhbWJ8biBrfCBzdXxhcmF8dSB5fCB0YXxzbyB8YSBkfGthbXx3byB8IHllfCBzYXxlIGh8YSBzfHN1cnxhc298YXUgfCBhdXxpd2F8bnlpfGt1cnxhIGx8IGRhfGthcnwgYXN8ZMmZYnxpeWF8a2l3fG8ga3xvYmV8ZSBzfGFkYXxhbWF8YW5kfHUgYXxhYSB8dGEgfGltYXxuIG58bGEgfMmZd2F8bmdhfCBjaXxiYSB8IGFifCBuenzJmWfJmXwgZmF8yZluZHxhdGF8bmRvfHlhIHx0yZkgfG56YXzJmSBufG5kaXxhIGd8aW4gfG5hbXwgZnV8yZkga3xheWF8YSB0fHTJmW58YSBifHTJmWd8cnUgfHVydXxpbmJ8YW0gfGUga3xhbCB8aWRhfG1nYXxhYXJ8YSBofGJhYXzJmSBzfG5hYnxkyZl3fGR1bnxhc2F8bnlhfG93dXxnYWR8dGF3fG8gd3xnyZlufGEgeXxrYXR8ZGFtfCBzyZl8byBofMmZcmF8ZSBufGF3b3xhZGV8yZlta3wgd2F8IHdvfGFtZ3xkyZlufCB0yZl8YSBmfGFsYXxpIGF8esmZZ3xvIG58dW55fGlnYXx6yZlufMmZbGl8d3VyfHUga3xvIHN8d2FufHphIHxkaW58dXR1fGUgbHxzYW58aSBrfHV3dXx3dSB8YXd1fG4gYXxvbiB8ZGUgfGRhIHxuYmF8bWthfHlpIHxnYXl8dGFtfCBuZ3xsYWF8Z2lufGF6yZl8YmVtfGdhaXx0YWF8aWJlfHJhZHxhZGl8ZnV0fCBtyZl8d293fHdha3xhbGl8a3VufCBhbnxtyZlyfG8gdHx5YWJ8bmFkfGFpbXzJmWdpfGkgbnwgYXd8bGl3fGNpZHx1IHN8ZWTJmXxhdMmZfGFueXxkbyB8YXB0fGxrYXxhbGt8ZGFyfHJ0YXxiZWR8dHUgfGVsYXxuZMmZfHV3b3xnYWx8eWlyfHd1bXxuIHl8YXlpfG4gZHxtbWF8esmZYnwgeWl8bmFufGx0yZl8bG11fGlsbXxtYXJ8YmVsfHJhanwgaWx8ZXJvfG0gYXx1dMmZfGVuenxpcm98YWx3fHVtYXx1bW18IHVtfGUgZ3xob3d8a2thfG8gZnwgbnl8IGhvfGZ1d3zJmSBofGFuZ3x0aW58esmZbHxvIGd8ZW1hfMmZbiB8bm8gfGEgaXxhIG18d2FsfMmZbnl8aXdvfGxpbHzJmWTJmXzJmSBmfHJ0yZl8aGkgfGRpeXxtdSBcIixcbiAgICBcImliYlwiOiBcImtlIHwgbmR8IG1tfG1lIHwga2V8ZSB1fG5kaXxvIGV8IGVtfG1tZXxkZSB8ZW4gfGUgbnxvd298IGVufCBvd3x3byB8aSBlfG1pIHx5ZSB8ZW1pfG55ZXwgdW58ZSBlfGVkaXxlbmV8IGVrfHllbnxlbnl8IGVkfGUgbXxuZW58dW5lfGFuYXxuIGV8ZSBvfGUgaXwgeWV8IHVrfGV0IHxuIG58ZWtlfG5hIHxlIGt8IG1ifGVtIHxuZSB8IGlkfCBlc3x1biB8a3B1fGVkZXxpZXR8bmRvfCBua3xvIGt8ZGkgfGtwb3x1a3B8ZGlkfGFtIHxhbiB8a2llfG5hbXxrZW18ZXNpfG8gdXwgbnR8aWR1fGVtZXxvIG58dCBlfG5vIHx5dW58bW8gfCB1ZnxobyB8bW1vfG55dXwgaW58byBtfGtwZXxvIG98c2llfG9ob3wga3B8ZG8gfGRpbnxpZSB8b25vfGtwYXxtIGV8cmkgfG5rcHxkaWJ8b24gfGUgYXx1a2V8IGtpfGJvaHxhIGt8IGV0fHBvIHxpZGF8ZHV0fG0gdXxrZWR8ZGVkfCB1Ynwgb2Z8b25kfHJ1IHx1cnV8cHVyfGluIHx1dCB8ZHUgfGVrb3xhIHV8aW5hfCBvdHxtYmV8biBvfGJldHxpbnl8bWFufCBha3xvcCB8aWRpfGlrcHxpIG98ZWR1fGtvbnxhZGV8b20gfCB1c3x1YW58d2VtfGEgbXx1d2V8IHV3fHB1a3xhayB8b2RlfHJvIHx0IG18YSBlfG9yb3xhIG58biBrfHUgb3x0byB8dGUgfGJvIHxha3B8dWZvfG9rIHxkaWt8cGFufG1ib3xiaW98aSBtfGlkZXxpbml8ZnVyfHVyaXxiYW58b2Z1fHVib3xuIGl8byBpfHV0b3xpc298ZG9tfG9tb3xlbWF8ZGl5fGZlbnwgbnd8ZGlzfCBueXwgaXN8bmkgfHVzdXxuIG18dSB1fGZpbnx0b218ZXRvfHBlbXxlZCB8bSBtfGlib3xvdG98byBhfHN1YXx3ZWR8bndlfG0gbnwgdXR8bWRlfGR1ZHwgZWJ8YXJhfCBhc3xpIG58b2tpfCBvYnxudGV8bW9rfCBpa3wgYW58a2FyfG0ga3xvIHl8dCBrfCBvbnxpIHV8bndhfG4geXxhc2F8YW1hfHJlIHx1Zml8dWthfGlvIHxuZWt8aSBrfCBvcnxwb258dG9wfHN1bnxpb258c2UgfGFoYXx0IG98ayBufGUgeXxlcmV8IGVmfG1iYXxtYWR8aXN1fCBtaXxrb3J8cmEgfGlhbnxpIGF8a2EgfGEgYXxrIG18a28gfGRhIHx0IGl8ZW5hfG9iaXwgZXl8aGEgfGRpYXx0aSB8YWJhfHVrIHx1IG18ZCBlfGRlbXxzYW58YSBvfCBzZXxwYSB8IGFifHRvZHxuIHV8cCBtfHVkZXxmb2t8ayB1fGVmZXx1a3V8bnRpfG5rYXxpYml8c29ufGhlIHxwZSB8bnRvfGRha3xhIHl8IG9kfG5kZXxleWV8YW53fG5kdXxtYnV8c28gfGViaXxiaWV8bmRhfHNpbnxtZWR8dHUgXCIsXG4gICAgXCJsdWdcIjogXCJhIG98IG9rfCBtdXxva3V8bXUgfHdhIHxuZ2F8IG9ifGdhIHx0dSB8bnR1fGEgZXxuYSB8YndhfGEgYXxhbmd8cmEgfGFiYXwgbiB8YmEgfGEgbXx3YW58YSBufCBuZ3wgYWJ8bGkgfG9idXx1bnR8YSBrfGVyYXxpYnd8ZGRlfG9iYXxhIGJ8dSBufHphIHxsYSB8bXVufGJhbnxhbGl8a2EgfGVtYnxpcml8YnVsfGF0ZXxtYmV8aSBtfCBla3x0ZWV8ZWVrfHVsaXwgYnV8dSBhfGVkZHxzYSB8IGt1fGFudHxhbmF8ZWtpfHUgYnxiZSB8ZGVtfCBlYnxhbWF8biBvfCBvbXxpcmF8b211fCBraXwgZWR8eWUgfGFsYXxhbXV8IGFtfGUgb3xnd2F8bm5hfCBlcnxrdWt8eSBvfGt3YXwgZW58b2t3fGVlcnwgbHl8aW56fHVsYXxrdXN8a2lyfHUgZXwgYmF8IGVtfGVyaXwga3l8YW55fG9ubnwgd2F8IHllfGdnd3xpbmF8a29sfG4gZXxhd2F8IGJ3fHV5aXx1IGt8ZWthfHlvIHxid2V8b2xhfG8gZXx1c2F8byBvfGt3ZXxtdXN8eWlufGJhbHxpIGV8dSBtfG5naXxlIG18YmlyfHJpenxlcmV8cmkgfGViaXxrdWx8YWdhfG56YXxrdWJ8ZWt3fCBlZ3xrbyB8YSB5fHUgb3x3ZSB8a3V0fG1hdHxlIGx8ZSBlfGEgbHxhYW58Z2VyfG5vIHxrYW58c2lufG5rYXxnaXJ8dXNvfCBhdHxhIGd8aXphfGdhbnxueWl8emVzfHVrdXx3byB8bmdlfHppYnxpc2F8aXppfHlhIHxlZ2d8dWZ1fHJpcnxsaW58d2FtfHdhbHxlYnl8YSB3fGkgb3xiZWV8b3plfGVzYXxldGF8aWtvfGVid3wgbWF8YWtvfGJvbnx0dXV8a2lufHVraXxkZSB8emkgfGt1Z3x5ZW58aW5vfGUgYnxvYm98YWthfHVsdXwgdGV8bmUgfGx3YXxtYSB8eSBlfGx5ZXxrdXl8bnNpfGkgeXxnaSB8dXR1fGx5IHxpbXV8ZSBufHRhYXxhc2F8ZW5rfGt1IHxvIG58byBifHNvYnxzaSB8dW5hfGJ1bnx1c2l8c2FufGUga3wgYWd8dWthfHVnYXxhdGF8IG9sfHJ3YXx3ZW58aW5nfHdhdHxraWt8byBrfCBieXxueWF8b25nfGt5ZXxieSB8a3lvfCBib3xld2F8eWFtfGJ5ZXx1Yml8bmdvfGtpc3xhbml8Ym96fGtpdHxpIG58IGF3fGt5IHwgYWx8c2lifG11a3xhd298dWtvfHVtdXxpYml8dW1hfGFmdXxvbHd8ZWt5fHRhYnx1bmd8YnV5fGluaXx1dW18c2FhfHkgYXxsYWx8bWFnfHJvIHxlbmR8YWRkfGVubnxraWJ8ZW5zfG9sZXxuaSB8bWJpfG8gYXxpIGt8Z2F0fCBvZ3xtYXd8YW5kfGt1dXxhIHp8d2V0fGlnaXx5aWd8ZW11fCBuZXwgZ3d8YSB0fG56aXxuIGF8Z3lhfGFtYnx1d2F8dWx3fCBleVwiLFxuICAgIFwiYWNlXCI6IFwibmcgfGFuIHxldW58YW5nfCBoYXxwZXV8b2UgfGFrIHxvbiB8bnlhfCBueXx5YW58IHRhfG5nb3x1bmd8Z29ufG5hIHxhaCB8IHBlfHJldXwgbmd8IGJhfCBrZXxoYWt8bWV1fGtldXwgbWV8ZXV0fGF0IHx1cmV8IG5hfGJhbnxlZSB8IGRpfHRldXxyb2V8YXRhfCB1cnxhcmF8IGJlfHNldXxoYW58YSBofCBzYXxhbSB8ZHJvfGV1cnx1bSB8biBufHRpZXxpZXB8IG1hfCBsYXxhbGF8bmFufGcgbnx1dCB8b25nfGEgbnxlcCB8dGFufCB0ZXx0YXB8amV1fCB0aXxldWx8ZXVifGV1IHxldWd8IGRhfGV1bXxlaCB8ZXVrfHJhIHxpaCB8biBwfHVnYXxhaSB8biBifGEgdHxlIG58bGFtfGViYXwgc2V8YmVifG4gdHxhd2F8b20gfGEgYnwga2F8YXNhfCBhdHxldXN8YW5kfG55b3xvaCB8dGEgfGthIHxoIHR8biBrfHAgdXxtYW58ZSB0fG4gZHxuIGh8YW5hfGRhbnwgcGl8YXBlfGEgc3xuZXV8bmRhfCBzaXx0IG58YmFofHVsYXx5b2V8YSBrfGggbnxkdW18ZXVofGcgZHxlIHB8ZW5nfGUgYnwgbGV8IHBhfG5nc3xzaWF8cmFufG1hIHxnIGt8dW4gfCB3YXxuZHV8bGFufHVuYXxoZXV8dXJhfG4gbXxsYWh8c2EgfG4gYXwgcmF8YWJhfGcgc3xhIHB8aWEgfHVuZHwgamV8d2EgfGthdHxiYWt8ayBufGFuanwgZHJ8YXNpfCBidXxuZ2F8YmV1fHVueXx5YXJ8c3lhfGhhaXxrIG18ayB0fGsgYXxhbWF8YWFufGVrIHxhIG18b2sgfGcgaHxha2F8c2FifGcgcHxpIG58dXRhfGtoZXxoIHB8dWUgfHVrYXxoYXJ8YXJpfGRpIHxlIGR8IHN1fCB1bXx0IHR8YSBsfHlhIHxzYW58ZSBzfGdhbnx1a298Z3NhfGUgdXwgbGl8a2FufGJhdHxsZWV8YXJvfG90IHxuIHN8bGV1fGluYXxoIGR8bGFrfG9paHx5YXR8biB1fGtvbXxwYXR8YXRlfCBuZXxuZ2d8bmplfHRhd3xtYXN8dW1hfHNpZHxhbnV8dW11fGFqYXxzaSB8dWggfGggbXxyYXR8YXlhfHNhbHxldCB8c29lfHQgYnxuIGx8YWdhfHRhYXx1c2l8IGphfHV0ZXxtIHB8ZW4gfGRla3xpbGF8YSBkfHViZXxkaXB8Z2FtfGFueXxsaW58dGFtfGRvbnxpa2F8dXNhfCBqaXxyYWt8aWRyfGggYnxudXN8YWRpfCBhc3xkYXJ8YW1lfG4ganxuZ2t8bSBufGV1cHxoIGh8YnVlfGsgaHxodWt8ZXVqfGcgYnxnYXJ8ZWthfGdhaHx1cGF8aWxlfHNhbXwgYml8aCBzfCBkZXwgaW58bXVtfOKAkHRpfHQgaHwgaHV8ayBrfHBob3xkaWx8ZXDigJB8bnRhfCBnZXxnZXV8aCBsfGhhdHxpZSB8dGhhfHVzZXxpZWh8c2FzXCIsXG4gICAgXCJiYW1cIjogXCIga2F8bmkgfGEga3xrYSB8YW4gfCBuaXxrYW58IGLJm3xuIGt8IGxhfGkga3x5YSB8bGEgfHllIHzJlGfJlHxuYSB8IHllfGLJm8mbfMmbyZsgfGVuIHxsaSB8c2lyfMmbIGt8YW1hfCBtYXxpcmF8YSBkfHJhIHxhbGl84oCZYSB8IGRhfG1hbnxhIG58YSBifCBpIHxtYSB8IGvJm3wgd2F8Z8mUIHx3YWx8bcmUZ3xhbmF8biBufCBiYXwgamF8yZRyyZR8IG1pfCBryZR8IGvigJl8IG3JlHwgam98IHNpfG1pbnxpeWF8ZGFufGxlbnxpIG184oCZaSB8aW4gfGvJlG58a28gfGF3IHxkZW58IHNhfCBvIHwgbuKAmXxhcmF8YsmbIHxpIG58amFtfMmUbsmUfCBuYXzJm3LJm3xhIHN8aSBqfGFuaXxuIGJ8YSBtfGkgZHwgZsmbfCB0yZt8IGFufG9zaXxqb3N8YSB5fGvJmyB8YSBsfGlyaXwga298IGRpfMmbIGJ8YWRhfGlsYXzJmyBtfGkgdHwgZmF8bsmUIHwgZGV8IGhhfGFzaXx0yZsgfGFyaXxhIGp8cmF3fGEgdHzJmyBzfGFsZXxhIGZ8dGlnfMmbbiB8YXlhfGRhbXxhIGl8aSBifHNhcnxzaSB8cml5fMmyYSB8biB5fG51IHxpbm58ZSBrfMmUbiB8csmUIHxhbmd8YSB3fG8ganx3IG58bm51fGvigJlpfG50aXxuybJhfGFkZXxhYml8YmlsfGFsYXxoyZRyfGthbHxoYWR8aWfJm3xpIHN8YSBhfG1hZHwgYSB8YWdhfHUga3xrYWJ8YSDJsnxhYmF8IHRpfG9sb3wgaMmUfG8gYnzJmyBqfGkgZnwgdGF8yZQga3xhYXJ8YmFhfMmbIG58buKAmWF8a3VufHVndXxpybLJm3xkacmyfG4ganxr4oCZYXxhIGh8csmbIHxhdGl8yZQgbXwgc2V8IGPJm3zJssmUZ3xiyZQgfCB0yZR8aSB5fGxhbnxpIGh8IMmyyZR8dMmUbnxkb258bsmbIHxpbsmbfGdhIHxpIGx8ybLJmyB8aWxlfCBmb3xvIGt8yZsgbHxubmF8aWxpfHVuIHxnyZRufG1hYXxmyZtufG4gZHxhbnR8biBpfGFheXxnbyB8ZGEgfCBqyZt8dSBifHJpIHxyyZRufGFrYXxsYWt8yZRuybJ8ZSBtfMmUIGJ8bmlufG53IHxjyZsgfHcga3x5yZRyfG4gb3xvIGZ8bmdhfGpvIHxvIG18bmVufG7igJlpfG9uIHzJmyB0fCBrdXxvIGx8aWdpfMmyyZtufGFuYnxmyZsgfMmUIHN8IGLJlHxuIG18ZSBifGFmYXxua2F8biBmfG5tYXwgZml84oCZdSB8yZQgbnwgybLJm3xmYW58aSDJsnx0aSB8YSBvfGRpbHzJmyBkfHV5YXwgc8mUfGFnb3zJmyB5fGUgZnzJm23Jm3xtyZtufGFqdXxlIGR8YsmbbnwgasmUfCBmdXx0aWx8YmFnfGZ1cnxuIHR8dXJ1fGthcnxhdMmUfGJlIHwgZOKAmXwgZHV8ZOKAmWF8b21hfGxvbXwgdSB8IGRvfHJpd3x0YWF8dyBsfG3JmyB8Z8mbIHxpbcmbfG4gd3xpaXJ8bm5pfGlpbXxhbXV8c28gfGJhbHwgybJhfCBi4oCZfGd1IHzJm8mbcnzigJlvIHxpd2F8biBzfHdvbHxlbGV8ybJhblwiLFxuICAgIFwia21iXCI6IFwiYSBrfCBrdXx5YSB8bGEgfGFsYXwgbXV8IGtpfGEgbXwgbyB8dSBrfG5pIHxvIGt8IG5pfGthbHwga3l8bXUgfCB5YXxsdSB8ZHlhfCBkeXxhIG98YW5nfGt5YXxhIG58dG9rfGkga3xvc298c28gfGt3YXxuZ2V8eGkgfG5hIHxlbHV8bmdhfCBrd3x3YSB8IHdhfGEgZHxodSB8a3V0fHRodXx1a2F8b2thfG11dHwga2F8YSBpfG1iYXx1dGh8a2EgfGdlbHxiYSB8dSBtfHUgeXxrdSB8ZW5lfHUgbnxnYSB8a3VrfGJhbnxpeGl8aSBtfGUga3x3YWx8b2tlfCBtYnxraWt8a2VsfG5lIHx1IHd8ZWxhfHV0b3xpIHl8YW5hfCBuZ3xpaml8YSB5fGtpdHxtYSB8IGppfG5kYXxuZ3V8eW9zfGt1bXx1bHV8amkgfGkgZHxpc2F8dW5kfCBpdHxhbmR8b25nfCBtd3x1IGl8aWJhfGlrYXx3ZW58IGRpfHRlbnxpbHV8aWxhfG5kdXx5ZSB8c2EgfGt1Ynxha2F8ZW5hfGFtYnx1bmd8b2xvfGEgd3xuZ298a2lsfG94aXxsbyB8bXVrfGtlIHxzb2t8ZHUgfG1veHxhdGV8byB3fGt1c3x3YXR8dGEgfCB3b3xndSB8IHBofHUgZHxpdG98aXRhfGUgbXxhbHV8YSBqfGtpc3x0dW58dW1hfHdvc3xsdWt8byBtfHNhbnxtd2V8YSBhfGRpIHxpbW98dWxhfHdhbnxuaml8aml4fGkganxhIHR8a2lqfGlkaXxrYW58dWt1fGdhbnxrdWx8ZSBvfGt5ZXxhZGl8YXRvfG8gaXwgamF8IGl4fGRhIHxudSB8byBufHV0YXxrdWR8IHlvfGkgbnx1ZGl8a2kgfHN1IHx0YWx8YSB1fGx1bnxlIHl8dSB1fCB5ZXxqaW58aWtpfHBoYXxoYWx8d2lqfHdlIHxhIHN8bGFrfGlrd3xnbyB8dGVzfGZvbHxpdHV8ZW5nfCBrZXwgdWZ8eWVufGluZ3x5YXR8ZWxlfHV0dXxreW98byB5fGt3ZXxrd2l8dWJhfCBlbnxraWJ8aXRlfCB3ZXxkYWx8aSBvfHlhbnxnZSB8ZW55fHRhbnx1a2l8IGlrfGRpYnwgaW18ZXN1fGxvbnxrYXR8YXR1fGUgbnxqYSB8aSB1fGp5YXx2d2F8a2FtfGkgd3x1dGV8aW5pfHVrZXxsZWx8ZXNhfCBzZXx4aWx8IHV0fGZ1bnx1bmp8dWZvfG1ib3wgYSB8dXNvfGtpbXxtdW58dSBwfG5lbnx1a3d8dSBvfGkgaXx1bXV8aGFufGdvbnwgaWx8bGFufGF0YXx0ZSB8aSBhfCBrb3xqaWx8byBhfG5kZXxueW98ZWthfCBhdHxvIGR8ZXhpfGlqeXx0dSB8dXNhfHR1bHxrdXp8aWxvfGRpc3wgdW58dSBqfGRpdHx1ZnV8b3RlfCBpYnxpdnd8bXdpfCBiaHwgaGF8c2UgfGJ1bHx1YnV8d2lufCBvc3xpbWJ8YmhhfGFtYXwgdG98YXhpfGludXwgdWt8c2FrfGtvc3xib3RcIixcbiAgICBcImx1blwiOiBcImxhIHwgbXV8bmcgfCBrdXxhIGt8dHUgfG50dXxjaGl8IGNofGEgbnxha3V8ZGkgfG11bnxtYSB8dW50fGEgbXxnIGF8IGEgfCBuYXxlbGF8bmRpfGFrYXwgd2V8aW1hfGppbXxzaGl8ZWppfHUgd3xpIGt8IG5pfGluZHx3dSB8aSBtfGEgd3wgaW58YSBpfHUgbXxoaSB8YXd1fG5hIHxrdWx8d2VqfGxvbnxjaGF8IGphfHNoYXwga3d8YSBjfGkgbnxuYWt8YWxhfG11IHx3YSB8aW5nfGthIHx1bmd8a3VtfGEgaHx1bG98aGltfG1iaXxtdWt8dSBjfCB3YXxoYWt8aWt1fG5zaHx5aSB8IGhhfGJpIHxhbXV8aW1ifGV3YXx3ZW58a3dhfGFuZ3xhZGl8aWRpfGt1dHxlc2h8YW5hfGcgb3xpbGF8aGEgfHR1bnx1IGp8b25nfG5pa3xrdWt8dGVsfG92dXwgb3Z8dSBufGhhbnwgYW58YXRlfHZ1IHxhIGF8a2FsfHVsYXxrd2l8amFrfHUgYXwgeWF8YSB5fGlsdXx1IGt8IGhlfGhhbXxhbmR8dWNofGt1c3xvbmR8ZWthfGhlbHxrZXd8emF0fGRlbHxoaW58dWt1fG5kZXxpIGp8ZW5rfGkgYXx1a2F8ZW5nfGFjaHxsdSB8bmF0fG5qaXxvbmF8bW9ufGF3YXxua2V8dW1vfGluc3wgeWl8YSBkfGFtYXx1ZGl8d2FrfGkgaHxhdGl8aSBjfHdhbnx0YSB8YnVsfG13aXxhdGF8YXlpfCBha3x1bWF8aSB5fGluYXxpY2h8aXR1fHV6YXxrdXp8bmlufCBtd3xrdSB8a2lufHd1bnxzYWt8bmF3fG55aXxuaSB8YW50fG11Y3x3YWx8aXNofHUgeXxtdWx8a3VkfHdhd3x1a2V8d2VzfHVraXxpIGl8a2FtfHlpZHx3aXR8ZGEgfGFrd3xrYWR8eWFufCBkaXxrZW58dXRhfGlrYXxpbXV8aXlhfG5kYXwgbnN8bWJ1fHlhIHx1bGV8ZGlsfGloYXxrdXl8IGtvfGhpa3xlbml8YWhpfGt1aHxzaSB8a3VufHVzaHx1bXV8YXR3fGcgZXxoaXN8ZGlrfGppIHxhbnl8bGkgfCB5ZXxkaW18a29zfG9zaXxoaWh8d2F0fGV5aXxuZXl8IG5lfGFtYnx0d2V8dGlsfHdpbHxudSB8a3dlfHUgaHxldHV8dGl5fGphIHxuYW58YXNofG13ZXx3aW58d2FzfGhpdHxpdGl8IHd1fGl3YXx3YWh8bGVtfGcgaXx0YW18ZGlufGh1IHxoYXd8bmdhfGtheXwga2F8aGlkfHlpbnxpc2F8aWtpfCBtYXxqYXd8amlsfGNoZXxtcGV8b21wfGV0YXx0YW58amlufGhpd3x1c2F8dW1ifGVtZXxpbmp8IGhpfHVsdXx1YnV8bmFtfHdpa3xtcGl8IGRhfGFsZXxpdGV8dGFsfHR3YXxhaHV8ZW5kfG5rYXxtYmF8IGF0fGdhIHxtZXN8ZGljfGl3dXx5ZWp8a2FufGt1Y3xpeWl8c2VtfGVtYnxsdW58dW5hXCIsXG4gICAgXCJ0em1cIjogXCJlbiB8YW4gfCB5ZXwgZCB8IG4gfGFkIHx1ciB8IGFkfG4gaXwgcyB8YWdofGjMo2V8biB0fCBpIHxkYW58IHRhfCBsaHxsaMyjfGQgeXwgZ2h8ZWxsfG4gYXxyYSB8zKNlcXxpIHR8ZXFxfHMgbHxtZGF8ZXR0fG4gZHxkIHR8YWtrfGxhIHwgdGl8cXEgfGh1cnxkaSB8IGRpfCBhbXxnaCB8Z2h1fCBpc3x0IGl8ciBzfGluIHxuYWd8IG5hfGEgeXxpcyB8IHRlfGEgZHxuIG58eWV0fG4gZ3xsbCB8YXJhfGdoZXxtYSB8IHdlfCBhcnwgd2F8biBzfGwgYXxuIGx8c2VufGVkZHwgYWt8aXQgfGxpIHwgbGV8ZGQgfHVsbHxsbGF8IGlkfGQgYXwgdXJ8cmZhfGVyZnxrdWx8IHlpfCBrdXxhcyB8IHNlfCBtYXx6ZXJ8YW1kfGEgbnxsbGl8bGVsfG1lbnx0IGF8a3cgfCBkZXx0IHR8bnQgfGtrd3wgaW18ZmFufGEgaXxhIHR8ZWcgfG4gd3xpIGR8cSBhfHJ0IHxhciB8Z2FyfCBhZ3xlcyB8IHRsfGl6ZXxlbWR8aSB3fGkgbHxkZWd8IGFzfGtlbnwgZGR8biB1fGxhbnxkIGl8YSBhfHdha3x0dGF8IHRtfGQgdXxlciB8IHR1fHdlbXxhdCB8ZGR1fHRsZXx3IGR8biB5fHQgbnxzc2V8ciBhfG11cnxzIHR8dGFtfGdpIHwgdHR8eWVzfHdhbnxyIGl8dGltfG5hIHx3ZW58dHdhfGQgbHx0dHV8a2tlfHdhIHxuZW58IGl6fGlozKN8IHUgfHdpbnxkIG58YW1lfHMgZHxlbnR8ZMyjZXxoZWx8YSBsfGhlZHxlc3N8dCBkfG1nYXxhcnd8aSBufGjMo3V8bWkgfG1hZHxhZ2l8aSBnfGRlcnx1ZGR8cyBufHJ3YXzMo2VufGF3YXxpIGl8eWEgfGggZHxpeWF8cyB5fG1zYXx1aMyjfGlkZHx1cnR8dW4gfG4gbXxhbmV8ZW0gfHNlZnxsc2F8aWxpfHEgaXxxYW58bGVxfHNpeXwgaWt8ZWwgfGVycnwgaW58eWVkfCBsYXxhbnR8ZGVufHRhZ3xtYW58ZyB3fG1tYXx5ZW58bGVufHRtdXxpIHV8YXcgfHRhd3xyIHl8d2FkfGVkbXxzzKNlfGhsYXx0IGx8zKNlcnxhbGF8YXNpfGVmIHx1IGF8dHRlfGRkaXx0dHd8IGzDonxpbWl8bCBufHRpbHxhbCB8IG5lfGFtIHzMo3VkfCBscXxpZMyjfCB5YXxkZGF8zKNyzKN8bWVkfHJlbnwgc3N8Z3JhfG0gYXxnaGx8IGlsfGNodXx0ZW18IGxsfGtoZXx3YXl8ZWxufGxuYXxhbmF8dWtsfGR1a3xnaGF8bHQgfG5pIHxhbGx8aSBhfHRhbHxyYXl8bmVzfHMga3x0ZXN8bmF3fGVydHxpbGF8YXdpfGxxYXxrcmF8YW51fG51bnwga3J8aWtofGV6bXxuIGt8aXdlfGl3aXxpbWF8bmV0fHNlcnxzIHV8aXIgfHllaHwgYW58YXlhfGVod3xod2F8ZXNrfGRkZVwiLFxuICAgIFwid2FyXCI6IFwiYW4gfGdhIHxuZ2F8IGthfCBuZ3wgcGF8IGhhfGhhbnxwYWd8aW4gfGF0YXwgaGl8IGFufG1nYXwgbWd8IG1hfGthdHxoaW58YSBtfGF5IHxhIHB8eWEgfHVuZ3xhIGt8Z2FufG9uIHxuIGh8biBufHVnIHxuIHB8biBrfCB1Z3xuIG18ZGEgfGEgaHxuIGl8aGEgfGl5YXxhZHV8ZHVufHRhZHxhIG58IHRhfGFkYXxzYSB8IGl5fGFyYXwgbmF8IGRpfCBvIHxwYW58bWF5fGEgdHxhbmd8dWQgfGFuYXxuIGF8byBofG8gbnx0YXd8biB1fGFnc3x5b258eSBrfGFsIHx0YWd8YXNhfGthZHxvIHB8bWFufCBiYXxhd298Z3NhfHdvIHxhZyB8Z2FkfCBpbnxhIGF8YSB1fGluYXxzeW98YSBpfGEgc3xvZCB8aW5nfGFncHxhbGF8YXN5fG5nb3xuIGJ8YWxpfG5hc3xzYW58YWthfGEgZHxyYSB8ZyBhfHdhc3xnIGh8YWhhfGdwYXxhZ3R8dG8gfGFkIHxuIHR8dHVufG5nIHx1c2F8IHdhfCB0dXxpbml8aXJpfHRhbnxhaGl8a2FufHJheXxuYWx8d2FyfGRpcnxpIGh8Z2thfCB1c3xnb2R8ZyBwfHJpIHxhIGJ8bmFufGlkYXxvIGF8aSBufGJhbHx5IGh8a2FzfHVnYXxoYXR8dGFsfG5haHxhd2F8bmkgfHBpbnx1aGF8YnVofG8gbXwgYnV8Z3VkfGFiYXxhdCB8bm8gfCBwaXxiYWh8ZyBtfGlsaXxoaW18YXlhfGF0dXxkIGh8YWdpfCBzdXxhZ2t8bHdhfG1vIHxkIGF8YWx3fHN5YXx1bWF8YW5vfGludHxrYWx8dXBhfG1hZ3x5byB8byB1fGFnYnxuIGR8YXN1fGxpbnxhIG98IGtvfG9uYXxkaWR8aGl5fCBiaXxhcyB8IGtpfGwgbnxzdWR8aWJhfGhpIHxvIGt8a29ufGlyYXwgbGF8Z2JhfHBhbXxhbW98ZyBpfHRvbnxnaW58biBvfHVyb3xobyB8b3MgfGxhIHxnIGt8Z3R1fGQgbXxhdWR8YWFnfHQgaHxnaSB8IGd1fCBpZ3wgaXJ8biBnfGFidXxhaG98YW1pfCBzYXxhdGl8cGFyfGthdXxlcm58YmFufHRyYXxnYXJ8YW1hfHJhc3x5YW58YWR0fHR1bXwgdW58a2EgfGFnYXxhc298YXBpfGR0b3xraW58dGlrfG1pbHxpa298cmlufHNhbHxpa2F8YSBnfGlsYXxtYWh8bGlwfHJhYnxub258YWd1fGFrIHxkYWR8bGF1fGQgbnxrbyB8aXQgfHBha3xuIGV8IHRpfHVuYXxpIG18bGlnfHMgaHxiYXl8cm8gfHN1Z3xtYWt8biB3fG5hYXxnIG58IHNvfCBhZ3x5YWx8bnRlfGxhbHxiYSB8YXVwfGxhbnxpaGl8eSBifGthaHx0dWJ8YnllfCBhbXxhcml8eWVyfHVrYXxhbml8dXlvfG9oYXxpdG98biBzfHVwb3xlbnR8IHB1fHNhbXxpaW58dGlsfG1hdHxhdG9cIixcbiAgICBcImR5dVwiOiBcImHigJkgfCBrw6B8IGvDoXxrw6AgfHllIHwgeWV8IMOgIHx5YeKAmXxuaSB8IGLJm3xrw6FufGxhIHzDoW4gfHlhIHzJlGfJlHwgbml8IGxhfMmbyZsgfGvDoSB8bmEgfGEga3wgbcmUfGLJm8mbfG3JlGd8IGkgfG55YXzDoSBrfG4ga3zJlHLJlHzigJkga3wgbcOtfOKAmSBsfCBryZt8bcOtbnzigJkgeXzDrW4gfCBtw6B8w6Aga3zJmyBrfOKAmSBtfG1hIHwgeWF8w6AgbXwgd8OhfCBqw6B8IG7DrXwgYmV8YmUgfCDDsiB8aSB5fG7DrSB8aeKAmSB8IGzDoXxyYSB8aXlhfMmbcsmbfG7igJkgfG4gbnwgaMOhfCBryZR8dGUgfHfDoWx8w6BtYXxqw6BtfCB0ZXzDoWxpfGEgYnxpbWF8bWFufMOgIMOgfGjDoWt8ZSBrfGxpbXwga8OzfMmUbsmUfG3DoCB8biBifGkga3zJm24gfGfJlCB8ZSBifG4geXzJlOKAmSB8YW5hfOKAmSBufG/igJkgfCBzw6B8yZsgeXzigJkgc3xryZsgfMOgIGx8csmUIHxlIMOgfGvJlG58bGnigJl8w6BuaXxhIG18IGTDrXxhdyB8csmbIHzJlCBrfOKAmSBifCBiw6F8w6AgYnxhIMOgfMOha8mbfHJpeXxlIHN8Z2LJm3xuyZQgfGEganwgYsmUfCDDuSB8IHPJlHxiyZtufCBzw618w6AgeXxzw6ByfGUgbXxhcmF8a8OzIHwgZsOgfMOgIHN8IMOgbnxkw7pufCBsw6B8ZW4gfCBzw6x8YW7igJl8IGbJm3zDum55fCBkw7p8YSBufGEgeXzJm3lhfMOgcml8IGdifGluIHxryZtyfGthbnzigJkgdHxkw60gfCBjyZt8bmlufHlhd3wgdMOhfG5h4oCZfGUgd3xtw6xufMOsbmF8bMOhIHzJlG4gfCBtw6x8IMmyw6F8w6AgZHxhbGl8biBtfHnJm3J8IHnJm3xzyZRyfGfJlOKAmXwgdMmUfGFtYXxiw6FhfG5nYXwgZMOgfGkgbXxpIMOgfHPDrGd8w6xnaXx5yZRyfGfJlG58dyBufMOhYXJ8YSBkfCBzw6l8w6FuYXzDoG5nfGxlbnzDoCBpfHNpIHzJm3JhfMOhIGR8YsmbcnxhIHN8YsmUIHzDs2xvfGEgaHxpIGJ8yZQgc3zJmyBsfGRlbnzJm+KAmSB8w6AgdHzDoHJhfMmUeWF8Z8mUeXxryZt5fMOzZ298deKAmSB8YXlhfOKAmSBkfCBtw6F8IGTJlHxyYeKAmXxhIGZ8yZRueXzigJkgZnwgw7MgfGlsaXxzw60gfCBzZXxzZSB8a28gfGPDs2d8YSB0fCBjw7N8ZMOpbnxoyZRyfMmUyZRufCBoyZR8bWHigJl8bGFufGlrYXxpbmF8a8OgbHwgYSB8w6BsYXxuIHN8yZsgbXxpIHR8csmUbnx0aWd8w6BudHxhIHd8dMOhIHxlIG58aSBzfMOgIG58bm5hfCDDrSB84oCZw6AgfMOyIGt8YSBnfG4gZHxhbiB8Z2EgfGbJm258yZQgw6B8bGkgfGUgaXzJm8mbyZt8a8OpbHxhdGl8c2/igJl8IHnDqXxpIGZ8w6FraXxkw6BufCBr4oCZfGkgbnxr4oCZw6B8IG7DoHzDrSBpfMOtIMOgfGxpa3x5w6kgfGlnyZt8ZeKAmSB8ZSDDsnxnbyB8IGzJlHwgbmF8yZQgYnx3IGx8w60gdHxyyZTigJl8IGTDsnzDsiBifG1pbnx0aSB8w6BnYXxvdyB8biB0fG1hZHwgbWl8w7IgbHzDqWxlfGdpIHzJssOhbnzDrSB5fGtpbHxkyZQgfG5iYXxpIMmyfGd1IHwgd8OzfMmbbGl8aSBsfMO6cnVcIixcbiAgICBcIndvbFwiOiBcIiBjaXxjaSB8IHNhfGFtIHxzYcOxfGHDsSB8IG5hfCBha3xhayB8bHUgfGl0IHwgbWJ8IGFtfGFhIHxuYSB8YWwgfMOxIHN8w7F1IHxuZSB8bXUgfHRlIHxwcCB8IG5lfCBrb3xtIG58aSBhfCBrdXwgw7F1fCB0ZXwgbXV8YmFhfHUgbnxrbyB8dSBhfG1iYXxhIHN8ZSBhfGF5IHwgd2F8IGx1fCBkb3xhciB8IG5pfHUgbXxuaXR8b28gfMOpcHB8IHRhfG9vbXxndSB8dCBrfGkgYnxrdSB8dSBrfCBpdHzDqWV3fHLDqWV8IHLDqXx1IHl8eGFsfCBhYXxrayB8aSBkfCBidXxkb298aSB3fCBiaXx3YXJ8dSBjfCB5aXxhYXl8bGx1fCBsaXxmZWV8bG9vfCB4ZXwgeGF8IHlhfHRhYXwgZGl8eWkgfGFtYXxvbiB8dSBqfHl1IHxlZXh8ZXcgfCB5b3xib298eGVlfCBib3wgd8OgfMOgbGx8d8OgbHxtaSB8byBjfGlyIHxtw6tufCBtw6t8eW9vfHVsIHwgZ3V8bm4gfGVuIHxvb3R8IGR1fCBzb3xvb258ZSBtfGRhbXxlZW58dSBkfGkgbnx1eSB8ZWV0fGkgbXxhcmF8IGJhfGJ1IHxhIGF8YXRhfG9ra3xhYWR8IGzDqXwgYXl8anUgfGFkYXwgbmp8bmFtfHVuZHxheGF8ZHVufG0gYXxlbm58ciBufGFhcnxleCB8dGF3fGFsYXwgasOgfCBwYXxldCB8ZGkgfMOrbiB8YW5hfHJhbHxvdGF8ayBzfGF3ZnxuYWF8d2ZlfCBnaXx1IGx8aWdnfGFqdXwgZMOrfG1hIHwgYWp8dGkgfHUgdHwgc2V8YXggfGfDqWV8bWJvfCBqYXxvb2x8YmlpfGxpIHxhIG18IGtlfHNlZXxtIGN8IHllfGkgbHwgbmd8eWFtfG5ndXwgeXV8dyBtfGFuIHxrZW58biB3fCBsb3xpIHN8IG1lfCBkZXxtIG18aSB0fG9tIHx1IHh8biB0fCBhbnwgbWl8amFhfGxhYXxlZSB8Ym9rfGxpZ3xwIGx8biBtfHQgeXxnZ8OpfGsgbHxhIGx8bMOpcHzDoHBwfGrDoHB8YWFtfCBqw6t8YWF4fGVra3xuZCB8Z8Ozb3xld2F8bmRpfHRheHxhIGR8IGRhfGFtdXzDqWV5fGdpIHwgc3V8ayBjfG4gbnxsIGJ8byBufGsgdHxwIG58asOgbnzDoG5nfGdpcnwgam98YSBjfG4gYXxuIGN8w7Fvb3xpIMOxfGEgbnxrYWF8YmEgfG0gZ3xsZSB8dW5lfGthbnxlIGJ8bGEgfG5kYXxsZWV8aSBqfGFuZ3xhYXR8ayBufGV5IHxhbnR8aWlyfGEgeXxsIGF8ZSBufG5hbnxhw7F1fG1lbnxqIGF8b2sgfGsgaXxuZWV8bCB4fG9taXxpIGN8b3hhfGF3IHxnIG18ZG94fG50ZXxvcHB8dSB3fG5naXwgbW98b211fHkgZHxhcmV8aSBrfGFhbnxlbSB8ZHUgfGEgYnxuasOgfMOxIMOxfCB0aXxtIHJ8a3VufGRkdXxhbGl8IHPDq3wgbGF8ZWcgfCBtYXzDq3JhfG5nIHx4YW18bXVsXCIsXG4gICAgXCJuZHNcIjogXCJlbiB8dW4gfGF0IHxuIGR8IGRhfCBkZXwgdW58ZWVufGRhdHxkZSB8dCBkfHNjaHxjaHR8IGVlfCBoZXxuIHN8IHdhfG4gZXwgdnV8dnVufGVjaHxyZWN8aHQgfGVyIHx0ZW58IHRvfHR0IHwgc2l8IHJlfHZlcnwgZ2V8bm5lfHQgd3xuIHd8ZXR0fG4gaHxuIHZ8ayB1fG4gdXwgZWx8Z2VufGVsa3xsayB8dCB1fGllbnx0byB8Y2ggfCB2ZXx3YXR8c2llfHdhcnxoZXR8aXQgfCBhbnxuIGZ8bmVyfCBtaXwgaW58YW5ufHJuIHwgZsO2fMO2ciB8ciBkfCBmcnx0IHJ8aHRlfG9ycnxpY2h8ZsO2cnwgc2N8cmllfGVpdHwgb3J8ZGVufG5zY3xlZ2V8ZnJpfHJlcnwgc3R8dCBnfCB1cHxhYXJ8dCBhfG5kIHwgaXN8bGwgfHJyZXxpcyB8dXAgfHQgZXxjaHV8cnQgfHNlIHxpbnN8ZGFhfGx0IHxvbiB8dCBofG9vbnxjaGV8YWxsfG4gZ3wgbWF8cnJufG1pbnwgc2V8ZWxsfGhlaXwgbmF8dCBzfG4gaXxuIGF8bm4gfGxlbnwgc8O8fGluIHxyZCB8bmVufCB3ZXwgYml8biBtfGUgc3x2ZW58a2VufGRvb3xzc2V8cmVufGFhdHxlIG18ZXJzfG4gdHxzIGR8biBifGxsZXzDvG5ufHQgdHxuIG98aWsgfGtlZXxlIGd8dCB2fG4ga3xoZW58YXJyfCBkcnxoZWJ8bGllfGViYnxlIHZ8IGFsfGUgYXxsbHR8IGtlfGhuIHxoZSB8IHdpfGNob3xlaGV8b2sgfGFyZHxzdGF8bWVufGlsbHxnZWx8dHNjfCBva3wgZG98YW4gfGTDvHN8ZW5lfGVya3wgZ3J8IGTDvHx3ZWd8aWUgfGVkZXxpZWh8ciBzfHPDvG58w7xzc3x1bmR8cmFhfCBkw7Z8csO2ZnxkcsO2fHQgbXxhdHN8w7ZmZnxlIGZ8w7xuZHxlIHd8ZMO2cnxlbnN8IGdsfHJjaHxzaWt8aWcgfGt0IHzDtnJjfGVyZXxncnV8IMO8bnxmZiB8YWhufG5yZXxtaXR8c3QgfGFsIHxhYWx8aG9ufGVydHxrYW58bmF0fGRlcnxkZWV8ZW5ufHJ1bnwgc298ZWlofGxpY3xlaHJ8dXBwfGlodHxud2V8IGZhfHBwIHxla2V8ZSByfHVud3x0IG58dGFhfGh1cHwga2F8IGJlfGJidHwgd298cCBzfGVsIHxhcyB8dCBmfGJ0IHxlIGV8bmVlfG1hYXxodXV8ZXZlfG5zdHxzdGV8bWVlfCBuaXxpbm58biBufGVybnxpZXR8IG1lfGjDtnJ8ZGRlfGVudHxuIHJ8dCBvfMO2dmV8YXJlfGFyYnxpdGV8dGVyfGwgZHxhY2h8bmljfGJlaXwgYXN8bGFufHQgYnxkIGR8dCBpfGFuZ3xhbWV8cmJlfHV0dHwgdXR8cGVufCBlaHx1dWx8aWVrfGhyIHwgYXJ8ciB0fHVsIHxlIGR8YXJ0fG4gw7x8b25lfGVlcnxuYSB8bnRlfG11dHxldGV8w7xkIHwgbXV8w7zDvGR8bMO8w7xcIixcbiAgICBcInZtd1wiOiBcInR0aHxsYSB8dGh1fGEgZXxuYSB8aHUgfGtoYXxhIG18d2UgfGFuYXwgbXV8YSBvfGF3ZXxlbGF8bmkgfGFsYXxoYWx8ZWRpfHRvIHwgZWR8aXJlfGRpcnxlaXR8aXRvfHJlaXx5YSB8YSBufHdhIHxtdXR8YSB3fCB3YXwgbml8YWtofGFhbnx1IG98IG9ufG8geXxva2h8dXR0fGEgYXxoYWF8IG7igJl8d2FrfG5sYXwgd2l8YXJpfCB5b3wgc2l8IG9rfCBvdHxpd2F8a2EgfGl5YXwgc2F8bmUgfGFwb3xsYXB8YWxlfGxlIHwgb2h8b3RofGF0dHx0aGV8bXVsfGFrYXxvaGF8a3VufCBlbHxha3V8b25pfG13YXxoYSB8ZSBzfHVubHx0aGF8b3R0fGVsZXxldHR8ZSBtfG8gc3wgdmF8ZW5lfGUgbnxlIG98IHlhfG9vdHxoYXZ8YWRlfGloaXxpaGF8aWhlfGRlIHxvIG98ZSBhfGVsaXxoZW58YW11fGUgd3wgYXd8aGVsfGRhZHxyYSB8IGF0fHBvIHxpIG18bGVsfHdpIHxvIG58b3dhfGUgZXx1bGF8IGVufHRhIHxvIGF8aSBhfG1vb3x3YXd8aW5hfCBha3xvdGF8IG1vfHNhIHxhIHN8IHNvfGhhbnxhcmF8dmFyfCBraHxhIGl8cmkgfGF5YXxpdHR8YW5sfHJvd3wgbXd8IGV0fGkgb3xpa2F84oCZd2V8bnJvfGkgZXxu4oCZYXxoZXJ8bGFufG5ha3xzaW58bG8gfGVsb3x2byB8dSBlfGVyaXxu4oCZZXxvbGl8dGhpfHUgYXxh4oCZd3xpZGF8IGFofGEgdnxsaXd8a2FufGhpbXxsaWJ8eWFyfHJpeXxvbmF8b25yfGVyZHx3YWx8aGl5fGFhIHxpYmV8cmRhfHdhbnxiZXJ8ZXJhfGF2aXxoaXd8bm5hfGkgdnxod2F8bGVpfG1paHx2aWh8IGVwfGtod3xudHR8IG5hfGtvIHxpYSB8c2lrfGFoYXxpd2V8ZSBrfGh1bnx1bmF8bXUgfGF2b3xpa2h8bGFhfHJpd3wgbWF8IGFufGUgeXxrZWx84oCZZWx8aHVrfHUgeXxwaGV8a2hvfHBvbnxpIHN8bmlkfHVwYXxhdGh8aWxhfHlvdHxla298YWxpfHRla3wgZXN8IGl0fG8gZXx1a3V8d2lofG5hbnx0dGV8IGEgfG11cnzigJlhdHxpIHd8YW5pfHVsdXxuaWh8d2VsfGxpa3xpcmF8YW5lfGEgeXxua2h8c2FhfHJvIHxu4oCZaHx3aXJ8aSBufGlsZXxzb218dSBzfGhvcHxpbm58ZWkgfG9udHxrdW18eWF3fHNhd3xpcml8IGVofHRlbHx0dGl8b2xhfGFraXxtYWt8cmV0fHV0aHxubnV8YSBrfG51d3xhaGl8ZW5rfCBpbHwgbm58ZW5hfHZhIHx5b2t8dXRlfHNvb3wgcGl8bGFsfG9oaXxoaWt8bXBhfHV3aXxsaWh8aGFyfGtpbnxhcGh8bWEgfG9wZXxtYW58b2xlfHVtYXwgb298bXB3fCB24oCZfG5hbHxlaGl8bmlufHVuaXwgZWt8a2h1XCIsXG4gICAgXCJld2VcIjogXCJtZSB8YW1lfGUgYXxsZSB8d28gfGtwyZR8IGFtfMmWZSB8xpJlIHwgc2l8IG1lfCB3b3xiZSB8c2kgfCBsZXxzaWF8ZXNpfGxhIHwgbGF8ZSBkfCDJlmV8IGtwfHDJlCB8YcmWZXxlIGx8IGJlfGUgd3wgxpJlfGUgZXxkeml8bmEgfG55ZXxhIGF8IGR1fHllIHwgxYt1fCBuYXxkdWt8IGR6fHVryZR8ZSBzfG9tZXwgbcmUfGUgbnwgYcmWfGtwbHxueWF8Z2JlfGUgYnxlIG18cGxlfMmUa3B8yZQgYXxwyZRrfHdvYXzJlCBtfGvJlCB8ZXZpfG7JlCB8xYt1IHxrZSB8IG51fMmUIGx8bWVzfGF3b3wgbyB8aXdvfMmUbnV8ZSDJlnwgYWJ8eWEgfGVrcHxlIGt8yZR3yZR8dSBhfCBhbHxudSB8aWEgfMmWZWt8ZSDFi3xrcGV8yZRtZXxvIGF8aW55fHppIHxkemV8IG55fG8ga3xlbWV8ZcaSZXxvIG58aWFtfGVnYnxtyZRufGJsyZR8aSBufHfJlCB8YSBtfCBlxpJ8byBkfGFsb3xzaXd8yZTJlmV8bG8gfG8gbXxla2V8ZSBnfCBidXxlbnl8dWJ1fMWLdXR8yZQgc3xidWJ8bMmUyZZ8ZW7JlHxtZWd8YWtwfGFibHwgaGF8ZSB0fCB0YXwgZ298bWVrfGXJlm98dWtwfGxpIHxuyZRufHRvIHxhbnl8YSBsfGV0yZR8yZQgxpJ8IGV5fGUgaHxudWt8Z29tfMmUIMmWfMmUZSB8YsmUIHzJlm8gfGkgc3wgdG98YW7JlHxhIGt8yZRuyZR8ZSB4fGF3yZR8ZSDGknx0yZQgfCDGkm98bWV2fCBlc3wgyZZvfMmWZXN8IHhlfGkgd3x0c298IHfDsnx3yZR3fG3JlCB8aWHJlnxpIGx8IGFnfCBsaXxhzIMgfG8gxpJ8b2R6fGEgc3xhZ2J8eWVufCB0c3xidSB8IGhlfGJldHwgZ2J8byBlfGV3b3xhIGV8yZRuYXxpIGR8dGkgfGVsZXxkyZR3fCBrYXxpIGF8dXRpfHBlyZZ8dGEgfCBhbnxhZml8YSDFi3xhIMaSfCBhZHzGkm9tfHNlIHzJlHdvfHhleHxleGV8b21hfCBtYXx2aW58IGTJlHxvIGx8d8mUbnxleWV8YSBufGkgdHx2aSB8yZQgYnxzbyB8ZWR6fGdiyZR8yZZldnxhZG98IHNlfMmUIG58b3RvfGVuZXxlyZZlfHjJlCB8bmFufMmWb2R8IGFmfGJlbnx6aW58ZWUgfGRlIHzJlm9rfGR6yZR8Z8mUbXxhZHp8yZQga3x3b218IGfJlHx1d298aSDJlnxhIGR8IHZvfGEgdHxvIGd8aSBifCB4yZR8b8mWb3xpIG18ZSB2fGF0c3xvIMWLfHPJlCB8b3ZvfGkgZXwgYXR8dm92fG5lIHzJlCBlfGthdHxvIHN8IG5lfCBhd3xkYSB8d8OyYXxlxYt1fCBhc3xhc2l8IGVsfG8gdHx5aSB8IHPJlHxtZW58YSBifHplIHxtZWV8dW55fHRlIHxkb218IGFrfG1hbnxlzIMgfGkgb3xpZSB8YW5hfGF0YXx1aSB8YXjJlHx1IGt8yZZvyZZ8dHNpfGVtYXxyyZTMg3xkZWR8yZQgZ3xlbmF8IGVufGvJlG18bWV0fHUgc3wgZcmWfG9rdXxrdWl8bWV3fHhlbVwiLFxuICAgIFwic2x2XCI6IFwiIHByfGluIHwgaW58cmF2fHByYXxkbyB8YW5qfHRpIHxhdml8amUgfG5qZXxubyB8dmljfCBkb3xpaCB8IHBvfGxpIHxvIGR8IHphfCB2c3xvc3R8YSBwfGVnYXxvIGl8bmUgfCBkcnwgbmF8IHYgfGdhIHwgc3Z8amEgfHZhbnxzdm98YWtvfHByaXxjbyB8aWNvfGkgc3xlIHN8byBwfCBrYXxhbGl8c3R2fHN0aXx2c2F8IG5lfCBpbXxzYWt8aW1hfGpvIHxkcnV8bm9zfGtkb3xpIGR8YWtkfGkgcHxuamF8byBzfG5paHwgYWx8byB2fG1hIHxpIGl8IGRlfGUgbnxwcmV8dm8gfGkgdnxuaSB8cmVkfG9ib3x2b2J8YXZufG5lZ3wgYml8b3ZhfCBpenxvdmV8aXRpfGxvdnxraSB8amFufGEgdnxuYSB8IHNvfGVtIHwgbmp8YSBpfHNlIHwgdGV8dHZhfG9saXxib2R8cnXFvnxlIGl8IHJhfCBza3xhdGl8ZSBwfGFyb3xpIGt8IG9ifGEgZHwgxI1sfGV2YXxyxb5hfGRyxb58IHNwfGtvIHxpIG58IHNlfCBraXxlbmF8c3RvfGUgdnzFvmVufG5ha3xrYWt8aSB6fHZhcnx0ZXJ8xb5hdnwgbW98ZGkgfGdvdnxpbWl8dmEgfGtvbHxuIHN8IHogfG1pIHxvdm98cm9kfHZvanwgZW58bmFyfHZlIHwgamV8cG9zfGEgc3xlZ298dmxqfGplZ3wgc3R8aCBwfGVyIHxrYXR8xI1sb3xhdGV8YSB6fGVuanxuIHB8ZGVsfGkgb3xsamF8cG9sfMSNaW58YSBufGVkIHxzbWV8amVufGVuaXwgdGF8b2RufCB2ZXwgbml8ZSBifGVuIHwgbWV8amVtfGtvbnxuYW58ZWxqfHNhbXxkYSB8bGplfHpha3xvdml8xaHEjWl8cmF6fGFuc3xqdSB8Yml0fGljIHwgc218amkgfG5za3x2IHN8IHMgfG4gdnx0dm98ZW5lfGEga3xtZSB8dmF0fG9yYXxrcsWhfG5pbXxzdGF8xb5pdnxlYm58ZXYgfHJpIHxla298byBrfG4gbnxzbyB8emEgfGnEjW58c2tpfGUgZHwgdmF8byB6fGFjaXxjaWp8ZWphfGVsb3xkZWp8c2kgfG5qdXx2b2x8a2lofGkgbXxuc3R8a3VwfGtvdnx1xb5pfGxhIHxtb3J8dmlofCBkYXxoIGl8bGp1fG90cnxtZWR8byBhfHNrdXxydWd8b2RvfGlqb3xkc3R8c3BvfHRha3x6bmF8ZWRufHZuZXxhcmF8csWhbnxpdHZ8b2RpfHUgc3zEjWVufGJvxaF8bmlrfGF2bHxha3J8ZSBvfHZla3xkbm98b2xufG8gb3xvxaHEjXxlIG18dGEgfHZpxI18YmkgfHBub3zEjW5vfG1lbHxlbWV8b2xqfG9kZXxyc3R8cmVtfG92IHxhcnN8IGJvfG4gZHxlcmV8ZG92fGFqb3xrbGF8aWNlfHZlenx2bml8IGtvfG9zZXx0ZXZ8Ym5vfHXFvmJ8YXZhfHZlcnxlIHp8bGpufG11IHxhIGJ8dmkgfGRvbHxrZXJ8ciBzXCIsXG4gICAgXCJheXJcIjogXCJhcGF8bmFrfGFrYXwgamF8IG1hfGF0YXxhbmF8YcOxYXxhc2l8YXFlfGNoYXxha2l8w7FhcHxqaGF8bWFyfGF3IHxrYW58YXJrfCBjaHx1bmF8YXJ1fHBhd3x0aSB8amggfHBhdHxqYXF8cmthfCB0YXxhIGp8IGFyfGhhdHxhbWF8dGFrfCB3YXxhY2h8aXcgfGEgYXxhbml8YSBtfHNwYXxuYSB8a2FwfGtpIHx0YXF8cGEgfGphbnxzYSB8IHVrfHFlIHxraXN8a2FzfGhhIHxpbmF8bml3fG1heXwga2h8IGFtfGF0IHxhdGl8cGFufGkganwgeWF8IG11fGl0aXxrYSB8YXlufHQgYXxhcyB8YW1wfGNoIHxhIHV8YW4gfHBqaHx5bml8bXVufGnDsWF8dWthfGFqaHxydSB8dyBrfGhpdHzDsWFufGggYXxpcyB8aXNwfHFlbnxraGl8aXNpfGhhc3xlamh8ZSBtfHNpc3xhdMOkfG9xYXxuY2h8cnVzfGthbXxzacOxfGhhbnxtcGl8a2HDsXxxaGF8c2lufGFzcHwgaW58aGFtfCB1w7F8w7FhdHxoYcOxfHFhdHwgc2F8eWFzfHlhdHxpdGF8w6TDsWF8c2thfHRhcHxhc2F8a2hhfHNpdHx0w6TDsXx0aGF8YXJqfG1hIHxhIHR8dGEgfHRhc3xua2F8c3RpfGlyaXxzbmF8IGppfGEgeXxhcmF8cGFzfCBhc3zDsWphfHJqaHwga3V8IHV0fGhhcHx0YXR8a2F0fHRpc3xwaSB8YXBqfGphbXxub3F8YXlhfGkgdHxpIHV8dWtofHVyYXwga2F8IGp1fGFuc3xxYXN8dcOxanxhc258YSBjfG5pbnxhcWF8a2FqfG5hw7F8c2lwfGkgYXx1cyB8aSBtfGt1bnx3IHV8YW5jfGFwaXxpbm98aWxpfHV5YXxwYWN8dGFufGppbHzDsWEgfGxpcnx1dGp8dyBqfHMgYXxpcGF8Y2hpfGtpd3x3IG18a2FrfG11eXxwaXN8cmFrfGhhY3xpc2F8bmpofCBsdXxtYXN8YW11fGVuYXxuc2F8dyB0fG5hbnxhbGl8cyBqfGlua3x0YXl8IGEgfHVwYXx3YWt8YSBrfHdheXx3YSB8aW4gfCBheXx0YcOxfHMgbXxqYXN8bXAgfGx1cnxhbmt8a2h1fHJhw7F8aCBqfHQgbXxpcnV8ZXFhfGF5dHx5dCB8aGVxfGNoZXxhbnF8ZW4gfGxhbnxyaW58aXBqfGkgY3xtYXR8cXBhfGFxaHx0amF8YXdhfHVraXxrIGF8cWVqfGFuanxzYXB8cGFtfHVza3x5YXF8a2FyfG5pcHxsbHV8d2FsfHJ1bnx5bGx8IGFqfGxpbnxhIHd8YXlsfG4gbXxqYWN8aXNrfG5hcXxhc3R8aCB1fG5pIHxhdGh8YSBpfGF5a3xqaGV8YXFwfGgga3x1Y2h8aW5jfGh1c3xzYXJ8cyB1fHMgd3wgcGF8bmFwfGFwIHwgdW58YWsgfG4ganx0aXJ8IGFrfG5zIHxzIGN8dXN0fGFybXxhc2t8d2FyfHJpIHxtYW58cGl0fHFlcnxqdWN8c2lyfG4gd3xoaWt8aWthXCIsXG4gICAgXCJiZW1cIjogXCIgdWt8bGEgfHVrdXx3YSB8YSBpfGEgdXwgbXV8a3dhfGFsaXx5YSB8c2hpfGEgbnxhbWJ8IG5hfHNhbXwgcGF8dWxhfHRhIHxuc2F8ZnlhfCBub3xuZ2F8IHlhfG1idXxidSB8YXRhfCBpbnwga3V8YSBtfGxvIHxzZSB8bnNlfCBiYXxudHV8a3VsfG9uc3xhbGF8YW5nfGluc3xha3V8bGkgfHdhdHxtbyB8dHUgfGFsb3xhIGF8bmd1fGlsaXxub2t8aWthfG5hIHxuYW58YSBwfGluZ3xhIGt8IGFsfG11IHxndSB8byBufHNoYXwgY2F8aWxhfG9rdXxlIGF8aWt3fHlha3xrYSB8bGlrfCB1bXxhbmF8bGlufHlhbHxnYSB8IGNpfGFiYXxsd2F8a3UgfGlzaHwgZnl8dWxpfGEgYnx1IHV8dW50fGkgbnwgb258a2FsfGxpbHx1IHl8YmEgfGhpIHx1a3d8YW1vfHBvIHx1bHV8a2FufCBzaHxrdXB8a28gfHdlIHxhbmR8YSBjfGFrYXxsZSB8dSBufGNhbHxvIHV8aGEgfGlsZXxhbWF8dW11fGJhbHxrdXN8YWt3fHUgbXxtdWx8IGlmfG8gYXxrdXR8bnNofG8gYnx1bmd8YXBvfGUgbnxrdWJ8bXVufHVjaXx5byB8bWJpfG5rYXxjaXR8YnVsfCBhYnxhbnl8IGJ1fHBhIHxuZSB8dSBjfHUgYnwga2F8YWJ1fG5kdXwgZml8ZSB1fGEgZnx0b258IG5lfGFudHxubyB8aSB1fHUgYXxiYW58byBpfGNpbHxjaW58aWZ5fCBuZ3xwYW58dHVufGdhbnxuZGF8a3VjfGt3ZXwgbnN8byBjfG5nd3xvIGZ8YW5zfGZ3YXxhIGx8cGFtfHRhbnx0aSB8IGFtfGt1bXxrdWt8bGFufHUgc3wgaXN8d2lsfGR1IHxueWF8dW5kfCBpY3xlIGt8d2FsfGF5YXxiaSB8YmlsfHVidXx1c2h8ZndpfGludHxudGF8dXR1fHR3YXx3YWJ8YWZ3fGVsYXxvIG18dWtvfGFrb3wgdGF8bGFtfGFsZXxnd2F8d2lufHUga3xhcGF8bWEgfG9ua3x3YXl8a2FwfGkga3xpbWl8YSBvfHVwb3wgaW18aXdhfG1iYXxvIHl8bmdpfGljaXxwYWt8bHVsfGluZHwgbWF8ZSBwfGRlIHxuZGV8Z2lsfGUgYnxpdGl8dXRpfGlsd3xhIHN8aW1ifGRhIHwgbGl8dWthfGhpd3x1bW98cGF0fGFmdXxrYXR8aW5lfGVuZ3xmeW98YnVufCBhZnx1bWF8a3VmfGFsd3x0aWx8aXRhfGVrYXxhZnl8bWFzfGUgeXx0dWx8YnV0fG50b3x1c2F8a3dpfG11dHxpIGl8IGFrfCBhcHxib218dW13fHNhIHxvbnR8IHdhfGlsb3x1IGZ8YmFmfGZpa3xpbmF8a2FifGFub3xwYWx8dXRlfG5hYnxrb258YXNofGJ3YXxpZml8IGJvfCBid3xseWF8YXR1fHViaXxiaWt8bWlufGFpa3xjYWt8bmFrfG1lbnx1Ym98eWUgfGhpbFwiLFxuICAgIFwiZW1rXCI6IFwiIGthfGEga3xrYSB8IGxhfCBhIHxsYSB8YW4gfGthbnwgbWF8YSBsfG5pIHx5YSB8bmEgfGFtYXxhIGF8bHUgfG4ga3wgZGl8yZvJmyB8ZGkgfGEgbXxtYSB8IGLJm3wgamF8YW5hfGEgYnxha2F8YsmbyZt8bWFufGl5YXxhIGR8YXJhfGTJlCB8amFtfGFsdXxlbiB8YSBzfCBzaXwgc2F8IG3JlHxtyZTJlHxhbml8IHllfCBkyZR8IHTJm3x5ZSB8aSBzfGkgYXxkZW58IGJhfHJpeXx0yZsgfHNhcnzJlMmUIHxkYSB8IGFsfCBryZt8IG5pfGFyaXxpbGF8YSBqfCBpIHxhIHR8biBkfMmbbiB8ybJhIHxrYWt8cmEgfGFkYXzJmyBrfGkga3xpIGR8bGVufHUgZHxlbGV8bm5hfHNpbHxuIG58biBtfG9sb3wgc2V8IGJvfGFkZXxhYXJ8yZRkyZR8yZsgZHwga8mUfMmUIGF8YW5rfMmUbiB8IGZhfGZhbnxhIMmyfHNlIHxsYWt8bG8gfCBkYXwgbmF8Ym9sfGtlbHxlIGt8IHdvfGkgbXxheWF8IGtlfGtvIHwgYWR8IG1pfG51IHxiYWF8IHPJlHxkYW18bmRhfMmUbsmUfG3Jm258IGtvfGEgZnxhbmR8YWxhfMmbIHl8yZQgYnzJmyBzfGxlIHzJmyBtfGkgbHxpIGJ8IHdhfG4gc3xhIGl8IGRlfGluYXxsaSB8yZR5YXxtYWR8IG3Jm3xhYmF8IGxlfG4gYXwgaGF8YSBufMmUIHN8dSBsfG7JsmF8aGFufG4gYnxzyZRkfGTJlG58a8mUbnxryZsgfGF0YXxuyZQgfGthcnxkYW58aW4gfHUga3zJlCBtfGvJm2R8yZtkYXxpIGp8IHN1fG5udXxhIHd8yZQga3xua2F8bGF0fCBnYnzJssmUyZR8YWppfCBhbnxhIGh8bmlufG9sdXx1IG18a3VufGEgZ3xvbiB8YXNhfCBrdXxpYml8amlifGRvbnwgbMmUfGkgdHx3YWp8YsmbbnzJm25ufGJhbnzJlHLJlHx3byB8cmFufHNpIHzJmyBifMmbbsmbfMmbIGx8bWFrfHN1dXxlIG18aWkgfGkgZnwgybJpfGUgYXxvIG18ybJpbnxlbm58dXN1fGJhIHzJm2TJm3x5YW58dGFhfG5hbnx1IGJ8dSB0fCDJsmF8bmFsfG5iYXzJssmbIHwgybLJlHxsYXd8YXRpfG5hZHxyyZR5fGjJlHJ8YSB5fGlyaXxzaWl8IGjJlHxtaXJ8dGkgfGVuybJ8YsmUIHx1IHN8biB0fHUgeXxpbml8IHRlfHRhIHxrb2x8ZW5ifGF3YXxiYXR8IGZ1fG5raXxraWx8aWxpfCBkdXxiYXJ8yZsganxmyZtufGbJmyB8IGRvfCBkyZt8Z2LJm3xzdSB8dXVzfGFhbXwgdGF8YWbJm3xtYXl8bMmUIHxubml8yZRubnxsyZRufG1hZnxvIGF8ZSBkfCBiyZR8ZGlufHNhYnwgZsmbfMmUIGp8byB5fGkgd3x0YW58yZTJlHl8ZMmbyZt8YsmbZHxrYWR8bWlufMmUbHV8ZGFsfMmUyZRsfCB0yZR8yZTJlG58ZSBmfGJpeXxhbGl8ZSBifGvJlGR8dGUgfHdvbHxiaSB8ZSB3fCBtdXxpZGF8ZHUgfGFudHxuyZtufGTJmyB8yZsgYXxkYWhcIixcbiAgICBcImJjaVwiOiBcImFuIHxiZSB8IGJlfCDJlCB8dW4gfCBpIHxyYW58c3JhfHdsYXwgc3J8a3dsfGluIHxsYSB8IGvJm3xuIGJ8a8mbIHxuIHN8biBrfCBrd3wgbmd8biBufGzJmyB8YSBifG4gbXxsZSB8IG51fGEga3xudW58aSBzfCBhIHxtYW58biBpfMmbbiB8ZSBrfMmbIG58a3VufG4gyZR8bXVufCBuaXwgdGl8IG11fG5pbnxuZ2F8dGkgfCBuIHzJmyDJlHxlIG58yZQgbnwgc3V8Z2EgfMmUIGZ8IGZhfCBrdXwgbGl8ZSBzfHN1IHxhIG58YSBzfGEgyZR8yZsgYnxpIG58ZSBhfCBzyZR8d2EgfHPJlCB8aSBrfCBtYXwgbGV8yZsgaXx0aW58yZQga3xkaSB8IGF0fGF0YXx0YSB8yZQgbHxmYXR8IG3JlHxhdGl8bcmUIHxsaWt8YWt3fMmbIG18IHPJm3xsYWt8ZSB3fCBzYXxkyZsgfG5kyZt8bcmbbnxpIGJ8IG1tfCB5b3xpyZsgfGJhIHwgbmR8bnZsfCBudnwga2x8dmxlfHPJmyB8YSBhfCBtyZt8IGZpfGtlIHx1bmR8IHd1fMmbIHN8biBhfG1tbHxsacmbfG1sYXwga2F8aWtlfHlvIHzJlCB0fG5nYnxpIGF8ZSBifGEgbXwgYW58yZQgyZR8IGRpfCB5yZt8IHNpfCBib3xlIHR8bmRpfGJvIHwgeWV8byBufG4gdHxlIG18ZmlufGUgeXxuIGZ8c2EgfMmUIGJ8IGbJlHxkYW58biB5fGZhIHxpIGl8dW1hfHnJmyB8IGp1fCBueXzJlCBpfG5hbnwgbmF8a2FufMmUdW58IHRyfHd1bnwgYiB8IG8gfG4gbHwgYXd8YSB5fGIgYXwgd2F8ZsmUdXxpIGZ8yZsgYXxpbmd8Z2UgfHXJmyB8aSB3fGEgd3xuZ2V8a2x1fGthIHxnYmF8ZSBpfGF3YXxvIG18anVtfMmUIHl8yZsga3x3aWV8YSBpfGllIHwgZmx8ZSBmfCB3bHx0cmF8IGJhfGxvIHxsdW58IGFrfGFuZ3x5ZSB8IHdpfGUgbHwga3B8dWFufGkgbXwgdWZ8dXdhfG4gd3xzaWV8ZmzJm3xrcGF8YWzJm3xsdXd8Zmx1fG8gaXxrbGV8dWEgfCBkYXxueWl8bnrJm3x3dWt8yZQgc3x3byB8ZSDJlHxpa2F8IHdvfHdhbnxiyZQgfGlhbnwgYmx8d2zJm3wgYnV8YW56fG8gyZR8IGFmfGFjaXx1IGJ8YnUgfCB5YXzJmyB3fHVmbHxiyZRifHRlIHx6yZsgfMmUIGR8YSB0fGVsyZt8aSB0fGNpIHxudWF8ZnXJm3zJlGLJlHx1IGl8YW5tfGkgbHwgdyB8dyBhfCBiyZR8byBifGx1IHxzZSB8dSBtfGlsyZt8acmbbnwgamF8YSBqfGFmaXxpIMmUfG4gdXwgc2V8dW5tfG5kYXx5ZWt8YsmbbnxnYsmbfGVrdXzJmyBsfG5tYXxrYWN8dSBzfHNhbnxrbyB8byB5fG8gc3xhIGx8dSBufHNpIHxhbnV8YWthfGFueXzJmyBkfCBrb3xuIGp8yZQgd3x1IGF8ZmkgfCB5aXxhbnd8aSBqfHVrYXxmacmbfGEgZHxvIGF8bGVsfCBryZR8yZRsyZt8yZRuIHxhIGZcIixcbiAgICBcImVwb1wiOiBcImFqIHwgbGF8bGEgfGthanwga2F8b2ogfCBkZXxvbiB8ZGUgfHJhanwgcmF8aXUgfGFqdHxhcyB8byBrfCDEiWl8ZSBsfGoga3wgbGl8IHByfGVjb3xhxa0gfMSJaXV8am4gfGlhIHxqdG98ZXN0fCBlc3wgYWx8YW4gfCBraXxwcm98aW8gfCBrb3xlbiB8biBrfGtvbnwgdGl8Y28gfGogcHxvIGR8IHBvfGliZXwgYcWtfHJvIHx0YXN8bGlifGJlcnxhY2l8dG9qfCBlbnxhIHB8IG5lfGNpb3xlcmV8dGEgfCBpbnx0byB8ZG8gfG8gZXxqIGx8biBhfGogZHwgc2V8YSBrfGogcnxhbGF8aiBlfHRhanwgcmV8cmVjfGl1anxraXV8IHBlfG8gYXxpdGF8YWpufGFkb3xuIGR8c3RhfG5hY3xhIGF8bnRhfGxpYXxla3R8ZW5pfGlhanx0ZXJ8dWogfHBlcnx0b258aW50fCBzaXxjaWF8IGhhfHN0dXxhIGx8amUgfCBqZXxhbCB8byDEiXxuIHB8anRhfHR1IHwgcml8dmFzfHNlbnxoYXZ8aG9tfCBkaXwgaG98bnRlfGEgZXxhbGl8ZW50fCBzb3xuZWN8dHJhfGEgc3xhdmF8cG9yfGEgcnwgbmF8aWdpfHRpdXxzaWF8byBwfG4gbHxlZ2F8b3IgfCBhanxzb2N8aiDEiXxzIGx8b2NpfG5vIHwgcGx8aiBufGt0b3xldml8cyByfGogc3xvam58bGFqfHUgYXxyZSB8IGVnfGogYXxnYWx8ZXJzfGtlIHxwcmV8aWdvfGVyIHxsYW58biBqfHByaXwga3V8ZXJhfGlhbnxyaW18IGZhfGUgc3wganV8ZSBhfGlrYXxhdGF8bnRyfGVsIHxpcyB8dSBofGxpIHxpb2p8ZG9ufG9udHx0YXR8b25zfCBlbHwgc3V8Z28gfHVuIHwga2V8ZWJsfGJsYXxuIHN8b21hfMSJaSB8cmHFrXxrbGF8dSByfG5lIHxpbGl8acSdb3xvIHR8cyBlfHRla3xtZW58bmVufGogaXxuZGF8Y29ufGEgZHxlbmF8Y2V2fG1vanxpY2V8cmljfHBsZXxzb258YXJ0fGEgaHxvIHJ8cmVzfCB1bnx1IHN8Y29qfGUgcHzEnWkgfGZvcnxhdG98cmVufGFyYXxhbWV8dGFufCBwdXxvdGV8cm90fCBtYXx2aSB8aiBmfGxlbnxkaXN8aXZlfGFudHxuIHJ8IHZpfGFtaXxpxJ1pfHN0aXzEnW8gfHIgbHxuIMSJfHUgbHwgYWd8ZXJ2fHUgZXx1bnV8Z25vfCBjZXwgbWV8bml1fGllbHxkdWt8ZXJufCDFnXR8bGHFrXxvIG58bGFifG9sb3xhYm98dGlvfGJvcnzFnXRhfGltaXwgZWR8bG8gfGt1bnxlZHV8a29tfGRldnxlbmN8bmRvfGxpZ3xlIGV8YSBmfHRpZ3xpIGV8IGtyfCBwYXxuYSB8biBpfGthZHxhbmR8ZSBkfG1hbHxvbm98ZGVrfHBvbHxvcm98ZXJpfGVkb3xlIGt8cnNvfHRpIHxyYWN8aW9ufGxvanxqIGh8cGxpfGogbVwiLFxuICAgIFwicGFtXCI6IFwibmcgfGluZ3xhbmd8IGthfGFuIHwgcGF8ZyBrfCBhdHxhbGF8ZyBwfGF0IHxhcGF8IG1hfGthcnxsYW58IGtpfGF0YXxraW58cGFtfGcgbXxhcmF8dGFufHBhbnx5YW58IGEgfHBhdHwgaW58IGJhfGF5YXxuIGF8ZyBhfHVuZ3xyYXB8YW1hfG1hbnxnIGJ8IG5pfCBkaXxuaW58ZGlufG4ga3xhIGF8dGlufHJpbnxhIGt8YW1pfCBsYXx0dW58biBpfGFyaXxhc2F8bmdhfGl5YXxiYW58YXRpfCBtZXxuYW58IGRhfCBzYXwgbmF8dCBrfGdhbnxnIHN8YmFsfGV0dXxtYWd8YSBpfG1ldHxzYSB8bGEgfGFudHxrYWx8IGl5fGthcHxhIG58IG1pfGluIHx5YSB8YWthfHRhdXwgbyB8c2FufG4gZHxhdSB8bGF5fGFuYXxtYWt8eXVufG5hIHxpa2F8YSBtfGlwYXxyYW58YXR1fCBhbHxuIG58IHRhfHRpIHxpbGF8ZyBsfGFsaXxrYXl8bnNhfGFnYXxhIHB8aXRpfGcgdHxwYXJ8dSBtfGFuc3xudSB8YWwgfGcgaXx0IHB8aXdhfGEgZHxzeXV8dCBtfHNhYnxhbnV8dW4gfHVsaXxtaXB8cmEgfGFraXxhYmF8dSBhfG1hbHxhcyB8bWlsfCBpdHx1bmF8YmxhfGFibHxpdGF8YXdhfGthdHx0IGF8aWxpfGthc3xnIG58bGFnfGRhIHx0YXN8aSBhfHdhIHxuIGx8bGFsfGRhcHxtYXN8YmF0fCBwcnxhYml8YXAgfGEgYnwgZSB8bWlrfGFuaXxzYWx8bGkgfGFkIHwgYW58cmFsfGlyYXxnYWx8YSByfGxpbnxnIGR8bnRlfCBsaXxhbGV8a2FifGUgcHx1bGF8d2FsfGxpdHxudGl8cyBhfGxpcHxudGF8cHJvfHRlIHxpZSB8d2FufGFnIHx0dSB8dXBhfCB5YXxnIGV8dGVrfHVzYXxnIGd8YmllfG8gcHxpdCB8cHVufGlhbnwgYml8bGF0fGFrdXxiZSB8biBwfHNhc3xpYmF8eWF0fGFsdXx0dWx8ZSBtfGthbnxsIGF8bmFwfHQgaXxsaXJ8dSBrfGlzYXxwYWd8YWJlfGxlbnxlIGt8cm90fGVuIHxiaWx8bWFtfGtzeXxuZ2d8bGFtfHAgYXxpbHl8bGl3fGVrc3xvdGV8biBvfGdnYXx1IGl8ZW5nfGlwdXwgdHV8bHlhfCByaXxhdWx8cGFzfGRhbnx1cml8ZW1hfGxhYnx0YSB8bGFrfGFyZXwgYXJ8YWlsfHRhbXxvIGF8IGtlfHJpbHwgcGV8c2FyfCByYXxpbmF8YXNpfGthIHxhcnR8cGFrfHNha3xtaXR8cmVsfGkga3xnYXd8IHVsfCByZXxpbnV8aSBpfG11bnxhYnV8YXN5fG1iYXwgcGl8YWdzfG9icnxncGF8YSBvfGFtIHxuIG18bWVtfG8ga3xpc2l8IG11fCBudXxtaXN8bnVufGVyYXxuZGl8Z2EgfGFncHxhdW58bWFifGFubXxsdWJ8Z2xhfGUgYXxubWVcIixcbiAgICBcInRpdlwiOiBcImFuIHwgdSB8IHNofCBuYXxuYW58ZW4gfCBhIHxoYSB8c2hhfHNoaXwgaSB8ZXIgfGEgaXwgZXJ8b3IgfCBtYXxhciB8Z2ggfG4gaXxuIHV8YSBtfCB2ZXwgY2l8biBzfGhhbnx1IG58IGtlfGx1IHxtYW58IGx1fG4gbXx5w7QgfGEgdXx1IGF8biBhfHIgbnxhIGt8bWJhfGluIHxpaSB8IGhhfGt3YXxrZW58biBrfG5hIHxoaW58IG1ifGEgYXwga3d8biBufCBnYXxnYSB8Y2lpfGFnaHxhIG58YWEgfHdhZ3x2ZSB8YSBzfCB5w7R8bmdlfGJhIHxyIHV8dSBpfCBnYnxhbmF8IG9yfGEgdHxtYW98ciBpfGl0eXxtYSB8YW9yfGFubXxubWF8Z2VufG9vIHwgdGF8aXIgfHJlbnwga3B8aSBufGFuZ3xyIG18ZSB1fGdiYXwgbmd8ciBzfCBpYXxlcmV8dWdofCBpdHxpYW58ZG9vfGVzZXx1bWF8a3BhfCBsYXx1IGt8biBnfG5ndXxndSB8b20gfG91Z3xvbiB8b2wgfGEgaHxpb3J8IHRzfCBoZXwgbmV8dGFyfGggdXwga2F8bGEgfG4gdHxzZSB8ZSBufHIgYXxhIHZ8aGVufCBrdXxhaGF8bWFjfHlvbHxpIHV8YWNlfGdlIHxjZSB8IGRlfGlzaHx1IHR8IGlvfCBkb3x0b218aGkgfGEgZXx1IHV8byB1fGkgbXxpeW98aSBkfGJhcnxhdmV8dWEgfHUgc3wgdGV8aWdofGEgbHxlIGF8bSB1fGEgd3x1biB8biBjfG4gZXxuZSB8ZXYgfHIga3xpbmR8ZW5lfHNlbnwgaXN8bmRpfGtlcnxlcmF8IHRvfGEgb3xpbWF8dSB2fGEgZ3xwYWF8biBofCB3b3xkaSB8eWFyfHR5YXxhc2V8ZSBzfGRlIHxuIHl8ZWUgfGVuZHxoaW18dGVzfCBta3x1IG18a2EgfHR5w7R8IG16fHdvbnx1IGV8IHVtfHUgaHwgd2F8IG1pfHlhbnx0aW58cmFufGllIHxoaWV8YSBjfGhpcnxpIGF8ZSBrfGkgdnxtYWt8IGlufCB6YXxyIGN8bmVufGUgbHwgaWd8aSBrfGt1cnxuYWh8dHNlfCBpa3x2ZXN8ZW5nfHJ1bXxtem98bWVufHpvdXxpIGx8ZSBpfGEgZHxpIGV8aSBpfCB5YXwgdm98bWx1fMO0IGl8aW5qfG5qYXwgYXN8dm91fHVyYXxyb258Z2JlfCBpeXxyIHR8w7Ryb3xhIHl8b3J1fGUgZXwgenV8IHRpfHJhIHxuIGx8Y2kgfHUgbHx2ZXJ8a3BlfCBmYXx3YXN8IG1sfGUgbXxlbSB8aW8gfG1pIHxkYSB8Y2l2fG3DtG18YW50fHNlZXxpdml8d2FufHZpcnxuZGF8IGlqfHNvb3x6dWF8bHVufGVhIHx2ZWF8d2EgfMO0bSB8YXYgfGhpb3xha2V8YSBmfGlnYnxsIGl8dSB6fHIgbHx6YW58bnRhfGUgZ3xoZW18aCBzfCBtdHxkZWR8aWt5fG8gc3xyIGd8ZG8gfG5kb3xpaml8IGhpfGUgaFwiLFxuICAgIFwidHBpXCI6IFwibmcgfG9uZ3xsb258IGxvfGltIHwgb2x8IG5hfGxhIHwgbWF8cGVsfGVsYXxyaSB8YXQgfCBiaXxhaXR8bmEgfCB5dXxvbCB8Z2F0fCByYXxiaWx8IGthfGlsb3xtYW58cmFpfHQgbHxpdCB8ZXJpfG1lcnwgbyB8d2FufCBpIHxtaSB8dW1pfCB3YXxpbmd8eXVtfHRhIHx0IHJ8dGlufGV0YXxnZXR8bGdlfG9sZ3xpZ2F8IGlnfCBzYXxhcmF8ZW0gfHJhcHxpIG98YXAgfG5tZXxhbm18aW4gfGFpbnxhbiB8YSBtfGFudHxhcGV8bmFyfG0gb3xpIG58IG5vfGcgb3xnIGt8aSBpfGFzIHxpbml8bWFzfCBtZXxuIG98c2ltfHRyaXxrYW58a2FpfG50cnwgZ2F8IHN0fGEgc3wgcGF8Z3V0fCBoYXwgd298ZyB5fHl1IHxhIGx8ZyBzfGFtYXxtIG58b2sgfGcgd3x3b2t8c3BlfGEga3xpIGJ8aSBtfGcgbHxpIGx8c2lufHNhbXxwaW18bSBsfGthbXwgZ3V8bCBufGFtdHx0cGV8ZyBufCBpbnx0cyB8YSBpfG10aXx1dHB8aXNwfGtpbXxpdHN8IGxhfGlzaXxhaW18YXBpfGxvIHxvIG18ZyBifHRhaXwgZGl8YSBvfGRpc3xhIHR8cCBsfGVuIHxtYXB8dCB3fHMgYnwgbHV8bHVrfHNlbXxubyB8dGltfGxhaXwga298IGtpfGF2ZXxvbHN8bm9nfG0ga3xsc2V8c2F2fG5lbXx2ZSB8YSBwfCBmcnwgZW18bmltfHR1IHxpIHl8bmthfGV0IHxtIHl8IHRpfGcgdHxuYXB8ZyBwfHN0YXx0YXB8YXVufGEgbnwgdHV8dW4gfGFzaXxmcml8cGFzfG4gbXxtIGd8bCBpfGF1dHxhbmV8IHNrfGthdXx0IG58bnRhfHNlbnxuIHN8b2dhfGkgZ3xnIGd8bSBpfGtpc3xvIGl8IGJhfHRva3xvcyB8dXNpfG0gc3xuZ3R8YW5wfGEgd3xzIG58YSBofHMgaXxpa2l8aSBzfHNhaXxsIG18bnBlfGFyaXxvIGx8byBifGcgcnxpayB8dXRpfGl0aXxndGl8YWlrfHV0IHwgdG98YSBnfGlsaXxhIHl8IHBpfCB0YXxraW58bmkgfG4gYnxsaW18IHllfHlldHwgd2V8ayBifGluYXxnIG18dWthfHN0cnxpbnN8cmlkfGEgYnxhbnd8bnNhfG53YXxtIHd8bSBtfGRvbXxvdCB8aGFwfGlkb3xhdXN8aSB3fCBuZXwgc2l8biBpfHQgb3xkYXV8ZXNlfHJhdXxhbmt8c2FwfG8ga3xtIGJ8bmlufHBvc3xvIG58YW0gfGdvIHxzIG98cyBsfHUgeXxwaWt8dmltfGl2aXxlcyB8IGdvfG4gbnxrb3R8cm9ufHBsZXxnIGR8YSByfGt1bHxhbGl8c2t1fGFwb3xvbSB8ZyBofGwgbHxzIHN8dGkgfGxlc3x0IG18Z2F2fGVraXxuYWl8bWVrfGtvbXwgYXN8aW5kfG5kYXxpcCB8bGl2fHVsIHxhdGlcIixcbiAgICBcInNzd1wiOiBcIm5nZXxla3V8YSBufG50ZnwgbGV8ZSBufCBuZ3x0ZnV8bG8gfGxhIHxuZ2F8IGt1fGZ1IHwgbmV8byBsfGtoZXx0c2l8bmtofGxlIHxoZSB8dW50fGVsb3wgbG98c2kgfGVsZXxhIGx8bmkgfHVuZ3xtdW58bWEgfGx1bnxsZWx8d2EgfGxla3xub218IHVtfGVuaXxvbWF8IG5vfGt1dHxobGF8b25rfGEga3xlIGx8ZW50fGUga3xnZWx8ZWxhfGtvIHxlbGl8IGJhfCBsYXxwaGF8YXRzfCBlbXxvIG58YW5nfGVtYXxldGl8bmVsfG55ZXxiYW58dWx1fHV0c3xodWx8IG5hfGFrYXx0Zm98ZSB1fGxhbnxva3V8bG9rfHdvbnxraHV8ZXNpfGx1bHxhIGV8dWxlfGFsYXx1bXV8dHNlfGFraHx5ZSB8dmUgfGkgbHxuZWt8YW5hfGFuZXxsaWx8a3dlfGFwaHxuYSB8d2UgfGtlIHxhYmF8IHdvfG50aXxuZGx8YWxlfGkgbnwgeWV8YmEgfGlsdXxnZWt8Z2FufGxhYnxhbnl8aGF0fCBsaXx0aW58d2VufGdlbnxrZWx8bGVufG5kenxmbyB8YW5kfGxldHxla298ZSBifGx3YXwga2F8dGUgfHNldHxuZW18IGt3fG1hbHxrYSB8YW50fGFsdXxuZSB8cGhpfGluZ3wgdW58dSB1fCBla3xpc2V8dW5lfGUgZXxrdWx8bmFsfGxhbHxtcGh8byB5fHVobHxmYW584oCQa2V8aWxlfGkga3xrdWJ8dWtofGJlbnxrYW58YWtvfGEgYnxrYXR8ZWtlfGl2ZXwgdGl8c2VrfG5ha3xzaXR8c2VifHUgbHxhbG98eWVsfGtob3x3byB8a2hhfGxlc3xvIGV8bmd1fGt1c3xsb218aW5pfGlraHxlbHd8aXNhfHNhIHxmdW58ZSB3fGViZXxvIGt8amVufGlwaHxlbmd8a3dhfGFobHx1cGh8ZW1ifGJlIHx0aXN8bHdlfCBzaXxldGZ8aXN3fHVtYXwgc2V8ZW5lfHRhIHxuYW58IGltfGkgZXxlbmt8ZSBhfGFiZXxrdW58dW1lfGhha3xuZW58ZGxlfGFzZXxzZW58a3V2fHRlbHxlYnV8b211fCBpbnxsaW58c2VsfHRmd3xuaGx8YSBpfGUgaXxrdWt8dWJhfHRpIHxrdWZ8bWhsfGJvbnx1bGF8c2lufGludHxmdXR8ZHphfGxha3wgd2F8aW5kfGF2ZXxhbGl8eWVufGV0ZXx0byB8bmdvfHVzZXxrdWh8aG9sfHplIHxh4oCQa3xvbmF8YSBhfHNlIHxuamV8dW5kfHN3YXxsb258ZWtpfGlrZXxpIGF8bGlzfHRzYXxnYWJ8c2ltfGkgd3xpdHN8Zm9sfGUgdHxvIG18aGkgfG5kdnxwaGV8IHlhfG1h4oCQfHV0ZnxzaWt8bGl2fGJ1bnxjYWx8bnRhfGF0YXxnYWx8bWVsfHV0ZXx3ZW18Z2FwfGhhbnx1bnl8b2JhfGFsd3xpbGl8YSB3fG1iaXwgYnV8Z29ifCBhdHxhd298ZWt3fGR6ZXx1IG58ZW1wXCIsXG4gICAgXCJueW5cIjogXCJvbXV8IG9tfG50dXx0dSB8IGt1fGEgb3xyYSB8IG9ifHdhIHxvYnV8YXJpfGEga3xtdW58YSBufHVudHxtdSB8dXJpfG5nYXwgbXV8YWJhfHJpIHxhIGV8IG5hfGUgb3xneWV8cmlrfGhvIHxhIGF8aGFufGFuZ3xyZSB8Z2EgfGlyaXxid2F8b2t1fGFoYXxidXJ8IGJ1fG5hIHxla2l8a2EgfGlrdXxpcmV8dWdhfG5kaXx1c2h8YmFufGFpbnxlcmV8aXJhfHdlIHxrdXJ8c2hvfCBla3wgYWJ8bmUgfGluZXxhIGJ8YW5kfCBuaXx1IGF8ZSBrfHNhIHx1IGJ8aWhhfGkgbXxlIG58a2lyfGJlIHxhaG98YnVnfGlid3wgZWJ8IGJhfGluZ3x1cmF8Z2lyfHUgbnxrdXR8dW5nfGFudHxhYmV8IGFofHllIHxlIGJ8aSBufCBid3xrd2V8ZWJpfGVyYXxpa2l8YmEgfHJvIHwga3d8IG9rfHViYXxnYWJ8IG5vfHppIHxiaXJ8aSBrfHUgb3xvIG98cndhfG8gZXxrdWJ8ZW5kfGFtYXxtZXJ8ZWthfGt1Z3xhdGV8dGVlfGRpIHxyaXJ8YnVzfGt1a3xyaW58aXNofHNoYXxpIGJ8d2FofGhhIHx1IG18YndlfG5naXwgYWl8YXJhfGt3YXxrYW58byBnfHphIHxuZ298a3VofGFuYXxpIGF8ZW1lfGVla3xpIG98YmFhfCBrYXxnbyB8IGd3fG5pYnx6aWJ8YXNofCBvcnxpcm98c2hlfG8ga3x1IGt8aWlufG8gYnxpYmF8b29ufGdhbnxhZ2l8bmd5fGhlbXxtd2V8b25hfG9yb3xid298IGFyfHlhIHxpIGV8dXJ1fG5hcnxlaXJ8dXRhfHRhcnxrd2l8IHRpfGVneXwgbiB8aGkgfGJhcnxpc2F8dXRlfG8gYXxzaGl8b3JhfGUgZXwgZW58IGtpfCBua3xyaXp8bmRhfGRhIHxqYSB8c2kgfG5zaXx3ZW58eWVzfHRla3x5ZW58YWdhfCBhbXxvIG58cmVpfHJhZ3xraSB8b2J3fG11cnwgaGF8cmlzfHdlZXxhbWJ8YWFifGJ5YXxrdXN8dWdpfGEgeXxpbmR8YXRhfCBuZXxiYXN8IGt5fGlqYXxob2J8aWt3fG11c3xnYXJ8YSBnfGVreXxkaWl8Ym9yfGFhcnxpYml8IHdlfGFrYXxoYW18ZW1pfGVrd3xyZXJ8aW5pfGhhcnxnaSB8IGJpfG5hYXxrb3J8IGVyfGd3YXxuIG98aXphfCBieXxlaWh8eWFtfGlob3xyaWh8aSB5fGV0ZXxvIG18ZWJ5fGJ1dHxhIHJ8aWthfG1hZ3xveml8IGVtfG9uZ3xpaWt8aWtvfHVrYXxuaWt8IHlvfHNpYnxlcml8dXR1fHR1dXxhbXV8dWtvfGlyd3xua2F8YW5pfHlhYXx1IGV8bXV0fHJvenxtdWJ8ZW5zfGFpanxuaXN8dWt1fGt5ZXxuZGV8ZGVyfGUgYXxub2t8bmtvfGFzYXxhYXN8aGFifG9ib3xlbnR8YWh1fHJ5ZXxvYmF8a2lofHlvYlwiLFxuICAgIFwieWFvXCI6IFwiY2hpfG5kdXwgd2F8ZHUgfCBjaHxhIG18YWt1fGFrd3xuaSB8a3dlfHVuZHwgbXV8d2FrfHdhbnxtdW58IGt1fGxhIHxlIG18d2EgfHVsdXxhbWJ8IGFrfGt1dHx1IHd8YWxpfG1ib3xsdSB8d2UgfCBtYXxsZSB8dWZ1fGZ1bHxpbGF8YSBrfGJvIHxhIG58IGdhfCBuaXxhbXV8a3dhfHNlIHwgbmF8b3NlfGhpbHxuZ2F8Z28gfGFrYXxhbmR8YW5nfG5hIHwgdWZ8IHBhfGV0ZXx1dGl8andhfGt1bHwgand8c29ufG5nb3xsYW18ZSB1fG5lIHxrYW18b25pfCBzb3x1IGp8ZSBhfGVsZXxhIGN8YW5hfHdhbHx0aSB8aXN5fGNoYXwgeWl8Z2FufHRlIHx5YSB8bXdhfGxpanx3ZXR8Y2hlfGdhIHx5YWt8aWxpfHBhIHxlIG58IHlhfG8gc3xuZGF8aSBtfHVsYXxqb3N8aSBhfGlsZXxpam98bGkgfGUga3xvIGN8YSB1fCBtd3xpY2h8bXVsfHVjaHxvIG18YXNhfGFsYXxrYXN8IGthfGkgd3xlbGF8dSBhfGFjaHxoaXN8bmFtfGxhbnx5aW58aSBrfGluZHxhbml8c3llfHlvIHxzaSB8cGUgfGdhbHxpd2F8bWFufHN5YXxhZ2F8YSB3fG8gYXx1bGV8aWt3fGFzaXxrdXN8b3BlfG1hIHxnYWt8ZSB3fGppbHxrYXB8aGFrfGlrYXxpdGV8YWppfG1iYXx1IGd8YXNlfG1iaXxrdW18dWxpfGFueXxhcGV8YSB5fGVrd3xtYWx8aW1ifGphIHwgYWx8ZW5kfCBuZ3wgamF8bWFzfHVzaXxrdXB8ZSBjfHBlbnx5ZSB8YW5qfGthIHxhIGp8YSBwfGxlbXxvIG58YW1hfGhpbXxhZ298c2VufGVuZ3xhbmV8YWtvfG1jaHxvbGF8b2NofG9zb3xlbmF8IGt3fHNvcHxsZWt8cGVsfGd3YXxoZWx8aW5lfGdhbXx1IHl8IG1jfGkgeXxhd298b25zfCBtcHxvbGV8IGxpfHdvIHxpIHV8aGlrfGtvbHxhdWZ8bWthfHRhbXxzeW98ZSB5fG1wZXx0ZW58YXRpfG1hdXxuaml8d2FtfG11Y3xvbmd8aSBnfGthbnx1bWF8amUgfGlrdXxuYWd8a3dpfGRhIHwgdWx8Y2hvfG5nd3xlbmV8aWdhfGFub3xlc3l8aW9ufHVwaXxwYWd8byBrfGVrYXx3dSB8dXdhfGt1d3xzYSB8IHVufGEgbHxib218aXlhfHVuaXxqbyB8YWxlfCBqaXxhcGF8eWlsfGxpbHx1a3V8aSBufG8gZ3xhIGF8byB3fHdhanxtdXN8aXBhfHBhbnxwYWt8b25lfGkgY3x1am98ZHVqfGVtd3xueWF8dGlvfGpha3xvbWF8bmphfGhpd3xkYW58YXBvfGUganxwb2N8IHdvfGxpY3xhbG98ZWplfGluZ3wgbWl8ZSBwfGxvIHxsaWd8YSBzfCB5b3x1bmd8bm8gfCBtIHx1cGF8YXRhfCBib3xuZGV8aGUgfGkganx3YXNcIixcbiAgICBcImxhdlwiOiBcImFzIHzEq2JhfCB1bnx1biB8dGllfGllc3xiYXN8YWkgfCB0aXxlc8SrfHPEq2J8aWVufCB2aXxidSB8dmllfGlyIHwgaXJ8xKtidXxpZW18IHZhfCBwYXxlbSB8IG5lfHMgdXxhbSB8bSBpfMWhYW58dSB1fHIgdHxwaWV8IGNpfCBzYXzEgXMgfCB1enx2YWl8IGthfCBwaXxicsSrfCBpenxyxKt2fCBicnx1eiB8Y2lqfGR6xKt8ZW5hfCBhcnxhciB8aXNrfHMgcHxlcyB8IGF0fMSBY2l8IGFwfG90IHxuYW18dmnFhnxpbsSBfGlrdnxrdml8IG5vfHMgdnwgaWV8dmlzfCBpa3xpIGl8cMSBcnx1IGF8anUgfG51IHwgcHJ8ZWRyfHbEq2J8xKt2xKt8aWp1fGRyxKt8dSBwfGRhcnwgc3R8bHbEk3xjaWx8aWx2fHMgdHwgbGF8acWGYXxhbmF8cyBpfG4gaXzEq2R6fHMgc3xrxIEgfHTEq2J8aSBhfGlqYXxiYWl8xKtixIF8aWVkfHMgbnxhcmJ8dmFsfGzEq2R8cyBifGFpenx0dSB8aWVjfGNpZXzEgW0gfGd1IHx2xJNrfMSrZ3V8xKtnaXxrYSB8amFzfHVtdXxtdSB8dCBwfCBqxIF8dSB2fHrEq2J8c2thfGxzdHxhbHN8a3VtfGdpIHxzIGx8IHTEgXxqb3R8c3TEgXxzdCB8biB2fHbEk3J8YSBwfGFyxKt8YXV0fG4gcHxhbWF8a2FzfHUga3wgZGF8IHRhfG7Eq2d8aXpzfG9qb3xhbnV8xYZhIHx1IG58c3RhfHMgYXxiYSB8IGFpfCBzb3xzIGR8YSB1fMSBIGF8c3TEq3xjxKtifG0gdXxpIHV8c29ufG5vdHxtYXR8c2F2fGlldnzEgSB2fGp1bXwga8SBfHUgdHxuZWR8YWrEgXxzIGt8dSBpfGkgdnxsxKt0fMSTcm98IHBlfCBkenxpIG58cGVyfHUgZHzEq2tzfGthdHxuxIF0fGzEq2J8bsSBY3xyZHp8bsSrYnxwaWx8csSra3xrc3R8YSBzfGNpdHxwYW18IHDEgXxla2x8dGF1fHUgc3xiaWV8asSBIHwgcmV8aSBwfGt1cnxhIGF8dCB2fCBsaXxldml8dGlzfGV2xJN8YsSBIHxtYSB8csSrYnxhIHZ8b3MgfHJhc3xhYml8bmV2fGlrdXxza8SBfCB2ZXxsaWt8IGzEq3xuYXN8dCBrfGFudHx1bWF8cm/FoXxrxIFkfHpzYXxzYXJ8Y2nEgXxtaWV8YWlzfGVjaXxvY2l8b8WhYXwgamV8amVifGLFq3R8YXRyfG4gYnxpZcWhfHJzb3xlcnN8c29jfGVuxIF8YSB0fHQgc3zEq8WhYXwgYmV8YmV6fMSBZGF8ZWJrfCBrdXxnbMSrfGlzcHx0b3R8c3DEgXxyb2p8bGllfHByZXxyZXR8YXVsfG5hIHx0cmF8aWV0fGR1IHx6Z2x8xIF0IHxhcmR8a3QgfGllcnxpemd8aWt0fHBhxaF8acSBbHxub2R8dHMgfGVqYXzEgSB1fHNhYnxlbm98xJN0IHx0YSB8dGlrfHTEq3R8ZWPEq3wgZGV8xKtnYXx0YXJ8YXJwfHIganzEq3N0fHTEgXN8amEgfGVuxKt8YXR2fHZ1IHzEgXLEk3xyxJNqfHJpZXxvxaFpfGRyb1wiLFxuICAgIFwicXV6XCI6IFwidW5hfGFuIHwga2F8bmFufGNoYXxhbmF8YXMgfGFwYXxwYXN8bWFufGxsYXxhcSB8c3FhfHRhIHwgcnV8cnVufGt1bnxhY2h8cWEgfCBsbHxwYSB8cGFxfG5hIHxudGF8Y2hpfG5wYXwgbWF8bmNofGFrdXxhbnB8IGNofGluIHxhIHJ8YW50fGhheXxtaSB8dGFxfGF5IHxhbWF8YXNxfHFhbnx0aW58a3V5fGNodXxsYXB8YSBrfHl0YXxhIGF8aW1hfHdhbnxhdGF8c3BhfGFsbHwgd2F8biBrfCBqYXxpcGF8IHlhfG5pbnxpbmF8YXFtfGhpc3xxbWl8YSBtfCBqdXxwaSB8YW5jfG5hcHxpa3V8YXVzfHVzYXxrYXV8cGFufG5ha3xrYW58IG11fG5hcXxhcXR8IHBhfGthbXxhcWF8a2F5fGkga3xrdXN8dW4gfGFua3xpc3F8bmt1fG1heXx5a3V8YXlufGEganxhIGx8YXl0fHF0YXxhdGl8YSBwfCBwaXwgcml8YWNpfGxsaXxsaW58YXlrfHVrdXwgYWx8IGF0fG4gcnx5YWN8aW9ufHBpcHxoYW58aW5jfG4ganxheXB8eW5pfHFwYXxuYWN8c2F5fGFzcHx1eSB8bWFjfHMgbXxjaW98YXdhfGEgY3xsYXF8dGFwfCB5dXwgaW18YSB5fHlvcXxuIG18YXNpfG11bnwgZGV8aGFzfG4gYXwgYXN8biBjfGludHx1Y2h8bm1hfHMga3xvcSB8YXJpfHEga3xodSB8IG5hfHlwYXwgdHV8dHVrfHR1bnxhdHV8cmltfHEgcnwgc2F8amF0fHlhbnwgaml8bmF0fGFubXxqaW58YSBzfGFwaXxoaWt8dXlhfG50aXxwYWN8dGFufGFzaHxtYXN8biBwfG4gbHxrIGF8dXJhfCBzdXxhIHF8eXV5fG4geXxlY2h8cSBqfHVudHx5YXl8eXBpfGlzIHxsYW58IHFhfHVzcHxrYXN8IGFufGEgd3xzIHd8aW5wfHNpbnwgdGF8bWEgfGEgdHxzaHd8cSBhfGh3YXx1eXR8bm1pfHNpbXxlcmV8cmVjfGRlcnx1bWF8cyB0fGlzcHxuIHR8w7FhIHwgbml8IGF5fHVwYXxuYW18aHVyfHdhcnx3YXd8aW1pfG5rYXxzYXB8a2FxfHMganx3YXN8eSByfHVzcXxraW58IHVufGlubXxxYXN8IHNpfGFuaXx0aXl8dCBhfHN0YXxwYXl8cGlzfG1hcXxoaW58aGEgfGFybXxucGl8cm1pfGlua3xhcXB8cSBjfGxhIHxpIHB8bmlzfHltYXxuayB8IGt1fGF5bXxuYWx8aGFrfHJpa3wgdGl8dW5jfG5peXx5IHN8aXlvfGp1Y3wgcWh8aXN0fHBhcHwgYWp8cyB5fGNob3xvbnF8IHJlfGF5b3xpcXB8biBzfHMgcHxvcyB8aSBtfHQgaXxyYXN8aXRhfHBpcXxxc2l8a3UgfHlxYXxtaWt8cSB5fGVxc3xwYXR8dGFrfCBwdXxsYWt8aSByfGlwaXxpeWF8eXdhfG11Y3xhIG58IHFlfHNhbnxqdW58eSBsXCIsXG4gICAgXCJybXlcIjogXCIgc2h8cmkgfCBhIHxzaGl8aGkgfGkgc3x0aSB8ZWEgfGFyaXxpIGF8IGNhfHJlYXx0c2l8aSBjfCBzIHxhIGF8bmRyfHR1IHxjw6IgfGRyZXxpIG58ZXB0fHB0dXxyZXB8bGkgfCBuZHwgZGl8IHVufGEgc3xhcmV8aSB1fGF0c3xsYSB8IGxhfGkgbHxlYXJ8IGxpfGxqZXxkaSB8YXRpfGx1aXx1aSB8YSBsfCB0dXx0YXR8w6Igc3xlaSB8c2VhfCB0aXwgY8OifHVuIHxqZWl8b3IgfGNhZnxhZml8IGx1fMOiIHR8IGFyfGFsaXxpIHR8ZmkgfGlsanxhIGN8YsOiIHxyw6IgfGNhcnxpYsOifGxvcnwgY3V8bsOiIHxpY8OifGEgbnxpIGR8cyBofGhpYnx0w6IgfCBoaXzDoiBhfHNpIHx1IGN8ZWFzfHR1cnx0dWx8YmVyfMOiIGN8IGlufCBjb3xsaWJ8dSBhfG4gYXxjdSB8aWJlfHUgc3x0ZWF8bHUgfHRzw6J8dWwgfHRzZXxpbnR8YSBwfGkgaXwgcHJ8dSBwfGkgcHx1cmx8aSBtfGxqaXxtaW58c3RpfGFsw6J8IGFsfCBwaXxzaHR8bmFsfMOiIG58IHNpfGppIHzDoiBwfHJhcnxlcnR8c2lpfGlpIHxuYXR8dGlsfHUgbHxzw6IgfGzDoiB8w6IgbHxzdGF8IG51fCBpY3xpIGZ8bnUgfGlzdHxtbHV8aWxpfGEgdHxvdHN8dW5pfHJ0YXxhIGR8aXRzfMOiIGR8cHJpfCB0c3xvbWx8aSBlfCBkZXwgbmF8c2lhfCBwb3xndXJ8dHV0fCBzdHwgYXR8IMOibnx1cmF8YWwgfGl0YXxhbsOifCBtYXxpcHN8Y2FufG9hdHx0c2x8IHN1fCBhc3wgc298w6JuZHxudHN8IGFwfCBlYXxzaCB8bml0fCBtaXxlbnR8YSBpfGF0ZXwgYWN8cG9hfGlsb3xzb3R8aW5hfGFzaHxvbmF8IGxqfMOidHN8cmxpfGxpcHzDoiBpfHVuw6J8dCBjfGl0aXxibGl8IHUgfG5qaXwgZmF8emVhfHTDonR8cmlsfCBvbXx1csOifGNvbnxpIGJ8c2lnfGlndXxudHJ8cHVyfHBhcnxudHV8bGV0fGNvbXxpaWx8IG5pfGVhbHxpbmR8ciBzfGh0aXxhdCB8dWNyfGFydHxhZHp8YXLDonxpdMOifHJ0w6J8aW5qfHVyaXwgZWd8IHNjfGF0w6J8c2lufHJhbHxwc2V8YXNpfCBiYXxyIGF8YXB1fMOibGp8aWEgfGNoaXwgdmF8c3VufHRlcnxybG98aWNhfCBwdXxsdWN8dW50fGkgdnxpc2V8aW5pfGVzdHxhc3R8Z2FsfGVnYXxhY3R8bmRhfGVhZHx1dHN8YSB1fGltaXxtYSB8cmEgfHBpc3xzIGx8ZXRzfGEgb3x2YSB8cGkgfGxpdHxzY8OifGFzY3xpYWx8c2EgfCB0YXxyaW18dGFyfGFsdHxpZGl8dGx1fCBnaHxlcmF8YW50fGVyaXxhZXN8YSBtfCBuw6J8IGFlfG9hcnxuZWF8cHJvfGFwdHxhbmF8dGEgfGF0bHxsaWN8bCBzfGl1bnxudGV8bWlsXCIsXG4gICAgXCJzcmNcIjogXCIgZGV8ZGUgfGUgc3xvcyB8IHNhfHR6aXx0dSB8IHN1fG9uZXwgYSB8c2EgfG5lIHwgZSB8IGlufGVudHxpb258ZGVyfHN1IHx6aW98ZXJlfGFzIHxlIGR8YSBzfHUgZHxyZXR8ZXMgfCBjdXxlc3N8IHByfCBzb3xzIGR8bWVufGFsZXxhZGV8YXR6fCBzIHxyZSB8ZSBjfHNvc3xpbiB8cyBpfGNoaXwgdW58bnRlfHRlbnxldHV8ZXIgfCBwZXxldCB8ZSBlfGlkYXwgdGV8bGUgfCBpc3wgY2h8ZW5lfGFyZXwgZXN8YSBwfCBzaXx1IHN8YSBkfHByb3xoaSB8ZGFkfHRlIHxzc2V8dGFkfHppIHxlIHR8IG9ufGUgaXxzIGV8bnQgfG56aXx1IGF8c3NvfG9uenwgY298YW1lfGN1bnx0b3N8ZSBhfHNhc3xhIGN8bnR1fG5ldHxuYSB8ZSBwfGF0IHxuZXN8ZHUgfCBsaXx0IGR8biBzfHNvbnxzIGF8IG8gfGJlcnxybyB8cGVzfHUgZXxpbnR8emlhfG5hdHxpIHB8aWEgfHJlc3xudSB8dW4gfCByZXxzdGF8cyBwfHRlcnxlcmF8IHBvfCBkaXxwZXJ8cyBjfHQgc3xyYXJ8c2VyfCBhdHxlIG98cyBzfGliZXxsaWJ8c2kgfHRyYXx1c3R8dSBjfHJ0YXx1bnV8Y3VzfG50enxhZHV8IHRvfGRhIHxuYWx8IG5hfGFudHxlZ3V8ZXRvfHVuZHxpbmV8aSBzfGEgZXxvdHV8dSBwfHQgYXxlcnR8ZXN0fCBkYXxhIGF8IGZhfGlzdHxvbmF8cG9kfHMgb3xwcmV8aXNzfHJhIHwgbWF8aWNhfHRvdHxsZXN8bnRyfHVuYXxzdWF8Y29ufGRhZXxhZSB8cyBufG1hbnxzaWF8bmRpfG5pZHxhZGF8YSBsfG50YXxvIHN8YSBpfHVhIHxpZGV8IG5lfG90enxtaW58cmF0fGlhdHwgcGF8bmRlfG9kZXxkaXN8cmVufGFsaXxhIHV8dGEgfHUgb3xzb3R8dSB0fGltZXxzc2l8IGFzfG8gYXxwZXR8ZSB1fG5zaXxmdW58bGlkfGVwZXxlcnV8dW50fHN0IHx0IGV8ZW5kfHVzIHwgZnV8IGNhfG5lcnxkb3N8cyBmfGFzc3xuZGF8dW5pfGRhc3xpdSB8aW5kfGEgdHxpYWx8YSBmfGdoZXxndWF8IGVnfGEgbnwgc2V8b250fGV0enxzIG18cyDDsnxzdGl8dCBwfHVhbHxuZW58IG1lfHNlbnxjb218dXJhfGEgYnxsaWN8YSBvfHBlbnxhZG98bm9zfGlubnxkZXN8c2VnfGUgZnxkaW58w7JtaXxpcmV8YSBtfCDDsm18ZSBsfGRlcHzDqG50fGZvcnxlbmF8cGFyfCB0cnx1IGl8YXJhfGNyYXxzaWR8IG5vfHMgdXx1IHJ8c3VvfGUgbnxwcml8aW5hfCBmaXxyaWF8Z3VyfGFydHxkZXR8cyB0fCBib3x0YXJ8ZW1vfHJ1bnxhbWF8aWN1fGlzcHxkYW18ZSByfGl0dXxjdW18dHV0fGVsaXwgYmlcIixcbiAgICBcInNjb1wiOiBcIiB0aHx0aGV8aGUgfG5kIHwgYW58YW5kfCBvIHxhbCB8IGlufGFlIHxpbiB8ZXMgfGlvbnxjaHR8IHRhfHRpb3xvciB8dCB0fHJpY3wgcml8aWNofHRhZXxvbiB8cyBhfGlzIHxlIGF8IGF3fCBiZXxzIHR8IGhlfGF0aXxlbnR8aHQgfHRzIHxlIHJ8IGNvfGVyIHwgbmF8IGZyfGJvZHxvZHl8aGlzfGR5IHxoZXN8IGZvfGUgdHxvIHR8Zm9yfGl0IHxuZyB8dHkgfG4gdHwgb3J8YmUgfGZyZXxyZWV8IGhpfGwgYXxpbmd8YXdifHdib3wgc2h8cyBvfHRlcnwgb258c2hhfG5hdHxyIHR8bmFsfGFuIHxuIGF8IGFzfGhhbHxlIG98eSBhfGQgdHx0aXR8IHBlfGwgYnwgcmV8eSBofGF3IHwgbWF8bnQgfG1lbnxhaXJ8Y2UgfCBwcnwgYSB8IHRpfGh0c3xlIGZ8ZSBjfGxlIHxlZWR8ZWRvfGRvbXxuIG98ZSBzfG9uc3xkIGF8cmVzfGUgd3xtYW58IHdpfGQgZnxlZCB8c3RhfGFyIHx0IG98b25hfCBpdHxpdHl8YXQgfGFzIHxoZXJ8ZXJzfHQgaXwgZGV8Y29ufHRpbHxpbCB8IHN0fG50aXxlIHB8ZSBpfGUgZ3xuY2V8bnkgfCBzb3wgZGl8bnRlfG9ueXxucyB8dW5kfGl0aHx0aGl8IGZ1fGllIHxpciB8b3VufG9udHxlIGV8IHVufHByb3xvY2l8bmFlfHkgaXxsaXR8c29jfGNvbXxuaW58ZW4gfGljIHxuZSB8ciBhfCBtZXxseSB8IHdhfGVhcnx1YWx8IGVufGFtZXx1bml8ciBpfGUgaHxodW18IGlzfGFuZXx1bWF8ZXNzfGluY3wgZmF8ZXF1fCBodXx2ZXJ8IGVxfGUgbXxoZWl8byBofG1zIHxkIG98IGhhfHdpIHx0IG58cyBmfCBub3x0IGF8aW50fGNsYXxyaXR8cXVhfGQgaXxpdGl8IHNlfHJzYXx5IHN8aWFsfCBsZXwgdGV8ZSBkfHIgb3xpdmV8ciBofCBsYXxuaXR8b20gfGl0ZXxzIHJ8Y2llfHMgaXxhbGl8Y3RpfGNpYXxyZSB8YWltfHJhdHxsZCB8dGF0fGhhdHxydCB8cGVyfHMgaHxuIGZ8ZGlzfHRoYXwgcHV8IHdlfGcgYXxvbXN8ZWlsfG50cnxmYWl8dHJpfGlzdHxpbGR8ZSB1fHIgc3xkZWN8bGVhfGUgYnxoYXV8aW1pfG1haXxzIG58IGFjfGVsdHxsdCB8bCB0fG9tbXxkIHB8IGdhfGRpbnx3YXJ8bGF3fGVtZXx5IHR8ZXJhfGVpcnxhcnR8ZHMgfHMgZXxyYWx8bm9yfHRlbHxnZSB8ZyBvfGVpa3xlbGl8cmllfHJvdXxuZGF8IGdyfGxhbnxtZWl8YXRlfCBnZXxuIGl8dGVufGlkIHxzIGR8b3JzfGlvdXxiZWl8c2FtfG50YXxzZWN8bW1vfGxhcnwgdHJ8ZnVsfHVsIHxtb258cyB3fGFuY3xsIG98Z2FyfGVybnxhcmF8ZCBzXCIsXG4gICAgXCJ0c29cIjogXCIga3V8a3UgfG5pIHxhIGt8aGkgfCBuaXxhIG58IGEgfGkga3xrYSB8aSBufHdhIHwgeWF8IG1hfGxhIHx5YSB8bmEgfGEgbXwgdGl8IGhpfGZhbnwgc3Z8bmVsfGh1IHxhIHR8YW5lfGVsYXwga2F8aXdhfHUgbnwgbmF8c3ZpfGxvIHxuaHV8YSBsfGEgaHxlbGV8bGUgfG5kenx1IGt8dmEgfCB4aXxhIHd8dmkgfG1iZXwgw6AgfGVsb3x3dSB8IHd1fGVsaXwgbXV8dSB5fG11bnxpIGx8IGxlfG5nYXx1bWJ8bGFufG5mYXwgdmF8dSBsfGJlIHx1IGh8bGkgfGt1bXx0aWt8aWhpfGlrdXxha2F8dW5ofCB3YXxhIHN8bGl3fGlzYXxpIG18IGZhfG1hIHxhbnV8bnUgfHUgdHxoYW58IGxhfCBuZ3wgd2l8d2lofCBoYXxhIHh8eWVsfGEgYXxsZWx8IG5mfGkgaHx0YSB8YW5hfG8geXxlIGt8IG50fHUgYXxpIGF8ZW5pfCBsaXxuZGx8Z2EgfGFueXwga298IGtofHZhbnx1IHd8dSB2fGFtYnxhIHl8dGkgfHNhIHxwZnV8aSB0fGkgd3xpbiB8bGVrfGUgeXxhbmd8YW5kfGF0aXx5aSB8IMOoIHxpcmh8c3ZhfG1hdHxhbml8aSBzfCBuZHxhIHZ8bWVsfHllbnxobGF8aXNpfGhpbnwgeWV8ZWtlfG4ga3wgbG98dWx1fGt3ZXxodWx8dGhsfCBrd3xudGh8dGlufG1haHx3YW58YXZhfCBtaXxrbyB8a2h1fHUgc3zDoCBufGRsZXxsdWx8dWxlfHRpcnxvIGx8aSB5fGFoYXxheWV8a3dhfGluZnzDoCBrfMOoIGt8cmh1fG1iYXwgdGh8ZnVtfGVuZHxhbmh8eGkgfGR6aXxrZWx8YSBmfHUgZnwgbMOofHdlIHxtYXl8ZWthfG55ZXxnYW58ZHplfHZ1IHxoYW18eGltfG1pc3x0aHh8YWt1fHTDoCB8eGEgfGhsb3wgdMOgfGV5aXxpbWF8bnRpfGVraXxuZ298IHNpfHUgcHx2YWt8bmd1fGxha3x1bWV8b2tvfGxvbnxhIMOofG8gbnxsb2t8IHRhfHppc3xoYWt8dSBtfGkgw6B8a2UgfGkgeHx1IHh8cmhpfGhhIHxhd3V8ZHphfHUgw6B8emEgfCBsw6B8biB3fHVuZ3xlIG58YSDDoHxpIGZ8ZXN2fGxlc3x2aWt8c2l3fCB5IHzDoCBtfHRvIHxtaGF8b2xhfHNhdnxvbmR8bnlhfGtvdHxrb2x8dW1hfGUgaHxtYml8ZSBzfG5hd3x0aHN8IGRqfGZ1bnxtdSB8YSB1fHhpd3wgdHN8IGhsfHUgZHwgbHd8bnlpfGtpIHxvbmd8c3VufGx3ZXxpa2V8aW5kfG5pc3x4aWh8ZSBhfMOobGl8aW11fHNlbHxzZWt8aXBofHplbnxsdW18IHBmfCB4YXxzaW58dW11fHNpbXxhdmV8a2FyfGFsYXx3ZXl8c2lrfG8gdHxhdnV8d2F2fG9uaXxpbGV8d2FrfCB5aXxhbGl8IGjDoHxndWx8ZSBsfGJhIHxpIHZcIixcbiAgICBcIm1lblwiOiBcIiBuZ3xhIG58aSBufMmUyZQgfHRpIHwgdGl8aSBsfCBpIHwgbWF8IG51fCBnYnxuZ2l8YSBrfGFhIHxnaSB8IGvJlHxpYSB8yZvJmyB8ZWkgfCBuYXwgYSB8bWEgfGh1IHwgeWV8IHRhfGvJlMmUfGEgdHxuYSB8IGh1fGEgbXwga8mbfCBuZHxnYml8eWEgfGJpIHxpIHl8IGzJlHxhIGh8yZsgbnxpaSB8yZRueXx1IGd8aSBofG55YXx1dSB8bMmUbnwga3B8aSBtfG5nyZR8bmdhfGxhIHxpIHR8a8mbyZt8bMmUIHxpIGt8yZQgdHxtaWF8IG1pfGEgeXxuZ2V8IGppfGVlIHxnYWF8YSBhfMmUIG58yZQgaXxnyZQgfGluZHx0YW98YW8gfCBoaXxudW18IGxlfCB5yZt8dW11fG11IHx1bmd8bmRhfGhpbnx5ZSB8aSBnfGhvdXxodWd8ZSBufHVnYnxuaSB8YSBsfHNpYXxuZMmUfG51dXxhIGl8bWFhfCB5YXxhaHV8Z2JhfHUga3xtYWh8b3VufMmUbWF8bGUgfGRhIHxpIHd8yZRsyZR8aSBqfCB2YXwgyZTJlHxlbmd8aSBpfHZhIHx5ZWl8ZMmUbHxsaSB8bGVpfCBzYXx5yZsgfGtwyZt8eWlsfGlzaXwgbGF8YmF0fGEgd3x1IG58ZSB0fHRhIHxhaGl8IGtpfCB3b3zJlCBrfGUgYXzJm2zJm3xzYXd8IGxvfG8ga3xqaSB8Z2LJlHxwyZtsfHV2dXxpbGl8IGhvfHZ1dXwgZ3V8bmRlfGFob3xnYnV8yZsgdHxhbGV8aWxhfG5haHxryZsgfMmbaSB8bmR1fGtwYXwgd2F8bnV2fGdlIHxlIG18IG55fGUga3xhdMmbfHdlaXxhd2V8YSBnfCBpaXxidWF8aWUgfGF3YXx3b3R8eWVrfGvJlGx8dWzJlHxpbmd8Z2EgfGd1bHx0yZsgfMmUbGV8dSB0fGdiyZt8yZQgeXxudW58d2EgfGhlaXxhbml8yZsga3wgdMmUfGLJlG18yZsgZ3xlaW58dGFhfCBoYXxhbmd8dW5pfHUgaXxla3B8yZQgZ3xsyZvJm3xrcMmUfGEgdnxrcGV8b3RlfGkgYnx0ZSB8dSBtfHRpaXzJlCBzfCB3ZXzJmyBofGJhYXxwZSB8yZsgeXwgyZvJm3xpIMmbfCBiYXxmYSB8YSBqfGJ1IHxpZmF8a2lhfGppZnx1IGx8ZWtlfGFtYXxnZW58dSB3fGxlZXxsyZsgfCBsyZt8yZttYnxhIGJ8ZSB5fGFhaHxoaWl8bmdvfGLJm218bGVrfCB3aXx1aSB8IHlpfHUgeXxiyZvJm3wgaGV8dSBhfGUgaHzJlCBtfHVhaHxvIGd8eWVufHlhbnxueWl8YWFsfGhpIHx3dSB8eWVlfG1hanxhasmUfGrJlMmUfG55ZXxtYm98ZSBnfHUgyZR8b25nfGthIHxvaSB8bG9ufGR1bnx1bnl8yZtuZ3wgc8mUfGzJlGx8bnnJm3xsaWl8YSBwfG95aXxpdGl8IGLJm3xsyZRtfGFrcHxlIGl8yZsgaXwga2F8amlzfG9rb3xpIHB8yZRsYXwgd8mbfGEgc3xld8mUfGl5ZXxkyZTJlHxsb2t8Z3VhfMmbIGJ8IGxpfHUgaHxuaW58d2VlfGxhaHx1bGF8IGdhfCBkdXxpIHZcIixcbiAgICBcImZvblwiOiBcIm5hIHwgbmF8IGUgfCDJlm98yZRuIHzJlm8gfGtwb3wga3B8bnUgfG8gbnwgyZQgfCBudXwgbcmbfCBnYnxtyZsgfHBvIHxkbyB8eWkgfHTJlG58IMOpIHwgc2l8Z2LJm3xlIG58aW4gfCB0b3wgbMmbfGzJmyB8IHTJlHxueWl8IGFsfHfJmyB8IGRvfGJvIHzJm3TJlHwgbnl8dMmUIHxlIMmWfMmWZSB8IGJvfG9rcHxsbyB8ZWUgfMmWb2t8dG8gfMmUIGV8YsmbdHwgd8mbfCBhY3xhIG58c2lufGFjyZt8byB0fG8gYXzJm24gfGkgyZZ8byBlfGLJlCB8yZQgyZZ8IGLJlHxjyZsgfMmbIGJ8IMmWZXxhIMmWfMmUIG58yZsgyZR8biBifGFuIHxuyZQgfG9kb3zJmyDJlnxvIMmUfMmbIG58yZsgZXzJlsmUIHxqaSB8IMmWyZR8bGlufG4gbnwgZW58YmkgfG8gyZZ8bcmUIHxuIGV8cG9kfCBiaXxsyZQgfCBtyZR8biBhfG7JmyB8yZsga3xpIG58dW4gfMmUIG18aSBlfG3Jm8mWfCBod3wgaml8IHllfMmbyZZlfGVuyZt8IMeOIHxhbG98byBzfGtwbHx1IGV8YSBkfMmUIGJ8IG7JlHxhbMmUfMmUIMOpfMmUIGd8yZZlZXxzaSB8biBtfGdiyZR8YSB0fG4ga3wgeWl8c8mbbnxqyZsgfGUga3wgd2F8byBtfGUgbXzDqSDJlnwgamx8aMmbbnxlIGV8IGjJm3wgc8mbfG5udXxudW58d2EgfG4gyZZ8IGVlfMOpIG58a3BhfHVuyZR8YsmUbnzJlCB0fGEgc3zJmyDDqXx1IGt8yZQgd3xpbnV8ZSBzfGkgdHx6yZRufG8gbHxhIHl8byBnfGLJmyB8bWEgfG4gdHxlIGp8yZQgc3zJlCBhfG8gYnxhIHp8IHrJlHxqbG98aSBrfG51a3zJlCBrfGEgZXzJlCBsfHUgdHxryZRufHh1IHxlIMmUfCBsb3xod8mbfCBrYXxlyZZlfG8geXxlIHd8amlqfHNpc3xuIGx8aXh1fHNpeHwgc3V8YWxpfGlzaXx1a8mUfMmbIGF8IGF5fGF5aXxzdSB8biBnfHUgYXxhIGJ8biBkfGRhbnxubcmbfCB0YXxuIMmUfGV0yZR8ZSBnfG8ganwgd2V8b251fHdlbXxiYSB8ZW1hfMmbIGd8byBofMmbIHN8yZsgdHxpIHN8dSB3fG4gc3wgc8mUfGLHkCB8IGLHkHxod2V8YSBtfHPJlCB8bMmUbnxvIGR8dSBtfHBsZXwgbWF8yZsgbHxhesmUfCBhenx0b2d8eWUgfGkgbHxodW58IGrJm3xvIHd8b2d1fG8ga3x1IGd8a2FufG/Jlm98ZWzJlHxnYmV8IGxlfCBlbHx3dSB8a2EgfMmbIHd8biB3fCBsaXxzdW58ZXN1fCBodXwgaSB8yZbDsyB8IMmWw7N8cGzJlHzJlmkgfMmWw6ggfMmbbm58cGFufGkgbXx5ZXR8eG8gfGlpbnx0aWl8IHRpfCBmaXxlIGJ8emFufGkgd3xwb8mWfMmWZXN8YSBqfGFubnxhIGd8Z3VufCDJlml8IHR1fGdhbnzJmyBtfCB3dXx1IHN8yZQgeXxhIGx8IGRhfHUgbnx1IGx8yZRudXxvYm98yZQgaHx2aSB8bGVlfGlqyZt8dGEgfGUgYXx5YSB8bnXJlnzJlCBkfHdlbnwgdMmbfCBnYXwgyZsgfCB4b1wiLFxuICAgIFwibmhuXCI6IFwiYWogfHRsYXwgdGx8IHRpfGVqIHxsaSB8aiB0fGkgdHwgbWF8YW4gfGEgdHxrYWp8dGlqfHVhbnxzZWp8ZWtpfCBub3xjaGl8aWogfCB1YXxtYSB8IHRvfCB0ZXxqIG18IGtpfG5vanxpa2F8IHNlfGxpc3xqIHV8YWthfGxhanx0bGV8cGEgfHBhbnxqIGt8a2EgfCBtb3xhbXB8YWxpfGVjaHx1YWp8aXVhfGogbnxtYW58b2ogfG9jaHx0ZWt8dGxpfGt1YXxpbGl8YSBrfHNlIHwgcGF8YW5vfGlzZXx1YWx8bXBhfHRlY3xuIHR8ZW4gfGxlbnxpYWp8aXMgfCB1ZXxhIG18anRvfGFqdHxwaWF8IGFtfHVlbHxlbGl8IG5pfHlhIHxvdWF8aiBpfG5pIHxoaSB8dG9rfGtpbnxub2N8b25lfGxhbHxhbml8bmVrfGpraXxpcGF8a2l0fG9saXxhdGl8YW1vfGogc3xrYW18YXVhfGlhIHx0aW18bW8gfCBrdXxhbnR8c3RsfCBpa3wga2V8b3BhfGFzZXxuaWp8YW1hfGkgbXxpbW98aWpwfGlzdHx0bCB8aWprfHRpc3xtZWp8aXRsfHRpa3xtb258b2sgfGxha3xwYXJ8biBufGFyYXxyYSB8dGl0fGtlanxqcGl8YSBzfG9qa3xraSB8IG8gfGFsdHxub3B8bWFqfGp5YXwga2F8aXRpfGNodHxpanR8dWFtfGEgbnxraXV8bGF0fGxldXxvIHR8aXRhfGxhdXwgaXB8dGVwfGtpYXxqa2F8biBtfGFuYXxsYW18a2lqfG5rYXx0b3V8ZXBhfG4gc3x0aWx8aSBufGkgdXxlIHR8IGFrfHMgdHxrIHR8bHRpfG5lbXxsYW58ZXlpfG1hdHxuYXV8b3NlfGVtaXxqIGF8bnRsfHVhdHx1ZXl8anRsfG5pdHxudGl8a2lwfG9rYXxvbmt8IG9ufGV1aXxpIGt8a2F0fGogcHxpbml8dG9qfGtlbXxhbGV8YWp5fGFtZXxhdHN8cGFsfGlraXxlbWF8dWlrfG4ga3xldWF8YWNofGUgYXxpam58IHNhfG1wb3x0b3R8b3RsfG95b3xtaWx8aGl1fGVrYXx0b2x8YWprfHVha3xpdGV8c2FufHBhbXxhdGx8eWVrfHRpYXxhdGV8aW5vfGp1YXxhIGl8aXBpfGogb3x0c2F8b2tlfGl0c3x1aWx8byBvfGpuZXxvanV8dG9zfGt1aXxvdWl8YSBhfHlpIHxrb2x8b3RlfGEgdXxpIGl8biBhfGtlbnxjaHB8aWtvfGFzIHwgbmV8dGlufCBtZXxhbmt8anRpfCB5ZXxrb258b2p0fGF1aXx4dGx8aW5lfHRzaXxraWl8eW91fGtvIHxlamt8byBrfHVhc3xwb3l8dHN0fGVqeXxub2t8bGFzfCB5YXx5b2x8aHRpfHBvdXxzaXV8IGlufG5lbHx5b2t8bWFjfGFrIHxoaWt8c2lqfCBzaXxzdG98aHRsfGprZXxua298amNofHNla3xtb3R8aSBhfGVsYXx1aSB8a2lzfG1lbHxheHR8IGF4fGlqY3xuYW5cIixcbiAgICBcImRpcFwiOiBcIiBrdXxlbiB8aWMgfGt1IHwgYml8YmkgfCB5aXwga2V8YW4gfHlpY3xhYW58cmFhfCBjaXwgdGh8biBlfCBrYXwgZWJ8IHJhfGMga3xjIGJ8biBhfGNpIHxpbiB8dGggfGt1YXxueSB8a2EgfGkga3zFiyB5fGkgbHxiZW58ayBlfGViZXwgZWt8IGUgfGjDtm18bmjDtnzDtm0gfCBhbHxhaSB8a2VtfCB5ZXwgbmh8ZW1lfG0ga3xtZW58aSB5fHQga3xuIGt8IGxhfGMgZXxpdGh8IGVyfGzJm8yIfHRoaXxhbMmbfHVhIHx0IGV8ZWsgfMmbzIjFi3wgbG98yZRjIHxuIHR8xYsga3wgZXB8dSBsfGl0IHx5ZW58a8mUY3zMiMWLIHxkZSB8ayBrfHBpbnxhIGx8aSByfG4geXxlcGl8biBifGxhdXxhdCB8aW55fGFjaXxhYWl8dSB0fGtlbnxhdSB8b2sgfCB0ZXxhIGN8YXRofCBwaXxrZSB8IGFjfGUgeXxjaW58dSBrfG/FiyB8IGx1fCB0aXxhIHR8dWF0fGJhYXxpayB8dGhvfHlpdHx1aSB8aGlpfHUgbnxoIGt8ZSByfG4gY3x0ZSB8a2VrfCBsw7Z8bCBrfGggZXwgbMmbfGhpbnx0aMO2fG0gZXzJm8WLIHxuIHJ8biBsfCBldHwgbWl8w6trIHxpIGJ8ZWvJlHxlcmF8ZcWLIHxlIHd8aSB0fGVsIHxhayB8bmhpfGlpY3xhIGt8aSBlfHBpb3wgbnl8xYsgZXwgYWF8bmRlfHUgYnxlIGt8a2FrfGViYXzDtmsgfGsgYXwgYmF8IGVufHllIHxsyZvFi3wgcGF8aWltfGltIHxrw7Z1fGUgY3xyb3R8ZSBsfCBsZXzDtsWLIHxvdCB8aW9jfGMgdHxpIG18ciBlfCBrw7Z8IGvJlHxldGh8eSBrfG9jIHzFiyBufGxvb3xsYSB8aWl0fCBlbHwgd2V8IGV5fGkgcHx1bnl8IHJvfHV0IHwgdHV8b2kgfGUgdHxlbmh8dGjJm3xtIGJ8aG9rfHBhbnxrIHR8w6vFiyB8IHdpfHlpaXx0aGF8d2ljfHBpcnwgbGl8dSBlfGJpa3x1IGN8w6tuIHx5bmh8eSBlfGx1aXxldSB8aXIgfHkgYnxueW58dWMgfG4gd3xtaXR8IGVjfMO2dW58YW55fCBhd3zJm3QgfMmbzIjJm3wgZGh8IGFrfGFuZHxsb2l8d2VufGwgZXxow7bFi3xlIGV8dGjDq3xha3V8zIjJm8yIfGt1dHxhbSB8ZW55fHUgbXxpIGR8aWVrfGsgY3wga298dGljfGxldXwgeWF8dSB5fHRpaXwgdMO2fCBtYXxueW98dMO2IHwgZXd8aMO2a3xkZW58dCB0fGjDq8OrfGkgbnxrIHl8aSBjfGNpdHxoIHR8IGVkfHVlZXxiYWl8yZvMiG58w7Z0IHxlcml8yZvMiGt8YXd1fHJpbnxhIHB8Y8mbzIh8aGFpfGtpY3x0IGF8IHTDq3x0dWV8Y2lpfGhvxYt8IGLJm3xvb8WLfG4gcHwgY8mbfMyIayB8YyBsfHUgcHx1ayB8YyB5fGzDtml8aSBhfGVrZXxkaGl8d2VsfHRoa3xlZcWLfMO2aSB8ZWxvfG4gbXxyIGt8aWVufG9tIHxob218IHdhfG5ob1wiLFxuICAgIFwia2RlXCI6IFwibmEgfCBuYXwgdmF8IHdhfGxhIHxudSB8YSBrfCBrdXxhIHd8aWxhfHdhIHxhIHZ8Y2hpfCBtdXx1bnV8ZSBufG11bnx2YW58YSBtfGEgbnx5YSB8bGUgfGVsZXxzYSB8IGNofGFzYXxhbWJ8YW5hfHdhc3xsYW18bWJvfG9oZXxhdmV8IHZpfG5lIHxibyB8YWthfGUgdnxhIHV8dSBhfCBu4oCZfHUgdnxlIG18a2UgfGFudXwgbGl8dmUgfHZlbHxha2V8YWxhfGhpbHxpbGV8IHBhfCBhdnxuZ+KAmXxhIGx8aGUgfGluZ3xlbmV8ZWxhfGlsaXxpa2F8dmlsfG5nb3x2YWt8YWxpfCBkaXx1a3V8d3VufGFueXxsYW58YSBpfG1iZXxhIGF8dW5pfGUgYXxhbWF8IG1hfGdvIHxuZGF8YmVsfGVtYnx3YWt8a3V3fG55YXwgbXd8b2xhfGEgZHxkZW58bGVtfGEgY3wgaWx8dWx1fGtvbHxn4oCZYXxvIHZ8bmppfGthbnxqaSB8YXUgfG1hIHwgYXV8bGlsfG1iaXx1d3V8bGlrfHllIHzigJlhbnxrdWt8ZGlufHVsYXxubyB8YW5kfHVtaXxrdW18ZW5nfGFuZXxkeWF8b25nfG8gbHxhY2h8bXdhfGUgd3wgYWt8YW7igJl8YSBwfGthbHxuaWx8bGV3fG1hZHxu4oCZbnx2b2h8aWxvfHdlbnxheWF8YXBhfCB2eXxrdXR8YWxlfHZhIHwgYWx8YW5nfGF2YXxrdWx8aGlufG8gbXxoZWx8ZSBrfG9uZHxoaSB8IGxhfGxpbnwgbHV8aWR5fGR5ZXx1IGx8ZGEgfG9sZXxrYSB8YW5pfG5kb3x0b258IGlufGV3YXxsb3Z8byBjfGRhbnx1IG18Y2hvfHV2YXxpYSB8cGFufGthbXx3ZSB8b3ZlfG5hbnx1a298YmkgfGthdnwgeWF8bGltfCB1bXxlbGl8dSBufG5nYXx1bGl8bGlhfG1pbHxvIG584oCZY2h8IGt3fGxpIHwgYW58YWhhfGRpbHxhdGF8IGR5fGUgbHxu4oCZdHxpIHZ8dHVrfGhvaHx1IGl8aGV2fG5pIHxuaXd8dW5kfCB1bHxhZGV8bGVsfGtheXxsb258ZSB1fGlub3xpIG58bmplfHV3YXxzaGV8eWlrfCBseXxodW18YWtvfGkgd3x1bWF8dnlhfGt3YXxiYSB84oCZbWF8dmFsfGtpbHxtd2V8bWJhfG11IHxwYWx8dW1ifHdhdnxoaWh8dWxvfCBrYXxlIGN8bmRlfHdhbHxpbWF84oCZbml8bHVufGlodXxhIHl8dmlufHlvaHxlIGl8dnlvfGluanx1IGN8a3VwfGt1dnwga2l8IG3igJl8YSBzfGUgcHxkb2x8bGVrfGF3YXxvIHV8buKAmWN8aXdhfGltdXxhbmp8bWFsfHllbnx1IHd8eWFjfGJpbHxvamF8byBhfGhhIHx1dHV8ZWNofGkgZHx1a2F8dGF3fG7igJltfGl0YXxhd3V8aW5hfG3igJltfGkgYXxpdHV8aG9ufGx1IHxhdHV8bWFrfGlrdXxseWF8bGl0fGplbHxldm98IHZvfGkgbHxtYWh8aGFwXCIsXG4gICAgXCJzbm5cIjogXCIgYmF8eWUgfGJhaXwgeWV8YWkgfGUgYnwgY2F8YWnMsXxpYSB8amkgfCBuZXwgc2l8acyxIHwgZ298Z29hfHNpYXxpIG58ZSBjfGEgeXxpIHl8zLEgYnwgamF8c2UgfGF5ZXxpIGp8YSBifGrDqyB8aXllfGUgZ3xyZSB8b2EgfGh1YXx5w6sgfHF1w6t8IGd1fGh1ZXxlzLEgfHXMsWl8Z3XMsXxuZSB8IG1hfMyxaSB8amXMsXxlbyB8ZSBzfCBodXwgw7FhfGJheXxvIHl8w7FlIHxqYSB8YWrDq3x0byB8YWlqfGRlb3wgw7FlfGEgaXxhecOrfGJhIHwgaml8YmVvfGNhdHwgZGV8IGJlfGUganxpIHN8bWFpfGUgZXxiaSB8YSDDsXwgY298IGUgfGF0b3x1w6sgfMOxYSB8aSBnfGUgw7F8aSBifCBpeXxjaGF8w6sgYnxlYmF8Y29hfG5hIHwgdHN8ZSB5fMyxamV8cmVifCBpIHwgdGl8aSB0fGphzLF8YWNofHVlIHxlIGl8aSBjfG5pIHxvYWN8ZSB0fGEgw6t8IHJlfGplIHxhaXl8b2ppfGVvanxhzLFqfG95ZXwgw6sgfMOrIHR8Y2F5fGlqYXxpY298aWh1fCBzYXxpIGR8ZXJlfGEgY3wgcXV8YWh1fGlqaXxjYSB8dWEgfCB5w6t8IHRvfGEgaHxhc2V8dWVzfMOrIHN8YWNhfCBzZXx1YWl8ZSBkfGVzZXxhc2l8Y2FqfCBhaXwgdHV8dHV0fHV0dXzDqyBjfHllcXxlcXV8IG5hfGNhaXwgacyxfHRpIHxtYWN8ZSBtfMOrIGd8ZWJpfGEgYXxhbml8dHUgfGUgbnx5ZWJ8ZWplfG95YXx0b3l8Y2/MsXxhIG18zLEgdHxpamV8c2ljfGVzb3xlb3l8YSB0fCBhIHwgdGV8aGFqfGNhaHxvYXN8YXJlfGkgbXxhIHN8ZWh1fGHDsWV8IGRhfG8gYnwgZG98aSBpfGkgcnxlIHJ8bmXDsXx5ZXJ8aHXDq3zDqyB5fCBvIHxqYWl8YSBqfGFqZXxhIGd8aWLDq3zDq2F5fGHDsWF8YWphfGEgb3xjb2N8YsOrYXxvY2F8c29zfGRvaXxvaSB8YWNvfGXDsWV8IGrDq3zDqyBkfMOrIGp8Y2FzfMOrY2F8aGF5fGVhIHzMsSBnfGFyaXx0c2l8eWlqfHNhaXzMsSBjfG9zaXx0ZW98byBofGNvIHzMsXJlfG5lanzDq2h1fG8gc3xvc2V8amFifMyxbml8IG1lfHJpYnzDsWVzfHNpIHx5YWp8asOrYXx1YWp8w6sgbXxkYXJ8IHlpfG9lIHxlIG98bmVzfGnMsXJ8bWEgfG5panxpIGh8b2phfHXDq2N8YW1hfMOrIGl8acyxaHxvzLF1fMyxdcOrfMyxaHV8YXF1fMOrY298ZSBhfGHMsSB8w6tqYXzMscOxZXxvzLFhfGdvzLF8IMOranzDsWXMsXx0aWF8YWLDq3xzaWh8IGJpfHRzw6t8c8OrY3wgamV8IGN1fMyxIGF8bmVkfGNhYnxhIGR8b3JlfG1lIHwgb2l8IHJvfGpheXx0c298w6sgcnxleWV8dGEgfGLDqyB8w7Fhanxzb2V8zLFjYXxvzLFjfGHDsW98byBjfGlyZXxvaHV8dWVqfMOxZWp8aSBhfMOxYXN8w6sgcXwganV8YmFuXCIsXG4gICAgXCJrYnBcIjogXCJhYSB8IHBhfCBzZXxzZSB8bmEgfG7JmyB8IG7Jm3wgecmUfCB3YXx5yoogfCDJm3l8yZsgcHzJlsmbIHxhyZbJm3xhIMmbfGEgd3zJm3fJm3zJm25hfHnJmyB8YWxhfMmbIMmbfMmbIHN8yZTJlCB8ecmUyZR8yakgyZt8IMmbIHxwYWF8ZSDJm3xlIHB8yZt5yop8YcmjIHwgcMmpfCDJm3d8YSBwfHdhyZZ8yorKiiB8YSBufCB0YXx5yZQgfHlhYXx5yakgfHfJm258bGEgfHRhYXzKiiB3fCB0yZR8YSBhfMmUIHB8yZt5YXwga8mpfCDJqSB8yal5yZt8YSB0fMqKIMmbfGEga3x3yZvJm3x0yZRtfMmUbSB8yZsgdHx3YWx8yoogbnwgd8mbfCDFi2d8IHTJqXzJmyBufMmbIGt8a3BlfMmbIMmWfG1hyaN8esmpIHwgYW58yoogdHzJmyB5fCBwyop8bsmpIHwgdMqKfMmbecmpfMmpyaMgfMmpIHR8IHdlfMmpIHl8YW7JqXwgcMmUfGEgc3xnYsmbfCBwyZt8IMmbc3xwYSB8a3BhfMmbyZsgfHfJmyB8IG7JlHxkYWF8bsmUyZR8yoogeXxhbWF8eWEgfCBryop8dMqKIHxwYWx8bcmpeXxhecmpfMmpIHB8yaluYXx0yakgfCDJlsmpfMqKIHB8yZQgyZt8IMmbbHwgbWJ8yZQgc3zFi2difGEgeXzJqW1hfMmWyakgfMqKIGt8yZTJlsmUfMmpIG58YsqKIHxtYsqKfCDJm2t8IGtwfMmbamF8IMmbanx0yoptfGphyZZ8cGHJo3xryZsgfCB5ZXzJm3nJm3xhbMmpfCBuYXxpIMmbfCBrZXwgeWF8IMmWyZR8yakgyZZ8yZTJlHl8bmRhfMmWyZQgfGbJm3l8yaMgyZt8yakgc3xqyZt5fHlpIHzJlsmUyZZ8yZtsYXxsyakgfGvJqW18a8mpIHxhxYsgfGLJm3l8cGVlfCDDscmpfGxhYnzJqXrJqXxwZSB8ZXlpfMWLIHB8yakgyal8yZt6yal8IGZhfMmUecqKfGHKiiB8yoptyal8yop5yop8yoptYXxhIGx8c8mUyZR8YSDJqXxla3B8yoogc3wgYWp8YWrJm3wgyZt0fGl5YXx3ZXl8yakga3zKiiDFi3xtYSB8a2FufMmpc8mpfGxhYXzJlHnJlHzJqW0gfGxpIHwga8mbfCBsyZt8YW5kfHNhbXwgc2F8yaN0yop8yZQga3xkYXl8yZTJlGx8yaMgcHxzyakgfMmUxYsgfMmpZsmbfGFrcHxwYWt8c8mpbnxwyalmfG5hYXxuZMqKfGt1bHwgaGF8YcmjdHzJlCB5fHVsaXwgyZZlfCBryZR8ZWVrfCBwZXwgc8mUfG0gbnzFi2dhfGVlIHxnYSB8yZbKiiB8bWHKinxtIHR8ZSBlfMmjbmF8yaMgc3zFi2fKinxhYsmpfGFryal8YSDDsXx5YcmjfHDJqXp8ZWtpfCDJlm98bWHFi3wgbGF8eWVlfGFuYXx0yanFi3zJoyB0fHBhZHzDscmpbXwgY2F8yZsgYXxhIMmWfHDJqXN8aW5hfGTKisqKfMmWZSB8IMmWYXxhIG18bMmbIHxrZWR8IMmbyZZ8bGFrfGFrYXxnyoogfGFzyal8yoogyZZ8IMmbZHxkyoogfG7Kim18IG7KinzDscmpbnxiYSB8yZtwyal8cMqKIHxhZGF8yZtoyZt8aGFsfCBhIHxsZSB8esmpyaN8yZvJm258yZtzyal8IGxlfGHJo3p8dXUgfG7JlsmpfGUgdHzFiyBufMmbZGF8bMmpbXxlIHd8yZQgd3zJqSBhfCDJm3B8IG7JlnzJm2vJm3xpIHB8yaN6yal8YWzKinx6YcmjfGLJqSB8yZsgbHzJqWvJm3zJlCB0fGUgeXzJlmFtfGFhYXxwyZt3XCIsXG4gICAgXCJ0ZW1cIjogXCJ5aSB8IHlpfCBrYXxhIMqMfCB0yZl8dW5pfG5pIHx3dW58IMmUIHwgYcWLfCB3dXxrYSB8IGvJmXwga8qMfCDKjMWLfG7JmyB8a8mZIHx0yZlrfCDKjG18yZlryZl8yZTFiyB8bWFyfCDJlHd8YSBrfG1hIHxpIGt8IGEgfHdhIHwgbcqMfGkgdHxyaSB8yZR3YXx0aMmUfCB0aHwgbWF8YXJpfGkgbXxhIGF8yoxtYXxhxYsgfCBvIHwgYmF8dGhhfGJhIHwga8mUfGEgeXzFiyBrfMmUbSB84oCQZSB8IHLKjHxsyZRtfGvJlCB8aSDJlHxrb218byB3fMqMbsmbfHRlIHxtyowgfCDFi2F8aSBvfMmZbSB8aMmUZnzJlGYgfGFsyZR8b20gfGEgbXzJlCBifMmUIHl8YcWLZnxmyZltfGhhbHxryZlwfCBtyZl8xYtmyZl8yox0aHwgdMqMfGEgdHxhIHJ8xYsgeXzFi3RofMWLYSB8IMqMdHzJlCBrfGUgyZR8yZsgdHwgcm98d2FufGVtYXwgZ2J8YW5rfCB5ZXx0aCB8eWVtfG5rb3wgbcmUfMqMd2F8IHPJlHxryoxtfG0gYXxryZl0fMqMbcqMfGFuyZt8csqMd3zJlCB0fMqMbWV8yozFi3R8bWUgfMqMdGV8IGLJm3xoyZQgfGEgyZR8a2kgfMqMxYsgfG0gyox8bSBrfGFyIHzFiyDJlHx5yZsgfMmZdGh8yZsgyox8IHRhfGkgYXx0YSB8IMqMa3zJmSBrfHRoaXxldCB8cGV0fHBhIHzFi8mUxYt8IHRlfMWLZSB8aSDKjHxyYSB8aSByfMmZcGV8IMWLyZR8yZsga3zKjCBrfCB5yZR8IHLJmXxryox0fHLKjCB8IHnJm3xiyZsgfGUgYXxlIHR8cm8gfMmUIMqMfGFryZl8dGjJmXzJlCBtfGHigJBlfMmZcGF8YSB3fGvJmWx8yZkgYnx5yZQgfMmZIHR8bcmUIHxib3R8xYsgdHxlIHl8yZnFiyB8bcqMc3xnYmF8ZSBtfG0gcnwgYm98yozFi2V8IGFrfMmbIGF8bsqMbnxsyZnFi3zJmWzJmXxzyZTFi3zFiyBifHTJmW18d29wfMqMIGF8yZkgeXxryZlzfHNla3zJmSBzfHTKjHR8bGkgfG90IHwga298yZsgxYt8xYsgYXxla3J8IHJhfMmUdGh8c8mUdHzKjHNlfGF0aHxydSB8dCBrfMmbIG18ZSBrfMmbdGh8bWHigJB8cG8gfCBwb3wgd298yoxyyox8aSB5fG0gdHxtIMWLfHTKjMWLfHTJlMWLfGUgd3xnYsqMfHTJmSB8bnRofMqMeWl8yoxsyZl8aMmZbnzKjCDKjHxvcCB8aWtpfMqMa8mZfHLKjHJ8yoxydXzFi2difHPJlCB8yZl5aXxyyoxufGdiyZl8yZQgYXzJmXIgfMmUa8mUfCBwyZl8IMqMcnzJmW7KjHxsyZlzfG5rYXxpdGh8yZlsaXzKjHkgfGLJmWx8bcqMeXxyYW58byDJlHzJmyByfGFudHxmIMqMfG3JmSB8dGkgfGYgdHwgdMmUfMmZcyB8ciBrfGhpIHx5aWt8yZQgyZR8csmZa3xrYXJ8yowgdHxtyox0fGzJlGt8YXlpfGtyyox8cGFufG5hIHxryoxyfG3JmXR8dMmZdHx0aG98cGkgfG3KjGx8IHRvfHRvIHwgd2F8yoxnYnx0aMmbfMmZIGd8YmFzfGXFiyB8YcWLa3zJlCByfHRoyox8byB0fMmbxYsgfGnigJBlfGvKjCB8a8qMc3xtyZTFi3xvIGR8a8mUxYt8ZGlufMmUIGd8a8mZd3xkaSB8xYsgd3zJmW1hfMmbciB8yowgeXzJmWsgfMWLa29cIixcbiAgICBcInRvaVwiOiBcIiBrdXxhIGt8d2EgfCBtdXxhIG18bGEgfGFsaXx5YSB8dHUgfGkgYXxlIGt8YSBhfGFrdXx1bGF8bnR1fGFuZ3wgYWx8bGltfGx3YXxrd2F8YWFufG11bnxtd2l8ZGUgfHVsdXxuZ3V8d2kgfGltd3xsdWt8Z3VsfG5hIHxlbGV8IGFrfGt1YnxvbnN8dW50fGt1bHxvb258c2UgfGFudHxuc2V8IG9vfHp5aXxnd2F8c2kgfCBiYXxiYSB8IGx3fHp5YXx1bGl8ZWxhfGEgYnwgY2l8IGthfCB6eXx3YWF8YW5kfCBhbnwga3d8aWxpfHVraXxlZWx8dWJhfG55aXxhbGF8a3V0fGlkZXwgbWF8a2lkfGlzaXx1bnl8aSBtfGt1bnxjaXN8IHlhfGxpIHxpIGt8bmdhfGEgbHx5aW58a3VrfGthIHwgdWx8a3VzfGluYXxsYWF8bnRlfGlsYXx0ZWx8bXVsfHdhYnx3ZWV8bmRhfGl6eXxlZGV8IGFtfGxlZHxhbWJ8YmFufHdlIHxkYSB8YW5hfGt3ZXxlIGF8bGlsfCBidXxvIGt8YndhfGFrYXx1a3d8byBhfGF0aXx1a298YXdvfHlhbnxrbyB8dWNpfGlsd3xiaWx8Ym8gfGEgY3x3byB8YW11fGxhd3xtYnV8aSBifGJ1bHx1bWl8YWxlfGFiaXxrYWt8ZSBtfHUgYnxha3d8dSBvfHRpIHxzYWx8a3V5fHVuZ3xiZWx8d2FrfCBid3xvIGx8Z2EgfGthbHxhc3l8ZSB1fGxhbnwgbWJ8bG8gfHVzYXxpa2F8YXNpfGFhbXxhIG58dWxlfGJpIHxjaXR8YnVufGt1cHxlZ3d8bXVrfGlnd3x1IGt8dSBhfG1iaXx3aWl8a3VtfGEgenxhY2l8a3UgfHlpIHwgbWl8eW8gfGxlIHxtYXN8eWlnfHVidXxra2F8aSBjfCBhYnxlbmV8bmUgfG5vIHxhIHl8IHdhfGFib3xuZGl8dXRhfHN5b3xheWF8YWJhfGxlbnxrdWN8ZXlhfG8geXxtYWx8aW5kfGxlbXwgbHV8dWtrfG1vIHxla2F8bWlsfG1ib3xpdGF8dWthfGFtYXxsaWt8dSB6fG5kdXxtdSB8bnp5fHp1bXxiYWx8YWJ1fHVwZXxiYW18c3lpfHUgbXxsaXp8aW50fHRhIHx5YWt8bGV5fGUgYnxueml8bGlpfGthYnx1dGl8dWJlfHV1bXxpIG58Y2lrfGV6eXxpaWJ8aWJhfGFuaXxpa298aWlufGlsZXx3YXN8IGNhfHp5ZXxhbHd8IGFhfHN5YXx1a3V8dHdhfG1pbnx0YWx8bXVjfHVtdXwgbmt8ZHUgfGF6eXxvbnp8bGVrfGtvbnxidWt8byBtfHlpa3xpIHp8bHdlfHUgdXxvYmF8a3dpfGltb3xnYW58emlsfGRlbHx1c3V8IHdlfHBlZ3x5ZWV8bmd3fHN1bXxpbWJ8dW1wfG1wdXxuZGV8ZW5kfGkgb3x5b298byBufCBuY3xhIHV8bWkgfGFub3x1eWF8byBjfGRpIHxtYmF8eWlsfHlhbHxha298YSBvfGlzeXxpenV8b21iXCIsXG4gICAgXCJlc3RcIjogXCJzZWx8amEgfCBqYXxsZSB8c2UgfHVzdHxzdGV8dXNlfGlzZXzDtWlnfG1pc3wgdmF8Z3VzfGVsZXx0ZSB8aWd1fHVzIHxzdCB8ZHVzfCDDtWl8IHbDtXwgb258b24gfGUganwgaW58aW5pfG5pbXxtYSB8ZWwgfGEgdnxpZ2F8aXN0fGltZXxhbCB8dsO1aXxkYSB8IHRlfGxpa3wgaWd8YWR1fG1lc3xhbWl8ZW5kfGUga3xlIHZ8bCBvfCBrYXxlc3R8IHJhfCBzZXzDtWkgfGlrdXwga298dmFifGFiYXx0dXN8dWQgfGEga3xlc2V8IGt1fGwgaXxnYWx8dHNpfGx0IHxlcyB8ZW1hfGlkYXxrcyB8YSBpfG4gw7V8bGlzfGF0dXxyYWh8dGFtfGFzdHxzdGF8ZSB0fHMgc3wgbWl8dGEgfG9sZXxzdHV8YmFkfGdhIHx2YWx8aW5lfCB0YXxuZSB8IHBlfG5kYXxlbGx8YSB0fGFsaXxhdmF8YWRhfGEgcHxpayB8a3VzfGUgc3xpb298dGVzfGFoZXxpbmd8bHVzfCBvbHxhIGF8aXMgfHZhaHxhIHN8ZWkgfCBlaXxrb258dmFzfHR1ZHxhaHZ8dCBrfGFzIHxhIHJ8cyB0fGUgZXxpIHZ8ZWtzfG9vbnx0IHZ8b25pfGvDtWl8cyBrfHNpb3xzdXN8ZSBhfGdpIHxtYXR8bWlufCBwaXxzIHZ8b21hfGt1bHxkYWR8IG5pfGUgcHwgb218aWdpfHRlbHxhIGp8ZSBvfG5kdXxkc2V8bGxlfGVlc3x0c2V8dXRhfHZ1c3xhYWx8YWphfGkgdHxkYW18YXRzfG5pIHxldGV8cGlkfHBlYXxlIMO1fGl0c3xsbWF8bGV2fG5pc3xkaXN8w7xoaXxzbGl8aSBzfG5lbnxpZWx8ZGVzfGRlIHx0IGl8ZXQgfG5pbnxldmF8dGVnfHVzbHxlbHR8aWxpfGkgbXxuZyB8IGVlfHRlbXxzZXN8aWxtfHNla3xhYiB8IHDDtXxhaXR8IG5lfMO1cmR8c2VkfHbDtXJ8dWwgfCDDvGh8IGtpfGFiaXwga8O1fGVnYXxyZHN8IHbDpHxvdHN8IGV0fCByaXxww7VofGVkIHx0w7bDtnxzaSB8YWQgfGkga3wgdMOkfGF0YXwgYWJ8IHN1fGVsaXwgc2F8cyBvfHMganxzaWx8bm5pfGFyaXxhc3V8bm5hfCBhbHxudWR8dW1hfHNpa3xodnV8b25ufGVhYnxlbWl8cmlkfGFyYXxzZXR8ZSBtfCBrZXxhIGV8dMOkaXxkIGt8cyBwfGkgZXxpbWl8ZWlzfGUgcnxuYSB8IMO8bHxhIMO8fGtvaHxhIG98YWtzfHMgZXxlIG58IHNvfMO1aWt8c2FhfGFuZHxpc2l8bmRlfHR1bXxoZWx8bGlpfGtpbnzDpMOkcnxzZWF8aXNrfGVlbnxlYWR8ZHVtfCBrw6R8cmlpfHJhdHxsZW18dW1pfGtvcnxzYSB8aWR1fG11c3xyaXR8aGFyfCBzaXx2YWR8aXRhfGFsZXxrYWl8dGVvfCBtw7V8YWRlfMO8a3N8bWFzfGxzZXxhbHN8aWFhfHNpYXxzb3R8amFsfGlpZ3xpdGVcIixcbiAgICBcInNua1wiOiBcImFuIHwgYSB8IG5hfG5hIHxhIG58Z2EgfCBnYXxlbiB8IHN1fHJlIHxhIGt8IGthfHN1IHxhIGF8YSBzfCB0YXx1biB8IHNlfHRhIHxtYSB8IGkgfGFtYXxkbyB8ZSBzfGVyZXxzZXJ8YWFufCBkb3xuYW58bnRhfCByYXxuIHN8IG1hfCBraXwgamF8amFtfCBkYXx0YXF8bmUgfGEgZ3xhIGR8IHlhfG4gZHxuaSB8IGt1fHJlbnxyaSB8IHNpfGFuYXx1IGt8biDFi3zFi2EgfCBudHxlIGt8bWFhfCDFi2F8bmRpfHdhIHxhcXV8YW5lfCBiYXxyYSB8YSByfCBzYXxvcm98biB0fHJhYXx0YW58IGtlfG94b3wgeGF8aSBzfGRpIHxhIGZ8YW5kfHRpIHxhIGJ8IGJlfGkga3xnYW58YWF4fGFhd3wgZ298aXJpfGtpdHxhd2F8YXh1fHNpcnxhIGl8IGR1fGEgdHxtZSB8YXJhfHlhIHxpbml8eG8gfHR0YXxpIGF8b2xsfHJhbnxvbiB8Z29sfGUgZHxuIGd8YSBqfG5kZXxhYXJ8ZSBtfGJlIHxhIG18YXJpfHUgbnxsbGl8cm9ufCBmYXxxdSB8IHRpfG4gbnxhYWR8YXhhfCDDsWF8byBhfCBzb3xrZSB8bnUgfCBrb3xkaW58bGxlfGRhbnxhIHl8bWFufGkgZ3xzb3J8dSByfGkgdHwgbm98YXJlfHhhcnxrdXV8IHdhfGVubXxhZGF8YmFhfGRlIHxxdW58byBrfHlpIHx4dW58aSBufGkgeHwgYW58IGhhfGthbnxmbyB8YXR0fGFuZ3xuIGt8byBzfGRhbXxoYWF8ZGEgfG4geXxrYXR8ZSB0fGxpIHwgZm98aSBkfCBtb3xubWV8dSBifGkgbXxhYmF8IGZlfGxlbnwgcmV8cGEgfGFudHxheWl8eWFufGUgbnxhIHh8ZSB5fG4gYnwgZGl8cHBhfGFwcHxrYXB8eGEgfHUgdHxvIGd8bW94fHVyZXwgeG98b25kfGkgaXxhIMOxfG4geHx0YWF8ZHUgfGVsbHwgbWV8aXRpfHh1IHx1IGR8dWRvfGluZHx1dWR8YW51fG5nYXxvIGJ8bnVufG5veHxuIGZ8a3UgfGFnYXxhbsWLfGR1bnxpdHR8ZXllfHllIHwgYm98b3JlfGl0ZXx1IGF8b29yfCB5aXwgcm98c2FyfHNhYXxpbGx8ZSBifCB3dXxsZSB8cml5fG5tYXxybyB8a2VufGVkZHxmZWR8YnVyfCBtdXxtdW58byBufGlpbnx0ZXl8c2VsfCB0dXx1IG18bGxhfGxhIHxvbm98w7FhYXxkZW58ZmFhfGEgd3x0ZSB8aW5tfGthIHxhYXl8IHRlfGluYXx4b298byBkfGlyYXx1IHN8byB0fG5tdXxuZW58YmFufGVuZXwgbml8w7FhIHxvIGl8dXVyfHVuYXxvIG18eG9ufG4gd3xrYWZ8Z3UgfGUgZ3xhIGh8a2lsfHl1IHx1bmR8YXFpfGVlbnwgYml8YmFnfGkganxuIMOxfGxhYXxpIHJ8bm8gfHNpZ3xpZ2l8a29yfCBvIHxpIGJ8YmF0XCIsXG4gICAgXCJjamtcIjogXCIga3V8YSBrfHlpIHxueWl8IG55fGxhIHwgbXV8d2EgfCBjaXxhIGN8YSBufCBoYXx3ZSB8YSBtfG5nYXxnYSB8aSBrfGt1bHx1bGl8c2EgfGVzd3xhbmF8ZWxhfGEgaHx1bmd8aGEgfHRlbHxzd2V8emUgfHlhIHxhIHV8IGthfCB3YXx1Y2l8IHlhfGF0ZXxjaSB8bXdlfGt3YXxtYSB8bWJ1fGppIHxrdXR8aGFufHUgbXwgdWx8YW5nfCBtd3xuYXR8Y2EgfCBjYXxlIG18bXUgfHV0aHxhbGl8aSBufG11dHx0aHV8aSBtfGUga3xsaXR8aHUgfGluYXxrYSB8a3VwfG5hIHwgbWF8YXNhfGFrdXxlIG58YSBpfHB3YXxuaml8d2VzfGxpIHwgbWJ8ZSBhfGlmdXxmdWN8a2FufGJ1bnxpemV8aW5nfGEgeXxhbmp8bWJhfHV0YXxpdGF8aSB1fCBrd3xtdWt8aXRlfGt1c3xhbWJ8bGlufGF3YXxpbWJ8Y2lwfGxpbXxvbmd8ZXNhfGkgY3xuZ2V8IGFrfG5ndXwgY2V8IGFufGlsaXx1bHV8IG5hfG5hd3xrdWh8YW1hfHVwd3xlbXV8bGVtfGlsYXwgdW58YSBhfHVsYXx1a3d8YWthfGNpZnx1bGV8d28gfGhhc3xrdW58a2hhfCB4aXxvIG58dGFtfCBlc3x1c2F8YWxhfHRlIHx1IGN8IG5nfGlrdXxjaWt8bHlhfHdpbHxlIGN8dGEgfHhpbXx3aWt8IGxpfG11Y3wgbHl8aWtofG5vIHxvIG18IGlufGkgYXx1dHV8ZSB3fGFrd3xtbyB8aW1vfG1pbHwgbWl8aSB5fGJhIHxrbyB8bmdpfHVmdXxrdSB8bGlqfHVrYXxpaml8YSB3fHVtaXxvIHd8dGFufG8geXxlIHl8aW13fHVsd3x1aGF8bmFsfHNvIHxvIGt8IHllfGkgbHxlIHV8dW13fGJ1IHxhY2l8bHdpfGFoYXxjaXp8bXdpfGthdHxsb258dSBrfHllc3xpcHd8dWxvfGF6ZXx1bml8d2FrfGxvIHxlbWF8byBjfGFjb3wgaXp8a3VtfGlrYXxlIGl8Y2ltfGlzYXxlbnl8dW11fHBlbXx5dW18a3dvfCBpa3xrd2V8ZSBofG5nd3x3YW18Y2lufGkgaHxhIGV8d2FufGdlIHxhIHh8d2FzfGxlIHxrdWt8dXplfGxpa3xndWx8bmlufHB3ZXxvIHV8bWFofGF0YXx1bWF8IHVwfHNha3x6YW58IHVmfGZ1bnxnbyB8d2VufG1iaXx1c298Z2VzfGNvIHxuZ298aWtpfGhhbHxnaWt8aWxlfG5kYXxrb2x8a2FsfGt1enxuZSB8IGphfG96ZXx5b3p8aWt3fGlwZXxjZXN8c3dhfGNpc3xtYW58aSBpfGlzb3xlbGV8YXNvfHdhenxtaSB8dXB1fCBpZnxpc2V8dW1ifHV2dXxraWx8IGl0fGkgd3xzb2t8byBsfG9rb3xueW98dW5hfGJpIHx0dW18aWtvfGVuZXxoYWt8c2VtfGEgbHxkYSB8dnVsfG55dXwgdXR8IHVrfGVrYVwiLFxuICAgIFwiYWRhXCI6IFwibWkgfG7JmyB8IG7JlHwgbsmbfCBlIHwgaGV8aGUgfG7JlCB8IGEgfMmUIG58a8mbIHwga8mbfGkga3wgbmd8YSBufGkgbnxhYSB8ZSBufGJsyZR8IGJsfMmbIG58yZsgZXxnyZsgfG5nyZt8ZSBifGzJlCB8IG1hfCBtaXzJmyBofCB0c3wga298aGkgfMmbIGF8IMmUIHxrbyB8ZSBofMmbyZsgfHRzdXwgbml8yZQga3xhIG18YSBrfGkgaHxtYSB8IG55fGVtaXxhIGh8YW1pfCBiZXxiZSB8aSBhfHlhIHwgc2l8ZSBtfGUganwga2F8c2kgfMmbIG18yZQgZnwga3B8bnlhfCBqZXxuaSB8b28gfGxvb3xvIG58IGhpfCBmyZt8ZsmbyZt8YSB0fGxhYXxhIGJ8amUgfGUga3wgcGV8cGVlfCB5ZXxtyZsgfHVtaXzJlCBtfCBoYXxhIGF8yZRtaXxvbWl8a3BhfCB3b3zJlCBlfGkgdHzJmyDJlHxlIHN8aSBifMmUIGh8IGxvfMmbIGt8a2UgfGhhIHxiyZQgfG1hYXxtbGF8aSBtfMmUIHR8yZTMgSB8ZSBwfGthYXxhaGl8IHNhfGzJlGh8yZRoaXxzdW18yZQgYXxuyZTMgXxvIGV8IG5hfCBnYnxlZSB8ZSDJlHwgaml8ZSBhfGkgc3wgbWx8yZsgc3xzYSB8IGjJm3zJlMmUIHx5ZW18dSBufGFsb3wgasmUfCBrdXwgbMmbfCBiyZR8IHRvfGEgc3zJmyBifGkgbHxsyZsgfHN1YXxvIGt8dWFhfGEganwgc3V8yZttaXwgYWR8yZsgeXxpbWl8YWRlfCBmYXwgYWx8asmUbXxkZXN8ZXNhfGXJlCB8aWhpfGppIHxuZSB8yZsgdHxhIGV8yZsganxha2V8ZSBlfGtha3xuZ8mUfG8gYXxlZW18aSBqfGUgeXx3byB8IGJ1fGhpbXxlIHd8zIEga3zJlCB5fHRvbXxzdcmUfGlhIHxhbmV8bWFofCB5YXxvIGJ8IGtlfGUgZ3x3b218Z2JhfHVlIHxiYSB8IGJpfCBndXx1byB8ZSB0fHNhbnx1dSB8cGEgfGhpYXwgdHV8IGh1fHN1b3wgd2V8dHPJlHzJlCBzfGUgZnxrdXV8Z8mUIHxvIG18YSBwfCBqYXzJmyBwfGZhIHzJlCBifMmbIGd8aMmbyZt8IGFifGEgbHxodSB8eWUgfG5hIHx0dWV8aSDJlHxpc2l8IHPJlHxzyZRzfGphbXxndSB8dGkgfMmbIHd8c2lzfG8gaHx1yZQgfGxpIHxhIHd8IGJhfHPJlMmUfGFiyZR8IGp1fCBobHzJlHPJlHxobGF8yZQgbHxhIHl8c8mbIHwgyZRtfMmUbcmbfGkgd3zJm3RpfHDJm3R8a3DJm3x0byB8IHlpfGFzYXwga8mUfG55dXxha3B8cGFrfGtwZXxzyZTJm3zJlMmbIHx1IMmUfHnJm218byBzfHXJmyB8IG51fHBlIHxzZSB8IHPJm3xvIGp8YSBnfMmUIHd8IHdhfHNlbXwgcHV8c3UgfGUgbHwgbcmbfHUga3xoyZsgfG5paHxrYXN8IGbJlHxrb258b27Jm3xiaW18bGFtfGltyZt8bnnJm3wgZml8aGnJlHx1c3V8aSBwfGJpIHwgbsOtfHlvIHxlZcmUfHVhbXxidW18bsOtaHzDrWhpfG8gbHx1bGF8a3VsfGd1yZt8bmFhXCIsXG4gICAgXCJiaW5cIjogXCJlIG98bmUgfCBuZXxiZSB8YW4gfGVuIHx2YmV8IG8gfHdhbnxtd2F8biBufGUgZXxlbXd8ZXZifG13ZXxpbiB8bmEgfGUgbnwgbmF8IGVtfG9td3xlIGF8biBlfGUgaXwgdmJ8cmUgfCBrZXxnaGF8Z2JlfHdlbnwgZ2h8aWUgfHdlZXwgb218ZSB1fCBraHxibyB8aGlhfCBpcnxoYSB8byBrfG5td3x0aW58biBvfHZib3xoZSB8ZXRpfGlhIHxrZXZ8IGV2fCB3ZXwgZXR8d2lufGtlIHxlZSB8byBufCBoaXxhIG58YSByfG8gcnxnaWV8cmFufCB5YXxpcmF8bXdpfGEgbXwgbXd8YSBnfGdoZXxvZ2h8IGEgfCByZXwgdWh8ZWtlfCBvZ3xuIGt8IG5vfHJvIHx5ZSB8a2hlfCB5ZXxoZWt8cnJpfG5vZ3xlZW58dW5tfGEga3xvZ2l8ZWdifHlhIHxlcmV8d3VufGh1bnxtd3V8IG1pfG1pZXxkZSB8IHJyfGEgZXwgYXJ8YSBvfG4geXxlIHZ8byBnfHVuIHxyYSB8IG90fCBnYnx1aHV8IG9rfG4gaXxpZW58YSB2fHJoaXxlIGt8biBhfGkgbnxhIHl8IHJ1fGtoaXxuIG18aGllfCBlZ3xvdG98YXJyfGJhIHxvdmJ8dSBhfGUgeXxydSB8aWFufGhpIHxrcGF8IHJhfG8gbXxuZGV8eWFufGUgd3xhbmR8dG8gfG8gZXxvIGh8IG5pfCByaHxlIHJ8biBnfCBlcnxuIGh8dWdifHdlIHxoYWV8b24gfCBpeXxkb218cnVlfHUgZXwgb3J8IGlrfHJlbnxhIGl8YXJvfGlrb3xvIHl8biB3fGJlbnxlbmV8cmlvfHNlIHxpIGt8dWVtfGVoZXwgb3Z8b3R1fG9rcHxrdWd8b2JhfGlvYnwgdXd8YWVufCBkb3xpcnV8YWUgfHR1IHx1ZSB8IGl3fCBtYXx3dSB8cnJvfG8gb3xyaWV8biB2fCB1Z3xhIHV8bm5hfCBhbHx1Z2h8YWdifHBhIHwgYXl8byB3fHplIHx1d3V8bWEgfCBlYnxpeWV8YXlhfHVnaXxpbm58Z2hvfHJyZXxuaWl8YWt1fGdiYXxraHV8IHNlfHlpIHxvbm18aG8gfGEgd3xpaSB8aXdpfCB1eXx1eWl8ZSBkfCBpIHxoaW58b2JvfHUgb3wgYWt8YmVofGViZXx1aGl8YmllfGFpIHxkYSB8aSByfGdib3xvIHZ8d29ufG13b3x1bXd8IGFnfG9kZXwgZWt8IGxhfCB1bXxhYW58IGVofGVnaHx5aW58YW5tfG1vIHwga3B8IGJpfGtvbXxpcnJ8aSBlfGEgYXxraGF8b2RhfGJvbnxhIGR8IG93fG93YXxnaGl8biB1fG8gYXx5ZW58ZWVtfGllZ3wgYXp8YXplfGhvZXwgeWl8b2UgfGUgZ3xlbGV8bGUgfGx1Z3wga2F8YWEgfCBhc3x5YWF8Z3VlfGEgaHxtdSB8bnJlfCBvZHxuIHJ8ZXJvfGVzZXwga3V8ZW5yfGxlbHx2Yml8d2EgfHUgaXxhIGJ8b3JvfGJpIFwiLFxuICAgIFwiZ2FhXCI6IFwibcmUIHwgbml8bmkgfGvJmyB8yZsgYXwgYWt8bMmbIHxpIGF8IGhlfMmbIG18YWvJm3wgbMmbfCBrb3xnYsmbfMmUIG58yZvJmyB8IG3JlHwga8mbfHnJmyB8bGkgfMmbIGV8a28gfMmUIGt8aSBlfGFhIHwgecmbfGLJmyB8IG1sfHNoaXzJmyBofGVnYnwgZ2J8yZTJlCB8bWxpfCBmyZt8ZsmbyZt8aGVnfG7JlCB8YSBhfGkgbnxhxYsgfG9vIHwgbsmUfGkga3xoZSB8yZsgbnwgZXN8IGFtfMmbIGt8yZQgeXwgc2h8IG1hfGVzYXxsb298amkgfG1hxYt8YW3Jm3xlbcmUfMmUIGZ8ZmVlfCBla3wgYWx8yZtpIHxpaSB8yZQgbXzJlCBhfGLJlCB8ZSBufMmUIGx8YW3JlHwgZWh8YWxvfGhpIHxuYWF8ZWUgfMmUbcmUfG9uaXwgZW58byBufGtvbnxhaml8aSB5fGkgbXxzYSB8byBhfGVsaXx1bcmUfCBiyZR8IGh1fHllbHxodSB8ZWVtfG7Jm8mbfHRzdXwgYWh8IG7Jm3xzdW18dHPJlHwgYW58bmlpfG8gZXxiYWF8IGFzfG3Jm2l8ecmUyZR8Z2LJlHxhYWF8bmEgfGkgaHxleWV8yZsgZ3xlyZQgfMmbaml8IGF0fGFuYXxla298ZW5hfG8gaHzFiyBufGtvbXwgdHN8yZQgZXxtYWp8aSBzfGkgbHxlZmV8b21lfCBrcHxhIGx8a3fJm3xrdSB8ZWhlfHRvaXxhIG58c2FhfGLJlG18aGEgfGEgbXxryZtqfGtwYXxoZXd8IGt1fCBzYXwgbmF8aGnJm3wgaGl8YW5lfGdiYXxlIGV8aSBmfCBtyZt8yZsgdHxiyZtpfGFzaHzFiyBrfGUga3wgZWp8aGV5fGFrYXxhdHN8bmUgfGl0c3xlIGF8c2FufCBheXx5ZSB8IGplfCBrcnwgZXl8bWxhfGXFi218bml0fGEgaHzJlCBifMmbIHN8YW7JlHzFi23JlHxhIGV8yZsgYnxqZcWLfMmbIHl8YWFufGtyb3wgYWJ8IGFmfGFueXxpYcWLfMmUIGd8YSBrfCB5yZR8dcmUIHxzaHd8ZXRzfGVryZt8dXN1fMWLxYsgfMWLbWF8ZXNofHUgbHwgYmF8IGV0fGnJlCB8aSBqfG8ga3xzdcmUfG9rb3wgeWl8ZSBzfCBhZ3xhZmV8YWdifG9pIHzFiyBhfHJva3xvIHN8IGF3fGFpIHwgaml8yZsganxheWV8xYsgaHxpc2h8bnnJm3xsYSB8IGFkfG8gbXwgZWZ8dHPJm3xzyZsgfHfJlCB8ZXfJlHxtyZTJlHxlaGl8YcWLbXxod2V8IGLJm3wgdG98yZQgaHxqyZsgfGFoYXwgamF8cGHFi3xhbMmbfGF3b3xzyZQgfMWLdHN8yZvFi3R8acmbxYt8YmlpfGRpyZt8IGRpfG3Jm2J8ZW5pfGhpc3wgbnl8ZSBifGhpa3x1IGt8YXRlfGkgYnzFi23Jm3xha3d8byB5fGXFiyB8YWhlfCBsb3xtZSB8YWRlfMmUIGp8a8mbbnx0ZcWLfHllyZR8yZQgc3xkZXN8IHN1fHdhbHxuecmUfCBlYnwgZWd8xYsgbXxtZWZ8c2HFi3zJmyBsfG8gbHx1IG58YXNhfHNlbXxqaWF8d8mbIHwgZW18byBifGdiZXxoaWx8aWhpfGhpaHzJlMWLIHxuYWt8ZSBofHN1c3xlIGdcIixcbiAgICBcImtuZ1wiOiBcIiB5YXxuYSB8eWEgfGEga3wgbmF8YSB5fGEgbXwga3V8YSBufGEgYnwgYmF8dSB5fGFuZHxrYSB8IG11fHlpbnx3YW58dHUgfCBsdXxha2F8IG1wfHZlIHwgeWl8bGEgfG50dXwga2l8bXBlfHBlIHxuZGF8YSBsfHNpIHx5YW58YW5hfHNvIHwga2V8ZSBufG9uc3xuc298ZGkgfGRhIHxuZGl8aSB5fHUgbnxsdSB8bXVufGFsdXx1bnR8aW5hfGUgeXxuemF8bHV2fGFsYXx1dmV8IG1hfHUgbXxrZSB8emEgfGF5aXxzYWx8byBtfGJhbnxuZHV8dGEgfGlzYXxrYW58dWx1fGkgbXxhbWJ8bWEgfGtpbXx1IGt8ZndhfCBueXxueW98eW9ufGFtYXx0aSB8YW5nfGFuenxkdSB8a3VzfG8geXwgbWV8aSBufHRvIHxpbnN8bnNpfHdhIHx1c2F8IG1vfGtvbnx1dGF8ZW5kfGkga3x1a2F8IGJpfGEgZHwga298bWJ1fG1vc3xzYSB8IHZlfGlrYXxtdSB8b3NpfGUga3x1dGl8a3V6fGltcHxhIHZ8ZSBtfHVuZHxpbmR8IGZ3fGlsYXwgdG98cHdhfG1wd3xuZ3V8YmFsfGFkaXxiYSB8IHNhfGxlbnxzYW18c2lrfG1hYnx0aW58dndhfG1iYXxrdWt8IGRpfHlheXxhIHR8eWkgfCBsZXxhbnR8IGthfGF0YXxpc2l8b2xvfGtpc3xtdXR8dWxhfGxvIHxidSB8c3UgfCBidXwgYXR8YW11fG8gbnxkeWF8a3V0fGRpbHwgbnp8bmdpfGFidXx1c3V8YnV0fCBudHxuaSB8YmFrfGt1bHxlIGJ8bmdhfGUgbHxpbnp8aW12fGd1IHx3dSB8IGR5fGx1c3xhd3V8IHRpfGxha3xiYXl8YnVufGthdHxuZ298dGFsfGkgYnx1dHV8a2FrfG8ga3xiaW18dXppfHV6YXxtdnV8IG5nfG5ha3xpa3V8YmF3fGVzYXxraW58a2VufHlha3xtcGF8bHV6fHVtdXxudSB8bnRhfGRpc3xkaWt8dnVrfHUgZnx0YW58c2FkfGF0aXxua2F8YW5rfGx1a3xtYWt8b25nfCBtYnxhbml8aSBsfGx3YXxhYmF8bHV5fHV5YXx5YWx8aW5nfHp3YXxrdXZ8aWRpfGt1IHxnYSB8eml0fGJpc3x1dnd8dXp3fCBuaXxzd2F8IG5rfGl0aXxtZWZ8ZnVufGlidXxuc2F8YWt1fHVmdXxrdWJ8bGFtfG1ldHxpIGF8bXVzfGV0YXxhIGF8dSB0fHR3YXxhdHV8dHVrfGZ1bXx1a298aWtpfGRvbnxrb2x8a3VufGJhbXxlbmd8dWt1fG5kb3wgbnN8YSBzfGVsYXx1c2l8cGFtfG12d3x1IGJ8aSB0fHpvIHxhbnV8dGlzfHVrZXxzdWx8dGUgfGdpZHxkaWJ8eWFtfGlsd3wgbWZ8b2xhfHVtYnx1c298a2FtfGdpIHxtYml8b2tvfG56aXxpIHN8IG5kfG1mdXxsdWZ8ZHVzfGJ1bXxsdXR8bWFtfGRlZHx3aWx8dGFkXCIsXG4gICAgXCJuZG9cIjogXCJuYSB8b2t1fHdhIHwgbmF8YSBvfGEgbnxrYSB8bnR1fCB1dXx0dSB8dXRofCBvbXxlIG98bWJhfG9uZ3xvbXV8YmEgfCBva3x1dXR8IG5lfGhlIHx0aGV8YW5nfGhlbXxlbWJ8dW50fG8gb3xhIHV8IHdvfG5nZXwgaXl8ZWhlfGthbHwgbm98YSB3fG8gbnxubyB8bmdhfGUgbnxrbyB8bXVufG9rYXxsbyB8byBpfGxvbnx3ZSB8dWx1fGEgbXxhbGF8IGtlfGxhIHxhIGt8dSBufGhhbnxrdSB8Z3dhfG9zaHxzaGl8YW5hfG5ndXxpbG98YW5vfG5nb3xrZWh8IG1vfGdhIHxuZW58bWFufGhvIHxsdWt8dGhhfGdlIHxndWx8dSBrfGVuZ3xoYSB8YSB5fGVsb3x1a298YSBlfHllIHxoaWx8dWthfGxpIHxnbyB8d2FufGF0aHx3byB8dGhpfGRoaXx1dW58IHBhfGt3YXwgdGF8YSBwfHlhIHwgc2h8IGtvfG5rYXxsd2F8IG9zfG13ZXxvbWF8dGEgfGVtYXxzaG98IGthfGUgbXwgeW98c2hhfHdva3xpa2F8cG8gfG8gd3xvbmt8ZSBwfHBhbnxpdGh8YSBpfG9wYXxnZWx8aGlrfGl5YXxoaSB8YWFufHVuYXxvIGd8a3VrfGFsb3xvIGV8bm9rfG5kanxsZSB8YSBhfG1lbnx5b218YSBzfGkgbnwgbGl8YW5kfCBwb3xwYW18bGF0fGthbnxhc2h8d2FhfGFrYXxhbWV8Z2FtfHVtYnxhIHR8b25kfHl1dXxvIGt8b2xvfGFuZXxpbmd8aWd3fGFhIHxlbGV8a3VsfG1vbnwgZ3d8aWx3fGdhbnxvIHl8aWlsfGl5b3wgZWx8a3V0fG5pbnxva298aWtlfG8gbXwga3V8YWRofCB5ZXxhbXd8b21lfHllaHxheWV8IGdhfCBvbnwgeWl8YSBnfGx5b3xuZSB8IG5nfG1ib3xvcG98a3VnfGVrb3x5b2t8d29tfCBveXxub258aXllfCBnb3x1bG98ZSBlfCB3ZXwgZSB8aW5hfGFudHxvbW98ZW5lfCBhIHxpIGt8bW9rfGhpbXwgZGh8dW5kfG5kdXwgbWV8ZWhvfHdlbnxuZWt8IG9wfGFsdXxlIGd8aW1hfGthdHxvdGF8b3llfGlsYXxuZ3d8eW9wfHdhdHxlbGF8byB1fGEgbHwgaWl8IGF5fCBuZHwgdGh8byBsfHlvbnxpbGl8b29ufG9rd3x5YWF8dGFhfGx3ZXxvbWJ8IG5pfGFrdXxpIG18bW8gfHVsYXxla3d8ZW53fGl5dXxwb2t8ZXBhfHVraXxrZSB8IHd1fCBtYnxtZWh8ZSB0fHVuaXxub218ZGhvfHBhdXxldGF8eWkgfCBseXxvIGF8b25vfGx1bnxsYWt8b2xhfHlvIHxsb2x8YW5rfGJvIHxpIG98YXdhfG53YXxhIGh8bmF3fGhva3xuZW18a29tfG5kb3xvIHN8dSB0fHZldHxtYnV8YW5pfHVnYXxuZGl8dWt3fHVkaHxsb2t8ZSBrfGFsd3xrd2V8a3VufCB5YVwiLFxuICAgIFwicXV5XCI6IFwiY2hpfG5jaHxoaWt8dW5hfCBrYXxhbmN8a3VufG1hbnxhbmF8YXEgfGNoYXxha3V8cGFzfGFzIHxzcWF8cGFxfG5hbnxxYSB8YXBhfGthbnxpa3B8aWsgfGVjaHxzcGF8IGRlfHBhIHxjaG98ZXJlfGRlcnxyZWN8YW0gfCBydXxhbiB8IG1hfCBjaHxrcGF8YXNxfHRhIHxuYSB8bmFtfG5ha3x0YXF8YSBrfHFhbnxpbmF8cnVufGxsaXxhY2h8bmFwfHBpIHxtaSB8IGxsfHlvcXxhc3B8aW1hfGhheXxoaW58YXFhfG5rdXxhbnR8YXlufG95b3wgaGl8IGltfGhveXxjaW98bnRhfG5hc3xxIGt8YXBpfGl3IHx3YW58a3V5fGtheXxsaXd8YWNpfGlvbnxpcGF8bGxhfG9xIHxucGF8YXkgfGthc3xhIG18bmFjfCBuYXxpbmN8YWxsfGFtYXxhcml8YW5wfCB5YXxjaHV8IGh1fG5pbnxwaXB8aSBrfHFtaXxob258dyByfGF0YXxhd2F8YSBjfG90YXxpbiB8eWt1fHluYXwgd2F8YSBofGhhc3xhIGR8aWt1fGEgbHwgbGl8cGFufGljaHxtYXl8IHBpfCBoYXxvbmN8YSByfG9ua3wgb3R8a3UgfCBxYXxhbmt8YXFtfG11bnxhbm18aHUgfGEgcHxubWF8IG11fHF0YXxuIGh8cGFwfGlzcXx5bml8aWttfG1hIHx3c2F8YXdzfGthd3xpYnJ8YnJlfGxpYnxheWt8dXNwfG5xYXxlIGt8IGFsfGxpbnxuIGt8cmUgfGFyYXxuYXR8eWFjfGttYXx3YXJ8aHVrfHV3YXx5dGF8aHdhfGNod3wgc2F8d2FzfGt1c3x5YW58bSBkfGtwaXxxIG18YSBpfHEgbHxraW58dGFwfGEgYXxrdGF8aWt0fGkgY3xhIHN8dXkgfCBjYXxxYXd8dWt1fCB0dXwgcmV8YXF0fGFza3xxc2l8c2FrfHVjaHxxIGh8Y2FzfHRpbnxwYWt8cmlzfHNraXxzaWN8cSBkfG5taXxzIGx8bmFxfHR1a3xtcGF8YSB5fGsgY3x1bWF8aWVufHlwaXwgYW18cWFxfHFhcHxlcXN8YXlwfHJlcXxxcGF8YXFwfGxhd3xheXR8cSBjfHB1bnwgbml8YSBxfHJ1d3xpIGh8aGF3fG4gY3wgcGF8YW1wfHBhcnxrIGh8IGxlfHltYXzDsXVufGVybnxodcOxfG5uaXxuIHJ8YW5xfG1hcHxheWF8dGFyfHMgbXx1w7F1fHRlbnx2YWx8dXJhfGl0YXxhcm18aXN1fHMgY3xvbm58aWd1fCByaXxxa3V8bmF3fGsgbHx1IGx8aGlzfGxleXxzYXl8cyB5fHJpbXxhcnV8cm1hfHN1bnxpZXJ8cyBvfHFhcnxuIHB8YSBmfGEgdHxlc3F8biBhfG9xbXxzIGl8YXdrfCB2YXx3IG58aGFwfGxhcHxrdXB8aSByfGthbXx1eWt8c2FwfCBxZXx1YWx8bSBwfHJhbnxueWF8Z3VhfCBwZXwgZ298Z29ifG1hcXxzdW18YXN0fCBzdXwgaWdcIixcbiAgICBcInJtblwiOiBcImFqIHxlbiB8IHRlfHRlIHwgc2F8IGxlfGFrYXxwZW58IHNpfCBlIHxlbCB8aXBlfHNpIHxrYWp8c2FyfCB0aHxhbmR8IG8gfHNhdnxxZSB8bGVzfCBtYXxlcyB8IGhhfGogdHxoYWt8amEgfGFyIHxhdmV8IGFufGEgc3x0YSB8aSBsfGlhIHxuYXN8IGFqfG5lIHwgc298aW1ufG1uYXxzcWV8ZXNxfG5kIHx0aGF8aGFqfGUgc3xlIHR8ZSBhfGVucXxhc3F8bWFufCBqYXxrYW58ZSBtfCBpIHwgdGF8dGhlfG1lc3xjaWF8YmFyfGFzIHxpc2F8dXRufHFvIHxoZW18byBzfHMgc3wgbWV8dmVsfGFya3xpIHR8IG5hfGthc3xlc3R8IGJhfHMgaHxhdm98IGRpfGFyZHwgYml8IHBlfHJrYXxsbyB8IGFrfGlrYXxlIHJ8YSBhfCBwcnxlIGt8cWkgfG1hdHxpbWF8ZSBwfGEgdHwgYXZ8ZSBkfHIgc3xuIHN8YW51fG51xZt8byB0fGF2aXxvcnJ8byBhfCBrYXwgcmV8biBhfHJlIHxhamF8ZSBvfHNxb3xzdGl8IG92fMO1bCB8bCBwfG5xZXxlcmV8ZCBvfHZvcnxzbyB8bm8gfGRpa3xyZWx8b3ZlfG4gdHx2ZSB8ZSBifHJlc3x0aW18cmVufCBkZXzDoGNpfG8gbXxpIGF8YnV0fGxlbnxhbGl8YXJpfHJyZXxkZSB8IHBhfHZlcnwgdmF8c3FpfGFyYXxhbmF8dmlwfHJha3xhbmd8dmkgfCByYXxvciB8a2VyfGkgc3xlbWV8ZSB6fGF0YXxlIGx8YSBlfHJpcHxyaW18YWtofGxhIHxvIHB8a2FyfGUgaHxhIHB8bmEgfGFuZXxyaW58c3RlfGogYnxlciB8aW5kfG5pIHx0bmV8IHBofG5pcHxyIHR8IGtlfHRpIHxhcmV8bmRvfCBqZXxsIGF8dcWbaXxlIG58a2hpfCBidXxrb258bGltfGFsIHx0YXJ8ZWtofGpla3zDoGxvfG8ga3wga298cmRlfHJhYnxhYmF8IHppfHJpIHxhxIdhfMSHYXJ8xZtpa3xkw7VsfGRvcnxvbiB8YW5vfHZlbnwgbml8xZthanwgxZthfGtoZXzEh2EgfGFzdHxqIHN8dXRpfHVuaXx0bml8bmHFm3xpIGR8bXV0fCBwb3xpIHB8YSBtfCBwdXxhIGx8bCBzfHNvbXxuIG58aWtofG5pa3xkZWx8YWxhfHJpc3xwZXN8cGUgfGogbXxlbsSHfGUgZXxuxIdhfG5kaXxyZMO1fGtyaXxlcmR8xZtrYXxlbXV8bWVufGFsb3xuaXN8YcWbdHzFm3RpfGFtdXxraCB8dGlzfHVqIHxqIHB8ZG8gfGFuaXxhdGV8bmRhfG8gYnxuZ2V8byB6fHNvY3xhIGR8bXVqfG8ganxkYSB8cHJpfHJkb3wgYXN8Y2llfGwgdHxybyB8aSByfGtsYXxpbmd8YSBqfCB6ZXx6ZW58aiBlfHppdnxoaW58YcWba3wgc3R8bWHFm3xyYW58cGFsfGtobHxtYW18aSBifG9jaXxyZWF8bCBvfG5xb3wgdml8biBlXCJcbiAgfSxcbiAgXCJDeXJpbGxpY1wiOiB7XG4gICAgXCJydXNcIjogXCIg0L/RgHwg0LggfNGA0LDQsnzRgdGC0LJ8INC90LB80L/RgNCwfNCz0L4gfNC10L3QuHzQvtCy0LV80LLQviB8INC60LB80LDQvdC4fNGC0YwgfCDQsiB8INC/0L58INC+0LF80LjRjyB80YHQstC+fCDRgdCyfNC70L7QsnzQvdCwIHwg0YfQtXzQtdC70L580L4g0L18INGB0L580L7RgdGCfNGH0LXQu3zQuNC1IHzQvtCz0L580LXRgiB80L3QuNGPfNC10YHRgnzQsNCy0L580YvQuSB80LDQttC0fCDQuNC8fNC90LjQtXzQstC10Lp8INC90LV80LvRjNC9fNC70LggfNC+0LLQsHzQuNC80LV80LDRgtGMfNC/0YDQuHzRgiDQv3zQuCDQv3zQutCw0LZ80LjQu9C4fNC+0LHQvnwg0YDQsHzRi9GFIHzQttC00Yt8INC00L580LTRi9C5fNCy0L7QsXzQtdC6IHzQsdC+0LR80LLQsCB80Lkg0Yd80LXQs9C+fNGB0Y8gfNC4INGBfNC40LggfNCw0YbQuHzQtdC10YJ80L3QviB80LzQtdC1fNC4INC4fNC70LXQvXzQvtC5IHzRgtCy0LB80L3Ri9GFfNGC0L4gfCDQuNC7fNC6INC4fNC10L3QvXwg0LHRi3zQuNGOIHwg0LfQsHzQvNC4IHzRgtCy0L580Lgg0L180L4g0L980LLQsNC9fNC+INGBfNGB0YLQvnzQsNC70Yx8INCy0YF80L7QvCB80L4g0LJ80YzQvdC+fNC40YUgfNC90L7Qs3zQuCDQsnzQvdC+0LJ80LDQutC+fNC/0YDQvnzQuNC5IHzRgdGC0Lh80Lgg0L580L/QvtC7fNC+0LvQtnzQtNC+0Lt80L7QtSB80LHRgNCwfNGPINCyfCDQvtGBfNC90YvQvHzQttC10L180YDQsNC3fNGC0LggfNC90L7RgXzRjyDQuHwg0LLQvnzRgtC+0YB80LLRgdC1fCDQtdCzfNC10LkgfNGC0LXQu3zQvdC1IHzQuCDRgHzRgNC10LR80LXQu9GMfNGC0LLQtXzQvtC00Lh8INC60L580L7QsdGJfNC+INC4fCDQtNC1fNC40LzQsHzQsCDQuHzRh9C10YF80L3QuNC8fNGB0L3QvnzQutCw0Lp8INC70Lh80YnQtdGBfNCy0LvQtXzRjNGB0Y980L3QvdGLfNCw0YHRgnzRgtGM0YF80L3QvdC+fNC+0YHRg3zQtSDQtHwg0L7RgnzQv9GA0LV80YjQtdC9fNCwINGBfNCx0YnQtXzQvtGB0L180L7QtNC9fNCx0YvRgnzRgdC+0LJ80YvRgtGMfNC70LbQvXzRgNCw0L180L3QuNGOfNC40YfQtXzQsNC6IHzRi9C8IHzQstCw0YJ80YfRgtC+fNGB0YLRg3zRh9C10L180LUg0LJ8INGB0YJ80YDQtdGBfNC+0LvRjHwg0L3QuHzQvdC+0Lx80YDQvtC0fNC70Y8gfNC90LDRgHzQstC10L180LTRgyB80L7QttC1fNC90YsgfNC1INC4fCDRgtC+fNCy0LXRgHzQsCDQvnzQt9C+0LJ80Lwg0Lh80L3QsNGGfNC00LXQvXzRgNC40L180YLRg9C/fNC10LbQtHzRgdGC0YB8INGH0YJ80Y8g0L980L7QvdCwfNC00L7RgXzRhSDQuHzQuSDQuHzRgtC+0Y980LXRgdC/fNC70LjRh3zQsdC10YF80L7QsdGAfNC+0YLQvnzQviDQsXzRjNC90Yt80Ywg0LJ80L3QuNC4fNC1INC8fNGD0Y4gfCDQvNC+fNC10LwgfCDQvNC1fNCw0YDQvnwg0YDQtXzQsNCy0LB80LrQvtGCfNCw0LIgfCDQstGLfNCw0LwgfNC20L3QvnzRgdGC0LB80LDRjyB80L/QvtC0fNC4INC6fNC90L7QtXwg0LogfCDRgtCwfCDQs9C+fNCz0L7RgXzRgdGD0LR80LXQvtCxfNGPINC9fNC10L0gfNC4INC0fNC80L7QtnzQtdGB0Lp80LXQu9C4fNCw0LLQvXzQstC1IHzQtdGH0LV80YPRidC1fNC/0LXRh3zQtNC90L580L4g0LR80YXQvtC0fNC60LAgfCDQtNC7fNC00LvRj3zQvtCy0L580LDRgtC1fNC70YzRgXzRjiDQuHzQsiDQunzQvdC10L180YbQuNC4fNC90L7QuXzRg9C00LB80LLQvtCyfCDQsdC1fNC+0YDQvnzQvdGB0YJ80LDQvNC4fNGG0LjQsHzQutC+0L180YHQtdC8fNC1INC+fNCy0L3Qvnwg0Y3RgnzQsNC30L580YUg0L980L3QuCB80LbQtNC1fNC8INC/fNC60L7Qs3zQvtGCIHzQtNGB0YJ80LLQvdGLfNGB0YLRjHzRi9C1IHzQviDQvnzQv9C+0YF80YHRgNC1fNGC0YDQsHzQtdC50YF80YLQsNC6fNC4INCxfNC00L7QsnzQvNGDIHzRjyDQunzQvdCw0Lt80LTRgNGDfCDQtNGAfNC60L7QuXzRgtC10YB80Ywg0L980LDRgNGBfNC40LfQvXzRgdC+0YZ80LXQtNC4fNC+0LvQvVwiLFxuICAgIFwidWtyXCI6IFwi0L3QsCB8INC/0YB8INGWIHzQv9GA0LB80YDQsNCyfCDQvdCwfNC90Y8gfNC90L3Rj3wg0LfQsHzQvtCz0L58INC/0L580YLQuCB80LPQviB80LvRjtC0fCDQu9GOfNCy0L4gfCDQutC+fCDQvNCwfNC70YzQvXzRjtC00Lh80LjRhSB80L4g0L18INC90LV80LDQstC+fNCw0L3QvXzQtNC40L18INGB0LJ80YHQstC+fNC+0LbQvXzQutC+0LZ80LXQvdC9fNC/0L7QsnzQttC90LB8INC00L580LDRgtC4fNC40L3QsHzQsNGUIHzQsCDQu3wg0LHRg3zQsNGG0ZZ80L3QtSB80YPQstCwfNC+0LHQvnwg0L7RgXwg0Y/QunzQvNCw0ZR8INCy0Lh80L3QuNGFfNCw0LvRjHzQsNCx0L580ZQg0L98INGC0LB80L3RliB80YLRjCB80L7QstC4fNCx0L4gfCDQstGWfCDQsNCxfNC10YDQtXzRliDQv3zQsCDQvHzQstC40L180LHQtdC3fNC/0YDQuHzRltC70Yx80L3QvtCzfNC+INC/fNC80LggfNGC0LAgfNC+0LwgfNC+0Y4gfNCx0L7QtHzRgdGC0LB80LLQvtCxfCDQsdC1fNC00L4gfNCy0LAgfNGC0ZYgfCDQvtCxfNC+INCyfNC+0YHRgnwg0LIgfCDRidC+fNC40LkgfNGB0Y8gfNGWINGBfCDRgdC/fNC40L3QvXzQstGW0LR80YHRgtCyfNC4INC/fNCy0LDQvXzQvdC+0LJ80L3QsNC9fNC60L7QvXwg0YMgfNCy0LDRgnzQvtC90LB80ZbRlyB80L3QviB80LTQvdC+fNGW0LkgfNC10LfQv3zQv9C10YB8INC00LV80YPRgtC4fNGM0L3QvnzQuNGB0YJ80L/RltC0fNGB0YLRlnzQsdGD0YJ8INC80L580Lgg0ZZ80ZbQtNC9fNCw0LrQvnzQvdC90ZZ80ZbQtCB80YLQuNGBfNGJ0L4gfNGA0L7QtHzRliDQsnzQsCDQt3zQsNCy0LB8INC/0LV80LzRgyB80ZYg0L180LAg0L980YHQvtCxfNC+0ZcgfNCwINCyfNGB0L/RgHzRltCyIHzQvdC40Ll80Y/QutC+fNC00YMgfNCy0L3QvnzRliDQtHzQvdGDIHzQsNGA0L580Lgg0YF8INGW0L180LvRjyB80YDRltCyfNGDINCyfCDRgNGWfNC4INC0fNC90LDRgHzQvdC10L180L7QstCwfNC+0LzRg3zQu9C10L180L3QsNGGfNC90LjQvHzQuNGB0Y980YfQuCB80LDQsiB80ZYg0YB80L3QvtC8fCDRgNC+fNC90L7RgXzQstGWIHzQstC90Lh80L7QstC9fCDRl9GXfNC+0LLRlnzQvNC+0LZ80LLRltC7fNGDINC/fCDQv9GWfCDRgdGDfNGX0ZcgfNC+0LTQvXwg0LLRgXzQvtCy0L580Y7RgtGMfNGW0YHRgnzRgdGC0Yx80ZYg0Ld8INGB0YJ80LHRg9C0fCDRgNCwfNGH0LXQvXzQv9GA0L580YDQvtC3fNGW0LLQvXzQvtC00YN80LAg0L580YzQvdC4fNC90LggfNC+INGBfNGB0L3QvnzQt9C90LB80YDQsNGGfNC40LwgfNC+INC0fNC40LzQuHzRjyDRlnzRhtGW0Zd80YUg0L980LTQtdGAfNGH0LjQvXwg0YHQvnzQsCDRgXzQtdGA0LZ80Lgg0Ld80Lgg0LJ80LUg0L980LTQuCB80LfQsNCxfNC+0YHQvnzRgyDRgXzQtSDQsXzRgdGWIHzRgtC10YB80L3RltGFfNGPINC9fNGWINCxfNC60LvQsHzRgdC/0ZZ80LIg0ZZ8INC90ZZ80L4g0Ld80YDQttCwfNGB0YLRg3zRl9GFIHzQsCDQvXzQvdC90LB80YLQsNC6fNGPINC/fNC30L/QtXwg0L7QtHzQsNCx0LV80LTQu9GPfNGC0YMgfNGWINC8fNC/0LXRh3wg0LTQu3zQttC1IHzQutC4IHzQstGW0YJ80L3RltGBfNCz0LDQu3zQsNCz0LB80LUg0Lx80LDQvNC4fNC30LDRhXzRgNC40Lx80Zcg0L580YLQsNC9fNC60L7Qs3zRgNC10YF80YPQtNGMfCDRgNC1fNGC0L4gfNC60L7QsnzRgtC+0YB80LDRgNCwfNGB0LLRlnzRgtCy0LB80LAg0LF80L7QttC1fNGB0L7RhnzQvtGG0ZZ80YbRltCwfNC+0YHQvXzRgNC+0LF80LTRjOKAkHzRjOKAkNGPfOKAkNGP0Lp80ZYg0ZZ80LfQsNCzfNCw0YXQuHzRhdC40YF80L/RltC7fNGG0ZbQuXzRhSDQsnzQu9C40LJ80L7RgdCyfNGW0LDQu3zRgNGD0Yd80Ywg0L980ZbQvdGIfNCyINGPfNCz0LggfNCw0LPQuHwg0LTRlnzQutC+0Lx80LjQvdC4fNCwINGWfNC+0LTQuHzQvdCw0Lt80YLQstC+fNC60L7Rl3zQstGB0ZZ80Y8g0LJ80L3QvtGOfNC+0LEgfNC+INGDfNC+INC+fNGWINC+XCIsXG4gICAgXCJib3NcIjogXCIg0L/RgHwg0LggfNGA0LDQsnwg0L3QsHzQv9GA0LB80L3QsCB80LTQsCB80LzQsCB80LjQvNCwfCDRgdCyfNCwINGBfNCwINC/fCDQtNCwfNCwINC4fCDQv9C+fNGY0LUgfNCy0L4gfNC60L4gfNCy0LAgfCDRgyB80LDQutC+fNC90L4gfNC+INC4fNC1INGBfCDQt9CwfCDQuNC8fNCw0LLQvnzRgtC4IHzQsNCy0LB80YHQstCwfNC4INC/fNC70LggfNC+INC9fNC40LvQuHzQuCDRgXzQuNGFIHzQstCw0Lp8INC60L580L7RgdGCfNCwINGDfCDRgdC7fNC90LUgfNCy0LDRmnwg0LTRgHzRmtC1IHwg0L3QtXzQutC+0Zh80ZrQsCB8INCx0Lh80LjRmNC1fNC4INC0fNC40LwgfNGB0YLQsnzRgyDRgXzRmNC10LR80LHQvtC0fNGB0LvQvnzQu9C+0LF80L7QsdC+fCDQuNC7fNC/0YDQuHwg0ZjQtXzQsNGa0LV8INGA0LB80LAg0LR8INC+0LF8INGB0YN80LUg0Lh80LLRmNC1fNGB0LUgfNC+0LwgfNC4INC4fNGB0YLQuHwg0YHQtXzRmNGDIHzQtNGA0YN80LAg0LF8INC+0YF80YbQuNGYfNCy0L7RmHzQtSDQv3zQsCDQvXzRgNCw0Ld80YHRgyB80YMg0L980LDRmtCwfNC+INC0fNGD0ZjQtXzQsCDQvnzRgyDQuHwg0L7QtHzQuCDRg3zQu9C+IHzQvtCy0LB80LTRmNC1fNC20LDQsnzQvtGY0LV80LAg0Lp80L3QuCB80L7QstC+fNC10LTQvXzQuNGC0Lh80LDRhtC4fNGDINC+fNC+INC/fNC90L7RgXzQuCDQvnzQsdGA0LB8INC60LB80YjRgtC4fNCwINGYfNC90LjRhXzQtSDQvnzQv9GA0LV80L/RgNC+fNGA0LbQsHwg0LHRg3zQsdGD0LR80YLRgNC1fCDRgtGAfNC+0LMgfNC00YDQtnzQsdC40YJ80LUg0LR80YMg0Ld80ZjQsCB80YHRgtCwfNCw0LLQvXzQuNGY0LB80LUg0LF80LzQuNGYfNC4INC9fNGA0LXQsXzRgdCy0L580ZLQuCB80LAg0Ld80LLQtSB80LHQuNC7fNGA0LXQtHzRgNC+0LR80LDRgNC+fNC40LvQvnzQuNCy0LB80YLRgyB80L/QvtGBfCDRmtC1fCDQuNC3fNC1INGDfNCw0ZjRg3zQsdCwIHzQutCwIHzQtdC8IHzQtdC90Lh80LTQtSB80ZjQtdGAfNGDINC0fNC+0LTQvXzRmtC10LN80LTRgyB80LPQvtCyfNCy0LjQvHzRmNC10Lt80YLQstCwfNC30LAgfCDQtNC+fNC10ZLRg3zQvdC40Lx8INGB0LB80L3QsNGAfNCwINGCfCDQvdC4fNC+INC6fNC+0ZjQuHzQvCDQuHwg0YHQvHwg0YHRgnzQtdCx0LB80L7QtNCwfNGA0LDQvXzRgyDQvXzQtNC90LB80LjRh9C9fNGD0ZLQuHzQuNGB0YJ80LLQvdC+fNCw0LvQvXzQuCDQvHwg0LTRmHzQvdCw0Lp80L3QsNGGfNGB0L3QvnzQvdGB0YJ80YLQuNCyfNCw0L3QuHzQtdC90L580LUg0Lp80LUg0L180LDQstC1fNCw0L0gfNGH0L3QvnzQuCDQsXzQvdC+0Lx80YHRgtGDfNC90L7QsnzQvtCy0Lh80YfQvtCyfNC90LDQv3zQvdC+0LN80Lwg0YF80L7RmCB80L3RgyB80LAg0YB80LXQtNC4fNC+0LLRmHzQvtGY0LB80YHQvNC4fNC+0YHQvXzQsNC90YF80LDRgNCwfNC00L3QvnzRhSDQv3zQv9C+0LR80YHQsNC8fNC+0LHRgHzQviDQvnzRgNGD0LN80YLQstC+fNGY0LggfCDQvNC+fNC10LPQvnzRgtC40YJ80LDRiNGCfNC30LDRiHwg0LrRgHzRgtC10Zl80LjQutC+fNGD0L3QsHzQvdC40Lp80YDQsNC0fNC+0LTRg3zRgtGD0L980LbQuNCyfCDQvNC4fNGY0LXQunzQutGA0Lh8INC+0LJ8INCy0Zh8INGH0L580LLRgyB80LMg0L98INC+0L980LzQtdGSfNGa0YMgfNGA0LjQsnzQvdC40Yd80LjQvdCwfNC+0LTRgHzQtSDRgnzRg9C00YN8INGC0LV80LzRmNC1fNC10ZrQtXzRgdCy0Lh80LAg0Yd80YMg0YN80L3QuNGGfNC00L3QuHwg0YLQsHzQuCDRgnzRgtC90L580LjRgtC1fNC4INCyfNC00YHRgnzQsNC60LJ80YLQtSB80LDQviB8INCy0YB80YDQsCB80LLQvtGZfNGA0LjQvHzQsNC6IHzQuNGC0YN80LDQstC4fNC60LvQsHzQstC90Lh80LDQvNC+fCDQvtC9fNCw0LTQsHzQtdGA0LV80LXQvdCwfNGB0YLQvnzQutC+0L180YHRgiB80L7QvdCwfNC40LLQvnzQvtCx0Lh80L7QsdCwfNC10LTRgXzQutCw0Lp80ZnRgyBcIixcbiAgICBcInNycFwiOiBcIiDQv9GAfCDQuCB80YDQsNCyfNC/0YDQsHwg0L3QsHzQvdCwIHwg0L/QvnzQvNCwIHwg0YHQsnzQtNCwIHzQuNC80LB80LAg0L980LAg0Lh80LLQviB80LrQviB80LLQsCB80YLQuCB80Lgg0L98INGDIHzQsNC60L58INC00LB80LAg0YF80LDQstC+fNC4INGBfNC+0YHRgnwg0LfQsHzQviDQuHzRgdCy0LB8INC40Lx80LLQsNC6fNCw0LLQsHzRmNC1IHzQtSDRgXwg0YHQu3wg0LrQvnzQviDQvXzRmtCwIHzQvdC+IHzQvdC1IHwg0L3QtXzQvtC8IHzQu9C4IHwg0LTRgHzQuNC70Lh80YMg0YF80YHQu9C+fNC+0LHQvnzQutC+0Zh80LjRhSB80LvQvtCxfNCx0L7QtHzQuNC8IHzQsCDQvXzRmNGDIHwg0LjQu3zRgdGC0LJ8INCx0Lh80YHRgtC4fNCwINC+fNC/0YDQuHzQsCDRg3wg0YDQsHzRmNC10LR80L7QsyB8INGY0LV80LUg0L980ZrQtSB80L3QuCB80YMg0L980LAg0LR80LXQtNC9fNC40YLQuHzQsCDQunzQvdC+0YF80Lgg0YN80L4g0LR80L/RgNC+fCDRgdGDfNCw0ZrQtXzQvtCy0LB80LUg0Lh80LLQsNGafNC4INC4fNGG0LjRmHwg0L7RgXzRgdC1IHzQtNGA0YN80YHRgtCwfNCw0ZjRg3zQsNGa0LB80Lgg0L58INC+0LF80YDQvtC0fNC+0LLQtXwg0LrQsHwg0LTQtXzQtSDQvnzQsNGG0Lh80ZjQsCB80L7QstC+fCDQvdC4fCDQvtC0fNC4INC0fCDRgdC1fNCy0LUgfNGD0ZjQtXzQtdC90Lh80LjRmNCwfNCw0LLQvXzQttCw0LJ8INGB0YJ80YMg0Lh80Lwg0Lh80LTQvdCwfNGB0YMgfNGA0LXQtHzQuCDQvXzQvtGY0LB80LUg0LF80LDRgNCwfNGI0YLQvnzQvdC+0LJ80YDQttCwfNCy0L7RmHzQtNGA0LZ80YLQstCwfNC+0LTQuHzRgyDQvnzQsCDQsXzQvtC00L180L/QvtGIfNC+0YjRgnzQvdC40Lx80LAg0Zh80LrQsCB80YDQsNC9fNGDINGDfCDQvtCyfNCw0YDQvnzQtSDQtHzRgdC90L580LXRmtCwfNGDINC3fNGA0LDQt3wg0LjQt3zQvtGB0L180LAg0Ld80L4g0L980LDQstC1fNC/0YDQtXzQtNC1IHzQsdC40YJ80L3QuNGFfNGI0YLQuHzQstGDIHzRgyDQtHzQtNGDIHzRgtGDIHwg0YLRgHzQvdCw0YB8INGB0LB80LPQvtCyfNC30LAgfNCx0LXQt3zQvtGY0Lh80YMg0L180LLQvdC+fNC40YfQvXzQtdGS0YN80LvQviB80LDQvSB80YfQvdC+fNGY0LggfNC90LDQunzQvtC00LB8INC80LV80LLQuNC8fNGC0L4gfNGB0LLQvnzQsNC90Lh80L3QsNGGfCDRmtC1fNC90LjQunzRmtC10LN80YLQuNGCfNC+0ZggfNC80LUgfNC90L7QvHzQvCDRgXzQtSDRg3zQviDQunzQutGDIHwg0LTQvnzQuNC60LB80LjQutC+fNC1INC6fNC/0L7RgXzQsNGI0YJ80YLRgNC1fNCw0LvQvXzQvdC+0LN8INCy0YB80YDQtdCxfNC90YHRgnwg0LrRgHzRgdGC0YN80LTQvdC+fNC10LwgfNCy0LDRgHzQtSDQvXzRgNC40LJ80YLRg9C/fNC20LjQsnzRgtC1IHzRh9C+0LJ80YHRgiB80L7QstC4fNC00L3QuHzQsNC+IHzRgdC80LV80LHRgNCwfNCw0LLQuHwg0LvQuHzQutCw0L580LLQvtGZfNC40LvQvnzQviDRgXzRiNGC0LJ80Lgg0Lx80LfQsNGIfNGa0YMgfNGA0YPQs3zRgtCw0LJ80LDQvdGBfNC10L3QvnzQv9C+0YB80LrRgNC4fNC4INCxfNC+0LTRg3zQsCDRgHzQu9CwIHwg0YfQvnzQsCDRgnzRgNGD0Yh80YPRiNGCfCDQsdGDfNCx0YPQtHzQsNCy0Zl80YPQs9C4fNC8INC/fNC60L7QvHzQvtGY0LV80LLQtdGAfCDQstC1fNC/0L7QtHzQuCDQsnzQvNC10ZJ80LXQs9C+fNCy0YDQtXzQsNC60LJ80LXQtNC4fNGC0LLQvnwg0YHQvHzQvtC0IHzQtNC10Lt80LXQvdCwfNGA0LDQtHzQsdCwIHwg0LzQvnzQvdGDIHzQviDRmHzQtNGB0YJ80LrQu9CwfCDQvtC/fNC60LDQunzRgdCw0Lx80LXRgNC1fNGA0LjQvHzQstC40Yd80LjQstCwfNC+INC+fCDQvtC9fNCy0L3QuHzRgtC10YB80LfQsdC1fNGFINC/fNC90LjRhnzQtdCx0LB80LUg0YB80YMg0LJ80LjRgdGCfNCy0LXQunzRgNC10Lx80YHQstC4fNCx0LjQu3zRiNGC0LV80LXQt9CxfNGY0YPRm3zRmtC10L180LPQu9CwXCIsXG4gICAgXCJ1em5cIjogXCLQu9Cw0YB80LDQvSB80LPQsCB80LDRgCB8INCy0LB8INCx0Lh80LTQsCB80LLQsCB80LjRgCB8INKz0YN80LjQs9CwfNGD0pvRg3zQsdC40YB80rPRg9KbfNKb0YPSm3zQs9Cw0L18INKz0LB80LjQvdC4fNC90LMgfNGAINCxfNC40YggfCDRgtCwfNC90LggfNC40L3Qs3zQu9C40Lp80LAg0Y180LjQtNCwfNC40LvQuHzQu9C40Yh80L3QuNC9fNCw0YDQuHzQuNGI0Lh8INC40L180LDQtNC4fNC+0L0gfNC40L3RgXzQvdGB0L580YHQvtC9fNC40LkgfNC70LDQvXzQtNC40YB8INC80LB80LrQuNC9fNC4INCxfNGI0LggfNKz0LDRgHwg0LHRnnzQsdGe0Lt8INC80YN80LTQsNC9fNGD0pvQuHzQuNC70LB80pvQu9CwfNGAINC4fNKb0LjQs3zRjdCz0LB8INGN0LN8INGe0Ld80LrQuCB80Y3RgNC6fNKb0LjQu3zQsCDQsXzQvtC70Lh80LrQu9CwfCDRjdGAfNCz0LDQtHzQu9Cz0LB80L3Qu9C4fCDQvtC7fNGA0LrQuHzQuCDSs3wg0ZHQunzRkdC60Lh8INKb0LB80LjQsSB80LjQs9C4fNC70LjQs3zQvSDQsXzQvSDQvHwg0pvQuHwg0LHQsHzQsNGA0LB80LDRgtC7fNGA0LggfCDQsdC+fNC70LDRgnzQsdC40Lt80LjQvSB80rPQsNC8fNCwINGCfNC70LDRiHzRgCDSs3zQsNC70LB8INGN0YJ80LjQvdC7fNC40LogfNCx0L7RiHzQvdC40Yh80Ygg0rN80LzQsNGBfNC4INCyfNGN0YLQuHzRgtC40Lt80YLQu9CwfNCwINKzfNC4INC8fNCwINKbfNGD0pvQu3zSm9Cw0YB80LDQvdC4fNCw0YDQvXzRgNC90Lh80LjQvCB80LDRgiB80L7RgdC4fNGe0LvQuHzQs9C4IHwg0LTQsHzQsCDQuHzQvSDSs3zRgNC40Yh80Lgg0YJ80LzQu9CwfNC70LggfCDRhdCwfNCwINC8fNC40Y/Rgnwg0LHRg3zRgNC70LB80LAg0LB80YDRh9CwfNCx0LDRgHzQsNGB0Lh80Z7QtyB80LDRgNGHfNCw0YLQuHzQu9C40L180YfQsCB80LvQuNCxfNC80YPQvHwg0LDRgXzQsNGA0L580LAg0L580YPQvSB80YLQsNGKfCDQsdC1fCDRgtGDfNC40LrQu3zRgCDQsnzRgtCz0LB80YLQuNCxfCDQutC1fNC9INGNfNGIINCyfNC80LTQsHzQsNC80LR80LDQu9C4fNC9INKbfNC80LDRgnzRiNCz0LB8INGC0LV80YHQuNC0fNC70LvQsHzQuNGA0L58INGI0YN8INKb0L580LTQsNC8fNCwINGIfNC40YDQu3zQuNC70Lt80YXQsNC7fNGA0LPQsHwg0LTQtXzQuNGA0Lh80YLQuNGIfNGD0LzQunzQvtC70LB80LDQvNC7fNC80LrQuHzRgtC10L180LPQuNC9fNGD0YAgfNCwINGefNGA0LDQunzQsCDRkXzQuNC80L58INGN0Yp80LDQu9KbfCDRgdCwfNC10L3Qs3zRgtCw0YB80YDQtNCwfNC+0LTQsHwg0YjQsHzRiNKb0LB80Z7Qu9CzfNC60LDRgnzRgdC40Ll80LDQuiB80L0g0L580LfQsNGAfNC4INKbfNC+0YAgfCDQvNC4fNC90LTQsHzQvSDQsnwg0YHQuHzQsNC30LB80LXRgNCwfNCwINC6fNGC0L3QuHzRgCDRgnzQvNC40Lt8INC60Lh80Log0LF80LDQvdCwfNCw0LwgfNC+0YjSm3zRgNC40L180YHQvtGBfNCw0YEgfCDRgdC+fNGB0LjQt3zQsNGB0L580L3QuNC0fNCw0YHQu3zQvSDRnnzQvSDRgnzQuNC70LN80LHRgyB80Lkg0YJ80YLQuCB80YHQuNC9fNC00LDQsnzRiNC70LB80L3QsCB80LvQuNC8fNKb0L7QvXzQuCDQsHzQu9Cw0Lp80Y3QvNCwfNC80YPSs3zRitGC0Lh80YHQuCB80LHQvtGAfNCw0YggfNC4INGNfNCw0LrQsHzQvdCz0LB80LAg0LJ80LTQtdC6fNGD0L3QuHzQtdC60Lt80LjQvdC+fNCw0LzQuHwg0LbQsHzRgNC40LN80LAg0LR8INGN0Lx80LLQu9CwfNC70LzQsHzQutC10YB8INGC0L580LvQu9C4fNCw0LLQu3wg0LrQsHzRj9GCIHzQvSDQuHzQsNGK0Lt80YfRg9C9fNCw0L3Qu3zRg9GH0YN8INGD0Yd80Lgg0YF80LDRkdGCfCDQuNGIfNCwINGDfNGC0LTQsHzQvNC40Y980LAg0YF80YDQsCB80Z7Qt9C4fNC+0LjQuXzQsNC5IHzQtNC40LN80Y3RitGCfNGB0LvQsHzQsNCz0LB80L3QuNC6fNGAINC0fNGG0LjRj3wg0L3QuHzQuCDRnnzQsNC00LB80YDQvtGAfNC70LDQtHzRgdC40YJ80LrQtNCwfNC40LrQtHzQutC40LxcIixcbiAgICBcImF6alwiOiBcIiDQstOZfNCy05kgfNOZ0YAgfNC70LDRgHwg0rvTmXzQuNC9IHzQuNGAIHwg0L7Qu3wg0rvSr3wg0LHQuHzSu9Kv0LN80q/Qs9GDfNCz0YPQs3zQvdCwIHzQu9OZ0YB80LTTmSB80rvTmdGAfCDRiNOZfNCx0LjRgHzQsNC9IHwg0YLTmXzQu9C40Lp80YAg0LF80LzQsNC7fNC70LzQsHzQsNGB0Yt80LjQvdC4fNGAINK7fNGI05nRhXzTmdC9IHzTmdGF0YF80LDRgNGLfNCz0LvQsHzQtNC40YB80LAg0Lx80LDQu9C4fNGD0LPRg3zQsNCzIHwg0LzQsHzRi9C9IHzQuNC705l80YPQvdCwfNGY05nRgnwg0ZjQsHzQuNC60LR80LDRgNCwfNCw0YAgfNOZ0YDQuHzTmdGB0Lh80YDQuNC9fNOZ0YLQuHzRgCDRiHzQvdC40L180LTTmdC9fNGY0ZjTmXzQvSDSu3wg0LDQt3zQvdC4IHzTmdGA05l8INC805l80LfQsNC0fNC805nQunzQuNGY0Zh8INC80q980YHQuNC9fNGC0LjQvXzSr9C9IHzQvtC70YN80Lgg0LJ80L3QtNOZfNCz0YPQvXzRgNGL0L180LDQt9CwfNC90LTQsHzTmSDQsHzTmdGCIHzRi9C90Yt80L3Ri9C9fNC70YvQs3zQuNC70Lx8INCz0LB8INC10YJ805kg0Zh80LrQtNC4fNOZ0LogfNC705kgfNC70LzTmXzQvtC70Lx80YvQvdCwfNC40L3QtHzQu9GD0L18INC40L180LzQsNGBfNGF0YEgfNGB0YvQvXzTmSDQsXzQsyDQsnzQvSDQvHzQsNC00Lt80ZjQsCB80YLQvNOZfNC9INGCfNOZ0LzQuHzQvdOZIHzQtNC70Yt80LTQsCB8INCx05l80L3Rg9C9fNCx05nRgHzRgdGLIHwg0L7QvXzTmdGY0LB805kg0rt80LzQsNCzfNC00LDQvXzRg9C9IHzQtdGC0Lx80LjQvdOZfNC9INCwfNGA0LvTmXzRgdC4IHwg0LLQsHzTmSDQsnzRgNCw0LN80L0g0LF805kg0Lx80LDQvNCwfNGA0YsgfNC9INC4fNOZ0YDQsHzQvdC80LB80YvQvdC0fNC40L3RgXwg06nQt3zQsNC90Yt80LDQu9CwfCDQsNC7fNC40LogfNOZINC0fNC705nRgnzQuNGA0Lt80LjQuyB8INC00Lh80LHQuNC7fNGL0pPRi3zQu9C4IHzQsCDQsXzTmdC705l80LTQuNC7fNOZINC1fNGD0L3QvHzQsNC70Yt80LzSr9C0fCDRgdOZfNC90YsgfNOZINC4fNC9INCyfNGL0LMgfNC90LvQsHzSr9C00LB80LDRgdC4fNC40LvQuHwg0LTTmXzQvdGB0LB80YHQsNC9fNGD0LPQu3zRg9CzIHzTmdGC0Lt805kg0L580YXRgdC4fCDSu9C1fNC+0LvQsHzQutC40Lt80LXRmNC9fNGC05nRgHzRmNC40L18INCx0YN80LzQuCB80LzTmdGBfNC00YvRgHzSu9OZ0Lx8INC00LB80LzQuNC9fNC40YggfCDSu9CwfCDQutC4fNGDINCyfNC70LDQvXzTmdC90Lh8INCw0YF80YXQsNC7fNCx0YMgfNC70YvSk3zRgCDQsnwg0LXQtHzRmNCw0L180YDTmSB80rvQtdGHfNCw0LvQs3wg0YLQsHzQtdGHIHzQuCDRgXzRiyDSu3zRgdC40LB80L7RgdC4fNGB0L7RgXzRhNC405l80LMg0rt80LDRhNC4fNC60LjQvHzQtNCw0YR8INOZ0YF805kg0LN8INC40Yh80L0g05l80LjRmNC4fNGL0LPQu3zTmdC805l80Ysg0L5805nQtNOZfNOZ0YHQsHwg0YHQvnzQsCDQs3zQu9GL0LR80LjQu9C7fNC80LjQu3zQsCDSu3zRi9C00Yt80YHQsNGBfNC70YsgfNC40YHRgnwg0LjRgXzQuNGE0LB80LzTmdC3fNGL0YAgfNGY0LDRgHzRgtC705l80LvQuNGYfNGC0q/QvXzQuNC90LB805kg0YJ80YHQuNGYfNCw0LsgfNGA0LjQu3wg0LHSr3zQuNOZIHzQsdKv0YJ8INKv0Yd80q/RgtKvfNOp0LcgfNC+0L3Rg3wg0LzQuHzQuNGY0LB8INC905l80LDQtNOZfNC80LDQvXzSr9GH0q980YfSr9C9fNGB0LXRh3zRi9C70Yt80YIg0LJ8INGB0LV80LjQsNC7fNC00LDRhXzRgdC40Lt80LXQtNC4fNC9INC1fNOZ0ZjQuHzQsNGF0Lh80YXQuNC7fCDSudOZfNC80LjRmHzQvNOZ0L180YAg0LB805nQtyB80LAg0LJ80LjQu9C0fNC4INK7fNGC05nSu3zTmdK70YF80Ysg0LJ80rvRgdC4fNCy0LDRgHzRiNOZ0YB80LDQsdOZfNCz0YMgfNGA0LDQsXzQsNGY0LB80Lcg0rt80LDQvNOZfNGC0LDQvHzSk9GL0L180LDQtCB80YPSk9GDfNC9INC0fNC805nSu3zRgtOZ0Lx8INC90Lh80Lgg0YJ8INGF0LBcIixcbiAgICBcImtvaVwiOiBcItC90YsgfNOn0L0gfCDQsdGLfNC00LAgfCDQv9GAfNC/0YDQsHzRgNCw0LJ8INC80L580LvTp9C9fCDQtNCwfNCx0YvQtHzQu9OnIHzQvtGA0YJ80LzQvtGAfNOn0LwgfNCw0LLQvnzTp9C5IHwg0LLQtXzRi9C0IHwg0L3QtXzQvdOn0Ll80YvRgSB80YvQvSB80YHTpyB80YLTp9C8fNGB0YwgfNCy0L4gfNGN0LcgfNC70YzQvXzRjNC906d80YLQvdGLfNC0INC8fCDQsNGBfNGL0L3Ri3zQvCDQv3wg0L/QvnzRgdGM06d8INC4IHzRgtC+IHzQsdGLIHwg06fRgnwg0Y3QvHwg0LrRi3zQsNC70Yx80YLQu9OnfNC9INGNfCDQvtGCfNCy0LXRgHzRjdC8IHwg0LrTp3zRgNGC0Lt806cg0LJ8INC60L580LLQvtGNfNGB0YLQsnzQtdGA0Lx80YLRiNOnfCDQtNC+fNC+0LvQsHzRi9C706d80LLQvtC7fNCw0YEgfNOn0LTQvXzQutGL0YJ80ZbRgdGMfNC10YLQvnzQvdC10YJ80YLQstC+fNC70ZbRgXzQutOn0YB806fRgSB8INGB0LV80Ysg0YF80YjTp9C8fNCwINGBfNGC0LAgfNC30LvTp3wg0LzQtXwg0L7Qu3zQsNGG0Lh806cg0Lp806cg0LR80LzQtdC0fCDQstGLfNCy0L3Ri3zQsCDQsnzQvdCwIHzQtyDQsnwg0L3QsHzTpyDQsXzQu9Cw0YF806fRgNGCfCDQstC+fCDQstOnfCDRgdGWfNC70LDQvXzRgNC806d80LTQsdGLfNC10LTQsXzRi9C006d80L7QtyB80LDRgdGMfCDQvtC3fCDRgdGLfNGL0YLRiHzQvtC706d80L7RjdC3fNGC0LjRgHzRgSDQvnwg0YfRg3zRiyDQsHzQvtGC0Lh80YbQuNGPfNC40YHRjHzTp9GC0Lt8INGN0YJ80YDRgtGLfCDQs9C+fNGLINC/fNGLINCxfNC60L7Qu3zRgtGL0YF80YHQtdGCfCDRgdGMfNGA0YLRlnzQutOn0YJ80L4g0YF80L0g0LF80LTQtyB80L0g0L18INC80Yt8INC60LV80LrQtdGAfNGC06fQvXzRgtOn0LN806fRgtC9fNC40YEgfNCwINC0fNC806cgfNC+0YHRgnzTpyDQvHwg0YHQvnzQvtC90LR80L3QsNGGfNC006fRgXzQuNGC06d80LXRgdGCfNCy0YvQu3wg0LLQuHzRgdC40YF80Y3RgtCwfCDRg9C0fNGB0YPQtHzQvdOnIHzRg9C00LZ806fQsyB80L/QvtC9fNGLINC9fNC9INC/fNC806fQtHzQsCDQv3zQvtGA0Ll806fQvdGLfNOn0LzTp3zQvSDQvHzRgtGMIHzRgdGL0Lt80LDQvdCwfNGC0ZYgfNC90LTQsHzRgNC90Yt80YHRgdC4fNGA0YDQtXzRg9C606d80Lcg0Lp80YfRg9C6fNC50YvQvXzRgNC10Ld8INGN0Ld80YvRgdC7fNOn0YAgfNGM06fRgHzRgSDRgXzRgSDQtHzRgNGCIHzRgSDQsnzQtdC30Lt80LrQuNC9fNC+0YHRg3zRjdC30Lt80Lkg0L580L7RgtGBfCDRgtOnfNGLINC0fCDQu9C+fCDQvtCxfNC+0LLQvXzQu9On0YJ80LDRgdGBfNC606fQtHzRgSDQvHzTpyDQvnzQvdCw0Lt80LHRi9GCfNC+0L3QsHzTp9GCIHzRgdC706d80YHQutOnfNC60L7QvXzRgtOn0LR80YvRgtOnfNC00L3Ri3zQsCDQvHzRiyDQvHzQvdC10Lp80Ysg0Lp806cg0L180LDRgdC7fNC00L7RgHzTpyDQv3wg0LTQtXwg0LfQsHzQsCDQvnwg0L7QsnzRgdGC0Yx80YLRgNCwfCDQtNC3fNGMINC6fNOn0YLRh3zQvSDQunwg0YHRgnzQsNGB0LB80LXRgtOnfNGM0L3Ri3zQvNOn0Lt80YPQvNOnfNGB0YzQvXwg0YPQvHzQtdGA0L180LrQvtC0fCDQv9GLfNGC0LvQsHzQvtC70Yx80LjQsNC7fNCwINC6fNC9INC+fCDRgdGNfNCwINC9fNGMINC8fNC60YvQtHzRhtC40LB80YHQsCB8INC70Lh80LAg0LF80LXQt9OnfNC5INC0fCDRh9GCfNGB0YzQunzRjdGB06d80LjQvtC9fNC10YHQunzTpyDRgXzQvtGG0Lh80YfRgtC+fNCw0L0gfNGB0L7RhnzQudOnIHzQvNOn0YF80YLQutC+fNC30YvQvXzQvdOn0Y980LLQtdGBfNC10L3QvXwg0LzTp3zTp9GC0Lp806fRgdGMfNGC06cgfNGA0LvTp3zTp9GPIHzQvtC70Y980YDQudOnfNOn0LzRi3zQs9C+0YF80YLRgdOnfNC30LDQunzRgNGB0YJ80Lcg0LR80LTQtdC6fNC90L3RkXzRg9C00LB80L/Ri9GAfNC10LrQuHzQsNC60L580L7Qt9GMfCDQsCB80LjRgdOnfNC/0L7Qt3zQtNCw0YB80LDRgNGBfNGLINGHXCIsXG4gICAgXCJiZWxcIjogXCIg0ZYgfCDQv9GAfNC/0YDQsHzQsNCy0LB8INC90LB80L3QsCB8INC/0LB80YDQsNCyfNC90YsgfNGG0YwgfNCw0LHQvnwg0LDQsXzQstCwIHzQsNGG0Yt80LDQstC1fNCw0LUgfCDRh9CwfNC90L3Rj3zQsNC90L180LvRjNC9fCDQvNCwfCDRgdCyfNGB0LLQsHzQsNC70LB80L3QtSB80YfQsNC7fNC70LDQsnzQvdGPIHzQsNC5IHzRi9GFIHwg0Y/QunzQs9CwIHzQstC10Lp80LUg0L98INCw0LR80LAg0L18INC90LV80L/RgNGLfNCw0LPQsHwg0LrQvnzQsCDQv3wg0LfQsHzQutC+0LZ80L7QttC9fNGLINGHfNCx0L7QtHzQtNC90LB80LbQvdGLfNCy0LDQsXzRhtGG0LB80YbQsCB8INGeIHzQsCDQsHzQtdC6IHzQvNCw0LV80ZYg0L980L3QvdC1fNC90YvRhXzQsNGB0YZ80LAg0YF80L/QsNCyfNCx0L4gfNCw0LwgfNGB0YLQsHwg0YHQsHwg0LLRi3zQstCw0L180YzQvdCwfCDQtNCwfNCw0YDQsHzQtNC30LV80L7QtNC9fNCz0L4gfNC90LDQs3zQstGW0L180LDRhtGMfNC+0Z7QvXzRhtGL0Y980LzRliB80YLQviB8INGA0LB80ZYg0LB80YLQstCwfCDQsNGBfNGB0YLQsnzQu9C10L180LDQstGWfNCw0LQgfNGWINGBfNC10L3QvXzRliDQvXzQsNC70Yx80L3QsNC5fNCw0LLQvnzRgNCw0YZ80LDRgNC+fNGG0ZYgfNGB0YbRlnzQv9Cw0LR80LDQvNCwfCDQsdGLfCDRj9CzfNGP0LPQvnzQuiDQvHzRltGFIHzRgNGL0Lx80YvQvCB80Y3QvdC9fNGI0YLQvnzRliDRlnzRgNC+0LR8INGC0LB80L3QsNC9fCDQtNC3fNC90ZYgfNGPINCwfNCz0Y3RgnzQvdCw0YF80LDQvdCwfCDQs9GNfNGW0L3QvXzQsCDQsXzRi9GG0Yx80LTQsCB80YvRliB80L7RniB80YfRi9C9fCDRiNGCfNCwINGefNGG0YvRlnzRj9C60ZZ80LTQt9GPfNCwINGWfNCw0LPRg3zRjyDQv3zQvdGL0Lx80L3QsNGGfCDRgyB8INGe0YF80YvRjyB80YzQvdGLfNC+0LvRjHzQvdCw0YB80Z7QvdCwfNGFINC/fNGWINC0fNGeINGWfCDQs9GAfNCw0LzRlnzRi9C80ZZ80LDRhSB8INGD0YF80LDQtNC3fCDQvdGWfNGN0YLQsHzQu9GPIHzQstC+0Z580YvQvNCwfNGA0LDQtHzRiyDQv3zQt9C90LB80YfRjdC9fNC90LXQvXzQsNCx0LB8INC60LB80Z7Qu9C1fNGW0L3QsHzQsdGL0YZ80YXQvtC0fCDRltC9fNC+INC/fCDRgdGCfNC10YDQsHzRg9C70Yx80LDRniB80LDRgdC9fNGB0LDQvHzRgNCw0Lx80YDRiyB8INGB0YN80L3QsNC7fNC00YMgfNGMINGBfNGH0YsgfNC60LvQsHzQsNC90Yt80LbQvdCwfNGWINGAfNC/0LXRgHzRliDQt3zRjCDRg3zQvNCw0Y580LDQutC+fNGL0YbRhnzRj9C60L580LTQu9GPfNGD0Y4gfNCz0YDQsHzRg9C60LB80LUg0ZZ80L3QsNC1fNCw0LTRgXzRliDRnnzQutCw0YZ80Z7QvdGLfNCwINC3fCDQtNC7fNGP0Z7Qu3zQsCDRgHzQsNGO0Yd80Y7Rh9GLfNC+0LTRg3wg0L/QtXwg0YDQvnzRiyDRlnzQstGLIHzRliDQvHzQsNGB0LB80LUg0Lx80LDQtNGDfNGFINC9fNC+0LTQsHzQsNC00L180L3QvdGWfNC60ZYgfCDRiNC7fNCw0LvQtXzRgNCw0Ld80LDQtNCwfNGFINGWfNCw0LLRj3zQvdCw0LJ80LDQu9GWfNGA0LDQsXzRiyDRnnzQvdC90LB80LzQsNC0fNGA0L7RnnzQutCw0L180LfQtSB80LTRgdGCfNC20YvRhnzQsNC90ZZ80L3RgdGCfNC30Y/RgHzRgNC20LB80LfQsNC6fNC00LfRlnzQu9GO0LF80LDRjtGGfNCx0LDRgHzRltC8IHzQtdC90Yt80LHQtdGBfNGC0LDQvXzQvCDQv3zQtNGD0Lp80LUg0LB80LPRg9C7fNGPINGefCDQtNGNfNCy0LUgfNC20LDQsnzQsNGG0YZ80LDRhdC+fNC30LDQsXzQsCDQsnzQsNCy0Yt80LPQsNC9fNC+INC9fNCy0LDQs3zRjyDRlnzRh9C90LB80Y8g0Y980YHQsNGGfNGC0LDQunzQvtC0IHzRj9GA0LZ80YHQvtCxfNC8INC9fNGB0LUgfNGH0LDRhnzQvdGW0Yd80YvRj9C7fNGP0LvRjHzRhtGG0Y980Ywg0L980L4g0YF80LLQvtC7fNC00Y3Qunwg0LHQtXzQvdGDIHzQvtCz0LB8INGA0Y180YDQsNGBfNCx0YPQtHzQsCDRgnzQsNGB0L580YHQvdC+fNC10LnQvVwiLFxuICAgIFwiYnVsXCI6IFwiINC90LB80L3QsCB8INC/0YB80YLQviB8INC4IHzRgNCw0LJ80LTQsCB80L/RgNCwfCDQtNCwfNCwINGBfNGB0YLQsnzQstCwIHzRgtCwIHzQsCDQv3zQuNGC0LV80L3QviB80LLQviB80LXQvdC4fNCwINC9fNC1INC9fCDQt9CwfNC+INC4fNC+0YLQvnzQstCw0L180L3QtSB8INCy0YF80YLQtSB80LrQuCB8INC90LV80L4g0L180L7QstC1fCDQv9C+fNCwINC4fNCw0LLQsHzRh9C+0LJ80L3QuCB80LDQvdC1fNC40Y8gfCDRh9C+fNCw0LLQvnzQuNC1IHwg0YHQsnzQtSDQv3zQsCDQtHwg0L7QsXzQstC10Lp80LXRgdGCfNGB0LLQvnwg0LjQvHzQuNC80LB80L7RgdGCfNC4INC0fNC4INGHfNCw0L3QuHzQuNC70Lh80LLRgdC1fNC70LggfNGC0LLQvnzQuCDRgXzQvdC40LV80LLQvtGCfNCwINCyfNCy0LDRgnzQvNCwIHwg0YDQsHzQuCDQv3zQuCDQvXwg0LIgfNC10LogfNGB0LXQunzQtdC60Lh80LAg0L58INC40Lt80LUg0Lh80L/RgNC4fCDRgdC1fNC+0LLQsHzQtdGC0L580LDRgtCwfNCy0L7QsXzQvtCx0L580LHQvtC0fNCw0YbQuHzQsNGCIHzQv9GA0LV80L7QtNC4fNC6INC4fCDQsdGKfCDRgdGKfNGA0LDQt3wg0L7RgXzRgNC10LR8INC60LB80LAg0LF80L4g0LR80YHQtSB8INC60L580LHRitC0fNC70L3QvnzQvdC40Y980L4g0L98INC+0YJ80YrQtNC1fNC+INCyfNC30LAgfNGP0YLQsHwg0LUgfCDRgtGAfNC4INC4fNC+INGBfNGC0LXQu3zQuCDQsnzQvdC40YJ80LUg0YF80YDQsNC9fCDQtNC1fNC+0YIgfNC+0LHRiXzQtNC1IHzQutCwIHzQsdGA0LB80LXQvSB80Y/QstCwfNGG0LjRj3zQv9GA0L580LDQu9C9fNC4INC+fNC40Y/RgnzRgdGCIHzQvdC+0LJ8INC00L580LXQs9C+fNC60LDQunzQsNGC0L58INC40Ld80L3QtdCzfNCwINGCfNC00LXQvXzQsCDQunzRidC10YF80LAg0YB80YLRgNGPfNCwINGHfNGA0Y/QsXzQviDQvnzQstC10L180Y/QsdCyfNCx0LLQsHzQtNGK0YB80LPQvtCyfNC90LDRhnzQtdC90L580YLQstC1fNGK0YDQtnzQtSDQtHzQvdC+0YF80YDQttCwfNCwINC3fNCy0LjRgnzQt9C4IHzQsNC60LJ80LvQtdC9fCDRgtCwfNC10LbQtHzQuCDQt3zRgNC+0LR80LUg0L580L7QsdGAfNC90L7Rgnwg0L3QuHwg0YEgfNGCINGBfNC90LDRgHzQviDRgnzQvtC90LB80LXQtyB80LnRgdGCfNC60LDRgnzQuNGH0LV8INCx0LV80LbQsNCyfNC1INGCfNC1INCyfNGC0LLQsHzQt9Cw0Lp80LDRgNC+fNC60L7QuXzQvtGB0L18INC70Lh80YPQstCwfNCw0LLQvXzQtdC50YF80YHQvdC+fNGA0LXRgXzQv9C+0Lt80L3QtdC9fNCy0L3QuHzQsdC10Ld80YDQuCB80YHRgtGAfCDRgdGCfNGB0YLQvnzQv9C+0LR80YfQutC4fNCy0LjQtHzQs9Cw0L180YHQuCB80LTQuCB80Lgg0Lp80L3RgdGCfCDRgtC1fNCwINC1fNCy0YHQuHzQtdC+0LF8INC00Yp80YHQuNGHfNC40YfQunzQtdC00LJ80LbQtdC9fNC90LjQunzQvtC00LB80YIg0L180L4g0YB80LDQutCwfNC10LvQuHzQvtC00L180LXQu9C9fNC70LjRh3wg0YfQtXzRh9C10YF80LHRidC1fCDRgNC1fNC4INC8fCDRgdGAfNGB0YDQtXzQuCDRgHzRgdCwIHzQu9C90Lh8INGB0Lh80LTQstC4fNC40YfQvXzQttC00LB8INC60Yp80L7QtdGCfNC40YDQsHzRjyDQvXzQtNC10Ll8INC80LV80LXQtNC4fNC00YDRg3zRhdC+0LR80LXQvNC1fNC60YDQuHzRh9C1IHzQtNC+0YF80YHRgtCwfNCz0YDQsHwg0YLQvnzQvtC5IHzRgtGK0L980LLRitC3fNC40LrQvnzQuCDRg3zQvdC10YJ8INGB0L580LDQstC4fNGC0L7QuXzQtdC70YF80LzQtdC2fNGH0LjRgnzQuNGC0LB80YnQviB80YrQvCB80LDQt9C+fNC30L7QsnzQvdC40Yd80L3QsNC7fNC00L3Qvnwg0LzQvnzQuNC90LV80LAg0YN80YLQvdC+fNGC0LDQt3zQutC+0L180LvQuNGCfNCw0L0gfNC60LvRjnzQu9GO0Yd80L/QvtGBfNGC0LLQuHzQsCDQvHzQuSDQvXzRgiDQuHzQuNC30LJ80YDQtdC3fNCw0LfQuHzRgNCwIHzQvtGP0YJ80L3QtdC+fNGH0YDQtVwiLFxuICAgIFwia2F6XCI6IFwi0LXQvSB80L3QtSB8INKb0rF80YLQsNGAfNKx0pvRi3wg0LHQsHwg0pvQsHzSk9CwIHzQsNC00LB80LTQsNC8fNKb0rHSm3zRi9KbIHwg0LHQvnwg0LDQtHzRi9Kb0YJ80pvRgtCwfNGL0L3QsHzQsNGAIHwg0LbTmXzRi9KjIHzRi9C70Yt805nQvdC1fNC205nQvXwg0L3QtXzQvNC10L180LvRi9KbfNC90LAgfNGAINCwfNC00LUgfCDQttCwfNGW0L0gfNCwINKbfNCw0YDRi3zQsNC9IHwg05nRgHzSm9GL0Lt80LDRgNCwfNCw0LvQsHwg0LzQtXzQvSDSm3zQtdC80LV80YPSk9CwfNC90YvSo3wg0LTQtXzQsNGB0Yt80LDQvCB80ZbQvdC1fNGC0LDQvXzQu9GLIHzQvdC00Yt80LTQsCB805nRgCB80YvSk9GLfNGB0YLQsHzQtdC60LV8INOp0Ld80YvQvSB80pPQsNC9fNCw0L3QtHzQvNC10YF8INCx0ZZ8INKb0L580LTRiyB80ZbSoyB80LHQsNGBfNCx0L7Qu3zQtdGC0YJ80YvQvyB80L0g0LF80ZbQu9GWfNKb0YvSm3zQvdC00LV80LXRgNGWfNC1INKbfNCw0LvRi3zQvdC10Lx80YHQtSB80LHRltGAfNC70LDRgHzQtdGB0LV80Ysg0LF80YLRi9C9fNCwINC2fCDQutC1fNGC0LjRlnzQvtGB0YJ80LPQtSB80LHQsNGAfCDRgtC4fNC1INCxfCDQsNGAfNC00YvSm3zRgdGLIHzRltC90LR80LUg0LB80LDRgtGLfCDRgtCwfCDQsdC1fNGLINGCfNGW0LogfNC+0LvRi3zQvdC00LB80pPRi9C9fNGA0YsgfNC40ZbRgXzSk9GLIHwg0YLQtXzQsdC+0YF80LvRg9GLfNCw0LvRg3zRgdGL0L180YDRi9C9fNC10YLRlnzRltGBIHzRgNC00LV80pvRi9KTfNC1INC2fNGA0ZbQvXzQtNCw0YB80ZbQvdGWfNC9INC2fNGC0YLRlnzSm9Cw0YB80L0g0Lp80ZbQvCB8INC10YB80LXQs9GWfNGL0YDRi3zRi9C90Yt8INGB0LB80YDSk9CwfNCz0LXQvXzRi9C90LR80LDQvdGLfNGD0YvQvXzRiyDQvHzQu9KT0LB80LDQvdCwfNC90ZbSo3zRgtC10YB80YPRiyB80LXQuSB80YLRltC6fNC60LUgfNGB0pvQsHzSm9CwIHzQvNGL0YF80YLRi9KbfNC8INCxfNCw0YDQtHwg0L7RgnzQtSDQvXzQtSDRgnzQvNC90Yt806nQt9GWfNC90LDQvXzQs9GW0Ld80LXQs9C1fCDQvdCwfNGLINOZfNCw0LfQsHzSoyDSm3zQu9Cw0L180L3QtdCzfNCw0YHSm3zQutGW0L180LDQvNC9fNC60LXRgnzRgNCw0Lt80LDQudC0fNC70YPSk3zQsNGB0LB80YLRliB80YDQtNGLfNGWINCxfNCwINCxfNGA0YMgfCDQttC1fNGAINC8fNC00ZYgfNGC0YLQsHzQvNC10YJ80LvRltC6fNGC0YvRgHzQsNC80LB80LbQsNGBfNC9INC9fNC70YvQv3wg0LzSr3zQtNCw0Ll806nQtyB80ZbQs9GWfCDQsNC7fNCw0YPQtHzQtNC10Ll80LfRltC9fNCx0LXRgHzRgCDQsXzRg9C00LB80LrQtdC7fNCx0ZbQu3zRliDRgnzSm9C+0YB80YLQtdKjfNC70LPQtXwg0LbSr3zQtNC10L180Ysg0LB80LXQu9GWfNC00LXRgHzRiyDQtnzQsCDRgnzRgNKb0Yt80YDQu9GLfNCw0YDSm3wg0YLSr3zSm9Cw0Lx80LXQu9C1fNCwINC+fNC1INOpfNGC0ZbQvXzRltGAIHzQtdKjIHzRg9Cz0LV80LUg0Lx80LvQtNC1fNCw0YMgfNCw0YPRi3zRgNC60ZZ80L0g0LB80Ysg0LV80L7QvdGLfNC9INGCfNGA0YvQu3zRgtKv0YB80YbQuNGPfNCz0ZbQvXwg0YLQvnwg0YXQsHzQttCw0pN80L7Sk9CwfNC+0YHRi3zQt9C00LV8INC+0YF80ZbQutGCfNC60YLRlnzQsCDQtHzSsdC70YJ80LvRgtGCfNGC0YLRi3zQu9GW0Lx80pPQtNCwfCDQsNGDfCDQtNCwfNGF0LDQu3zRgtGC0LV80LvQvNCwfCDSsdC7fNCw0LzQtHzSm9Kx0YB80ZbRgNGWfNKb0LDRgnzRgtCw0Lt80L7RgNKTfNC30ZYgfNC10LvQs3zRgdGW0Ld80LDSk9GLfCDQtdC7fNKjINCxfNGL0YEgfCDQsNGBfNGW0LzQtHzQvtGC0Yt8INOZ0Lt80L0g0LV80LDSk9C0fNKb0YLRi3zRiNGW0L180LXRgNC6fNC1INC0fNC10LogfNC10L3RlnzQutGW0Lx80YvQu9C8fNGI0ZbQu3zQsNKT0LB80YHRgtGLfNC70LXRgHzQs9GWIHzQsNGC0YJ80LrQtdC9fCDQutOpfNGL0LzigJB8INC60rF80LrSsdKbfNGA0LAgfNGA0ZbQunzQvSDTmXwg0LXRiFwiLFxuICAgIFwidGF0XCI6IFwiINK705l80LvQsNGAfNOZ0LwgfNK705nQvHwg0LrQtXwg0YXQvnzQutGD0Lp80L7QutGDfNGF0L7QunzQtdGI0LV8INCx0LV80LvTmdGAfNC60LXRiHzQs9CwIHzTmdGAIHzRgNCz0LB80LDQvSB80LrQu9CwfCDQsdGDfNCw0YAgfNC10qMgfNC90LXSo3zQs9OZIHwg0YLQvnwg0LHQsHzQtNCwIHzRgNCz05l8INGC0Lh80YvRgNCzfNK705nRgHzQtdC90LV80LHQtdGAfNOZ0L0gfNC10L0gfNGAINC6fNCx0YPQu3zRg9C60Lt80LTTmSB80LAg0YJ80LDRgNGLfNGC0L7RgHzQuNGA0LV8INKv0Ld80L3QsCB80LPQsNC9fNCw0YDQsHwg0LrQsHwg0LDQu3zTmSDRgnzQvdOZIHwg0LjRgnwg0LTTmXzRiyDQsXwg0LjRgHzRgNGL0L180YjQtSB80YvQvSB80LXQvdOZfNGC0LjQtXzQu9GL0Lp80LXQutC7fNGL0L3QsHzQvSDRgnzQuNC10Yh80LHQsNGAfNC10LvQtXzQutCwIHzQtdC705l80LAg0YV80L0g0LF80LrRiyB80YDQtdC6fNCw0LvQsHzQutCw0YB8INGC0LB805kg0Lp80L3QtNCwfNC10YggfNC705nQvXzQsdC10Lt80YPQutGLfNC70LDQvXzQuNGC0LV80YLTmSB80YjQtdC9fNC70LUgfNC70YsgfNC10LcgfNC10YDQs3zQvSDQuHzTmSDQsXzQsCDQunzQutC705l80q/QtyB80YLQtdC7fNC70YvRgHzQvdC1IHzTmdGA0LN80Ysg0rt80LUg0LF8INCz0LB8INGF0LB80LDQu9GLfNGA0L3QtXzQvCDQuHzRgtC10L1805nRgNC9fNCwINCxfNC90YvSo3zRi9C90LR80YvSoyB80LvTmdGCfNC00LDQvXzRgdOZIHwg0Y/QunzQu9Cz0LB80YPQu9GLfNC10LsgfNCwINCwfCDRj9C4fNGP0LjRgXzQsNGB0Yt80Ygg0YJ80LAg0rt8INGB0LB80YDQu9OZfNC70LXQunzQuNCz0LV805kg0YV80LPQtdC3fNC+0YDQvHzQtdC8IHzQsNC90Yt80YAg0LF80Lwg0LB80YAg0rt80YDQvNGLfNC80YvRiHzRgdGL0L180YjQutCwfNOZINK7fNC40YHTmXzRgtOZ0YB80q/Qu9OZfNOZ0YIgfNC805nRgnzRgdC10L180YHQtdC3fNGH0LXQvXwg0L3QuHzTmSDQuHzQvSDQvHzQuNC70Lt80Y/RgtGMfNC90YsgfNGL0LvRi3zSr9C30LV8INC60Lh8INGN0Yh8INGC0YN80LDQu9GDfNCw0LrRi3zRi9C/IHzRg9Cz0LB80LvRjCB80YLQsNC9fNC9INC6fNC70YMgfNCx0YMgfNC80LDRgXzRgNC10L180LrTmSB8INGC0q98INGC05l80YLSr9CzfNC30LXQvXwg0pfTmXzRgtGL0L180LTQuCB80LHQsNGIfNC60LvQtXzQs9OZ0L180YLRjCB8INCx0Lh805nRgNC1fNGI0YLTmXzQs9GL0L1805nSr9C7fNC10YAgfNC80LjQu3wg0LzQuHzQutC70Yt80LPQtdC7fNGL0YggfNC70LXRgHzQtdGA0Lt805nQstC1fNGA0LTTmXzQsCDRj3zRgCDQsHwg0LzTmXwg0YDTmXzQu9C10Lx80YXQsNC7fCDQsNC9fNKjINGCfCDQsNGIfNGL0LogfNGG0LjRj3zQtSDRhXzRgdGC05l805kg0LR80LDQu9GMfNGA0LDQunzQtdC6IHwg0LTQtXzRgNOZ0LJ80YLQvtGCfNC605nQvXzRg9C70LN80L7RgNCzfNCy0LXRiHzQtdGI0YJ80L3QuCB80LjRgtOZfNC60LrQsHzQvCDRgnzSr9Cz0LV80YjQtdC7fNCwINC4fNC90LTTmXwg0LTQsHzRgNC10Lt80LrQtdGAfCDQutGLfNC10YDTmXzRgtCwIHzQvSDRj3zQtdCz0LV80YvQuSB80LAg0LR80LDRhtC4fNGAINC+fNGI0LvQsHzRgtC705l805nRgtC7fNC9INC0fNCw0LnQu3zQu9C705l80LDRgNC0fNGA0LTQsHzQutGC0LB80YjQutOZfCDQt9CwfNCz0LUgfNC705nRiHzRiCDQsXzTmdGB0LV80LrQvtC9fNGI0YvRgHzRhtC40LB80L3QuNC9fNC70LDRg3zRg9GA0Yt80YDRiyB80L7RgtGLfNOZ0L3QtXwg0YLTqXzQuNC90LR80L3QtNC4fCDSl9C4fNC+0YbQuHzRgdC+0YZ80LvTmSB80LDRgNGCfNGP0LrQu3zQt9Cw0Lp80YLQuNCzfNGA0LrQtXwg0LTQuHwg0YHQvnzRi9C60Lt80LrQtdC8fCDQutC+fNGAINC4fNKjINCxfNOZ0YLQtXzQs9GL0Y980YfQsNGAfNKv0LPTmXzQuNC9IHzQuNC70LV8INGB05l8INC40Lt80LzQs9GLfCDQsNC1fNC9INCwfNCw0LXRgHzRi9C90Yt80Lsg0rtcIixcbiAgICBcInR1a1wiOiBcIiDQsdC4fNC70LDRgHwg0LLQtXzQstC1IHzQtNCwIHzQsNC00LB80LDRgNGLfCDRhdC1fNC40YAgfCDQsNC0fNCx0LjRgHzQtNCw0Lx80LrQu9CwfNC10YAgfNGAINCxfNGL0qMgfCDRhdCwfNCw0YDQsHzQs9CwIHzQtdC9IHzQu9Cw0L180YvQvdGLfNC40LvQuHzQtNGL0YB80LDQvCB80LDQu9CwfCDQsdC+fNGF0LXRgHzRgCDQsHzRi9GAIHzQu9GLIHzQu9C10YB80LDQvSB80LHQuNC7fNC40qMgfNGL0LTRi3zRgCDRhXzQsNC60Lt80L3QtNCwfCDTqdC3fNC60LvRi3zQvdGLIHzRhdGD0Lp80LXRgNC4fCDRhdGDfNGD0LrRg3zQsNCz0LB80L3QtSB80LvRi9C0fNC40L3QtXzRi9C90LB80LvQtdC9fNC90LAgfNGF0LDQunzQtNC1IHzigJDQtNCwfNC40L0gfNGA0YvQvXzQsNGC0Lt8INGN0LR80LzQsNCzfNOp0LcgfCDQtNC1fNCw0YHRi3zQu9GL0LN80LrRg9C6fNC1INCwfNGL0L3QtHzQsNC70Yt80LvQvNCwfNCx0L7Qu3zQtNCw0L180LjQvdC4fNCwINGFfCDRj+KAkHzQtSDRhXzQs9C1IHzQuNC70LV80Y/igJDQtHzQsNGAIHzQsNC80LB80LvQuCB80YvQs9GLfNC10YLQuHwg0LHQsHwg0LPQsHzQs9GL0L180LXRgNC1fNGD0LrQu3zQu9C40LN80L3Ri9KjfNC30LDRgnzQu9GL0Lp80YLQu9GLfNC90LTQtXzQvdC4IHzQu9C40Lp80LTQtdC9fNC80LDQunzRgdGL0L180LTQuNC7fNGA0YsgfNCw0L3Ri3zQutC40L1805nQs9C1fNC/INCxfNCwINCzfNGF0LXQvHzQuNCz0Lh80Y3RgNC6fNCw0LfQsHzQsCDQtHzQvNC10Lp8INGN0YB80LzQsNC7fNGL0LrQu3zQvNOZ0LN80YHQsNGBfCDRjdGBfNC10LrQu3wg0LzQsHzRgNC40L180Y3RgdCwfNC+0LvQsHzRiyDQsXzQsNC50Yt80L0g0Y180Y3QtNC4fCDQs9OpfCDRhdC4fNGB0YsgfCDQsNC3fNCx0LDRiHzRiyDQtHzQudC00LB80YjQs9CwfNCw0YjQs3zQsCDQsnwg0LTQvnzRi9C10YJ80Ysg0LJ80LTQsNC6fNC90LjSo3zRgNC60Lh80LPQsNC7fNGH0LjQvXzQs9C00LB80LDQuiB8INKX0LV80LAg0LF8INGN0YJ80Y3RgtC8fNC60YsgfNC70LXRgnzQudOZ0L18INGC0LB80LPQuNC9fNGP0L0gfNGC0LzQtXzRhdC40Yd80LjRhyB80LzQtdC3fCDQs9GDfNGF0LDQu3zRi9C70Yt80q/QvdC0fNC40LvQvHzQtNCw0Ll80Y/Qs9C0fCDRj9CzfNC4INCyfNC40LwgfNCw0LrRi3zRiyDQs3zTmdC9IHzQsCDQsHzRgNGL0qN80LPQuCB80YLQu9C1fNC9INC8fCDQs9C+fNC40L8gfNCw0LsgfNC10YHQuHwg0YHQtXzQu9C80LV8INC60LB80Lwg0YV80LTQtdKjfNKjINGFfNC1INC0fNC00LjRgHzQuNC70Lt80YDQuNC7fCDQsNC7fNC60LDQvXzQtSDQs3zQu9C40L180YDQsCB80LTQvtC7fCDQsdC1fCDQvNC4fNC80LjQu3zSoyDQtHzQvSDRhXzQtdC70Lh80L0g0LB80LUg0Lx8INCz0LV80Ysg0YV8INC006l80LjQuiB8INGB0L580qMg0LB80YfQuNC7fNC006nQsnzQtSDQsXwg0YHQsHzQs9Cw0YB80LUg0LJ80LXSoyB80L0g0LF80YDQvNCwfCDQvNC1fNC60LvQuHzSr9GH0Lh8INC005l8INKv0Yd80YbQuNGPfNC9INCyfCDQtNKvfNC4INCxfNCw0LnQtHzQutC70LV80YHQtdGAfNCwINGPfNGB0L7RhnzQs9C+0YB80L7RhtC4fNC00LDQu3zQvNGLIHzQvtC70Lx80YbQuNCwfNGD0qMgfCDQvtC9fNGD0L8gfNC60LTQsHzQtNOZ0Lt80LjRgNC4fCDQtNC4fNC10LvQtXzQu9C40L980LDQu9C6fNC70LjQvHzQs9GD0YB80q/QvdC4fNC90LzQtXwg05nRhXzQvSDQs3wg0LjRiHzRiyDTqXzSoyDRjXzQvdGD0L180LXQs9C4fNGC0LjQvXzRiyDQsHzRgNC70LV80LDRhtC4fNGL0LcgfNC3INGFfNGB0YvQt3zQsNGF0LB80Lwg0Y180L7Qu9GLfNGA0LDQvHwg0YLRg3wg0L3QuHzRi9C/IHzQtdGA0YJ80LDQu9C8fNC+0YDQsHzQuCDRhXzRhdC70Lh805nRhdC7fNC6INGNfNOp0LLQu3zQstC70LV80YLQvNOZfNC10YIgfNC90LvQuHzQsNGF0YF80LPTqdC3fNCz0YsgfNC10YLQu3zRiyDSr3zQvdGD0qN80L7QvdGDfNGB0LjQt3zQtdC80Lx80LXQuiBcIixcbiAgICBcInRna1wiOiBcItCw0YAgfCDQsdCwfCDSs9CwfCDQtNCwfNCw0LQgfCDQstCwfNC+0L0gfNCy0LAgfCDRgtCwfNC00LDRgHzRgtC4IHwg0LjQvXzQsdCwIHwg0LHQvnwg0LrQuHzQsNGA0L58INC00L580L7QuCB80LTQvtGAfNCw0YDQtHzQutC4IHzQsdCw0YB80LQg0rN80YPSm9GDfCDRj9C6fNC40L0gfNKz0LDRgHzQuCDQvnwg0L3QsHwg0LzQsHzQuCDQvHzQvtGA0LB8INKz0YN80Y/QuiB80L3QuCB80L3RgdC+fNC40L3RgXzQuCDSs3zQsNC4IHzQuCDQsXzRgdC+0L180YDQsNC0fCDQvNGDfNKz0L7QuHzRgCDRj3zSs9GD0pt80pvRg9KbfNKz0LDSm3zQuNC4IHzQuiDQuHwg0YjQsHzQuCDQtHwg0LDQt3zQuCDQuHwg0L7Qt3zQvdC0IHzRj9C0IHzSmyDQtHzQvtC30L580LDQtyB80LfQvtC0fNCw0L3QtHzQtCDQsXzQvtGP0LR8INC60LB80LjRj9GCfNC+0L3QsHzQtNCwIHzQsNC80L580LDSmyB80LAg0LF80LTQuCB8INGRIHzQs9Cw0YB80LDRgiB80LTQsNC9fNKz0LDQvHzQvtC00Lh80YDQtNCwfNC80L7Rj3wg0L7QvXzRg9C00LB80pvQuCB8INGF0YN80LHQviB80Lgg0YJ80LTQvtC9fNGB0YIgfNC90LDQvHzQvSDSs3zQvtC00LB80Lgg0YF80LDQvSB80L0g0LF80LzQuNC7fNC4INGFfNCx0L7RiHzQvtC90Lh80L7RiNCwfNGF0YPQtHzQsNCy0LB80LHQvtGPfNCw0YHRgnzQuCDQsHzRgNC+IHwg0LzQtXzQsCDSs3zQuNC80L580LjQu9CwfNC+0LzQuHzQvtCx0LB80LjQtNCwfNC60LDRgHzQvSDQtHzQu9Cw0YJ80LQg0LJ80LAg0Yh80rPQviB8INCw0YF80YLQsNKzfNGA0L7QuHzQuCDQvXzQtCDQunzRj9GC0Lh8INC00Lh80YjQsNC0fNOjINCyfNGA0LggfNGA0LTQvnzRiNCw0LJ8INC80Lh80LUg0Lp80YDQvtCxfNGC0LDRgHzRgtCwIHzQutC+0YB8INCx0LV80L4g0LR80LLQsNC0fNC80L7QvXzQuNKz0L580LvQuCB80YPQtCB80L7RgdC4fNC+0YjRgnzQvNC4IHzRgCDQvHzQsNGC0Lh80YIg0LF8INGB0L5806Mg0ZF80L3Ss9C+fNC80LjQvXzRiNCw0YB80LDRgNCwfNGC0LDRinzQsNC90Lh80LAg0LJ80LjRgNC+fNCwINC0fNC00LDQsnzRj9GCIHzQtNCw0LB8INGB0LB80LDQvNCwfNC00L7RiHzRgNCw0YR80YjRg9C0fNC706MgfNC0INCwfNC+0YLQuHzQsCDQvHwg0YTQsHzQuNGB0YJ80L7RgCB80YAg0rN80L3QsCB80Lgg0Lp80YAg0Lp80LQg0YJ80Lgg0rd80Lgg0Yh8INGN0Yp8INGB0YN80L0g0Lx80L0g0LJ80Lgg06980YTQuCB80LLQsNGAfNC00LjSs3zQuNCz0LB80LfQsNGAfCDRiNGDfNCw0YDQuHzQsCDRgnwg0LjSt3wg0LDSm3wg0rPQuHzQsNGB0L580YAg0LF80YIg0rN80LAg0LB80L7QtNC+fNC80YPQvHzRgCDQsnzQsCDQvnwg068gfNGA0L7QvXzQvdCw0Ld80LTQuNCzfCDQvdC4fNCx0L7Rgnwg0rfQsHzQsNCy0YB8INKb0LB80Y/QuCB80YAg0LR80YPSm9C4fNC70LDQu3zQutCw0YF80YjRgtCwfNGD0L3QsHzQtdK3IHzQuNC90L580YLSs9C+fNGD0L3QuHzQsNCx0L580YHRgtC4fCDQstC+fNCw0LLQu3zQuCDSm3zQstC70LB80YPQvSB80YMg0L5806Mg0LF8INKz0LV80LTToyB80pvRgyB80YfRg9C9fNC9INC4fNGB0LDRgHzQvtGP0Lh80YLQsNCyfNC80LDSs3zQvtC90rN80pvQsNGAfNCw0YLSs3zRgtC40YB80L7SsyB80LDRhdGBfCDSm9C+fNGD0psgfNC+0LvQuHwg0LjRgXzQtCDQtHzQuCDQt3wg0LrQvnzQsNC30LB80L7RgNC4fNGE0LDRgHzRgdC+0YF80YDQsNC9fNC9INC6fNGAINCwfNK30YLQuHzQvtC90YN80YHToyB80LjRgNC4fNGA0YDQsHzRgNOjIHzSs9C10rd8INC30LB80LjQtCB80rPRgtC4fNGA0LjQuHzQsNC80Lh80pvQvtC9fNGD0LTQuHzQvSDQvXwg0L7QtHzQuNK30YJ80LzQuNGPfNGK0LvQvnzQu9C+0Lx80LjRjiB80L3QsNC4fNCw0LvQuHzQvdC00LB80L7ToyB80L7Rj9GCfNGP0L3QtHwg0LfQuHzQvtGP0L1806Mg0rN80Lgg0L980L7RhNC4fNC60LjRiHzSs9C40Lx80YDQsNGCfNGC0LjQvFwiLFxuICAgIFwia2lyXCI6IFwiINC20LB80L3QsCB80LDQvdCwfNC20LDQvXwg0LHQuHzRg9GDIHzRg9C60YN80LPQsCB80LHQuNGAfCDRg9C6fNCw0YAgfNC10L0gfNC70YPRg3zRgtCw0YB80LrRg9C6fNGD0LrRgnwg0LrQsHwg0LDQtHzRi9C9IHzQsNC00LB80YPRg9CzfNC00LDQvHwg0LzQtXzRg9Cz0LB80YvQuiB8INCw0YB80LXQvdC1fNC80LXQvXzQvdC10L180LDQvSB80LDRgNGLfNC+0LvRg3wg0LHQvnzQuNC9IHzQsNC8IHzQs9Cw0L180LjRgCB80LHQvtC7fCDQsNC7fNCw0YDQsHzQvdC00LB80L0g0Lp80YLRg9GDfNGAINCxfNC9INC2fCDQsdCwfNCw0L3QtHwg0LbQtXzRgCDQsHzQutGC0LB80YvQvdCwfNCw0YDQtHzQutGC0YN80Y3RgNC6fNKv0L0gfNC00LAgfNC9INCxfNC9INGNfCDRjdGAfNC90LTQuHzQsCDRgnwg0LrQvnzRgNC00Yt80L0g0LB80LTRi9C6fNGA0LrQuHzQuNC90LR80LAg0LZ80LrQuNC9fNCw0LvQsHzQsCDQsHzQu9Cw0YB80LDQvdGLfNKv0q8gfCDTqdC3fNCwINC6fNGC0LXRgHzQsNC70YN8INGC0LB80LAg0YN80LDQu9GLfNCwINGNfNC20LUgfNGD0LogfNC40LnQuHwg0YLQuHzQuNGIIHzRgtC40Ll8INC80LB80LPTqSB80LrRi9C7fNC50LjRiHzRg9C70YN80L3Ri9C9fNC60LUgfNC9INGCfNC60LDRgHzQsdCw0YB80LjQu9C4fNGDINC8fCDQutGLfNC40LPQuHzRgNGL0L180LAg0LF80q/Qs9OpfNGA0LPQsHzQtSDQsHzRg9C9IHzQtdGC0YJ80LTQuNC6fCDRgtGDfNC00LDRgHzRgtGC0LB80LHQsNGIfNGDINCwfNC9INGDfCDRjdGNfNC00YvQvXzQuNC8IHzRgNKv0q980LPQuNC9fNC70YvQunzRg9GI0YN80L3QtNGLfNGC0YPRgHwg0YHQsHwg0Y3Qu3wg0Y3QvHwg0LzSr3zQs9C+0L180LvQs9CwfNCw0LvQtHzQuNC60YJ80q/Sr9CzfCDQsdC1fNGA0YsgfNOp0LcgfNC90LDQvXzQvtC9IHwg0LDQvXzQutGC0LV80YPQuyB80LTQsNC5fNC10YDQtHzQtNC40LN80YAg0Lx80LXRgNC4fNKv0YfSr3wg0L3QtXzQsNGC0YJ80LvQtNGLfNC10LrQtXzQtdCz0Lh80q/QvdOpfNC70YPQunzQsNC80LR80YMg0LF80YvQvdC0fNKv0L3Sr3zRgNC00Lh80YLRg9C6fNC60LAgfNC60LDQvXzQuiDQtnwg0LrQuHzQvCDQsHzQutKv0L180L3QtSB80LjQvdC1fNC80LTQsHzRgNC40L180L7Qs9C+fNC60LXRgnwg0YHQvnzQutCw0Lx80LTQuNC9fNC6INC8fCDRjdGHfCDRgtC+fNGB0YvQt3zRi9C70YN806nQt9KvfCDQtNC1fNC9INC8fNGG0LjRj3zRjdGNIHzRh9Kv0L180LPQuNC3fNGD0L8gfNC90LXQs3zRjdGHIHzRgNGD0YN80YvQtyB80LzQtdGBfNGN0LzQtXwg0LjRiHzQu9GD0YJ80Ysg0Lx80YjQutCwfNGL0LrRgnzQvNCw0Lx80LDRiNC6fNC70LTQtXwg0LrQtXzQu9Cz0L58INGC0q9806kg0LZ80L7Qu9CzfNC10YEgfNC6INGCfNC60L7RgHzQs9C1IHzQsdC40Lt80YLSr9KvfNGD0LPRg3zRgNCw0Lt80LDQu9CzfNGC0YvQvXzQutC10L18INGD0Lt80LvQuNC8fNGD0YLRgnzRi9Cz0Yt80L7RgNCzfNC9INC9fNGDINC2fNGA0LTQtXzQvdGD0YN80YLQsNC7fNGHINC6fNGA0LPQvnzQvNCw0Lp8INGC0LV8INGD0Yh80YPQvdGDfNC60YLTqXzQtNC4IHzQsNC60YJ80L3Sr9C9fCDQtNC4fNC30q/QvXzQuNC70LV8INC606l80LrQsNGCfNCw0YbQuHzQvNGB0Yt8INGN0YF80YLRi9C6fNC1INC6fNC10LkgfNGC0LDQvXzQtSDRjXzQsNC5IHzQtdGAIHzRgdC+0YZ80L7RhtC4fNGG0LjQsHzQsNGC0Yt8INC20L580Log0Lp80LDQvNGBfNC70LDQvXzQsCDQvHzQuNGA0Lh80YHQutC1fNCw0LnQtHzQuNGA0LR8INC80Yt80YvQu9GLfNC30LPQuHzRi9C90Yt80LDQs9CwfNCz0LXQvXzQtSDQsXzRiNGD0Lt80YLQvtC7fNOp0L3Sr3zQtNGL0LN80LUg0LZ80q8g0q980Lcg0Lp80LDQudGLfNGA0LDQsXzQtdC90LR80LDQsdGLfNC20LDQu3zSryDQtnzQvtC+IHzRg9C90LB80Log0LB80LrQsNC7fNC70LXQunzQtdC60YJ80YDQvNCwfNC00LXQuXwg0q/Rh3zRgtC+0L580LzQsNGCfNGDINGNfNCx0LXRgFwiLFxuICAgIFwibWtkXCI6IFwiINC90LB80L3QsCB8INC/0YB8INC4IHzQstC+IHwg0YHQtXzRgtC+IHzQuNGC0LV80YLQtSB80YDQsNCyfNGC0LAgfNCwINGBfNC/0YDQsHzRg9Cy0LB80LTQsCB8INC00LB8INC90LV80LLQsCB80LAg0L980LAg0L180Lgg0YF80LDRgtCwfNC+INC9fNC10LrQvnzQsCDQuHwg0L/QvnzQvdC+IHzQvtGYIHzQutC+0Zh8INGB0L58INC30LB8INCy0L580YHRgtCyfNGY0LAgfNGa0LUgfNCw0ZrQtXzQsNCy0L580L3QuCB8INC40Lx80L7RgiB80LUg0L980LUg0L180LzQsCB80LDRgiB80LLQsNGafNC+0YHRgnzQsCDQtHzQviDRgXzQtSDQuHzRgdC1IHzQvtCy0LB80LjRmNCwfNC4INC/fCDRgdC7fNCwINC+fNC40LzQsHzRgdC10Lp80YHQu9C+fNC+0YLQvnzQu9C4IHzQviDQtHzQsNCy0LB80L7QsdC+fNC+INC4fCDQuNC7fNC40LvQuHwg0LHQuHzQsdC+0LR80Lgg0L180LvQvtCxfCDQvtC0fNCx0LjQtHzRgNC10LR80LXQvSB80L/RgNC4fNCy0L7RgnzQuNC00LV80LAg0LJ80YHRgtCwfCDQvtCxfNC4INC4fNC4INC0fNC/0YDQtXzQvdC+0YF80YHRgiB80LUg0YF8INC90Lh8INGc0LV80L7QstC1fNCw0LDRgnzQsNGG0Lh80ZzQtSB80YHQviB80L7QstC4fNC/0YDQvnzRmCDQuHzRgtCy0L58INGA0LB80LXRgdGCfNGI0YLQvnwg0LTQtXzRgiDQuHzQsNC60LJ8INC60L580YDQsNC3fNCz0L7QsnzQtdCz0L580L3QtdCzfNCw0L3QuHzQtdC00L180LDQutC+fNGG0LjRmHzQsdGA0LB80L7QtCB80LAg0Ld80LUg0LF80Lgg0L580LAg0LF80L4g0L980LLQsNGCfCDQtSB8INC00YB80LXRgtC+fNCy0LDQsHzQutCw0Lp80LTQuCB80YIg0YF8INC60LB8INGH0L580LXQvdC4fNCw0LvQvXzQvtC00L180LXQvdC+fCDRgdC4fNGH0L7Qsnwg0YjRgnzQsCDQs3zQsCDQtXzQstC10L180L3QuNGCfCDRmNCwfNC00LUgfNC+0LTQuHzQtSDQvnzRgNCw0L180Lgg0Ld80YHQvdC+fNC90L7Rgnwg0LXQtHzRgtC40YJ80LvQvdC+fNCy0LggfNGY0LDRgnzQtNC10L180YIg0L180L3QsNGGfCDQvtC/fCDQtNC+fCDQvtGBfNC4INCyfNC+0YHQvXzQutC+0L180LTQvdCwfNC1INC0fCDRgdGCfNCy0LXQunzQviDQvnzRgNC+0LR80YHRgtC+fNGB0LjRgnzQtdC80LV80LDRgNCwfNC00L3QvnzQvtCx0YB80Zgg0L180L/RiNGCfNC10LTQuHzQvtC/0Yh80LfQsCB80L3QuNC1fNCw0YDQvnzQvdC+0LJ80LAg0Lp80LLQvdC4fNC00YDRg3wg0L7QsnzRgtCy0LV80LbQuNCyfNGI0YLQtXzQtCDQvXzQuNC1IHwg0LzQtXzQtdC0IHzQuNC+0YJ80Lgg0Lx80L4g0LJ80ZzQuCB80LTQsNGCfNGI0YLQuHzRmNGc0Lh80LHQtdC3fNCx0LXQtHzQutC4IHzQutC+0LJ80LrQviB80LAg0YB80L3QsNGAfNGH0L3QvnzQtNC90Lh8INCy0YB80LXQu9C4fNC90LDQunzQsNGI0YJ80LjRh9C9fNC60LAgfNC10LzQsHzRhtC10Lt80LfQtdC8fNC10LTRg3zRh9GD0LJ80YLQtdGBfNC00YDQtnzQvdC40Lp80YIg0L980LvRg9GHfNCw0LAgfNC00LXRmHzQvdGB0YJ80L3QtSB80LAg0Yd80YDRg9CzfNC+0LTQsHzQuNCy0L18INGG0LV80L3QuNCyfNC00LjQvXzQsNCy0L18INC30LV80L3QuNC+fNC/0L7RgHzQsCDQvHzQt9Cw0Yh80LvQsNGBfNCy0LjRgnzQtNC10Lp80LPQviB80LjQvdC1fNC10LvQvnzQvdC10YJ80LXQtyB80YLQtdC9fCDRgNC1fCDQuNC3fNC/0L7QtHzRgNCw0LF80LDQsdC+fNCx0L7RgnzQtNGD0LJ80L3Rg9CyfCDQsdC1fNC10ZrQtXzQtdC00LV80L7QvSB80ZrQtdGCfNC30L7QsnzQuNGC0YN80LLQsNC9fNC9INC4fNCw0ZPQsHzQtSDQsnzQtdGT0YN80YDQtdC8fNC00LXQu3zQviDQunzQutC+0YJ80LjQvCB8INC20Lh80LTQvtGBfNCy0YDQtXzQvNC10ZN80L7Qu9C9fNC90LDQv3wg0LPQvnzQtdC80Zh80LrRgNC4fNGD0L3QsHzQvdC10Lx80L7RmNCwfCDRgdGDfNC40YLQsHzQsNC30L580LvQuNGCfNGC0L7RgHzQuNC90YF80L7RgNCwfNC+0LPQu3zQuNC/0LB80L/QvtGCfNGB0LvRg3zQutCy0LhcIixcbiAgICBcImtoa1wiOiBcIiDRjdGAfNGN0YDRhXwg0YXSr3zQvdC40Ll80L0g0LF80Y3QvSB80YLRjdC5fNC40LnQs3zRhSDRjXzRjdC5IHwg0LHQvnzRhdKv0L18INCx0q980LnQvSB80LDQvSB80LDRhSB8INCx0LB80LjQudC9fNCx0L7Qu3zQuNC5IHwg0YXQsHzQsdCw0Ll80YPRg9C7fNGA0YUgfNC+0LvQvnzQuSDRhXzQudCzIHzQs9Cw0LB80Y3RhSB80LHSr9GAfNCz0q/QuXzSr9C9IHwg0LHRg3zQvtC9IHzQsNCw0YB80YDRhdGCfNKv0L3QtHzRhdGC0Y180q/RgCB80LvRjdGFfNCw0YAgfCDQt9CwfNC9INGFfNC70LDRhXzRjdGAIHwg0YXRjXzQuSDQsXzTqdC706l80L0g0Y180LvTqdOpfNGN0LsgfCDSr9C9fNCw0LAgfCDRg9C7fNGL0L0gfNGF0LjQuXzSr9C5IHwg0L7RgHwg0YLRg3zRg9C70YF80YPQu9CwfNKv0LvRjXwg0YfTqXzRh9Op0Lt80L0g0YJ80q/Sr9C7fCDRhdGDfNGB0Y3QvXwg0L3QuHzQvdC00Y180LvQvtC9fNCz0Y3RjXzRgCDRhXzTqdOp0YB80YHQsNC9fCDQvdGNfNC90YsgfCDRkdGBfNC90YwgfNGN0LQgfCDQs9GNfCDQvdGMfCDRhyB8INGC06l8INGC0Y180LvQsNCzfNC+0YDQvnzQtNGN0YF80LvRgSB80LMg0YV80L7RhSB80q/QvdC4fNGN0Y3RgHzRhdCw0Lx80YUg0ZF8INGI0LB80LQg0YV80YAg0Y180LvQs9C+fNC70LQgfCDQtNGNfNC9INCwfNCx0YPRjnzRg9GO0YN80LPRg9GDfNGC06nRgHzQsNC5IHzRjtGDIHzRgtCw0Ll80Y3RjSB80LYg0LF80Y3QsyB80LvQuNC5fNGF0LDQvXzRi9CzIHwg0Y3QtHwg0YLQvnzRhSDQsXzQtNGB0Y180Lkg0Y180YDQs9CwfCDQsNC7fNGF0LDRgHzQsNGA0LN80LDQtCB80LvQs9CwfNGA0Y3Qs3wg0LfQvnzQsNC50LN80LDQs9CwfCDRgtKvfNC7INGFfNCw0LsgfCDRhdOpfNOp06nRgnwg0YHQsHzQvSDQvXzQudCz0Y180LTRjdC7fNC90LQgfNCz0LjQuXzQvSDQt3zQvtC7IHzQsNCy0LB80LvQu9CwfCDTqdOpfNGA0L7Qu3zTqdGC0Y180LPRjdGAfNCzINCxfNC7INCxfNCx0YPRgXzQvdGN0LN80L0g0LR80LDQsyB80LDQsNC7fNC9INKvfNCw0LvQtHzRgNC70LB8INKv0Ld80LPRjdC8fNC5INCwfNC9INGDfCDQvtC7fNGF0YPRg3zRhSDRh3zRjdGA0Y180LzQs9CwfNC+0LvQs3zRjdGBIHzRhdKv0q980YLQvtC5fCDQsNGAfNKv0q8gfNC70LDQu3wg0Y3QvXwg0LzTqXzQudGFIHzQuNC9IHzTqdGA06l80YUg0YJ80LvRg9GDfNGA0LjQuXzRgdC+0L18INCz0LB80YXRjdC9fNCw0LnRhXzRjdC90Lh8INCw0Lx80LPQu9CwfNOp0YAgfNCw0YHQsHzQsNC90LB80LDQvNCzfCDQsdC4fNCw0YDQtHwg0Y/Qu3zQudCz0Lx80L7QuSB80LvRi9C9fNKv0YDRjXzRjdCz0YJ8INCw0LJ80Y3QtNGNfNC+0L4gfNC80LjQuXzRhSDQvXzQsNCw0L180q/QudC7fNCw0YDQu3zQvdGF0LB80YLQs9GNfNC00Y3RjXzRgSDQvnzRgNGF0Lh80LvQvtCyfNC0INC9fNGC0Y3Qs3zTqdCzIHzTqdC9IHzRhdGN0YB80LvRjdC9fNOp06nQs3zSr9Kv0L180LLRgdGAfNCz0LAgfNGAINGCfCDRhdC4fNGF0q/RgHzRgNC+0L180Ycg0LF8INGF0L580LPTqdOpfCDQvNGNfNCx0LjQtXzQvSDQs3zRg9GA0LB80LHSr9GFfNC+0YDQuHzQsNC70Lh8INCw0LZ8INKv0Ll8INGP0LJ806nRhSB80YXRjdGNfNCzINC9fNCw0YLQsHwg0YLQsHzQs9GIIHzQsyDSr3zRjdCz0Yh80LLQsNGFfNC70L7RhXzRjdCz0LR80LTQu9GNfNGFINKvfNCz0L7RhXzSr9GFIHzRjdC90Y180LvQtiB80L7Qu9GGfCDRiNKvfNC7INGCfCDQtNCwfNC00LDQu3zRjdC2IHzQtCDQsXzQu9Cw0L180Lkg0YJ80LDQudC7fNC7INC9fNGFINCwfNCw0LPQu3zRgtC+0L58INGB0L5806nRgNC4fNC50LPRg3zQs9C80Lh80LTQuNC7fNGN0Y3QvXzQtNCw0YB80L0g0Yh80YjSr9KvfNC+0LLRgXwg0LDQtHzQsCDRhXzRgCDRh3zQsNC00Lh80LDQsNCzfNC70LDQsHzQsNC50LR80LDQvNGMfNCz0YLRjXzQvSDRgXzQtCDRgnzQuNC50YJ80LvRjdC7fNGFINGIfNC9INGHfNGD0L3RhVwiXG4gIH0sXG4gIFwiQXJhYmljXCI6IHtcbiAgICBcImFyYlwiOiBcIiDYp9mEfNmK2KkgfCDZgdmKfNin2YTYrXzZgdmKIHwg2YjYp3zZiNin2YR8INij2Yh82Kkg2Kd82KPZiCB82KfZhNmFfNin2YTYqnzZhNit2YJ82K3ZgiB82YTZiSB82YPZhCB82KfZhiB82Kkg2Yh82KfZhNijfCDZhNmDfNmE2YPZhHzZhiDYp3zZh9inIHzZgiDZgXzYp9iqIHzZhdipIHzZiNmGIHzYo9mGIHzZhdinIHzYp9ihIHzYqtmHIHzZiCDYp3zYp9mE2Ll82Yog2Kd82LTYrti1fNmKINijfCDYo9mGfNin2YTYpXzZhSDYp3zYrdix2Yp8INi52YR82Kkg2YR82YXZhiB82KfZhNinfNit2YLZiHzYudmE2Yl82YLZiNmCfNiqINinfNij2YogfNix2K8gfCDYtNiufCDZhNmEfCDYo9mKfNmCINinfNmE2KcgfNmB2LHYr3zYsdmK2Kl8INmI2YR8INmF2YZ82K8g2Kd8INmD2Kd8INil2YR82K7YtSB82YjZgiB82Kcg2Kd82Kkg2KN82Kcg2Yp82YQg2YF82Ycg2Kd82YbYs9infNis2KrZhXzZhiDZinzYp9mF2Kl82YPYp9mGfNiv2KkgfCDYrdmCfNin2YUgfNin2YTZgnzYqSDZhXwg2YHYsXzYp9mK2Kl82LPYp9mGfNmEINi0fNmK2YYgfNmGINiqfNil2YbYs3zYpyDZhHwg2YTYp3zYsNinIHzZh9iw2Kd82YYg2KN82YTYqSB82Yog2K18INiv2Yh82Ycg2YR82YTZgyB82KrYsdinfNmE2KrYuXzYp9mLIHzZhNmHIHzYpdmE2Yl8INi52YZ82Ykg2Kd82Ycg2Yh82Lkg2Kd82YXYp9i5fNivINijfNin2LPZinwg2K3YsXzYqSDYuXzZhdi5IHzYp9mE2K982YbZiNmGfCDYqNinfNmE2K3YsXzZhNi52Kd82YYg2Yh82Iwg2Yh82YrYp9iqfNmKINiqfNin2YTYrHwg2YfYsHzZitixIHzYqNin2YR82K/ZiNmEfNmE2KXZhnzYudmK2Kl82KfZhNmBfNi1INinfCDZiNmKfNin2YTZiHzZhNij2LN8INil2YZ82KPYs9infNiz2KfYs3zZhdin2Yp82K3ZhdinfNix2KfZhXzYs9mK2Kl82KfZhtmIfNmF2YQgfNmKINmIfNi52KfZhXzYpyDZiHzYqtmF2Kd8INmF2Kp82Kkg2Kp82LnZhNmKfNi5INiofNmDINinfCDZhNmHfNipINmBfNmC2KfZhnzZiSDYo3zZiNmEIHzZh9mFIHzYp9mE2Kh82Kkg2Kh82LPYp9mIfNmE2YLYp3zYp9mE2LF82YTYrNmFfNinINmDfNiq2YXYqnzZhNmK2Yd82YTYqtmFfNmE2YXYqnzYp9mG2Kp8INmC2K982KfYryB82Ycg2KN8INmK2Kx82LHZitinfNmCINmIfNmEINinfNinINiofNin2YQgfNmK2YcgfNin2LnZinzZhNiv2Yh82YQg2Yh82YTYpdi5fNmE2YXZinzZhNmF2Kx82YTYo9mFfNiq2LkgfNiv2YUgfNiq2LPYp3zYudmF2YR82KfYqtmHfNmE2KfYr3zYsdipIHzYp9ipIHzYutmK2LF82YLYr9mFfNmI2LIgfNis2YjYsnzZitis2Yh82LnYp9mEfNmE2KfZhnzZhdiq2Ll82YXYp9mGfNmB2YrZh3zYp9is2Kp82YUg2Yh82YrYryB82KrYudmEfNmGINmEfNixINinfCDZiti5fCDZg9mEfNmF2YUgfNmF2KzYqnzYqtmF2Ll82K/ZiNmGfCDZhdi5fNiq2YXZinzYsNmE2YN82YPYsdinfNmK2YfYp3wg2YXYs3zZhdmK2Ll82KXYudmEfNi52YTYp3wg2KrZhXwg2LnYp3zZhdmE2Kd82KfYudinfNmE2KfYrHzZhtmKIHzZhNmK2YV82YXYqtizfNmK2YrYsnzZitmFIHzYp9i52Kp82KfZhNi0fCDYqti5fNmF2YrZinzYudmGIHzYqtmG2Kd8INio2K182YTZhdinfNmKINmKfNmK2LIgfNmI2K8gfNij2YXZhXzZhNin2Kp82KPYs9ixfNi02KrYsXzYqtmKIHwg2KzZhXzZhyDYuXzYsSDZiHzZiiDYpXzYqtit2K982K3Yr9ipfCDYo9izfNi52KkgfNmKINmFfNip2IwgfNmF2LnZinzZhiDZhXzZhNmF2LN82YUg2Kh82KfZgiB82KzZhdmKfNmE2YogfNmF2YrYqXzYp9mE2LZ82KfZhNizfNmE2LbZhXzYttmF2Kd82YTZgdixfCDZiNizfNmE2K3ZhXzYp9mF2YR82YIg2YV82LHYpyB82Kcg2K182YbYqiB8INiq2YZ82YrYqtmHfCDYo9mFfNil2YTZinzZiNin2Kx82K8g2Yh82YTYqtmKfCDZhdixfNmF2LHYp3zZhdiq2K18INiw2YR8INmI2KN8INiq2K182Kcg2YF8INio2Yd8INmI2YV8INio2YV82YjZitipfNmI2YTZinzZhNiy2YhcIixcbiAgICBcInVyZFwiOiBcItmI2LEgfCDYp9mIfNin2YjYsXwg2qnbjHzaqduSIHwg2qnbknzbjNq6IHwg2qnYp3zaqduMIHwg2K3ZgnzbkiDaqXzYp9uM2ZR82qnYpyB824zZlNuSfCDaqdmIfNuM2KcgfNmG25IgfNiz25IgfCDYp9izfNmU25IgfNmF24zaunzaqdmIIHwg24Hbknwg2YXbjHzbkiDYp3wg2KfZhnzZiNq6IHwg2qnYsXwg24HZiHzYp9izIHzbjCDYp3zYsSDYp3zYtNiu2LV8INi02K582K3ZgiB8INiz25J8INis2Kd82K7YtSB824HYsSB82KfZhSB825Ig2YV82rog2ql824HbjNq6fCDbjNinfNiz24wgfNin2K/bjHzYotiy2Kd8INii2LJ82LLYp9ivfNi1INqpfNuBINinfNuB25IgfNis2KfbjHzYpyDYrXzYsSDYtHzYqiDaqXzaqduBIHzZhSDaqXwg2b7YsXzbjCDaqXzYp9mGIHzZvtixIHzblNuB2LF82K/bjCB824zZlNuMfNizINqpfNinINisfNixINmFfNuB25LblHzZgiDbgXzauiDYp3zbjCDYrXzZiCDYp3zYp9ixIHzZhiDaqXzZgtmI2YJ82qnYs9uMfNit2YLZiHzYsduMIHzZiNmCIHzbkiDar3wg24HbjHzbjCDYrHwg2YXYuXzYs9in2YZ8INmG24F8INmF2YR8INit2Kd82ZTbjCB8INis2Yh82YbbjCB82qnYsdmGfCDZhNuMfNiq24wgfNuMINiqfNmG2LPYp3zZhCDaqXwg2qnbgXzYrNmIIHzYp9mG2LN82KfZvtmGfNuSINiofNmG24EgfCDYp9m+fNuM2KogfNinINinfNuBINqpfCDaqdizfNixINqpfNix25IgfNuSINuBfCDYp9uMfNmF24wgfNmEINuBfNuUINinfNuSINmEfNuMINi0fNix2YbbknzZiNuBIHzYrdin2LV824wg2YV82YXYudinfNin2LXZhHzYtdmEIHzbjNq625R82YjbjNmUfNmG24HbjHzZhdmE2ql82KfbjNizfNin2YbbgXzYp9iqIHzbjCDYqHzYryDaqXzbjCDbgXwg2KrYuXzaqduM2Kd82YIg2ql82LEg24F82Kcg2YV82K/bgSB8INmF2YZ8INio2YZ8INmC2Yh825Ig2Kx824zbgSB82rog2YV82KfYtNixfNmF2YQgfCDYr9mIfNi52KfYtHzZgtmI2YV82LEg2Kh82KfZhtuMfNmI2KfZhXzZgtmI2Kd82KfZgtmIfNmE24zZlHzYr9in2LF8INmI24F8INmIIHwg2LnYp3zbjCDYs3zYqNixIHzYudmE2Kd82KfYryB824Eg2YV82Ygg2Kp82LEg2YZ8INis2LN825LblNuBfNuS2IwgfNin2YbZiHwg2K/bjHzar9uMIHzZhNuM2YV824zZiNq6fCDZgtinfCDbjNuBfNiv2YjYs3zbktuUIHzYpyDbgXzYqti52YR824zZhSB82LEg2b582KzYsyB82LHbjNmCfNuSINitfCDYp9mCfNmG24zYp3zZhNqpIHwg2q/bjHzbjNmGIHzbjNin2K98INmF2LN82YTYp9mCfNiMINinfNuMINmGfNm+2YbbknzZiNix24x82YUg2Kd8INio2Kd82LnZhNuMfNuM2LEgfNuM2IwgfNin2YbbknzZiNmGIHzZhiDYp3zYsSDYuXwg2KjYsXzbjCDYonzYsSDYrXwg2LHaqXzbkiDZvnzaqdixIHzar9in25R8INm+24x82LPYqCB8INqv2Kd82YbYpyB8INm+2Yh824zYs9uSfNix2KfbjHwg2YXYsXzYp9ix24x82YLYp9mGfNmG2YjZhnwg2YXZhXzZhtiv2q98INin2Ll82K/ar9uMfNuBINmIfCDbgdixfNixINizfCDahtinfNiu2YTYp3zYpyDZvnzZgiDYrXwg2KjavnzYsyDZhXwg2LTYp3zbgdmI2q9825Ig2K582YjYs9ixfNix2KrbjHzZiNmF24x8INio24x82LHaqdq+fCDZhdiqfNqp2YjbjHzYsSDYonzZvtmI2LF82KfZgSB8INmF2K1825Ig2LN824HZiNq6fNmG2qnbgXzZiNmG2ql82Kog2Kd8INi32LF825Ig2Ll824zZlNivfNivINinfNin2YQgfNq625QgfNmFINmFfNin2rogfCDZhdmCfNi624zYsXzZvtmG24x8INin2YV82rrYjCB82YXZhiB824HZiCB82LHbjNi5fNmIINqpfNiw2LHbjHwg2LDYsXzYudin2YV82Iwg2YV82K/Yp9mGfNin2K/Yp3zYp9i52YR82YXYp9mFfNiq2YXYp3wg2LnZhHzYr9uM2Yh82KjavtuMfNq+24wgfNio2YbbjHzbkiDbjHzYpyDaqXzYp9mI24x82YQg2YV8INiy2YZ824zYp9izfNmE2KfZhnzYudmF2YR8INi52YV82Kog2YV8INio2oZcIixcbiAgICBcInNrclwiOiBcItiq25IgfNin2rogfCDYqtuSfNiv25IgfNiv24wgfNmI2rogfCDYr9infCDYrdmCfCDaqdmIfNuSINinfNqp2Yjaunwg2K/bknzYr9inIHwg2K/bjHzbjNin2rp8INqp24x825Ig25R824zauiB824HYsSB8INuUIHzaqduM2Kp824HbkiB8INmI2oZ8INuB25J82YjahiB8INin2YZ8INi02K582LTYrti1fNin2K/bjHzYp9mEIHwg2K3Yp3zYp9i12YR82K3ZgiB82K3Yp9i1fNuSINmFfNiu2LUgfNi12YQgfNq6INivfCDZhtinfNuM2KcgfCDYp9uMfNin2KrbknzZgiDYrXzZhCDbgXzbkiDZiHzauiDaqXwg2KfYqnzbgduM2rp82LPbjCB8INmF2YR82YbYp9mEfNiy2KfYr3zYp9iy2Kd824wg2Kp8INin2LJ82YLZiNmCfNin2LEgfNinINitfNit2YLZiHwg2KfZiHzYtSDaqXwg25TbgXzblNuB2LF82LEg2LR82K/bjNinfNuSINisfNmI2YIgfNmG2K/bknwg2qnYsXzbjNmG2K98INuM2Kd82YbbgSB8INis2Yh82qnbgduMfNim25IgfNuMINivfNiz2KfZhnzZhtiz2Kd82YjZhtivfNuMINinfNuM2KrbknzYp9mG2LN82Kcg2Kd82YXZhNqpfNuSINitfNmIINqEfNuSINqpfNq7INivfCDZiNuMfNuM2LPbjHzbkiDYqHzYpyDZiHwg24HZiHzauiDYp3zYptuMIHzZhtiv24x82KrbjCB82KLZvtq7fNmI2rsgfNixINqpfNmGINuUfCDZhtuBfNin2YbbgXzYrNmIIHwg2qnZhnwg2KLZvnwg2KzbjHzYp9mI2YZ82YjbjNizfNuMINmGfCDYqtq+fCDaqduBfNin2YYgfNix24wgfNq725IgfCDahNimfCDbgdixfNuSINmGfNiv24EgfNin2YUgfNq6INmFfNuSINuBfNiq2r7bjHzauiDZiHzblCDYp3zauiDYqnzbjCDblHzaqdmG2Yh824wg2K1824wg2ql82YbZiNq6fNix25IgfNuB2Kfaunwg2KjahnzZiNmGIHzbkiDYqnzaqdmIIHwg2YXZhnzbjCDbgXzYp9ix24x82YjYsSB82YbbgdinfNuB2qnZiHzbjNiq2Kd82YbbjCB824zYp9ivfNiqINivfNmGINivfCDZiNmGfNmI2KfZhXzbjCDZhXzZgtmI2Kd82KrYpyB82oTYptuSfNm+2rvbknwg24HaqXzZhduMIHwg2YLZiHzZgiDYqnzbkiDYr3zZhNuSIHzYp9mBIHzZhCDaqXzZhCDYqnwg2KrYuXzahiDYp3zbjNmGIHzYrtmE2Kd82KfbkiB82LnZhNinfCDYs9infNis24zYp3zYptmIIHzaqdix2rt824wg2Yh82KfZhtuMfNuB2YggfNiv2KfYsXwg2YggfNuMINisfCDYp9mCfNmGINinfNuM2KogfNin2LHbknzbkiDYs3zZhNqpIHzZgiDYr3zbgdmI2Yh8INqL2Yh82LEg2Kp8INin25J825Ig2K58INqG2Kd8INiu2YR82YTYp9mBfNmC2YbZiHzZhtmI2YZ82b7ZiNixfNq7INqpfCDZvtmIfNin24zbgXzYqNqG2KZ82obYptmIfNin2KogfNin2YTYp3zZiNmG2oR82YjYsduMfNin24zZhnwg2YjYs3wg2YTZiHzZiCDYp3zbgSDYr3wg2LHaqXzbjNioIHzYs9uM2Kh82YjYs9uMfNuM2LEgfNinINqpfNmC2YjZhXzYsduM2Kd82rog2KJ8INis2Kd82LHaqdq+fNmF2YQgfNqp2KfaunzYsdq7IHzYp9ivIHzYp9mIIHzYudiy2Kp8INmC2YZ82Kgg2K982YjYptuMfNuSINi5fCDYudiyfCDblNqpfCDZhdi5fNin2YLZiHzYp9uM2rp82YUg2YV82LLYqiB82rvbjCB824zZiNq7fNixINuBfCDYs9mFfNq6INizfNmE2YjaqXwg2Kzavnwg2LPbjHzYrNq+24x82Kog2Kp82YQg2Kd82KfZiNq7fNqp2YjYpnzauiDYrHzbgduMIHzYrdiv24F82KrYudmEfNuSINiwfNmI25IgfNiq2K3Yr3zZhdiq2K182YTYpyB82Kcg2Kp82qnYp9ixfCDYp9i5fNuSINixfCDZhdiqfNixINinfNinINmFfNq+24zZhnzavtuM2Yh824zbgdmIfCDZhdi3fCDYs9qxfNuMINizfNqE25IgfNmG2oTbknzYs9qx2K982YTbjNmFfNi52YTbjHzbkiDZgnwg2LDYsXzZhSDYqnwg2qnavnzZhiDaqXwg2qnZhXzbgSDYp3zYs9in2LF82KfYptivfNin2KbbjHzYryDYp3wg24HZhnzbgdmGIHzbjNiMIHzZiCDaqXzauiDYqHzavtuM2Kd82LDYsduMfNq6INm+fNmE24wgXCIsXG4gICAgXCJ1aWdcIjogXCIg2KbYp3wg2r7blXzZidmG2Yl825Ug2KZ82YbZidqtfNmJ2YTZiXwg24vblXzZidqtIHzbi9uVIHwg2KbZiXwg2KjZiHzavtmI2YJ82YjZgtuHfCDavtmIfNmC24fZgnzZhtmJIHzYqNmI2YR8INim25V82YTZidmDfNmC2YnZhHzZidmGIHzZhNmJ2LR82LTZgtinfNmC2KcgfNuV2YYgfCDZgtmJfNmGINiofNq+25XZhXzZiSDYpnzYptin2K982YnYtNmJfNiv25XZhXzYp9iv25V82YPZiSB82YTZidmCfNi62KfZhnzZidmKIHzZidi62Kd82q/blSB8INio2Yl82K/ZidmGfNmJ2K/ZiXzbldiqIHzZg9mJ2YZ82YnZg9mJfNmG2K/Yp3zbh9mCIHwg2KrblXzZhtmE2Yl82KrZidmGfNuV2YUgfNmE25XYqnzZgtin2YZ82Ynar9uVfNmJ2KrZiXzZidi0IHzavtuV2LF82KbbldixfCDYqNinfNmI2YTbh3zYr9uG2YR82LrYpyB82KfZhtivfCDYr9uGfNin2YIgfNmF25UgfNmE24fYtHzYr9uVIHzZhNuH2YJ8INim24Z82KfZhiB8INmK2Kd825XYsdmCfNuG2YTblXzYsdmD2Yl8INmC2Kd825XYsdmDfNuV2YXZhXzYpyDYpnzZhdmF25V824fZgtmJfNmJ2YIgfCDYqNuVfNix2YLYp3zYr9in2YJ82KfYsdinfNmJ2YTblXzYsdmJ2YV82YnYtNmCfNmJINuLfNmE2LrYp3zZhduV2YZ82KfZg9mJfNuV2LEgfNinINq+fNiv24cgfNmK2KfZg3zbh9mC2YR82KbYp9ixfNmCINimfNmJ2YbZhHzZhNin2LF8INim25B82Ykg2Kh82YTZidmGfNqtINimfNim24bYsnzZgiDavnzYtNmJIHzZidmF25V82YLZhNuHfNmGINimfNmE25XYsXzbldiq2YR82YbZidi0fNmJ2YMgfNuV2r7YsXwg2YXblXzavtix2Yl82YTbldmGfNmJ2YTYp3zYp9ixIHzYqNuV2r58INim24d825Ug2YJ82KbZidmKfNin2LPZiXwg2YXbh3zYsdmE2Yl8INim2Yh82KjZidixfNiMINimfNio2YnZhHzYtCDavnzYqNin2LF82YnYjCB824cg2r582KfZitivfNuH2LTZgnzYtNmD25V825Ug2Kh82YrbldiqfNinINiofNix2YbZiXzZg9uVIHzZidiz2Yl8INmD25B825DZhNmJfNin2YTZiXzbldmDIHzZhSDYpnzZhdin2Yp82YjZhNmFfNiq2YbZiXzZidiv2Kd82KfYsdmJfNmK2K/bh3zZhNmJ2K98INmC2Yh825XYtNmDfNiq2YTblXzZgyDavnzYp9mG2YR825XZhdivfNmF2KfYpnzYptin2YR82LEg2KZ82YXYr9uVfNmJ2YrblXzYtCDYpnzblSDavnzZhNmF2Kd82KfYptmJfNim2Ynar3zYr9inIHzZiiDYpnzbh9i02Yl82LHYp9uLfNin2IwgfNiz2YnZinwg2Krbh3zZg9mJ2YR825Ug2Kp82YnZgtmJfNmC2YkgfNuG2LLZiXzbkNiq2Yl82YnYsdmJfNmJ2LEgfNmJ2b4gfNmJINmDfNmG2IwgfNixINiofNmE25XYtHzYp9iz2Kd82Kfbi9infNmJINq+fNi02YTZiXzYs9in2LN82KfYr9mJfNiq2YkgfNin2LTZgnzbldiq2Kp82YLZidi6fNmJ2YXYp3zYp9mG2Yl8INiu2Yl824fYsduHfCDYrtuVfNmGINmCfNmF2YbZiXwg2K7Yp3zahtuVIHzZiSDZgnwg2KzblXzYsdmC2Yl82KrZidivfCDavtuGfNio2KfYtHzYp9ix2YR82KbZidi0fNiq24fYsXwg2KzZiXzZhduH2LR82Ybbh9mGfNi024cgfNin2Ybbh3zbh9i0IHzYsduV2YN825DYsduVfNmD25DYsXwg2LPYp3zYp9mE2Lp824fZhtmJfNim25DZhHzZidi02YR82Krbldi0fNiu25XZhHzZhduV2Kp82KfYtCB82K/Zidi6fNmD25XZhnzbldmE2YJ82KrZidi0fNmF2YnZhnzYp9mK2Yl82LPZidiyfNmCINuLfNmG2YnZinzYrNmJ2YZ82LHZidi0fNm+INmCfCDZg9mJfNuQ2LHZiXzYptin2LN825XZhNmJfCDZhdinfNiq2KrZiXzZidix2YR82YjZhNmJfCDYr9uVfNin2LHZgnzYs9mJ2Kp825Ug2YV8INmC25V82LTZidmEfCDYqtmJfNuV2LHZhnzZg9mJ2LR82YYg2r5825XZhNqvfNuV2YXZhnzZgyDYpnwg2KrZiHzZiSDZinzZgtiq2Yl82KbYp9i0fNiq2YnZhXzYqtuV24t82YbYp9mKfNmJ2K/blXzZidmG2Kd8INio24d82YnZitinfNiy2YnZhnzYp9mF2Yl82YLYp9ixfNi02YPZiXzZidiyIHwg2KbbiHzblduL25V824bYsdmFfNuVINiufNi02YnYtHzZidmK2Yl82KzYqtmJfNmJ2KzYqnzYptmJ2Kx82YbYp9mFfNiq25XYsVwiLFxuICAgIFwicGVzXCI6IFwiINmIIHwg2K3Zgnwg2KjYp3zaqdmHIHzZhtivIHwg2qnZh3wg2K/YsXzYr9ixIHzYsdivIHwg2K/Yp3zYr9in2LF82KfYsiB8INin2LJ82YfYsSB8INmH2LF824zYqiB82LEg2ql82K3ZgiB82K8g2Yd82KfbjCB82K8g2Yh82KfZhiB8INix2Kd824zZhiB82YjYryB824zYpyB8INuM2Kd82LHYpyB82KfYsdivfNuMINmIfNqp2LMgfCDaqdizfCDYqNixfCDYotiyfNio2KfYtHzZhyDYqHzYotiy2Kd82K8g2ql8INiu2Yh82Ycg2Kd82K8g2Kh82LLYp9ivfCDYp9izfNin2LEgfCDYotmGfNmCINivfNi02K8gfNit2YLZiHzZgtmI2YJ824wg2Kh82YjZgiB82K/ZhyB82Ycg2K9824zYryB824wg2ql82Ygg2Kd82YjYsSB82LEg2YV82LHYp9uMfNin2LTYr3zYrtmI2K982KfYr9uMfNiq2YXYp3zYsduMIHwg2KfYrHzYp9mFIHzYr9uMIHzYp9uM2K982LMg2K182KfYs9iqfNixINinfNmIINmFfCDYp9mGfNivINinfNmG2YcgfCDYqNuMfNio2KcgfCDZh9mFfCDZhtmFfNmF2KfbjHwg2KrYp3zYr9iMIHzbjCDYp3zYp9mG2Yd82KfYqiB82YjZhiB82KfbjNiqfNinINiofNiz2KogfCDaqdmGfNio2LHYp3zYp9mG2Yh8INio2LR8INmF2Yh82KfbjNmGfCDZhdixfNin2LPYp3wg2YXZhHzZiNin2YZ82LEg2Kh82KzYqtmFfCDYtNmIfCDYp9i5fNmGINinfNmI2LHYr3wg2YXbjHwg2KfbjHzYotmGIHwg2KjZh3zZiCDYonzZhdmE2YR82Kcg2YV82YXYp9i5fNmG24wgfNiqINinfNiMINinfNiqINmIfNim24wgfNi524wgfNin2KbbjHzYp9is2Kp82Ygg2Kh82YfYp9uMfNmGINmFfNuMINuMfNio2LTYsXzaqdmG2K982LTZiNivfCDZhdmGfCDYstmGfNmGINmIfNuM2IwgfNio2KfbjHzbjCDYsXwg2YXYs3zZhdmEIHzZhdmI2LF82LIg2KJ82KrZiNinfNiv2KfZhnzYp9ix24x82LnZhNinfNqv2LHYr3zbjNqv2LF82qnYp9ixfCDar9ixfCDYqNivfNmGINiofNiqINiofNiqINmFfNuMINmFfCDZhdmCfNivINiifNi02YjYsXzbjNmHIHzYp9i524x8INi52YV82LEg2K582YYg2K18INqp2LR82LHZhtivfNmF24zZhnwg2KfYrXzZhiDYqnzbjCDYr3wg2YXYqnzZhyDZhXzYryDYtHwg2K3ZhXzZiCDYr3zYr9uM2q982YTYp9mFfNqp2LTZiHzZh9mUIHzZhyDZiHzYp9mG24x82YTbjCB82Kog2ql8INmF2Kx82YIg2YV82YXbjNiqfCDaqdinfCDYtNivfNin2YcgfNmG2YjZhnwg2KLZhXzYp9ivIHzYp9iv2Kd82KfYudmEfNivINmFfNmCINmIfNinINqpfNmF24wgfNuMINitfNmE2YQgfNmG2KzYp3wg2YXYrXzYs9in2LN824zYr9mHfCDZgtinfNio2LnbjHzZgtin2YZ82LEg2LR82YXZgtinfNinINivfNmH2K8gfNmI24wgfNmG2YjYp3zar9uMIHzYs9in2Yh82LEg2Kp82KjYsSB82KfZiyB82YbZhduMfNin2LPbjHzYp9iv2Yd82KfZiCB8INin2Yh8INiv24x8INmH24x82YfbjNqGfNmH4oCM2Kd84oCM2YfYp3zbjNixIHzYrtmI2Kd82K8g2Kp82YfZhdmHfNinINmHfNiq24wgfNit2YXYp3zYr9qv24x82KjbjNmGfNi5INinfNiz2KfZhnzYsSDZiHzYtNiv2Yd82YjZhduMfCDYudmCfCDYqNi5fNiyINitfNi02LEgfNmF2YbYr3wg2LTYsXzZlNmF24x82KfZlNmFfNiq2KfZlHzYp9mG2Kp82KfZhtivfNin2YjbjHzZhdiz2Kd82LHYr9ivfNio2YfYsXwg2KjZhXzYp9ix2YZ824zYqtmIfNmEINmFfNix2KfZhnzZiCDZh3zYsSDYr3zZhSDZhXzYsdin2LF82LnZgtuMfNiz24wgfNmIINiqfNiy2LQgfCDYqNmIfNinINinfNuMINmGfNmF2YjZhXzYrNinIHzYudmF2Yh82LHZgdiqfNi524zYqnwg2YHYsXzZhtiv2q982YjYp9mHfNiy2YbYr3zZhSDZiHzZhtmF2Kd82Ycg2K182Kcg2LF82K/bjNmHfNis2KfZhXzZhdix2K982KrYjCB82K8g2LF82YXYp9mFfCDYqtmFfNmF2YTbjHzZhtmG2K982KfZhNmFfNi32YjYsXzbjCDYqnzYqtiu2Kd82Kcg2Kp82KfZhduMfNin2YXZhHzYr9ivIHwg2LTYrnzYtNiu2LVcIlxuICB9LFxuICBcIkRldmFuYWdhcmlcIjoge1xuICAgIFwiaGluXCI6IFwi4KSV4KWHIHzgpKrgpY3gpLB84KSU4KSwIHwg4KSU4KSwfCDgpJXgpYd84KWL4KSCIHwg4KSV4KS+fOCkleCkvuCksHwg4KSq4KWNfOCkleCkviB8IOCkleCli3zgpK/gpL4gfOCkgiDgpJV84KSk4KS/IHzgpL7gpLAgfOCkleCliyB8IOCkueCliHzgpL/gpJXgpL584KSo4KWHIHzgpLngpYggfOCljeCksOCkpHzgpKfgpL/gpJV8IOCkheCkp3zgpIXgpKfgpL984KSV4KWAIHzgpL4g4KSVfCDgpJXgpL98IOCkleClgHwg4KS44KSufOClh+CkgiB84KS14KWN4KSvfOCljeCkpOCkv3zgpJXgpY3gpKR84KS44KWHIHwg4KS14KWNfOCkviDgpIV84KWN4KSv4KSVfOCkruClh+CkgnzgpK7gpL7gpKh84KS/IOCklXwg4KS44KWNfCDgpK7gpYd84KS44KWAIHzgpKjgpY3gpKR8IOCkueCli3zgpYcg4KSVfOCkpOCkviB84KSv4KSV4KWNfOCkleCljeCkt3zgpYgg4KWkfOCkv+CklSB84KSk4KWN4KSvfCDgpJXgpLB84KWN4KSvIHwg4KSv4KS+fOCkreClgCB8IOCkteCkv3zgpLDgpKTgpY184KSwIOCkuHzgpYAg4KS4fCDgpJzgpL584KS44KWN4KS1fOCksOCli+CkgnzgpY3gpK/gpYd84KWH4KSVIHzgpK/gpYfgpJV84KSk4KWN4KSwfOCkv+Ckr+CkvnzgpL4g4KScfOCklSDgpLV84KSwIOCkuXzgpL/gpKQgfOCljeCksOCkvnzgpJXgpL/gpLh8IOCkheCkqHzgpL4g4KS4fOCkv+CkuOClgHzgpL4g4KS5fOCkqOCkviB8IOCkuOClh3wg4KSq4KSwfOCksCDgpJV8IOCkuOCkvnzgpKbgpYfgpLZ84KSX4KS+IHwg4KWkIHwg4KSF4KSqfOCljeCkpOCljXzgpYcg4KS4fOCkuOCkruCkvnzgpL7gpKggfOClgCDgpJV84KWN4KSkIHzgpLXgpL7gpLB8IOClpOCkqnzgpL4g4KSqfCDgpLDgpL584KS34KS+IHzgpKgg4KSVfOClpOCkquCljXzgpLfgpY3gpJ984KSl4KS+IHzgpIXgpKjgpY18IOCkruCkvnzgpY3gpLfgpL584KWN4KS14KS+fOCkvuCksOCli3zgpKTgpKjgpY184KS14KSk4KSofOCkn+CljeCksHzgpY3gpLXgpKR84KSq4KWN4KSkfOCkvuCkquCljXzgpY3gpJ/gpY184KSw4KS+4KS3fOCkvuCkt+CljXwg4KSH4KS4fOClhyDgpIV8IOCkieCkuHwg4KS44KSCfOCksOCkvuCkqnzgpJXgpL8gfOCkpCDgpLl84KS54KWLIHzgpIIg4KSUfOCkvuCksOCljXzgpL4g4KWkfOCkleCkv+Ckr3zgpYcg4KSqfCDgpKbgpYd8IOCkreClgHzgpJXgpLDgpKh84KSw4KWAIHzgpJzgpL7gpI984KWAIOCkqnwg4KSoIHzgpLAg4KSFfOCklSDgpLh84KSF4KSq4KSofOClhyDgpLV84KS+4KST4KSCfOCljeCkpOCksHzgpJPgpIIgfCDgpKjgpL984KS44KSt4KWAfOCksOCkviB8IOCkpOCkpXzgpKTgpKXgpL584KS/4KS14KS+fOCkr+Cli+CkgnzgpKrgpLAgfCDgpJDgpLh84KSw4KSk4KS+fOCkvuCksOCkvnzgpY3gpLDgpYB84KS44KSu4KWNfCDgpKbgpY184KWA4KSvIHzgpL/gpI8gfOCktSDgpJV84KS44KSV4KWHfOCkpuCljeCktXzgpLngpYvgpJd8IOCkuOCkrXzgpIIg4KSufOCkruCkvuCknHzgpLDgpKjgpYd84KS/4KSV4KWNfOCljeCkr+CkvnzgpL4g4KS1fOCksCDgpKp8IOCknOCkv3zgpYsg4KS4fOCksCDgpIl84KSw4KSV4KWNfOClhyDgpK584KSq4KWC4KSwfCDgpLLgpL984KS+4KSP4KSXfCDgpK3gpL584KSH4KS4IHzgpKQg4KSVfOCkvuCktSB84KS44KWN4KSlfOCkquCkqOClh3zgpL4g4KSUfOCkpuCljeCkp3zgpLbgpY3gpK984KSw4KWN4KS1fCDgpJjgpYt84KSY4KWL4KS3fOCksOClguCkqnzgpK3gpL7gpLV84KS+4KSo4KWHfOCkleClg+CkpHzgpYsg4KSqfOClhyDgpLJ84KSy4KS/4KSPfOCktuCkv+CklXzgpYLgpLDgpY18IOCkieCkqHzgpaQg4KSHfOCkgiDgpLh84KSvIOCklXzgpY3gpKcgfOCkpuClgCB84KWAIOCksHzgpLDgpY3gpK984KSj4KS+IHzgpI/gpJfgpL584KSo4KWN4KSvfOCksOClgOCkr3zgpYfgpLYgfOCksOCkpOCkv3zgpYcg4KSsfCDgpLDgpYJ84KWC4KSqIHzgpKrgpLDgpL584KWN4KSwIHzgpKTgpLDgpY18IOCkquCkvnwg4KS44KWBfOCknOCkv+CkuHzgpKTgpL/gpJV84KS44KS+4KSwfOCknOCliyB84KWH4KS24KWLfCDgpLbgpL984KS+4KSo4KS1fOClgCDgpIV84KSa4KS/4KSkfOClhyDgpJR8IOCkquClgnzgpL/gpK/gpYt84KS+IOCkiXzgpK4g4KSVfOClgCDgpK184KS24KWL4KSCfCDgpKzgpYF84KSu4KWN4KSufOCkuOCljeCkpHzgpL/gpLbgpY184KWN4KSw4KWLfOCljeCkriB84KWLIOCklXwg4KSv4KS5fOCksCDgpKZ84KSo4KS1IHzgpJrgpL7gpLB84KSm4KS/4KSvfOClhyDgpK984KSw4KWN4KSjfOCksOCkvuCkp3zgpYvgpJfgpL584KSy4KWHIHzgpKjgpYLgpKh84KS+4KSo4KWCfOCli+Ckt+Cko3zgpLfgpKPgpL584KS14KS/4KS2fCDgpJzgpKh84KS+4KSw4KWAfOCkquCksOCkv3zgpJfgpYAgfOCkteCkvuCkuXzgpLjgpL7gpK584KS+4KSo4KS+fOCksOCkleCkvnwg4KSc4KWLfOCkvuCknCB84KWAIOCknHzgpKcg4KSVfOCkrOCkqOCljXzgpKTgpL7gpJN84KSC4KSV4KS/fOClguCkguCklXzgpL7gpLggfOCkleCksCB84KSa4KWC4KSCfOClgCDgpLV84KSvIOCkuXzgpL4g4KSXfOCkryDgpLh84KSoIOCkuHzgpKQg4KSwfOCkleCli+CkiHzgpYHgpJXgpY184KWL4KSIIHwg4KWk4KSVfOCkgiDgpKh84KS54KS/4KSkfOCkqOCkv+Ckr3zgpK/gpL7gpKZ84KS+4KSm4KWAfOCljeCkruCkvnzgpY3gpKXgpL584KS+4KSu4KS+fOCkvuCkuSB84KWAIOCkrnzgpYcg4KScXCIsXG4gICAgXCJtYXJcIjogXCLgpY3gpK/gpL584KSv4KS+IHzgpKTgpY3gpK984KSv4KS+4KSafOCkmuCkviB8IOCktSB84KSj4KWN4KSvfOCkquCljeCksHzgpJXgpL7gpLB84KS+4KSa4KS+fCDgpKrgpY184KSn4KS/4KSVfOCkv+CkleCkvnwg4KSF4KSnfOCkheCkp+Ckv3zgpJrgpY3gpK984KS+4KSwIHzgpIbgpLngpYd8IOCkhuCkuXzgpL4g4KSFfOCkueClhyB8IOCkuOCljXzgpY3gpLDgpKR84KWN4KSv4KWHfOCkviDgpJV84KS44KWN4KS1fCDgpJXgpLB84KWN4KS14KS+fOCkpOCkviB84KS+4KS4IHzgpL4g4KS4fOCkviDgpLV84KSk4KWN4KSwfCDgpKTgpY184KS14KS+IHzgpL7gpILgpJp84KSv4KS+4KSCfOCkv+CklSB84KSu4KS+4KSofCDgpK/gpL584KWN4KSvIHwg4KSV4KS+fCDgpIXgpLh84KSw4KSk4KWNfOCkt+CljeCkn3zgpLDgpY3gpK984KSv4KWH4KSVfOCksuCljeCkr3zgpLAg4KSGfOCkvuCkueCkv3zgpJXgpY3gpLd8IOCkleCli3zgpL7gpK7gpL584KSV4KWL4KSjfCDgpLjgpIJ84KS+4KSa4KWNfOCkvuCkpCB84KS+IOCkqHwg4KSw4KS+fOCkguCkpOCljXzgpYLgpKggfOClh+CkleCkvnwg4KS44KS+fOCksOCkvuCkt3zgpL7gpLfgpY184KSa4KWHIHzgpY3gpJ/gpY184KSf4KWN4KSwfOCkpOCkguCkpHwg4KSu4KS+fOCkqOClhyB84KSV4KS/4KSCfCDgpJXgpL984KS14KWN4KSvfOCkteCkvuCkpHzgpYcg4KS4fOCkleCksOCko3zgpILgpLXgpL584KS/4KSC4KS1fOCkr+ClhyB84KSV4KWN4KSkfCDgpLjgpK584KS+IOCkqnzgpKjgpL4gfCDgpK7gpL984KSV4KS+4KS4fOCkvuCkpOCkgnzgpY3gpLDgpY184KSw4KWN4KS1fOCkuOCkruCkvnzgpK7gpL/gpLN8IOCknOCkvnzgpYcg4KSqfOCktSDgpLh84KSv4KS+4KS4fOCli+Cko+CkpHzgpLDgpKPgpY184KSV4KS+4KSufOClgOCkryB84KS+IOCkhnwg4KSm4KWHfOClhyDgpJV84KS+4KSC4KSofOCkueCkvyB84KSw4KS+4KSCfCDgpLXgpY184KWN4KSv4KSVfOCkviDgpK584KS/4KSz4KSjfOCkueClgCB8IOCkquCkvnzgpY3gpLfgpKN84KS+4KSw4KWNfOCkvuCkqCB84KWHIOCkhXwg4KSG4KSqfCDgpLXgpL984KSz4KSj4KWNfOCkvuCkueClgHzgpJrgpYAgfOClhyDgpLV84KWN4KSw4KS+fOCkruCkviB84KSy4KWAIHzgpILgpJrgpY184KS+4KSw4KS+fOCkviDgpKZ8IOCkhuCko3wg4KSo4KS/fOCko+ClhyB84KSm4KWN4KSnfCDgpKjgpK984KSy4KS+IHzgpL4g4KS5fOCkqOCkr+Clh3wg4KS44KSwfOCkuOCksOCljXzgpY3gpLDgpYB84KSs4KSC4KSnfOClgCDgpKp84KSG4KSq4KSyfOCksuClhyB84KWA4KSyIHzgpK7gpL7gpJx8IOCkueCli3zgpY3gpKQgfOCkpCDgpJV84KS+4KSa4KWHfOCljeCktSB84KS34KSjIHzgpILgpKjgpL584KSy4KWH4KSyfOClgCDgpIV84KSm4KWH4KS2fOCkhuCko+Ckv3zgpKPgpL8gfOCkp+CljeCkr3wg4KS24KS/fOClgCDgpLh84KWHIOCknHzgpLbgpL/gpJV84KSw4KWA4KSvfOCkvuCkqOCktXzgpKrgpL7gpLl84KS54KS/4KScfOCkv+CknOClh3zgpJzgpYcgfOCklSDgpLh84KSv4KSV4KWNfOCkqCDgpJV84KS1IOCkpHzgpL4g4KScfOCkr+CkvuCkpHzgpKrgpLLgpY184KSo4KWN4KSvfOCkteClgCB84KS44KWN4KSlfOCknOCljeCkr3wg4KSc4KWNfOClhyDgpIZ84KSw4KSV4KWNfOCkpCDgpLh84KS/4KSV4KWNfOCkguCkrOCkgnzgpLjgpILgpKx8IOCkleClh3zgpJUg4KS1fOCkleClh+CksnzgpIXgpLjgpLJ84KSvIOCkhXzgpK8g4KSVfOCkpCDgpLV84KWA4KSkIHzgpKPgpKTgpY184KSk4KWN4KS1fOCkvuCkqOClh3wg4KSJ4KSqfOCljeCkteCkpHzgpK3gpL7gpLV84KWHIOCkpHzgpJXgpLDgpKR84KSv4KS+4KS5fOCksOCkpOCkvnzgpL/gpLfgpY184KS1IOCkrnzgpJXgpL7gpIJ84KS44KS+4KSufOCksOCkpOCkv3zgpLjgpL7gpLB84KSC4KSa4KS+fOCksCDgpLV84KSVIOCkhnzgpK/gpL7gpK984KS+4KS44KS+fOCkuOCkvuCkoHzgpL7gpKDgpYB84KWN4KSk4KWAfOCkoOClgCB84KWH4KSj4KWNfOCksOCljeCkpXzgpYDgpKjgpYd84KWHIOCkr3zgpJzgpL7gpLl84KWL4KSj4KS+fOCkuOCkguCksHzgpL7gpK/gpKZ84KSa4KWN4KSbfOCkuCDgpLh84KSC4KSw4KSVfOCkpOClgOCksnzgpYAg4KS1fOCkpCDgpIZ84KWAIOCkhnzgpILgpKfgpL584KWH4KS24KS+fOCkv+CkpCB8IOCkheCktnzgpLngpYDgpLB8IOCkueCklXzgpLngpJXgpY184KSV4KWN4KSVfOCkryDgpLV84KS24KS+IHzgpLUg4KSGfOCkpOClgOCkqHzgpKMg4KSufOClguCksOCljXzgpYfgpLLgpY184KSm4KWN4KSvfOClh+CksuClh3zgpL7gpILgpKR84KS+IOCkr3zgpL4g4KSsfOClgCDgpK584KSC4KSa4KWHfOCkr+CkvuCktXzgpKbgpYfgpKN84KSV4KWD4KSkfOCkvuCksOCko3zgpYfgpKQgfOCkv+CkteCkvnzgpLXgpLjgpY184KS44KWN4KSkfOCkvuCkmuClgHzgpKjgpLXgpYB8IOCkheCksHzgpKXgpLXgpL584KSF4KSl4KS1fOCkviDgpKR8IOCkheCkpXzgpIXgpLDgpY184KSk4KWAIHzgpKrgpYLgpLB84KSH4KSk4KSwfOCksOCljeCko3zgpYAg4KSVfOCkr+CkpOCljXwg4KSH4KSkfCDgpLbgpL584KSw4KSV4KS+fOCkpOCkv+Ckt3zgpKMg4KS4fOCkpOCkv+CklXzgpY3gpLDgpJV84KWN4KSnIHzgpLDgpKPgpL58IOCkhuCksnzgpYfgpLIgfOCkvuCknOCkv3wg4KSo4KWNfOCkp+CkvuCkpHzgpLDgpYLgpKh84KS24KWN4KSwfOCkheCkuOClh3zgpLfgpY3gpKB84KWB4KSV4KWNfOClh+CktiB84KSk4KWLIHzgpJzgpL/gpJV84KWHIOCkrlwiLFxuICAgIFwibWFpXCI6IFwi4KS+4KSVIHwg4KSGIHzgpKrgpY3gpLB84KSV4KS+4KSwfOCkv+CkleCkvnzgpKfgpL/gpJV84KS+4KSwIHzgpY3gpLDgpKR84KWH4KSBIHzgpJUg4KSFfOCljeCkr+CklXzgpL/gpJUgfOCljeCkpOCkv3wg4KSF4KSnfOCkteCljeCkr3zgpIXgpKfgpL984KSVIOCkuHwg4KSq4KWNfOCkleCljeCkpHwg4KS14KWNfOCkleClh+CkgXzgpK/gpJXgpY184KSk4KS/4KSVfOCkqOCljeCkpHwg4KS44KWNfOCkueCkvyB84KSVIOCktXzgpK7gpYcgfOCkrOCkvuCklXzgpK7gpL7gpKh8IOCkuOCkrnzgpKTgpY3gpK984KSV4KWN4KS3fCDgpJvgpYh84KSb4KWI4KSVfOClh+CklSB84KS44KWN4KS1fOCkpOCljeCksHzgpLDgpKTgpY184KWN4KSv4KWHfOCkt+CljeCkn3wg4KSF4KSqfOCkr+Clh+CklXzgpLAg4KSbfOCkuOCkgSB84KS14KS+IHwg4KSP4KS5fOCliOCkleClpHzgpL/gpKQgfCDgpLXgpL98IOCknOCkvnzgpKTgpL8gfOCljeCkpOCljXzgpJ/gpY3gpLB84KS/4KSV4KWHfOCksOCkvuCkt3zgpL7gpLfgpY18IOCkueCli3zgpY3gpJ/gpY18IOCksOCkvnzgpY3gpK8gfCDgpLjgpL58IOCkheCkqHwg4KSV4KSwfOCkheCkquCkqHzgpaTgpKrgpY184KSV4KWL4KSofOCkheCkm+Ckv3zgpLXgpKTgpKh84KWN4KS14KSkfOCkpOCkqOCljXzgpJUg4KSGfCDgpIXgpJt84KSk4KS+4KSVfOCkpeCkviB8IOCkquCksHwg4KS14KS+fCDgpJXgpYt84KS+4KSw4KWNfOCkj+CkueCkv3zgpKrgpKggfOCkviDgpIZ84KSo4KS54KS/fOCkqOCliyB84KS44KSu4KS+fCDgpK7gpL584KWN4KSw4KWAfOCksOCkpOCkvnwg4KSo4KS/fCDgpJXgpL584KSm4KWH4KS2fCDgpKjgpLl84KWN4KS34KS+fOCklSDgpKp8IOCkpuClh3wg4KSV4KSPfOCksOCklSB8IOCkuOCkgnzgpYvgpKjgpYt84KS/IOCklXzgpKjgpY3gpK984KSGIOCkuHzgpJvgpL8gfOCljeCkpCB84KSyIOCknHzgpY3gpLXgpL584KS+4KSw4KSVfOCkviDgpLh84KSk4KSl4KS+fOCkvuCkqOCljXwg4KSk4KSlfOCljeCkr+CkvnzgpIYg4KSFfOCkqOCkviB84KSBIOCklXzgpL7gpKggfCDgpJzgpYd84KSc4KS+4KSPfOCkteCkvuCksHzgpKTgpL4gfOClgOCkryB84KSwIOCkhnzgpJUg4KS5fOCkleCksOCkrHzgpL/gpLXgpL584KS+4KSu4KS+fOCksOCljeCktXwg4KSG4KSTfOCljeCksOCkuHzgpKrgpLDgpL984KSkIOCklXzgpLjgpY3gpKV84KS+IOCkqnzgpL7gpKjgpLV84KSw4KWA4KSvfOCkp+CkvuCksHzgpY3gpKTgpLB84KSF4KSo4KWNfOCkmOCli+Ckt3zgpLjgpL7gpK584KSu4KS+4KScfOCkhuCkk+CksHzgpL7gpLDgpKN8IOCkj+CklXzgpJXgpI/gpLJ84KSBIOCkhXzgpJPgpLAgfOCkj+CkrOCkvnzgpLjgpY3gpKR84KSm4KWN4KSnfOCljeCksOCkvnzgpIEg4KS4fOCksOCkoyB8IOCkuOCkrXzgpYvgpLfgpKN84KSV4KWk4KSqfOCkvuCkueCkv3zgpLDgpKzgpL584KSVIOCknHzgpL4g4KSFfOCkmuCkv+CkpHzgpK/gpJUgfOCkleCksCB84KSq4KWC4KSwfOCksOCkleCljXzgpKjgpJUgfCDgpJjgpYt84KS34KS+IHzgpL/gpJXgpY184KS44KSu4KWNfOCkj+CkueCkqHwg4KSJ4KSqfOCksCDgpKp8IOCkheCktXzgpI/gpLIgfOClguCksOCljXzgpLfgpKPgpL58IOCkueClh3zgpKQg4KSFfOCktuCkv+CklXzgpKTgpYEgfOCkvuCkp+Ckv3zgpYfgpKTgpYF84KS54KWH4KSkfOCkueCkqCB84KS/4KSu4KWHfOCksCDgpIV84KS14KSVIHzgpIEg4KSPfOCknOCkvuCkuXwg4KS24KS/fOCkhiDgpKp84KSt4KS+4KS1fOClhyDgpLh84KWN4KSnIHzgpJUg4KSVfOCkvyDgpJx84KSq4KWN4KSkfOCksOClguCkqnzgpKjgpL/gpLB84KS/4KSw4KWNfCDgpLjgpJV84KSa4KWN4KSbfOCkueCli+Ckj3zgpLDgpKTgpL984KSF4KSo4KWBfOCkuOCkrSB84KS54KWLIHzgpYfgpLIgfOCkpCDgpIZ84KSa4KS+4KSwfOCkoyDgpLh84KSw4KS+IHzgpKQg4KS5fOCknOCkv+CklXzgpL7gpJzgpL984KSw4KWN4KSjfOCljeCksOCklXzgpI/gpKTgpaR84KS/IOCkhnzgpLDgpY3gpK984KS44KSt4KSVfOCliOCklSB84KSVIOCkiXwg4KSc4KSofOCkpCDgpLh84KS+4KSq4KWNfOCkqCDgpKp84KS24KWN4KSvfOCkqCDgpIV84KSV4KWD4KSkfOCkueClgSB84KSw4KS44KSCfOCksOClgCB84KSw4KS+4KSqfOCkviDgpLV84KSc4KWHIHzgpJUg4KSsfOCkvyDgpJh8IOCkreCkvnzgpIngpKbgpY184KS+4KSP4KSkfOCljeCkoyB84KS14KS/4KS1fCDgpIngpKZ84KS14KS+4KSnfOCkv+CkuOCkgXzgpIYg4KS1fOCkvyDgpLh84KSoIOCktXzgpL7gpLDgpL584KWL4KSP4KSkfCDgpJMgfOCkryDgpIZ84KSV4KS+4KSofOCkv+CktuCljXzgpKgg4KSVfCDgpKbgpYt84KSj4KS+4KSVfCDgpKbgpY184KS54KS/4KSufCDgpIXgpKV84KSF4KSl4KS1fOCkvuCkruClh3zgpKbgpY3gpLV84KWH4KS2IHzgpJMg4KS1fOCkvyDgpIV84KSVIOCkj3zgpLXgpL7gpLh8IOCkquClgnzgpLfgpL7gpJV84KSk4KWN4KSkfOCkryDgpKp8IOCkrOClgHzgpK/gpKTgpL584KSn4KSVIHzgpI8g4KS4fOCkpeCkteCkvnzgpL8g4KSmfOCkquCksCB8IOCkreClh3zgpJzgpYfgpIF8IOCkleCkv3zgpJXgpL8gfOCklSDgpLJ8IOCksOClgnzgpLXgpL/gpLZ84KSoIOCkuHwg4KSy4KWHfOCkuOCkvuCksHzgpL7gpJXgpYd84KS/4KS34KWNfOCksOCkv+CktXzgpJUg4KSwfOCkvuCkuCB84KWH4KSTIHzgpY3gpKXgpL984KSV4KWH4KSTfOCksOCkvuCknFwiLFxuICAgIFwiYmhvXCI6IFwiIOCkleClh3zgpJXgpYcgfOCkvuCksCB84KWHIOCklXzgpJXgpL7gpLB84KSn4KS/4KSVfOCkv+CkleCkvnzgpJPgpLAgfOCkhuCkk+CksHwg4KSG4KSTfCDgpIXgpKd84KSF4KSn4KS/fOClhyDgpLh84KS+IOCklXzgpYcg4KSFfCDgpLngpYt8IOCkuOCkgnzgpLAg4KSVfOCksCDgpLh84KWH4KSCIHwg4KSu4KWHfOCkruClh+CkgnzgpL/gpJUgfCDgpJXgpLB84KS+IOCkuHzgpLAg4KS5fCDgpLjgpYd84KS44KWHIHzgpLDgpL4gfOCkruCkvuCkqHwg4KS44KSufOCkqCDgpJV84KSV4KWN4KS3fOClhyDgpKx84KSo4KWLIHwg4KSa4KS+fOCkteClhyB84KSk4KS+IHzgpJrgpL7gpLl84KS34KWN4KSffCDgpLDgpL584KSk4KS/IHzgpY3gpLDgpL584KSW4KWHIHzgpLDgpL7gpLd84KS+4KS34KWNfOCkquCljeCksHwg4KS44KS+fCDgpJXgpL584KSf4KWN4KSwfOClhyDgpIZ8IOCkquCljXwg4KS44KSVfCDgpK7gpL584KWN4KSf4KWNfCDgpLjgpY184KS54KWL4KSWfCDgpKzgpL584KSV4KSw4KWHfOCkvyDgpJV84KWM4KSo4KWLfOCkpCDgpJV84KSl4KS+IHzgpJXgpYzgpKh84KSq4KSoIHwg4KSc4KS+fCDgpJXgpYx84KSw4KWHIHzgpL7gpKTgpL984KSy4KS+IHwg4KST4KSVfOClh+CksuCkvnzgpKTgpKXgpL584KSG4KSq4KSofOCljeCkpCB8IOCkhuCkqnzgpJXgpLAgfOCkueCkteClh3zgpLAg4KSufCDgpLngpLV8IOCkpOCkpXzgpLjgpKzgpLl84KSwIOCkhnzgpYvgpJbgpYd8IOCkueClpHzgpL/gpLAgfOClhyDgpJN84KSV4KWH4KSyfOCkuOCkleClh3zgpLngpYcgfCDgpJTgpLB84KS54KWAIHzgpKTgpL/gpLB84KSk4KWN4KSwfOCknOCkviB84KSo4KS+IHzgpKzgpLngpL984KWk4KS44KSsfOClhyDgpJp8IOCkluCkvnzgpYcg4KSufCDgpKrgpLB84KSW4KS+4KSkfOCkvuCkqCB84KSwIOCkrHzgpKgg4KS4fOCkvuCkteClh3wg4KSy4KWLfOCkt+CkviB84KS+4KS54KWHfOClgCDgpJV84KST4KSV4KSwfOCkviDgpIZ84KSu4KS+4KScfOCkv+CkpCB84KWHIOCknHzgpLIg4KScfOCkruCkv+CksnzgpLjgpILgpJd84KWN4KS34KS+fOCkgiDgpJV8IOCkuOCkrHzgpL4g4KSqfOCklOCksCB84KSw4KSV4KWNfOCkteClh+ClpHzgpL/gpIIgfOClhyDgpLl84KSC4KSk4KWNfOCkvuCknCB84KS44KWN4KS1fOCkueCkv+CkgnzgpKjgpIfgpJZ84KSV4KS+4KSofOCliyDgpLh8IOCknOClh3zgpLjgpK7gpL584KSVIOCkuHzgpLLgpYvgpJd84KSV4KSw4KS+fOCkleCljeCkpHzgpY3gpLDgpKR84KSy4KS+4KWkfCDgpKjgpId84KWH4KWkIHzgpL7gpKjgpLV84KS/4KSv4KS+fOCkueClgSB84KSH4KSW4KWHfOCljeCksCB84KSw4KSk4KS+fOCljeCkteCkpHzgpL7gpKjgpYJ84KWHIOCkqHzgpL7gpK4gfOCkqOClguCkqHzgpL7gpLngpYB84KS14KSk4KSCfOCkquCksCB84KWAIOCkuHwg4KSTIHzgpYcg4KSJfOClhyDgpLV84KWN4KSw4KWAfOCksOClgOCkr3zgpLjgpY3gpKV84KSk4KSC4KSkfOCkpuClgCB84KWA4KSvIHzgpYcg4KSkfOCksCDgpIV84KSwIOCkqnzgpY3gpK8gfOCkuOCkvuCkrnzgpKzgpL7gpaR8IOCkhuCkpnzgpYLgpKggfOClpCDgpLh84KS14KWN4KSvfOCkvuClpOCkuHzgpLjgpK3gpYd84KSt4KWHIHzgpK/gpL4gfCDgpKbgpYd84KS+IOCkrnzgpYcg4KSWfCDgpLXgpL98IOCkuOClgXzgpJXgpYfgpLl84KSq4KWN4KSkfOCkr+Cli+Ckl3zgpYEg4KSVfOCli+CklyB84KWHIOCkpnzgpJrgpL7gpLB84KS+4KSm4KWAfOCkvuCkquCljXwg4KSm4KWLfCDgpK/gpL584KSw4KS+4KSqfOCksiDgpLl84KSq4KWC4KSwfCDgpK7gpL984KSk4KS/4KSVfOCkluCksiB84KSv4KSk4KS+fOCljeCkpOCkv3wg4KSs4KS/fOCkjyDgpJV84KSG4KSm4KS/fOCkpuCkv+Ckrnwg4KS54KWAfOCkueCkvyB84KSu4KWAIHwg4KSo4KS/fOCksCDgpKh8IOCkhyB84KWH4KS54KWBfOCkqOCkteCkvnzgpL4g4KS5fOCksOClgCB84KSy4KWHIHwg4KSq4KS+fOCkvuCkp+Ckv3wg4KS44KS5fCDgpIngpKp84KWN4KSv4KS+fCDgpJzgpLB84KS34KSjIHwg4KS44KStfOCkv+CkruClgHzgpKbgpYfgpLZ84KWHIOCkqnzgpK4g4KSVfOCknOClhyB84KS+4KS1IHwg4KSF4KSqfOCktuCkv+CklXzgpL7gpJzgpL984KSc4KS+4KSmfOCknOCkv+CklXzgpYcg4KStfOCklSDgpIZ84KWN4KSk4KSwfOCkv+CkleCljXzgpL8g4KSufOClh+CkleCksHzgpYHgpJXgpY184KS14KS+4KSnfOCkl+CkoOCkqHwg4KS14KWNfOCkqOCkv+Ckr3zgpKDgpKggfOClpOCkleClh3zgpL7gpK7gpL584KSw4KWLIHwg4KSc4KWAfOCkryDgpJV84KSoIOCkrnzgpYcg4KSyfOCkqCDgpLl84KS+4KS4IHzgpYfgpLYgfCDgpLbgpL584KSY4KWL4KS3fOCkguCkl+CkoHzgpL/gpLIgfCDgpJjgpYt84KWN4KS34KSjfCDgpKrgpYJ84KWHIOCksHzgpILgpLDgpJV84KS44KSC4KSwfOCkieCkquCkr3zgpKrgpK/gpYt84KS54KWLIHzgpKzgpL4gfOClgCDgpKx84KWN4KSuIHzgpLjgpKwgfOCkpuCli+CkuHzgpL7gpaQgfCDgpIbgpJx84KS44KS+4KSlfCDgpLbgpL984KSG4KSc4KS+fCDgpK3gpYB8IOCkieCkmnzgpKjgpYcgfOCkmuCkv+CkpHwg4KSF4KSCfOCksCDgpLV84KScIOCklXzgpKgg4KSGfCDgpLLgpYd84KSo4KS/IHzgpL7gpLDgpY184KSV4KS/IHzgpK/gpL7gpLl84KWN4KSl4KS/XCIsXG4gICAgXCJuZXBcIjogXCLgpJXgpYsgfCDgpLAgfOCkleCkvuCksHzgpKrgpY3gpLB84KS+4KSwIHzgpKjgpYcgfOCkv+CkleCkvnzgpJXgpY3gpKR84KSn4KS/4KSVfOCljeCkr+CklXwg4KSX4KSwfOCkteCljeCkr3zgpY3gpLDgpKR8IOCkquCljXzgpIXgpKfgpL984KWN4KSk4KS/fCDgpIXgpKd8IOCkteCljXzgpK/gpJXgpY184KSu4KS+IHzgpL/gpJUgfOCkpOCljeCkr3zgpL7gpIggfOCksuCkvuCkiHzgpKjgpY3gpKR84KSu4KS+4KSofCDgpLjgpK584KSk4KWN4KSwfOCkl+CksOCljXzgpLDgpY3gpKh84KSVIOCktXwg4KS14KS+fOCljeCkqOClh3zgpLXgpL4gfCDgpLjgpY184KSw4KSk4KWNfOCksCDgpLh84KWN4KSv4KWHfOCkpOCkv+CksnzgpK/gpYfgpJV84KWH4KSVIHzgpJsg4KWkfOCliyDgpLh84KS+IOCkuHzgpLngpLDgpYJ8IOCkteCkv3zgpJXgpY3gpLd84KWN4KSk4KWNfOCkv+CksuCkvnwg4KWkIHzgpLjgpY3gpLV84KS54KWB4KSofOCkpOCkvyB8IOCkueClgXzgpLLgpYcgfCDgpLDgpL58IOCkruCkvnzgpLfgpY3gpJ984KS44KSu4KS+fOCkteCkpOCkqHzgpKTgpKjgpY18IOCkmyB84KSwIOCkm3wg4KS44KSCfOCljeCkn+CljXzgpJ/gpY3gpLB84KS+4KS34KWNfOCliyDgpIV84KSw4KS+4KS3fOCljeCkteCkpHzgpYHgpKjgpYd84KSo4KWH4KSbfOCkueCksOClgXzgpL7gpKggfOCkpOCkviB84KWHIOCkhXzgpY3gpLAgfCDgpJXgpL584KS/4KSo4KWHfOCkvuCkleCli3zgpJfgpLDgpL984KWHIOCkm3zgpKjgpL4gfCDgpIXgpKh8IOCkqOCkv3zgpLDgpKTgpL584KSo4KWIIHwg4KS44KS+fOCkv+CkpCB84KSk4KS/4KSVfOCklSDgpLh84KSwIOCksHzgpLDgpYIgfOCkviDgpIV84KSl4KS+IHzgpLjgpY3gpKR84KSV4KWB4KSofOCkviDgpLB84KWB4KSo4KWIfCDgpJvgpYh84KWN4KSkIHzgpJvgpYjgpKh84KS+IOCkqnzgpL7gpLDgpY184KS14KS+4KSwfOCkviDgpLV8IOCkquCksHzgpKTgpKXgpL58IOCkpOCkpXzgpJXgpL4gfOCljeCkr+CkvnzgpI/gpJXgpYt84KSw4KWBIHzgpY3gpLfgpL584KSu4KS+4KScfOCksOCkleCljXzgpKrgpLDgpL984KSm4KWN4KSnfOClpCDgpKp8IOCksuCkvnzgpLjgpJXgpYt84KS+4KSu4KS+fCDgpK/gpLh84KS+4KS54KSwfOClh+CkmyB84KSn4KS+4KSwfOCljeCksOCkvnzgpYsg4KSqfOCkqOCkvyB84KSm4KWH4KS2fOCkreCkvuCktXzgpL/gpLXgpL584KWN4KSvIHzgpLAg4KS5fOCksCDgpLV84KSwIOCkrnzgpLjgpKzgpYh84KSoIOCkhXzgpYcg4KSwfOCkqCDgpLh84KSw4KSV4KWLfOCkheCkqOCljXzgpKTgpL7gpJV84KSC4KSw4KSVfOCkuOCkguCksHzgpY3gpLXgpL58IOCkpOCljXzgpLjgpK7gpY184KSw4KWAIHzgpYsg4KS1fOCkviDgpK184KSw4KS54KSwfCDgpJXgpYF84KWN4KSw4KS/fOCkpCDgpLB84KSw4KS/4KSofOCktuCljeCkr3zgpKrgpKjgpL984KWIIOCktXzgpK/gpLjgpY184KS+4KSw4KS+fOCkvuCkqOCktXwg4KS24KS/fOCkviDgpKR84KSy4KS+4KSXfOCksOCkviB84KS24KS/4KSVfCDgpLjgpKx84KS+4KSJ4KSofOCkv+CkleCljXzgpY3gpKggfOCkvuCksOCklXzgpL4g4KSofOCksOCkv+Ckr3zgpY3gpK/gpLh84KSm4KWN4KS1fOCksOCkpOCkv3zgpJrgpL7gpLB8IOCkuOCkuXzgpY3gpLfgpKN8IOCkuOClgXzgpL7gpLDgpK584KWB4KSV4KWNfOClgeCkpuCljXzgpLjgpL7gpK584KS34KS+IHzgpYjgpKggfCDgpIXgpKp8IOCkreCkj3zgpKzgpL7gpJ984KWB4KSoIHwg4KSJ4KSqfOCkvuCkqOCljXzgpYsg4KSGfOCljeCkpOCksHzgpL/gpK8gfOCkleCkvuCkqHzgpL8g4KSwfOCksOClguCklXzgpKbgpY3gpKZ84KSwIOCkqnzgpL7gpLUgfOCliyDgpLJ84KSk4KWLIHwg4KSq4KSofOCliOCkqOClpHwg4KSG4KS1fOCkviDgpJd84KWk4KSq4KWNfOCkrOCliCB84KWC4KSw4KWNfOCkv+Ckj+CklXzgpLAg4KSkfOCkqOCkv+CknHzgpKTgpY3gpKp8IOCkreClh3zgpJzgpL/gpJV84KWH4KSb4KWkfOCkv+CkleCli3zgpY3gpKTgpYt84KS14KS+4KS5fOCkpCDgpLh84KS+4KSfIHwg4KSF4KSwfOCkvuCknOCkv3zgpY3gpKcgfCDgpIngpLh84KSw4KSu4KS+fOCkvuCkpOCljXzgpLDgpY3gpK984KSo4KSV4KWLfOCkvuCkryB84KSc4KSV4KWLfOCkv+CkpOCljXzgpL7gpJfgpL98IOCkheCkrXzgpKgg4KSXfOCkl+CkvyB84KS+IOCkrnwg4KSG4KSnfOCkuOCljeCkpXwg4KSq4KS+fOCkvuCksOCkuXzgpJjgpYvgpLd84KSk4KWN4KS1fOCkr+CkpOCkvnzgpL4g4KSVfOCksOCljeCkpnwg4KSu4KSkfOCkteCkv+Ckp3wg4KS44KSVfOCkuOCkvuCksHzgpKrgpLDgpL584KSv4KWB4KSVfOCksOCkvuCkp3wg4KSY4KWLfOCko+CkleCli3zgpIXgpKrgpLB84KWHIOCkuHzgpL7gpLDgpYB84KWk4KSV4KWBfCDgpKbgpL98IOCknOCkqHzgpK3gpYfgpKZ84KSw4KS/4KS1fOCkieCkuOCklXzgpJUg4KSwfOCksCDgpIV84KS/IOCkuHzgpL7gpKjgpYF84KWLIOCkuXzgpLDgpYHgpKZ8IOCkm+ClpHzgpYLgpJXgpYt84KSw4KSV4KS+fOCkqOCkruCkvnwg4KSt4KSofOCksOCljeCkrnzgpLngpL/gpKR84KSq4KWC4KSwfOCkqOCljeCkr3zgpJUg4KSFfOCkviDgpKx84KWLIOCkrXzgpLDgpL7gpJx84KSF4KSo4KWBfOCli+Ckt+Cko3zgpLfgpKPgpL584KSvIOCksHwg4KSu4KSofCDgpKzgpL984KWN4KSn4KS+fCDgpKbgpYd84KSo4KS/4KSwfOCkpOCkvuCkuXzgpLAg4KSJfOCkr+CkuCB84KSJ4KSo4KWHfOCksOCkoyB84KS14KS/4KSVXCIsXG4gICAgXCJtYWdcIjogXCLgpJXgpYcgfCDgpJXgpYd84KS+4KSwIHwg4KS54KSIfOCkleCkvuCksHzgpL/gpJXgpL584KSn4KS/4KSVfOCkueCkiOClpHwg4KSU4KSwfOClhyDgpIV84KSU4KSwIHzgpIXgpKfgpL98IOCkheCkp3zgpL4g4KSVfOCksCDgpLl84KWHIOCkuHzgpYcg4KSVfOCkuOCkrCB84KWH4KSCIHzgpK7gpYfgpIJ8IOCkruClh3wg4KSV4KSwfOCkuOClhyB8IOCkuOCkrnzgpKXgpL4gfOCkpOCkpeCkvnwg4KS54KWLfCDgpLjgpYd84KSwIOCkuHzgpLAg4KSVfOCkv+CklSB8IOCkpOCkpXwg4KS44KSsfCDgpLjgpIJ84KSV4KWN4KS3fOCkruCkvuCkqHzgpKwg4KSVfOCkviDgpLh84KSo4KS+IHwg4KS44KS+fOCkquCljeCksHzgpJXgpLAgfCDgpKrgpY18IOCkreClgHzgpKTgpL8gfOCkiOClpCB84KSw4KS+IHzgpK3gpYAgfOCljeCksOCkvnwg4KSF4KSqfCDgpJXgpL584KSkIOCklXzgpK/gpL4gfOCkheCkquCkqHwg4KSV4KWLfOCkn+CljeCksHzgpJUg4KS5fOCkquCkqCB8IOCkquCksHwg4KSu4KS+fCDgpLDgpL58IOCkr+CkvnzgpYAg4KSVfOCkpOCkviB8IOCkuOCljXwg4KST4KSVfOCkt+CljeCkn3zgpLngpYAgfOCkvuCkqCB84KWN4KSkIHzgpJXgpLDgpYd84KWN4KSw4KSkfOCkpOCljeCksHzgpL7gpLfgpY184KWN4KSf4KWNfCDgpLjgpJV84KSoIOCklXzgpLDgpL7gpLd84KST4KSV4KSwfOClpOCkuOCkrHzgpLDgpYcgfOClh+CksiB84KS54KSIIHzgpYcg4KSsfCDgpJzgpL584KSI4KWk4KS4fOCksOCkleCljXwg4KSy4KWHfOCkguCkpOCljXzgpYcg4KSufCDgpLngpYB84KS44KSVIHzgpKjgpYsgfOCksCDgpK58IOCkqOCkvnzgpLjgpY3gpLV84KS+4KSuIHzgpLngpYvgpI984KSwIOCklHzgpKbgpYAgfOCkteCljeCkr3zgpJXgpY3gpKR84KS+IOCkqnzgpLXgpKTgpIJ84KS+4KSo4KS1fOCkv+CkpCB8IOCktuCkvnzgpL7gpKbgpYB84KS34KS+IHzgpK7gpL7gpJx8IOCkhyB84KSk4KSC4KSkfOCkquCksCB84KWAIOCkuHzgpY3gpLXgpKR84KWN4KSvIHzgpYcg4KSJfOCljeCksCB84KWL4KSXIHzgpLXgpYcgfOCljeCkt+CkvnzgpYcg4KStfOClhyDgpLJ84KSoIOCkuHzgpJXgpLDgpL584KSV4KS+4KSofCDgpI/gpJV84KSyIOCknHzgpK4g4KSVfOCksuClh+CksnzgpY3gpKTgpL984KS+4KS14KWHfCDgpKbgpYd84KSw4KSk4KS+fOCklSDgpLh84KS44KS+4KSlfOCkvuCkqOClgnzgpKjgpYLgpKh84KWH4KSV4KSwfOCksCDgpIV84KSvIOCklXzgpL7gpKUgfOCkquCljeCkpHzgpL4g4KSufOCksuCkviB84KSI4KWk4KSVfCDgpLXgpL984KS44KSu4KS+fOClguCkqCB84KWHIOCkqnzgpLjgpL7gpK584KWkIOCkuHzgpL4g4KS5fCDgpJzgpYd84KWHIOCkuXwg4KSa4KS+fOCli+CkiCB84KSc4KS+IHzgpK7gpL/gpLJ8IOCkteCljXzgpL8g4KSVfOCkrOClhyB84KS+4KSq4KWNfOCksOCkvuCkqnzgpYvgpI8gfOCksOCliyB84KS14KS+4KSwfOCkleCli+CkiHzgpJrgpL7gpLl8IOCkpuCli3zgpLUg4KSVfCDgpKjgpL984KSa4KS+4KSwfOCksCDgpLV84KS+4KSn4KS/fCDgpKrgpL584KSwIOCkqnzgpLjgpY3gpKR84KSP4KSyIHzgpJXgpYvgpKh84KWHIOCktXzgpYvgpKjgpYt84KSV4KS+4KSufOCliyDgpLh84KWN4KSuIHzgpYcg4KSTfOCkr+Cli+Ckl3wg4KS44KWBfOCkjyDgpJV84KSo4KS14KS+fOCkqCDgpLl84KS34KSjIHzgpYDgpK8gfOCkj+CklSB84KSq4KSw4KS/fCDgpIngpKp84KWHIOCkhnzgpY3gpKTgpLB8IOCkuOCkuXzgpL7gpJzgpL984KSyIOCkuXzgpLjgpILgpLB84KSIIOCklXzgpL7gpLggfOCkquClguCksHzgpIIg4KS4fOCkguCksOCklXzgpYsg4KSVfOCknOCkv+CklXzgpKbgpYfgpLZ84KWB4KSV4KWNfOCkvuCkruCkvnzgpLngpYvgpKx84KS44KSu4KWNfOClpOCkleClh3zgpY3gpK/gpJV84KWHIOCkmnzgpJXgpYfgpJV84KWN4KS14KS+fOCkquCkr+Cli3zgpIngpKrgpK984KSw4KWAIHzgpYAg4KS5fOCkvuCkueClgHzgpKbgpYvgpLh84KSwIOCkhnwg4KSJ4KSafOCkvuCkpOCkv3zgpK7gpY3gpK584KWN4KSu4KS+fOClhyDgpJZ8IOCksuCli3zgpKTgpL/gpJV84KSw4KSk4KS/fOClh+CktiB84KSoIOCklHzgpLjgpY3gpKV84KS14KS+IHzgpK7gpYAgfOClhyDgpKR8IOCkhuCkpnzgpKjgpL/gpK984KSoIOCkqnzgpLXgpL7gpKd8IOCkmOCli3zgpJjgpYvgpLd84KSsIOCkhXzgpLDgpL/gpLV84KS+IOCkrHzgpJXgpL8gfOCkriDgpLh84KSw4KWA4KSvfOCljeCksOClgHzgpK8g4KS4fOCkr+CkleCljXzgpL8g4KSufOCkviDgpKZ84KS+IOCkpHzgpKwg4KS5fOCknOCkvuCkpnzgpIngpJrgpL984KSv4KWB4KSVfOCkguCkr+ClgXzgpLjgpILgpK98IOCkiSB84KSHIOCkuHzgpYcg4KSHfOCljeCkt+Cko3zgpaQg4KSkfOCkmuCkv+CkpHzgpL4g4KSUfOCktSDgpLl84KS54KWHIHzgpKQg4KS4fCDgpKrgpYJ84KSVIOCklHzgpJcg4KSVfOClhyDgpKh84KSoIOCkpnzgpJXgpLDgpYt84KSy4KWL4KSXfOCli+Ckt+Cko3zgpL7gpLDgpL584KSwIOCkqHzgpL/gpLIgfOCkuOCkruCkr3zgpJXgpYzgpKh84KSCIOCklXzgpK7gpK8gfOCljOCkqOCli3zgpYHgpLDgpJV84KWLIOCkrXwg4KSt4KS+fOCkvuCknCB8IOCkleCkj3zgpJXgpI/gpLJ84KS44KWB4KSwfOCksOCljeCkrnzgpL7gpLUgfOCkv+CkteCkvlwiXG4gIH0sXG4gIFwiRXRoaW9waWNcIjoge1xuICAgIFwiYW1oXCI6IFwi4Y2h4YiY4YmlfOGIsOGLjeGNoXzhibXhjaHhiqB84Yml4Ym14Y2hfOGImOGJpeGJtXzhjaHhiLDhi4184Y2h4Yqg4YiIfOGNoeGLiOGLrXzhi4jhi63hiJ184Yut4Yid4Y2hfOGKkOGJteGNoXzhipXhi7HhjaF84Yqg4YiI4YuNfOGIiOGLjeGNonzhi7PhipXhi7F84Yur4YqV4YuzfOGKleGLs+GKlXzhiqXhi6vhipV84Yux4Y2h4YiwfOGJteGNoeGImHzhjaHhiqXhipV84Y2h4Yuo4YiYfOGNouGKpeGLq3zhiqXhipXhi7J84Y2h4YqQ4Yy7fOGNoeGLqOGJsHzhiJ3hjaHhiaB84YuN4Y2h4YuofOGIneGNoeGLqHzhjaHhi6jhiJp84YqT4Y2h4YmgfOGKleGNoeGLqHzhjaHhi6jhiJt84Y2h4Yqg4YutfOGKkOGMu+GKkHzhipPhjaHhi6h84YuN4Y2h4YmgfOGJtuGJveGNoXzhi43hjaLhjaF84YiG4YqQ4Y2hfOGJteGNoeGLqHzhjaHhiaDhiJp84Y2h4YiY4YqVfOGLjeGNouGKpXzhibXhipPhjaF84YqA4Yml4YiofOGJteGKleGNoXzhi43hiJ3hjaF84YqV4Yqb4YuNfOGKpeGKqeGIjXzhiaXhibvhjaF84Yqb4YuN4YidfOGKleGIneGNoXzhjaHhiIjhiJh84Y2h4Yur4YiIfOGIneGNoeGIsHzhiJvhipXhipt84YiY4Yml4Ym2fOGNoeGKoOGMiHzhibXhjaHhiaB84Yir4YuK4Y2hfOGNoeGKpeGKqXzhjaHhiIjhiJt84YiI4Ym14Y2hfOGJoOGJteGNoXzhiIbhipXhjaF84YiY4YqV4YyNfOGNoeGJoOGJsHzhiKjhibXhjaF84Yml4Ym24Ym9fOGMi+GJpeGJu3zhi47hib3hjaF84YiF4YqV4YqQfOGMu+GKkOGJtXzhiJ3hjaHhiqV84YuI4YqV4YyAfOGNoeGIjeGLqXzhiLDhiaXhjaF84Yib4YqV4YidfOGMoOGJoOGJhXzhiqnhiI3hjaF84Yuw4YiF4YqVfOGNouGIm+GKlXzhipDhjLvhjaF84YyN4YqY4Ym1fOGIm+GMjeGKmHzhjaLhjaHhiqV84Y2h4Yuo4YiGfOGNoeGIgeGIiXzhib3hjaHhiaB84Y2h4Ymg4YiYfOGIpeGIq+GNoXzhjaHhi7DhiIV84Y2I4Yy44YidfOGIjeGNoeGImHzhibDhjI3hiaN84Y2h4Yu14YitfOGJteGNoeGLiHzhi43hjaLhiJt84Y2N4Yit4Yu1fOGIreGLteGNoXzhjaHhiaDhiIZ84Yit4Y2h4YuIfOGJoOGJteGInXzhibXhiJ3hjaF84Yut4YqQ4Ym1fOGJuOGLjeGNoXzhiaXhjaHhi6h84YqQ4Ym14YqTfOGJseGKleGNoXzhiJXhjI3hjaF84YqV4YqT4Y2hfOGNoeGIpeGIq3zhi6jhiJvhjI184Y2h4YiY4YigfOGKmOGJteGNoXzhjaHhjIrhi5x84Yy74YqQ4Ym2fOGKkOGJtuGJvXzhiaDhiK3hjaF84Ymg4YqA4YmlfOGLqeGKkOGJtXzhiI3hi6nhipB84Y2h4Ymg4YqAfOGNoeGLk+GLrXzhi5Phi63hipB84Ym94YqT4Y2hfOGMjeGJo+GIrXzhiaPhiK3hjaF84Y2h4Yuw4YiofOGKkOGLjeGNonzhjaHhipDhi4184Yuw4Yio4YyDfOGIneGNouGKpXzhiJ3hjaHhiJh84Y2h4YuI4YqVfOGLreGIm+GKlnzhiJvhioDhiaB84YiD4Yut4YibfOGNoeGKkeGIrnzhiJjhiKDhiKh84YiB4YiJ4Y2hfOGKkOGJseGNoXzhiIzhiI7hib184YqV4YyN4YilfOGJoOGJheGNoXzhi6jhiIbhipB84Y2h4Yut4YiFfOGKleGLsuGMoHzhjIjhiK3hjaF84Ymw4Ymj4YmgfOGJteGKreGKrXzhjLjhiJ3hjaF84Yit4Y2h4YuofOGLsuGMoOGJoHzhibXhiJ3hjaJ84YuN4Y2h4YqofOGNoeGKpeGLq3zhiKnhibXhjaF84Yu14Yit4YyFfOGNoeGJpeGJu3zhipPhjaHhiIh84Yut4YyI4YmjfOGLqOGImOGKlnzhjaHhiJvhipV84YqV4YqQ4Ym1fOGJpOGJsOGIsHzhiK3hjIXhibV84Ym14Y2h4Yu1fOGNoeGImOGIsHzhiqXhipXhi7B84Y2h4Yqg4YiLfOGJpeGIlOGIq3zhibXhjaHhiIh84YiU4Yir4YuKfOGIreGJteGNoXzhiIXhiK3hibV84YuN4YqV4Y2hfOGLqOGImuGLq3zhiI3hjaLhiqV84YiG4YqR4Y2hfOGIneGIheGIrXzhibXhiJ3hiIV84Ymg4Ym14Y2ifOGIiOGJoOGJtXzhiqDhiIjhiaB84Y2h4Yqg4Yi1fOGIjuGJveGNoXzhib3hjaHhi6h84Y2h4Ymg4YiVfOGJpeGIqOGNoXzhjaHhiqjhiJp84YqV4Y2h4YqgfOGJteGNoeGKpXzhipXhjaHhi4h84Yio4YyN4Y2hfOGJoOGIhuGKkHzhi6jhioDhiaV84Y2h4Yuo4YqAfOGImOGIhuGKlXzhjaHhiJjhiIZ84YqV4Y2h4YiYfOGNoeGLjeGIs3zhipXhjIDhiI184Y2I4YiL4YyKfOGIheGIneGNoXzhiKjhibPhi4p84Yqt4YiI4YqbfOGKreGKreGIiHzhibPhi4rhjaF84YyA4YiN4Y2hfOGKkeGIruGNoXzhjaLhjaHhi6184YuT4YuK4Y2hfOGLnOGMjeGKkHzhipXhi7LhiIF84Yuy4YiB4YidfOGNoeGIm+GKgHzhjIjhiKnhjaF84Yit4Y2h4YmgfOGJpeGLk+GLinzhiqDhjIjhiKl84YiB4Yid4Y2hfOGKk+GNoeGKkHzhiLDhiaXhi5N84Yuo4Ymw4YmjfOGMheGJteGNoXzhiJvhipbhibV84Yit4Y2h4YqgfOGKleGMjeGItXzhipbhibXhjaF84Ymg4YiV4YyNfOGImOGKluGIrXzhi43hjaHhi6t84YiY4Yyg4YmgfOGIqOGMg+GNoXzhjaHhiaDhiJt84YqQ4Ym14YqVfOGJpeGKkOGJtXzhjIjhiaXhipB84Y2h4YyI4YmlfOGImOGNiOGMuHzhjaHhiIHhipR84YiB4YqU4YmzfOGKleGNoeGIiHzhi43hjaHhiIh84Y2h4Ymw4YyNfOGNoeGLqOGKoHzhjaHhi63hjIh84Y2h4Ymg4YqgfOGJveGKleGNoXzhjaHhibXhiJ184YqQ4Ymx4YqVfOGNoeGJouGIhnzhiaLhiIbhipV84YyK4Yuc4Y2hfOGIqOGNoeGIsHzhibXhjaHhjIp84Yiw4Ymh4Y2hfOGIneGJoOGJtXzhiIvhibjhi4184Yqg4YiL4Ym4fOGJoOGKkOGMu3zhjaHhiaDhipB84Yqg4YqV4Yu1fOGJheGNoeGImHzhjaHhiJjhjKB84Ym14Y2h4YutfOGImOGIsOGIqHzhjKXhjaHhi6h84Yi14Yyl4Y2hfOGNiOGMuOGImHzhi43hiLXhjKV84YqV4Yu14Y2hfOGNoeGLjeGItXzhjaHhiaDhjI184Y2h4YiG4YqWfOGIieGNoeGJoHzhjaHhjIvhiaV84YqV4Yi14Y2hfOGKleGKkOGJsXzhiJjhi43hjaF84Yuo4Yia4Y2IfOGKoOGLreGNiHzhiaXhiKjhiLB84YqQ4Y2h4YiYfOGNoeGLqOGIg3zhiJ3hjaHhiqh84Ym94Y2h4YqlfOGIteGJteGNoXzhiJnhiInhjaF84Yqg4YyI4YitfOGIhuGKluGNoXzhi7DhiKjhjI184Yqi4YqV4YmwfOGKleGJsOGIrXzhibDhiK3hipN84Yit4YqT4Yi9fOGKk+GIveGKk3zhiL3hipPhiI1cIixcbiAgICBcInRpclwiOiBcIiDhiJjhiLB8IOGIsOGJpXzhiLDhiaUgfCDhiqbhiIh84Ym14YqVIHzhiqbhiIjhi4584YqT4YutIHwg4YqT4YutfCDhiqbhiaV84YuO4Y2h4Y2hfOGIiOGLjuGNoXzhiJXhi7XhiJV84Yqm4YmlIHzhi7XhiJXhi7V84YiV4Yu1IHzhiJjhiLDhiI184YuN4YqVIHzhiLDhiI0gfOGLtSDhiLB84YutIOGInXzhiI0g4YqmfOGKq+GJpSB84Y2h4YiV4Yu1fOGNoeGNoeGIlXwg4YuI4YutfOGLiOGLrSB8IOGImOGKlXwg4YqQ4Y2DfOGKlSDhiJh84Yud4Yq+4YqQfOGNoeGNoSB84Ymz4Ym1IHzhiaUg4YudfOGKkOGJtSB84YqVIOGKkHwg4Yqr4YmlfOGImOGIsOGIi3zhipDhjYPhipB8IOGKpeGLmnzhiaUg4YiYfOGKpuGLiiB84Ymz4Ym14YqVfOGImOGKleGMjXzhi4og4YiYfCDhiqXhipV84YmlIOGJpXzhipXhjI3hiLV84Ym1IOGKpnzhiLDhiIvhibV84YqVIOGInXzhir7hipAgfOGKpeGLmiB84Yml4Yqm4YuKfOGIsOGJpeGKpnzhipUg4YqmfOGKleGNoeGNoXwg4YqV4YqtfCDhi53hir584YqVIOGKlXwg4Yid4YitfOGKueGKlSB84Yut4Yq54YqVfCDhi63hirl84Yid4Yit4YqrfOGIreGKq+GJpXwg4Yqm4YutfCDhiIPhjIh84YiV4YyKIHzhiKvhibUgfOGIjuGInSB8IOGJpeGIlXzhipAg4YutfCDhiqjhiJ184Yib4YuV4YiqfOGLrSDhiaV8IOGKleGInXwg4Yud4YmwfOGIreGKlSB84YqVIOGJpXzhiKvhi4ogfCDhjaMgfOGJpSDhiJV84YiL4Ym14YqVfOGJpSDhiqZ84Yib4YiV4YmgfOGKkOGJs+GJtXwg4Yqm4Yu1fOGLleGIqiB8IOGIm+GLlXzhiLXhibPhibV84YyN4Yi14YmzfOKAmeGLjeGKlXzhibUg4YiYfOGKlSDhi5184Ymz4YuKIHzhjaMg4YmlfCDhiJvhiJV84YqQ4Ym14YqVfOGKleGMi+GMiHzhi7XhipXhjIt8IOGIteGIiHwg4Yu14YqVfOGIteGIq+GIlXzhiqnhiI7hiJ184YiV4Ymg4YirfOGKpuGJtSB84YqVIOGIsHzhi5PhiIjhiJ184Y2D4YqQ4YmzfCDhiaXhiJ184Ym1IOGLiHzhiJjhiLDhiKp8IOGIteGIq3zhjYPhipDhibV84Ymw4Yiw4YmlfOGKq+GIjeGKpnzhiI3hiqbhibV84YqVIOGIk3zhi5PhibUgfOGLi+GKlSB84Ymh4Yir4Ym1fOGIleGJoeGIq3wg4YiV4YmhfOGJpeGIleGMinzhi7XhiaUgfOGLjeGLteGJpXwg4YuN4Yu1fOGJpeGKlSB84Ym14Yid4YiFfOGKkOGJsSB84YuaIOGLtXzhjaMg4YqmfOGIg+GMiOGIq3wg4Yqp4YiOfOGIiOGLjuGInXzhiJ3hiIXhiK184Yid4Y2h4Y2hfOGInSDhiJh8IOGJpeGLnXzhiJ3hiqHigJl84Yqh4oCZ4YuNfOGKpeGKleGJtXwg4YuT4YiIfCDhiaXhi5h84Ymg4Yir4YuKfCDhiJPhiIh84YiT4YiI4YuLfOGLjuGIneGNoXzhibEg4YqVfOGJtSDhiaV84YyL4YyIIHzhipDhjYMgfCDhiJ3hi4N84YqVIOGLmHwg4YyI4YmgfOGJteGNoyB8IOGJteGInXzhirjhi43hipV84Yir4YiVIHwg4YuY4YutfOGIheGIreGJsnzhiK3hibIgfOGKqOGIneGKoXzhiIPhi63hiJt8IOGIneGItXzhipDhjaMgfOGKpeGKleGJsHwg4Yi14YitfOGIteGIreGLk3zhiK3hi5PhibV84Ymj4Ym1IHzhi63hiJvhipZ84Yiw4Yiq4YmzfOGKlSDhipN8IOGKreGJpXzhiI3hipUgfCDhiaXhiJt84YyI4YipIHwg4YiF4YudfOGIi+GJtSB84Ym1IOGKk3zhi60g4YqmfOGLleGIiiB84YiI4Yud4Yq+fOGIteGIiOGLnXzhiKrhibDhiLB84Yml4Yiq4YmwfOGIleGJpeGIqnwg4YiV4YmlfOGKlSDhibB84Yq+4YqQ4Y2jfOGJoOGKlSB84YiD4YyI4YipfOGMiCDhiqV84Yq74YuKIHwg4YiD4YutfOGKpeGKlSB84Yiq4YyL4YyIfCDhiJ3hiJV84YqVIOGKpXzhiIjhirvhi4p84Yit4Y2jIHwg4Yml4YiTfCDhiaXhiIN8IOGKreGKuHzhiq3hirjhi4184YmlIOGLmHzhi4PhipEgfOGLiiDhiq184Yid4YqVIHzhiJPhi7AgfOGIneGLg+GKkXzhiJ0g4YqVfOGJtSDhiqV84YuKIOGLiHzhibPhi43hipV8IOGIleGLtXzhiaXhi5jhi618IOGIleGMinzhibUg4YqVfCDhiI3hi5V8IOGKq+GIjXzhipUg4YqrfOGIsOGJo+GJtXzhipUg4Yi1fOGKk+GKlSB84Ymk4Ymw4YiwfOGIleGKlSB84YiI4Yid4YiIfOGJtSDhiLV84Yid4YiI4Yq7fOGNoyDhiqh84Ymw4Yuw4YqVfOGJo+GIjSB84Yqm4Yu14YiLfOGKpeGLi+GKlXwg4Yql4YuLfOGLsOGJgiB8IOGLsOGJgnwg4Yiw4YmjfOGNg+GKlSB84YqQ4Y2D4YqVfOGMjeGIteGJsnzhjaMg4YqVfOGLmiDhiaV84Yi14YmyIHwg4Ymk4YmwfOGIneGMpeGIk3wg4Yqt4YizfCDhipDhi5p84YqVIOGKrXzhipDhibIgfCDhipDhibJ84YqQ4YuaIHwg4Yid4YqlfOGJpeGKkOGNg3wg4Yid4YuVfOGIneGLleGJo3zhi5XhiaPhiIh84Yqt4Yiz4YmlfCDhiaXhipB84YiNIOGKpXzhi5og4YiYfOGIjeGLleGIinzhiq3hiaXhiKl84Yml4Yib4YuVfOGIs+GJpSB84YiF4Yut4YuIfOGKpuGJtuGInXzhiJ3hiLUgfOGKleGMiOGMiHzhiqXhiJ3hipB8IOGKpeGInXzhi7Ug4YqmfOGJtuGInSB84YmyIOGKrXzhjY3hibXhiJN84YiI4YidIHwg4Y2N4Ym1fOGJpSDhipV84YqVIOGLk3zhiKvhi43hipV84YiT4Y2I4Yi7fOGLsOGKleGMiHzhiJ0g4YmlfOGJteGLruGKlXwg4Yud4YiwfOGLneGJsOGLsHzhiIkg4YiYfOGJpSDhipN84YyKIOGKq3zhiI3hi44gfOGKpuGJo+GIjXwg4Yqm4YmjfOGLteGIjeGLjnzhipUg4Yu1fOGKpuGLteGIjXzhi5zhjI3hipB84YiL4YuN4YqVfCDhi7XhiJVcIlxuICB9LFxuICBcIkhlYnJld1wiOiB7XG4gICAgXCJoZWJcIjogXCLXldeqIHzXmdedIHzXm9ecIHzXqiDXlHwg15vXnHzXk9edIHzXkNeT151815nXldeqfCDXqdecfCDXltebfNecINeQfCDXkNeTfNep15wgfNecINeUfNeQ15kgfNeV15nXlXzXm9eQ15l816og15V815kg15x815bXm9eQfCDXldecfNec15AgfCDXldeUfNeo15XXqnzXlteb15V815nXqiB815nXqNeVfNeZ158gfCDXkNeVfNedINeWfCDXnNeQfCDXlNeXfNeQ15UgfCDXlNeQfCDXldeRfCDXlNeefNeX15nXqHzXqiDXnHzXmdeZ1518150g15x815DXqiB816og15F816og16l816jXlCB815XXnyB8INec15R816DXlCB815vXldeZfNeV16rXmXzXlCDXqXzXlSDXnHzXlSDXkXwg15TXlXzXqiDXkHzXnSDXkXzXnSDXlXzXqteVIHwg15DXqnzXnNeUIHzXoNeZIHzXkNeV1558INeR155815PXlCB815Ag15l815Qg15R815Qg15F816LXnCB8150g15R8INei15x815TXldeQfNeV15ogfNeUINeQfNeR15XXk3zXldeTIHzXldeQ15l816DXldeqfNeUINeVfNeqINebfNeZINeUfNeZ15QgfNedINepfNeVINeVfCDXqdeUfNedINeQfNeVINebfNeZ16DXlXzXnyDXlHwg16nXlXzXqdeV15V815TXl9eZfNeb15XXqnzXnNeQ15V815HXldeqfNeT15XXqnzXlCDXnHzXnNeZ16p815Qg1558INeR15l815XXlCB815XXkCB8INeU15l8INec16R815XXqCB8INec15F815wg15F815HXl9eZfNeU15vXqHzXnNeVIHzXqiDXnnzXnyDXqXzXlNeX15V815Qg15t8INeR15t815XXnteZfNeR15nXn3zXnyDXlXzXnyDXnHzXqNeV15l816TXnNeZfNeV15zXlHzXnNeZ15R8INeU15Z815fXmdegfCDXnNeifCDXkdegfNeZ15HXlXzXl9eV16d8INeQ15d815fXkdeofCDXmdeUfCDXl9eZfNee15kgfNeZ16jXlHwg15fXlXzXlNeQ15N815XXldeUfNeX15XXpHzXldek16l815XXpyB816DXlSB815nXlSB815wg1558157Xk9eZfNeb15HXlXwg15TXonzXoNeV15p8INeU15N815kg15B815kg15V8INeU15t815HXoNeZfNei15QgfNeVINeQfNeo16bXlXzXk9eZ16B815HXltebfNee15XXqnzXmdek15V8INeQ15x816HXldeTfNec150gfNeQ15nXqXzXqNeaIHwg15DXmXzXlNeS16B815TXnSB816TXmSB8150g15t815fXldeqfNecINeVfNeQ15nXnHzXmdec15l816rXmdeUfNeb15zXnHzXkNec15l815nXodeVfNeU15DXlXzXltepIHwg15HXkHzXqCDXkHzXlSDXlHzXlteVIHzXkNeX16h8INeU16R8INeR16J8INeR15Z8157XqdekfCDXkdeUfCDXnNeXfNeT16jXmnzXldee15V8INeR15d8INeT16h8INee16J815wg15l816rXldeafNee16DXlXwg15HXqXzXnNecIHzXqNeR15V8INec155816TXoNeZfCDXnNenfNeq150gfNep15QgfNep15nXqnzXnNec15B815zXpNeZfNeU15nXlHzXntei16l815PXlSB816nXldeqfNec15TXknzXldem15l816nXldeQfNeQ15nXn3zXldeZIHzXqteZIHzXldeg15V815zXmdecfCDXnNeVfNeX15nXmXzXnCDXlnwg15bXlXzXlNeZ15B815nXkCB816DXqteVfNeUINekfNec16ogfNeV15HXmXwg15zXm3zXmiDXlHzXmdecIHzXmSDXqXzXqdeZ15V8158g15F816LXldecfNeU157Xk3zXldeT15R815XXnNedfCDXldeefNeQINeUfNeV15zXkHwg15HXqnzXlNeb15x8INeh15V8INee16l8INei15F816HXldemfNeQ16jXpnwg15DXqHzXpteZ15B815Mg15B815zXl9eZfNeU158gfNeZ15fXoXwg15nXl3zXmdeQ15x815TXltebfNedINegfCDXqdeofNeR15UgfNei15HXlXzXlNeZ16F8INec15l816og15Z816TXldecfNeZ15TXmXzXkteR15x816rXmdeVfNeU157XkHzXqdeU15l815Ag15x8157XkNeVfCDXmdeVfNeV16rXlXzXmdep15l815LXoNeUfNek16nXmXzXldeX15N815nXlNedfNeX16jXlXzXnNeb15x815nXk9eUfNei15XXqnzXldeg15R815XXnSB815fXlCB816LXnSB816nXqNeZfNedINeZfNep16ggfNeV15TXl3wg15DXqXwg15TXknzXpyDXkXzXlNek15x816DXqdeVfNeU15LXkXzXkyDXlVwiLFxuICAgIFwieWRkXCI6IFwiINek1r9815XXnyB816LXqCB8158g15B8INeQ1rd815PXoteofNeYINeQfCDXkNeVfNeQ15XXn3zXkNa316h816LXnyB816TWv9eVfCDXkNexfCDXkNeZfNefINekfNa/15XXn3zXqNei15t8INeT16J8INeo16J816LXm9eYfNek1r/XkHzXnyDXk3zXm9eYIHwg15PXmXzXk9eZIHzXkNa3IHzXkNex16N817HXoyB81r/XkNa3fCDXlteyfCDXkteifNeQ1rfXnHzXkNa416F8INeQ1rh815XXoNeSfCDXlNeQfNeU15DWuHzXltey1rd8INee16J815DWuNecfNeg15IgfNew15DWuHzWt9efIHzXkNa316B816jXsta3fCDXsNeQfNa416EgfNeR15DWt3wg15nXonzXmdei15N816DXmdeYfNefINeWfNeoINeQfNeZ15ggfNeQ1rjXmHzXkNa416h816LXk9eifNee16LXn3zXlteQ1rh81rjXmCB816TWv9eofNey1rfXn3wg15HXkHzXmNefIHzXkNeZ1598158g15J815nXnyB8158g17B816DXkNa3fNa/16jXsnzXqCDXlHwg15bXkHzXnNei15t816Ig15B815DWuNeTfNa3INeofNei16DXmHzXkNa316Z81rfXpteZfNeQ1rjXoHwg16bXlXwg17DXonzXmdeWIHzXntei16B81rjXk9eifNeQ15nXlnzXnyDXnnzWt9ec16J815HXnyB816gg155815jXoteofCDXnteZfCDXpNa8fNee15nXmHzXmNec16J81rjXnCB816LXm9eifNey15ggfNa316DXk3zXoiDXpHzXnNeiIHzXktei15Z815zXkNa3fNeQ1rfXpHzXoteW16J816jXkNa3fCDXoNeZfNa316TWv3zXqNefIHzXsta316B816DXoteffNeY15nXp3zXm9eiIHzXpNa/16J815nXoiB815TXsteYfNa315TXsnzXoNeY16l817LWt9eUfNeYINeTfNefINeRfNec158gfNefINegfNek1r/XmHzXqdeQ1rd816jXldegfCDXlteZfCDXsNeZfNeYINekfCDXk9eQfNeY15DWuHzXk9eZ16d816fXnyB816gg16R816gg15J815nXp9effNeQ1rjXkXzXoyDXkHzXkNa316d816fXoteofNei16jXonzXm9ei16h815kg16R815XXqiB81rfXqNeRfNek1rzXqHzXp9eYIHzXotedIHzXmdeQ1rh816bXmdeifNem15nXkHzXmdeY1r5816bXlSB815nXqdeifCDXp9eyfNefINenfNeh16LXqHwg15LXnHzXk9eQ1rh815XXoNeYfNeS158gfNa316jXkHzXmden16J8INeY15B816LXoNeifNec17LWt3zXqdefIHzWt9eg16J815nXpyB815jXkNa3fNehINeQfNei15ggfNeg15LXonzXmNa+15B81rjXoNeQfNa+15DXmXzXmden15h816DXmNeifNey16DXonzWvteg15l81rjXqCB817DXoteofNeZINeQfNefINeZfNeZ15ogfNeW15nXmnzXoteo1r5816LXqNeffNeQ17HXoXzWuNeR159816DXk9eifNa416HXonzXsNeZIHzWv9ei15x816jWvtegfNefINeUfCDXkteofNeS15zXsnwg16bXmXzXqNeQ1rh815bXotecfNei15zXp3zXoNeTIHzXnNen16J815DWuNekfCDXm9a8fNeYINewfNeSINeQfCDXoNeQfNeYINemfNeoINeTfNei16EgfNeT15XXqHzXktei159816fXoiB815Ig16R81r/XmCB8158g15x816nXoiB816gg15Z816jXoiB817LXmNeffNek1rzXonzXp9ec15B816fXsteYfNeZ15jXonzXmdedIHzXoSDXlnzXsta3IHwg15PXlXzXkNa315h8INec15B816gg17B816fXstegfNei15zXqXzXmSDXk3zXnNep15B815nXldeqfNeg15ggfNa316jXlnzXoiDXqHzXnCDXlnzXkNa31558158g16l8INep15V815DXmdegfNeg15jXnHwg15TXmXzXkdei15h81rjXpNa8fNejINekfNey1rfXm3zXkdei16h8158g16Z8157XkNa4fCDXqdeYfCDXnNeifNeS16LXqHzXldeo15p816jXmiB816DXotedfNeS16jXlXzXpNa/159815zXoteofNew16LXnHzXoiDXnnzXldedIHzXqdek1rx815og15B815nXldegfNeo15HXonzXotek1r9815jXoteYfNefINebfNeo16LXoXzXoteo16Z815Yg15B816LXnteifNedINeQfNep15jXonzXm9efIHzXqNeYIHzXmSDXknzXodefIHzXoNei16h815zXmdeYfNeYINeWfNeg16LXnnzWvNeo15B815TXmdeVfNeQ1rfXqXzXqiDXsHzXkNeV155816cg15B815nXkdeifNa/158gfNelINeQfNek1r/XmXzXstefIHzXnSDXmFwiXG4gIH1cbn0iLCIvKiBlc2xpbnQtZW52IGNvbW1vbmpzICovXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgICdjbW4nOiAvW1xcdTJFODAtXFx1MkU5OVxcdTJFOUItXFx1MkVGM1xcdTJGMDAtXFx1MkZENVxcdTMwMDVcXHUzMDA3XFx1MzAyMS1cXHUzMDI5XFx1MzAzOC1cXHUzMDNCXFx1MzQwMC1cXHU0REI1XFx1NEUwMC1cXHU5RkNDXFx1RjkwMC1cXHVGQTZEXFx1RkE3MC1cXHVGQUQ5XXxbXFx1RDg0MC1cXHVEODY4XFx1RDg2QS1cXHVEODZDXVtcXHVEQzAwLVxcdURGRkZdfFxcdUQ4NjlbXFx1REMwMC1cXHVERUQ2XFx1REYwMC1cXHVERkZGXXxcXHVEODZEW1xcdURDMDAtXFx1REYzNFxcdURGNDAtXFx1REZGRl18XFx1RDg2RVtcXHVEQzAwLVxcdURDMURdfFxcdUQ4N0VbXFx1REMwMC1cXHVERTFEXS9nLFxuICAgICdMYXRpbic6IC9bQS1aYS16XFx4QUFcXHhCQVxceEMwLVxceEQ2XFx4RDgtXFx4RjZcXHhGOC1cXHUwMkI4XFx1MDJFMC1cXHUwMkU0XFx1MUQwMC1cXHUxRDI1XFx1MUQyQy1cXHUxRDVDXFx1MUQ2Mi1cXHUxRDY1XFx1MUQ2Qi1cXHUxRDc3XFx1MUQ3OS1cXHUxREJFXFx1MUUwMC1cXHUxRUZGXFx1MjA3MVxcdTIwN0ZcXHUyMDkwLVxcdTIwOUNcXHUyMTJBXFx1MjEyQlxcdTIxMzJcXHUyMTRFXFx1MjE2MC1cXHUyMTg4XFx1MkM2MC1cXHUyQzdGXFx1QTcyMi1cXHVBNzg3XFx1QTc4Qi1cXHVBNzhFXFx1QTc5MC1cXHVBN0FEXFx1QTdCMFxcdUE3QjFcXHVBN0Y3LVxcdUE3RkZcXHVBQjMwLVxcdUFCNUFcXHVBQjVDLVxcdUFCNUZcXHVBQjY0XFx1RkIwMC1cXHVGQjA2XFx1RkYyMS1cXHVGRjNBXFx1RkY0MS1cXHVGRjVBXS9nLFxuICAgICdDeXJpbGxpYyc6IC9bXFx1MDQwMC1cXHUwNDg0XFx1MDQ4Ny1cXHUwNTJGXFx1MUQyQlxcdTFENzhcXHUyREUwLVxcdTJERkZcXHVBNjQwLVxcdUE2OURcXHVBNjlGXS9nLFxuICAgICdBcmFiaWMnOiAvW1xcdTA2MDAtXFx1MDYwNFxcdTA2MDYtXFx1MDYwQlxcdTA2MEQtXFx1MDYxQVxcdTA2MUVcXHUwNjIwLVxcdTA2M0ZcXHUwNjQxLVxcdTA2NEFcXHUwNjU2LVxcdTA2NUZcXHUwNjZBLVxcdTA2NkZcXHUwNjcxLVxcdTA2RENcXHUwNkRFLVxcdTA2RkZcXHUwNzUwLVxcdTA3N0ZcXHUwOEEwLVxcdTA4QjJcXHUwOEU0LVxcdTA4RkZcXHVGQjUwLVxcdUZCQzFcXHVGQkQzLVxcdUZEM0RcXHVGRDUwLVxcdUZEOEZcXHVGRDkyLVxcdUZEQzdcXHVGREYwLVxcdUZERkRcXHVGRTcwLVxcdUZFNzRcXHVGRTc2LVxcdUZFRkNdfFxcdUQ4MDNbXFx1REU2MC1cXHVERTdFXXxcXHVEODNCW1xcdURFMDAtXFx1REUwM1xcdURFMDUtXFx1REUxRlxcdURFMjFcXHVERTIyXFx1REUyNFxcdURFMjdcXHVERTI5LVxcdURFMzJcXHVERTM0LVxcdURFMzdcXHVERTM5XFx1REUzQlxcdURFNDJcXHVERTQ3XFx1REU0OVxcdURFNEJcXHVERTRELVxcdURFNEZcXHVERTUxXFx1REU1MlxcdURFNTRcXHVERTU3XFx1REU1OVxcdURFNUJcXHVERTVEXFx1REU1RlxcdURFNjFcXHVERTYyXFx1REU2NFxcdURFNjctXFx1REU2QVxcdURFNkMtXFx1REU3MlxcdURFNzQtXFx1REU3N1xcdURFNzktXFx1REU3Q1xcdURFN0VcXHVERTgwLVxcdURFODlcXHVERThCLVxcdURFOUJcXHVERUExLVxcdURFQTNcXHVERUE1LVxcdURFQTlcXHVERUFCLVxcdURFQkJcXHVERUYwXFx1REVGMV0vZyxcbiAgICAnYmVuJzogL1tcXHUwOTgwLVxcdTA5ODNcXHUwOTg1LVxcdTA5OENcXHUwOThGXFx1MDk5MFxcdTA5OTMtXFx1MDlBOFxcdTA5QUEtXFx1MDlCMFxcdTA5QjJcXHUwOUI2LVxcdTA5QjlcXHUwOUJDLVxcdTA5QzRcXHUwOUM3XFx1MDlDOFxcdTA5Q0ItXFx1MDlDRVxcdTA5RDdcXHUwOURDXFx1MDlERFxcdTA5REYtXFx1MDlFM1xcdTA5RTYtXFx1MDlGQl0vZyxcbiAgICAnRGV2YW5hZ2FyaSc6IC9bXFx1MDkwMC1cXHUwOTUwXFx1MDk1My1cXHUwOTYzXFx1MDk2Ni1cXHUwOTdGXFx1QThFMC1cXHVBOEZCXS9nLFxuICAgICdqcG4nOiAvW1xcdTMwNDEtXFx1MzA5NlxcdTMwOUQtXFx1MzA5Rl18XFx1RDgyQ1xcdURDMDF8XFx1RDgzQ1xcdURFMDB8W1xcdTMwQTEtXFx1MzBGQVxcdTMwRkQtXFx1MzBGRlxcdTMxRjAtXFx1MzFGRlxcdTMyRDAtXFx1MzJGRVxcdTMzMDAtXFx1MzM1N1xcdUZGNjYtXFx1RkY2RlxcdUZGNzEtXFx1RkY5RF18XFx1RDgyQ1xcdURDMDAvZyxcbiAgICAna29yJzogL1tcXHUxMTAwLVxcdTExRkZcXHUzMDJFXFx1MzAyRlxcdTMxMzEtXFx1MzE4RVxcdTMyMDAtXFx1MzIxRVxcdTMyNjAtXFx1MzI3RVxcdUE5NjAtXFx1QTk3Q1xcdUFDMDAtXFx1RDdBM1xcdUQ3QjAtXFx1RDdDNlxcdUQ3Q0ItXFx1RDdGQlxcdUZGQTAtXFx1RkZCRVxcdUZGQzItXFx1RkZDN1xcdUZGQ0EtXFx1RkZDRlxcdUZGRDItXFx1RkZEN1xcdUZGREEtXFx1RkZEQ10vZyxcbiAgICAndGVsJzogL1tcXHUwQzAwLVxcdTBDMDNcXHUwQzA1LVxcdTBDMENcXHUwQzBFLVxcdTBDMTBcXHUwQzEyLVxcdTBDMjhcXHUwQzJBLVxcdTBDMzlcXHUwQzNELVxcdTBDNDRcXHUwQzQ2LVxcdTBDNDhcXHUwQzRBLVxcdTBDNERcXHUwQzU1XFx1MEM1NlxcdTBDNThcXHUwQzU5XFx1MEM2MC1cXHUwQzYzXFx1MEM2Ni1cXHUwQzZGXFx1MEM3OC1cXHUwQzdGXS9nLFxuICAgICd0YW0nOiAvW1xcdTBCODJcXHUwQjgzXFx1MEI4NS1cXHUwQjhBXFx1MEI4RS1cXHUwQjkwXFx1MEI5Mi1cXHUwQjk1XFx1MEI5OVxcdTBCOUFcXHUwQjlDXFx1MEI5RVxcdTBCOUZcXHUwQkEzXFx1MEJBNFxcdTBCQTgtXFx1MEJBQVxcdTBCQUUtXFx1MEJCOVxcdTBCQkUtXFx1MEJDMlxcdTBCQzYtXFx1MEJDOFxcdTBCQ0EtXFx1MEJDRFxcdTBCRDBcXHUwQkQ3XFx1MEJFNi1cXHUwQkZBXS9nLFxuICAgICdndWonOiAvW1xcdTBBODEtXFx1MEE4M1xcdTBBODUtXFx1MEE4RFxcdTBBOEYtXFx1MEE5MVxcdTBBOTMtXFx1MEFBOFxcdTBBQUEtXFx1MEFCMFxcdTBBQjJcXHUwQUIzXFx1MEFCNS1cXHUwQUI5XFx1MEFCQy1cXHUwQUM1XFx1MEFDNy1cXHUwQUM5XFx1MEFDQi1cXHUwQUNEXFx1MEFEMFxcdTBBRTAtXFx1MEFFM1xcdTBBRTYtXFx1MEFGMV0vZyxcbiAgICAnbWFsJzogL1tcXHUwRDAxLVxcdTBEMDNcXHUwRDA1LVxcdTBEMENcXHUwRDBFLVxcdTBEMTBcXHUwRDEyLVxcdTBEM0FcXHUwRDNELVxcdTBENDRcXHUwRDQ2LVxcdTBENDhcXHUwRDRBLVxcdTBENEVcXHUwRDU3XFx1MEQ2MC1cXHUwRDYzXFx1MEQ2Ni1cXHUwRDc1XFx1MEQ3OS1cXHUwRDdGXS9nLFxuICAgICdrYW4nOiAvW1xcdTBDODEtXFx1MEM4M1xcdTBDODUtXFx1MEM4Q1xcdTBDOEUtXFx1MEM5MFxcdTBDOTItXFx1MENBOFxcdTBDQUEtXFx1MENCM1xcdTBDQjUtXFx1MENCOVxcdTBDQkMtXFx1MENDNFxcdTBDQzYtXFx1MENDOFxcdTBDQ0EtXFx1MENDRFxcdTBDRDVcXHUwQ0Q2XFx1MENERVxcdTBDRTAtXFx1MENFM1xcdTBDRTYtXFx1MENFRlxcdTBDRjFcXHUwQ0YyXS9nLFxuICAgICdteWEnOiAvW1xcdTEwMDAtXFx1MTA5RlxcdUE5RTAtXFx1QTlGRVxcdUFBNjAtXFx1QUE3Rl0vZyxcbiAgICAnb3JpJzogL1tcXHUwQjAxLVxcdTBCMDNcXHUwQjA1LVxcdTBCMENcXHUwQjBGXFx1MEIxMFxcdTBCMTMtXFx1MEIyOFxcdTBCMkEtXFx1MEIzMFxcdTBCMzJcXHUwQjMzXFx1MEIzNS1cXHUwQjM5XFx1MEIzQy1cXHUwQjQ0XFx1MEI0N1xcdTBCNDhcXHUwQjRCLVxcdTBCNERcXHUwQjU2XFx1MEI1N1xcdTBCNUNcXHUwQjVEXFx1MEI1Ri1cXHUwQjYzXFx1MEI2Ni1cXHUwQjc3XS9nLFxuICAgICdwYW4nOiAvW1xcdTBBMDEtXFx1MEEwM1xcdTBBMDUtXFx1MEEwQVxcdTBBMEZcXHUwQTEwXFx1MEExMy1cXHUwQTI4XFx1MEEyQS1cXHUwQTMwXFx1MEEzMlxcdTBBMzNcXHUwQTM1XFx1MEEzNlxcdTBBMzhcXHUwQTM5XFx1MEEzQ1xcdTBBM0UtXFx1MEE0MlxcdTBBNDdcXHUwQTQ4XFx1MEE0Qi1cXHUwQTREXFx1MEE1MVxcdTBBNTktXFx1MEE1Q1xcdTBBNUVcXHUwQTY2LVxcdTBBNzVdL2csXG4gICAgJ0V0aGlvcGljJzogL1tcXHUxMjAwLVxcdTEyNDhcXHUxMjRBLVxcdTEyNERcXHUxMjUwLVxcdTEyNTZcXHUxMjU4XFx1MTI1QS1cXHUxMjVEXFx1MTI2MC1cXHUxMjg4XFx1MTI4QS1cXHUxMjhEXFx1MTI5MC1cXHUxMkIwXFx1MTJCMi1cXHUxMkI1XFx1MTJCOC1cXHUxMkJFXFx1MTJDMFxcdTEyQzItXFx1MTJDNVxcdTEyQzgtXFx1MTJENlxcdTEyRDgtXFx1MTMxMFxcdTEzMTItXFx1MTMxNVxcdTEzMTgtXFx1MTM1QVxcdTEzNUQtXFx1MTM3Q1xcdTEzODAtXFx1MTM5OVxcdTJEODAtXFx1MkQ5NlxcdTJEQTAtXFx1MkRBNlxcdTJEQTgtXFx1MkRBRVxcdTJEQjAtXFx1MkRCNlxcdTJEQjgtXFx1MkRCRVxcdTJEQzAtXFx1MkRDNlxcdTJEQzgtXFx1MkRDRVxcdTJERDAtXFx1MkRENlxcdTJERDgtXFx1MkRERVxcdUFCMDEtXFx1QUIwNlxcdUFCMDktXFx1QUIwRVxcdUFCMTEtXFx1QUIxNlxcdUFCMjAtXFx1QUIyNlxcdUFCMjgtXFx1QUIyRV0vZyxcbiAgICAndGhhJzogL1tcXHUwRTAxLVxcdTBFM0FcXHUwRTQwLVxcdTBFNUJdL2csXG4gICAgJ3Npbic6IC9bXFx1MEQ4MlxcdTBEODNcXHUwRDg1LVxcdTBEOTZcXHUwRDlBLVxcdTBEQjFcXHUwREIzLVxcdTBEQkJcXHUwREJEXFx1MERDMC1cXHUwREM2XFx1MERDQVxcdTBEQ0YtXFx1MERENFxcdTBERDZcXHUwREQ4LVxcdTBEREZcXHUwREU2LVxcdTBERUZcXHUwREYyLVxcdTBERjRdfFxcdUQ4MDRbXFx1RERFMS1cXHVEREY0XS9nLFxuICAgICdlbGwnOiAvW1xcdTAzNzAtXFx1MDM3M1xcdTAzNzUtXFx1MDM3N1xcdTAzN0EtXFx1MDM3RFxcdTAzN0ZcXHUwMzg0XFx1MDM4NlxcdTAzODgtXFx1MDM4QVxcdTAzOENcXHUwMzhFLVxcdTAzQTFcXHUwM0EzLVxcdTAzRTFcXHUwM0YwLVxcdTAzRkZcXHUxRDI2LVxcdTFEMkFcXHUxRDVELVxcdTFENjFcXHUxRDY2LVxcdTFENkFcXHUxREJGXFx1MUYwMC1cXHUxRjE1XFx1MUYxOC1cXHUxRjFEXFx1MUYyMC1cXHUxRjQ1XFx1MUY0OC1cXHUxRjREXFx1MUY1MC1cXHUxRjU3XFx1MUY1OVxcdTFGNUJcXHUxRjVEXFx1MUY1Ri1cXHUxRjdEXFx1MUY4MC1cXHUxRkI0XFx1MUZCNi1cXHUxRkM0XFx1MUZDNi1cXHUxRkQzXFx1MUZENi1cXHUxRkRCXFx1MUZERC1cXHUxRkVGXFx1MUZGMi1cXHUxRkY0XFx1MUZGNi1cXHUxRkZFXFx1MjEyNlxcdUFCNjVdfFxcdUQ4MDBbXFx1REQ0MC1cXHVERDhDXFx1RERBMF18XFx1RDgzNFtcXHVERTAwLVxcdURFNDVdL2csXG4gICAgJ2tobSc6IC9bXFx1MTc4MC1cXHUxN0REXFx1MTdFMC1cXHUxN0U5XFx1MTdGMC1cXHUxN0Y5XFx1MTlFMC1cXHUxOUZGXS9nLFxuICAgICdoeWUnOiAvW1xcdTA1MzEtXFx1MDU1NlxcdTA1NTktXFx1MDU1RlxcdTA1NjEtXFx1MDU4N1xcdTA1OEFcXHUwNThELVxcdTA1OEZcXHVGQjEzLVxcdUZCMTddL2csXG4gICAgJ3NhdCc6IC9bXFx1MUM1MC1cXHUxQzdGXS9nLFxuICAgICdib2QnOiAvW1xcdTBGMDAtXFx1MEY0N1xcdTBGNDktXFx1MEY2Q1xcdTBGNzEtXFx1MEY5N1xcdTBGOTktXFx1MEZCQ1xcdTBGQkUtXFx1MEZDQ1xcdTBGQ0UtXFx1MEZENFxcdTBGRDlcXHUwRkRBXS9nLFxuICAgICdIZWJyZXcnOiAvW1xcdTA1OTEtXFx1MDVDN1xcdTA1RDAtXFx1MDVFQVxcdTA1RjAtXFx1MDVGNFxcdUZCMUQtXFx1RkIzNlxcdUZCMzgtXFx1RkIzQ1xcdUZCM0VcXHVGQjQwXFx1RkI0MVxcdUZCNDNcXHVGQjQ0XFx1RkI0Ni1cXHVGQjRGXS9nLFxuICAgICdrYXQnOiAvW1xcdTEwQTAtXFx1MTBDNVxcdTEwQzdcXHUxMENEXFx1MTBEMC1cXHUxMEZBXFx1MTBGQy1cXHUxMEZGXFx1MkQwMC1cXHUyRDI1XFx1MkQyN1xcdTJEMkRdL2csXG4gICAgJ2xhbyc6IC9bXFx1MEU4MVxcdTBFODJcXHUwRTg0XFx1MEU4N1xcdTBFODhcXHUwRThBXFx1MEU4RFxcdTBFOTQtXFx1MEU5N1xcdTBFOTktXFx1MEU5RlxcdTBFQTEtXFx1MEVBM1xcdTBFQTVcXHUwRUE3XFx1MEVBQVxcdTBFQUJcXHUwRUFELVxcdTBFQjlcXHUwRUJCLVxcdTBFQkRcXHUwRUMwLVxcdTBFQzRcXHUwRUM2XFx1MEVDOC1cXHUwRUNEXFx1MEVEMC1cXHUwRUQ5XFx1MEVEQy1cXHUwRURGXS9nLFxuICAgICdpaWknOiAvW1xcdUEwMDAtXFx1QTQ4Q1xcdUE0OTAtXFx1QTRDNl0vZyxcbiAgICAnYWlpJzogL1tcXHUwNzAwLVxcdTA3MERcXHUwNzBGLVxcdTA3NEFcXHUwNzRELVxcdTA3NEZdL2dcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGVzbGludC1lbnYgY29tbW9uanMgKi9cblxuLypcbiAqIExvYWQgYHRyaWdyYW0tdXRpbHNgLlxuICovXG5cbnZhciB1dGlsaXRpZXMgPSByZXF1aXJlKCd0cmlncmFtLXV0aWxzJyk7XG5cbi8qXG4gKiBMb2FkIGBleHByZXNzaW9uc2AgKHJlZ3VsYXIgZXhwcmVzc2lvbnMgbWF0Y2hpbmdcbiAqIHNjcmlwdHMpLlxuICovXG5cbnZhciBleHByZXNzaW9ucyA9IHJlcXVpcmUoJy4vZXhwcmVzc2lvbnMuanMnKTtcblxuLypcbiAqIExvYWQgYGRhdGFgICh0cmlncmFtIGluZm9ybWF0aW9uIHBlciBsYW5ndWFnZSxcbiAqIHBlciBzY3JpcHQpLlxuICovXG5cbnZhciBkYXRhID0gcmVxdWlyZSgnLi9kYXRhLmpzb24nKTtcblxuLypcbiAqIENvbnN0cnVjdCB0cmlncmFtIGRpY3Rpb25hcmllcy5cbiAqL1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIHZhciBsYW5ndWFnZXM7XG4gICAgdmFyIG5hbWU7XG4gICAgdmFyIHRyaWdyYW1zO1xuICAgIHZhciBtb2RlbDtcbiAgICB2YXIgc2NyaXB0O1xuICAgIHZhciB3ZWlnaHQ7XG5cbiAgICBmb3IgKHNjcmlwdCBpbiBkYXRhKSB7XG4gICAgICAgIGxhbmd1YWdlcyA9IGRhdGFbc2NyaXB0XTtcblxuICAgICAgICBmb3IgKG5hbWUgaW4gbGFuZ3VhZ2VzKSB7XG4gICAgICAgICAgICBtb2RlbCA9IGxhbmd1YWdlc1tuYW1lXS5zcGxpdCgnfCcpO1xuXG4gICAgICAgICAgICB3ZWlnaHQgPSBtb2RlbC5sZW5ndGg7XG5cbiAgICAgICAgICAgIHRyaWdyYW1zID0ge307XG5cbiAgICAgICAgICAgIHdoaWxlICh3ZWlnaHQtLSkge1xuICAgICAgICAgICAgICAgIHRyaWdyYW1zW21vZGVsW3dlaWdodF1dID0gd2VpZ2h0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsYW5ndWFnZXNbbmFtZV0gPSB0cmlncmFtcztcbiAgICAgICAgfVxuICAgIH1cbn0pKCk7XG5cbi8qXG4gKiBNYXhpbXVtIHNhbXBsZSBsZW5ndGguXG4gKi9cblxudmFyIE1BWF9MRU5HVEggPSAyMDQ4O1xuXG4vKlxuICogTWluaW11bSBzYW1wbGUgbGVuZ3RoLlxuICovXG5cbnZhciBNSU5fTEVOR1RIID0gMTA7XG5cbi8qXG4gKiBUaGUgbWF4aW11bSBkaXN0YW5jZSB0byBhZGQgd2hlbiBhIGdpdmVuIHRyaWdyYW0gZG9lc1xuICogbm90IGV4aXN0IGluIGEgdHJpZ3JhbSBkaWN0aW9uYXJ5LlxuICovXG5cbnZhciBNQVhfRElGRkVSRU5DRSA9IDMwMDtcblxuLyoqXG4gKiBEZWVwIHJlZ3VsYXIgc29ydCBvbiB0aGUgbnVtYmVyIGF0IGAxYCBpbiBib3RoIG9iamVjdHMuXG4gKlxuICogQGV4YW1wbGVcbiAqICAgPiBbWzAsIDIwXSwgWzAsIDFdLCBbMCwgNV1dLnNvcnQoc29ydCk7XG4gKiAgIC8vIFtbMCwgMV0sIFswLCA1XSwgWzAsIDIwXV1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSAtIExlZnQtaGFuZC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBiIC0gUmlnaHQtaGFuZC5cbiAqL1xuZnVuY3Rpb24gc29ydChhLCBiKSB7XG4gICAgcmV0dXJuIGFbMV0gLSBiWzFdO1xufVxuXG4vKipcbiAqIEZpbHRlciBgbGFuZ3VhZ2VzYCBieSByZW1vdmluZyBsYW5ndWFnZXMgaW5cbiAqIGBibGFja2xpc3RgLCBvciBpbmNsdWRpbmcgbGFuZ3VhZ2VzIGluIGB3aGl0ZWxpc3RgLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0LjxPYmplY3Q+fSBsYW5ndWFnZXMgLSBMYW5ndWFnZXNcbiAqICAgdG8gZmlsdGVyXG4gKiBAcGFyYW0ge0FycmF5LjxzdHJpbmc+fSB3aGl0ZWxpc3QgLSBXaGl0ZWxpc3RlZFxuICogICBsYW5ndWFnZXM7IGlmIG5vbi1lbXB0eSwgb25seSBpbmNsdWRlZCBsYW5ndWFnZXNcbiAqICAgYXJlIGtlcHQuXG4gKiBAcGFyYW0ge0FycmF5LjxzdHJpbmc+fSBibGFja2xpc3QgLSBCbGFja2xpc3RlZFxuICogICBsYW5ndWFnZXM7IGluY2x1ZGVkIGxhbmd1YWdlcyBhcmUgaWdub3JlZC5cbiAqIEByZXR1cm4ge09iamVjdC48T2JqZWN0Pn0gLSBGaWx0ZXJlZCBhcnJheSBvZlxuICogICBsYW5ndWFnZXMuXG4gKi9cbmZ1bmN0aW9uIGZpbHRlckxhbmd1YWdlcyhsYW5ndWFnZXMsIHdoaXRlbGlzdCwgYmxhY2tsaXN0KSB7XG4gICAgdmFyIGZpbHRlcmVkTGFuZ3VhZ2VzO1xuICAgIHZhciBsYW5ndWFnZTtcblxuICAgIGlmICh3aGl0ZWxpc3QubGVuZ3RoID09PSAwICYmIGJsYWNrbGlzdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGxhbmd1YWdlcztcbiAgICB9XG5cbiAgICBmaWx0ZXJlZExhbmd1YWdlcyA9IHt9O1xuXG4gICAgZm9yIChsYW5ndWFnZSBpbiBsYW5ndWFnZXMpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgIHdoaXRlbGlzdC5sZW5ndGggPT09IDAgfHxcbiAgICAgICAgICAgICAgICB3aGl0ZWxpc3QuaW5kZXhPZihsYW5ndWFnZSkgIT09IC0xXG4gICAgICAgICAgICApICYmXG4gICAgICAgICAgICBibGFja2xpc3QuaW5kZXhPZihsYW5ndWFnZSkgPT09IC0xXG4gICAgICAgICkge1xuICAgICAgICAgICAgZmlsdGVyZWRMYW5ndWFnZXNbbGFuZ3VhZ2VdID0gbGFuZ3VhZ2VzW2xhbmd1YWdlXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmaWx0ZXJlZExhbmd1YWdlcztcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGRpc3RhbmNlIGJldHdlZW4gYW4gYXJyYXkgb2YgdHJpZ3JhbS0tY291bnRcbiAqIHR1cGxlcywgYW5kIGEgbGFuZ3VhZ2UgZGljdGlvbmFyeS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5LjxBcnJheS48c3RyaW5nLCBudW1iZXI+Pn0gdHJpZ3JhbXMgLSBBblxuICogICBhcnJheSBjb250YWluaW5nIHRyaWdyYW0tLWNvdW50IHR1cGxlcy5cbiAqIEBwYXJhbSB7T2JqZWN0LjxudW1iZXI+fSBtb2RlbCAtIE9iamVjdFxuICogICBjb250YWluaW5nIHdlaWdodGVkIHRyaWdyYW1zLlxuICogQHJldHVybiB7bnVtYmVyfSAtIFRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSB0d28uXG4gKi9cbmZ1bmN0aW9uIGdldERpc3RhbmNlKHRyaWdyYW1zLCBtb2RlbCkge1xuICAgIHZhciBkaXN0YW5jZSA9IDA7XG4gICAgdmFyIGluZGV4ID0gLTE7XG4gICAgdmFyIGxlbmd0aCA9IHRyaWdyYW1zLmxlbmd0aDtcbiAgICB2YXIgdHJpZ3JhbTtcbiAgICB2YXIgZGlmZmVyZW5jZTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHRyaWdyYW0gPSB0cmlncmFtc1tpbmRleF07XG5cbiAgICAgICAgaWYgKHRyaWdyYW1bMF0gaW4gbW9kZWwpIHtcbiAgICAgICAgICAgIGRpZmZlcmVuY2UgPSB0cmlncmFtWzFdIC0gbW9kZWxbdHJpZ3JhbVswXV0gLSAxO1xuXG4gICAgICAgICAgICBpZiAoZGlmZmVyZW5jZSA8IDApIHtcbiAgICAgICAgICAgICAgICBkaWZmZXJlbmNlID0gLWRpZmZlcmVuY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkaWZmZXJlbmNlID0gTUFYX0RJRkZFUkVOQ0U7XG4gICAgICAgIH1cblxuICAgICAgICBkaXN0YW5jZSArPSBkaWZmZXJlbmNlO1xuICAgIH1cblxuICAgIHJldHVybiBkaXN0YW5jZTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBzaW5nbGUgdHVwbGUgYXMgYSBsaXN0IG9mIHR1cGxlcyBmcm9tIGEgZ2l2ZW5cbiAqIGxhbmd1YWdlIGNvZGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGxhbmd1YWdlIC0gQSBzaW5nbGUgbGFuZ3VhZ2UuXG4gKiBAcmV0dXJuIHtBcnJheS48QXJyYXkuPHN0cmluZywgbnVtYmVyPj59IEFuIGFycmF5XG4gKiAgIGNvbnRhaW5pbmcgYSBzaW5nbGUgbGFuZ3VhZ2UtLWRpc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzaW5nbGVMYW5ndWFnZVR1cGxlcyhsYW5ndWFnZSkge1xuICAgIHJldHVybiBbW2xhbmd1YWdlLCAxXV07XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgc2luZ2xlIGB1bmRgIHR1cGxlLlxuICpcbiAqIEByZXR1cm4ge0FycmF5LjxBcnJheS48c3RyaW5nLCBudW1iZXI+Pn0gQW4gYXJyYXlcbiAqICAgY29udGFpbmluZyBhIHNpbmdsZSBsYW5ndWFnZS0tZGlzdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHVuZCgpIHtcbiAgICByZXR1cm4gc2luZ2xlTGFuZ3VhZ2VUdXBsZXMoJ3VuZCcpO1xufVxuXG4vKipcbiAqIEdldCB0aGUgZGlzdGFuY2UgYmV0d2VlbiBhbiBhcnJheSBvZiB0cmlncmFtLS1jb3VudFxuICogdHVwbGVzLCBhbmQgbXVsdGlwbGUgdHJpZ3JhbSBkaWN0aW9uYXJpZXMuXG4gKlxuICogQHBhcmFtIHtBcnJheS48QXJyYXkuPHN0cmluZywgbnVtYmVyPj59IHRyaWdyYW1zIC0gQW5cbiAqICAgYXJyYXkgY29udGFpbmluZyB0cmlncmFtLS1jb3VudCB0dXBsZXMuXG4gKiBAcGFyYW0ge09iamVjdC48T2JqZWN0Pn0gbGFuZ3VhZ2VzIC0gbXVsdGlwbGVcbiAqICAgdHJpZ3JhbXMgdG8gdGVzdCBhZ2FpbnN0LlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBDb25maWd1cmF0aW9uLlxuICogQHJldHVybiB7QXJyYXkuPEFycmF5LjxzdHJpbmcsIG51bWJlcj4+fSBBbiBhcnJheVxuICogICBjb250YWluaW5nIGxhbmd1YWdlLS1kaXN0YW5jZSB0dXBsZXMuXG4gKi9cbmZ1bmN0aW9uIGdldERpc3RhbmNlcyh0cmlncmFtcywgbGFuZ3VhZ2VzLCBvcHRpb25zKSB7XG4gICAgdmFyIGRpc3RhbmNlcyA9IFtdO1xuICAgIHZhciB3aGl0ZWxpc3QgPSBvcHRpb25zLndoaXRlbGlzdCB8fCBbXTtcbiAgICB2YXIgYmxhY2tsaXN0ID0gb3B0aW9ucy5ibGFja2xpc3QgfHwgW107XG4gICAgdmFyIGxhbmd1YWdlO1xuXG4gICAgbGFuZ3VhZ2VzID0gZmlsdGVyTGFuZ3VhZ2VzKGxhbmd1YWdlcywgd2hpdGVsaXN0LCBibGFja2xpc3QpO1xuXG4gICAgZm9yIChsYW5ndWFnZSBpbiBsYW5ndWFnZXMpIHtcbiAgICAgICAgZGlzdGFuY2VzLnB1c2goW1xuICAgICAgICAgICAgbGFuZ3VhZ2UsXG4gICAgICAgICAgICBnZXREaXN0YW5jZSh0cmlncmFtcywgbGFuZ3VhZ2VzW2xhbmd1YWdlXSlcbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRpc3RhbmNlcy5sZW5ndGggPyBkaXN0YW5jZXMuc29ydChzb3J0KSA6IHVuZCgpO1xufVxuXG4vKipcbiAqIEdldCB0aGUgb2NjdXJyZW5jZSByYXRpbyBvZiBgZXhwcmVzc2lvbmAgZm9yIGB2YWx1ZWAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIC0gVmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge1JlZ0V4cH0gZXhwcmVzc2lvbiAtIENvZGUtcG9pbnQgZXhwcmVzc2lvbi5cbiAqIEByZXR1cm4ge251bWJlcn0gRmxvYXQgYmV0d2VlbiAwIGFuZCAxLlxuICovXG5mdW5jdGlvbiBnZXRPY2N1cnJlbmNlKHZhbHVlLCBleHByZXNzaW9uKSB7XG4gICAgdmFyIGNvdW50ID0gdmFsdWUubWF0Y2goZXhwcmVzc2lvbik7XG5cbiAgICByZXR1cm4gKGNvdW50ID8gY291bnQubGVuZ3RoIDogMCkgLyB2YWx1ZS5sZW5ndGggfHwgMDtcbn1cblxuLyoqXG4gKiBGcm9tIGBzY3JpcHRzYCwgZ2V0IHRoZSBtb3N0IG9jY3VycmluZyBleHByZXNzaW9uIGZvclxuICogYHZhbHVlYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBWYWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7T2JqZWN0LjxSZWdFeHA+fSBzY3JpcHRzIC0gVG9wLVNjcmlwdHMuXG4gKiBAcmV0dXJuIHtBcnJheX0gVG9wIHNjcmlwdCBhbmQgaXRzXG4gKiAgIG9jY3VycmVuY2UgcGVyY2VudGFnZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VG9wU2NyaXB0KHZhbHVlLCBzY3JpcHRzKSB7XG4gICAgdmFyIHRvcENvdW50ID0gLTE7XG4gICAgdmFyIHRvcFNjcmlwdDtcbiAgICB2YXIgc2NyaXB0O1xuICAgIHZhciBjb3VudDtcblxuICAgIGZvciAoc2NyaXB0IGluIHNjcmlwdHMpIHtcbiAgICAgICAgY291bnQgPSBnZXRPY2N1cnJlbmNlKHZhbHVlLCBzY3JpcHRzW3NjcmlwdF0pO1xuXG4gICAgICAgIGlmIChjb3VudCA+IHRvcENvdW50KSB7XG4gICAgICAgICAgICB0b3BDb3VudCA9IGNvdW50O1xuICAgICAgICAgICAgdG9wU2NyaXB0ID0gc2NyaXB0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFt0b3BTY3JpcHQsIHRvcENvdW50XTtcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGRpZmZlcmVuY2UgZm9yIGVhY2ggdHVwbGUgaW5cbiAqIGBkaXN0YW5jZXNgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIFZhbHVlIHRvIG5vcm1hbGl6ZS5cbiAqIEBwYXJhbSB7QXJyYXkuPEFycmF5LjxzdHJpbmcsIG51bWJlcj4+fSBkaXN0YW5jZXNcbiAqICAgLSBMaXN0IG9mIGRpc3RhbmNlcy5cbiAqIEByZXR1cm4ge0FycmF5LjxBcnJheS48c3RyaW5nLCBudW1iZXI+Pn0gLSBOb3JtYWxpemVkXG4gKiAgIGRpc3RhbmNlcy5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplKHZhbHVlLCBkaXN0YW5jZXMpIHtcbiAgICB2YXIgbWluID0gZGlzdGFuY2VzWzBdWzFdO1xuICAgIHZhciBtYXggPSAodmFsdWUubGVuZ3RoICogTUFYX0RJRkZFUkVOQ0UpIC0gbWluO1xuICAgIHZhciBpbmRleCA9IC0xO1xuICAgIHZhciBsZW5ndGggPSBkaXN0YW5jZXMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgZGlzdGFuY2VzW2luZGV4XVsxXSA9IDEgLSAoKGRpc3RhbmNlc1tpbmRleF1bMV0gLSBtaW4pIC8gbWF4KSB8fCAwO1xuICAgIH1cblxuICAgIHJldHVybiBkaXN0YW5jZXM7XG59XG5cbi8qKlxuICogR2V0IGEgbGlzdCBvZiBwcm9iYWJsZSBsYW5ndWFnZXMgdGhlIGdpdmVuIHZhbHVlIGlzXG4gKiB3cml0dGVuIGluLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byB0ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBDb25maWd1cmF0aW9uLlxuICogQHJldHVybiB7QXJyYXkuPEFycmF5LjxzdHJpbmcsIG51bWJlcj4+fSBBbiBhcnJheVxuICogICBjb250YWluaW5nIGxhbmd1YWdlLS1kaXN0YW5jZSB0dXBsZXMuXG4gKi9cbmZ1bmN0aW9uIGRldGVjdEFsbCh2YWx1ZSwgb3B0aW9ucykge1xuICAgIHZhciBzZXR0aW5ncyA9IG9wdGlvbnMgfHwge307XG4gICAgdmFyIG1pbkxlbmd0aCA9IE1JTl9MRU5HVEg7XG4gICAgdmFyIHNjcmlwdDtcblxuICAgIGlmIChzZXR0aW5ncy5taW5MZW5ndGggIT09IG51bGwgJiYgc2V0dGluZ3MubWluTGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbWluTGVuZ3RoID0gc2V0dGluZ3MubWluTGVuZ3RoO1xuICAgIH1cblxuICAgIGlmICghdmFsdWUgfHwgdmFsdWUubGVuZ3RoIDwgbWluTGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB1bmQoKTtcbiAgICB9XG5cbiAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cigwLCBNQVhfTEVOR1RIKTtcblxuICAgIC8qXG4gICAgICogR2V0IHRoZSBzY3JpcHQgd2hpY2ggY2hhcmFjdGVycyBvY2N1ciB0aGUgbW9zdFxuICAgICAqIGluIGB2YWx1ZWAuXG4gICAgICovXG5cbiAgICBzY3JpcHQgPSBnZXRUb3BTY3JpcHQodmFsdWUsIGV4cHJlc3Npb25zKTtcblxuICAgIC8qXG4gICAgICogT25lIGxhbmd1YWdlcyBleGlzdHMgZm9yIHRoZSBtb3N0LXVzZWQgc2NyaXB0LlxuICAgICAqXG4gICAgICogSWYgbm8gbWF0Y2hlcyBvY2N1cmVkLCBzdWNoIGFzIGEgZGlnaXQgb25seSBzdHJpbmcsXG4gICAgICogZXhpdCB3aXRoIGB1bmRgLlxuICAgICAqL1xuXG4gICAgaWYgKCEoc2NyaXB0WzBdIGluIGRhdGEpKSB7XG4gICAgICAgIHJldHVybiBzY3JpcHRbMV0gPT09IDAgPyB1bmQoKSA6IHNpbmdsZUxhbmd1YWdlVHVwbGVzKHNjcmlwdFswXSk7XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBHZXQgYWxsIGRpc3RhbmNlcyBmb3IgYSBnaXZlbiBzY3JpcHQsIGFuZFxuICAgICAqIG5vcm1hbGl6ZSB0aGUgZGlzdGFuY2UgdmFsdWVzLlxuICAgICAqL1xuXG4gICAgcmV0dXJuIG5vcm1hbGl6ZSh2YWx1ZSwgZ2V0RGlzdGFuY2VzKFxuICAgICAgICB1dGlsaXRpZXMuYXNUdXBsZXModmFsdWUpLCBkYXRhW3NjcmlwdFswXV0sIHNldHRpbmdzXG4gICAgKSk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBtb3N0IHByb2JhYmxlIGxhbmd1YWdlIGZvciB0aGUgZ2l2ZW4gdmFsdWUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIHRlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIENvbmZpZ3VyYXRpb24uXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBtb3N0IHByb2JhYmxlIGxhbmd1YWdlLlxuICovXG5mdW5jdGlvbiBkZXRlY3QodmFsdWUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gZGV0ZWN0QWxsKHZhbHVlLCBvcHRpb25zKVswXVswXTtcbn1cblxuLypcbiAqIEV4cG9zZSBgZGV0ZWN0QWxsYCBvbiBgZGV0ZWN0YC5cbiAqL1xuXG5kZXRlY3QuYWxsID0gZGV0ZWN0QWxsO1xuXG4vKlxuICogRXhwb3NlIGBkZXRlY3RgLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZGV0ZWN0O1xuIiwiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjEuMVxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE2LTA5LTIyVDIyOjMwWlxuICovXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGNvbmNhdCA9IGFyci5jb25jYXQ7XG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxuXG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgZG9jICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMy4xLjFcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxuXHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZyxcblxuXHQvLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcblx0cm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nLFxuXG5cdC8vIFVzZWQgYnkgalF1ZXJ5LmNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcblx0ZmNhbWVsQ2FzZSA9IGZ1bmN0aW9uKCBhbGwsIGxldHRlciApIHtcblx0XHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG5cdH07XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cblx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdHJldHVybiBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFqUXVlcnkuaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBqUXVlcnkuaXNBcnJheSggY29weSApICkgKSApIHtcblxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgKSB7XG5cdFx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzQXJyYXkoIHNyYyApID8gc3JjIDogW107XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApID8gc3JjIDoge307XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNGdW5jdGlvbjogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LnR5cGUoIG9iaiApID09PSBcImZ1bmN0aW9uXCI7XG5cdH0sXG5cblx0aXNBcnJheTogQXJyYXkuaXNBcnJheSxcblxuXHRpc1dpbmRvdzogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuXHR9LFxuXG5cdGlzTnVtZXJpYzogZnVuY3Rpb24oIG9iaiApIHtcblxuXHRcdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdFx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHRcdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdFx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdFx0cmV0dXJuICggdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiICkgJiZcblxuXHRcdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcblx0fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvNjEyNVxuXHRcdHZhciBuYW1lO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdHR5cGU6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRcdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdFx0dHlwZW9mIG9iajtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBnbG9iYWwgY29udGV4dFxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSApIHtcblx0XHRET01FdmFsKCBjb2RlICk7XG5cdH0sXG5cblx0Ly8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDEzXG5cdC8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3Milcblx0Y2FtZWxDYXNlOiBmdW5jdGlvbiggc3RyaW5nICkge1xuXHRcdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xuXHR9LFxuXG5cdG5vZGVOYW1lOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHR0cmltOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcdFwiXCIgOlxuXHRcdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBjb25jYXQuYXBwbHkoIFtdLCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcblx0Ly8gYXJndW1lbnRzLlxuXHRwcm94eTogZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHRcdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0XHRjb250ZXh0ID0gZm47XG5cdFx0XHRmbiA9IHRtcDtcblx0XHR9XG5cblx0XHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHRcdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFNpbXVsYXRlZCBiaW5kXG5cdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRcdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0XHR9O1xuXG5cdFx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdFx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0XHRyZXR1cm4gcHJveHk7XG5cdH0sXG5cblx0bm93OiBEYXRlLm5vdyxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcbmZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbn0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiByZWFsIGlPUyA4LjIgb25seSAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblxuXHRpZiAoIHR5cGUgPT09IFwiZnVuY3Rpb25cIiB8fCBqUXVlcnkuaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE2LTA4LTA4XG4gKi9cbihmdW5jdGlvbiggd2luZG93ICkge1xuXG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcMC1cXFxceGEwXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cblx0cmF0dHJpYnV0ZVF1b3RlcyA9IG5ldyBSZWdFeHAoIFwiPVwiICsgd2hpdGVzcGFjZSArIFwiKihbXlxcXFxdJ1xcXCJdKj8pXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIiwgXCJnXCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98KFwiICsgd2hpdGVzcGFjZSArIFwiKXwuKVwiLCBcImlnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIF8sIGVzY2FwZWQsIGVzY2FwZWRXaGl0ZXNwYWNlICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlZCAtIDB4MTAwMDA7XG5cdFx0Ly8gTmFOIG1lYW5zIG5vbi1jb2RlcG9pbnRcblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI0XG5cdFx0Ly8gV29ya2Fyb3VuZCBlcnJvbmVvdXMgbnVtZXJpYyBpbnRlcnByZXRhdGlvbiBvZiArXCIweFwiXG5cdFx0cmV0dXJuIGhpZ2ggIT09IGhpZ2ggfHwgZXNjYXBlZFdoaXRlc3BhY2UgP1xuXHRcdFx0ZXNjYXBlZCA6XG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdC8vIEJNUCBjb2RlcG9pbnRcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdC8vIFN1cHBsZW1lbnRhbCBQbGFuZSBjb2RlcG9pbnQgKHN1cnJvZ2F0ZSBwYWlyKVxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICsgY2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGRpc2FibGVkQW5jZXN0b3IgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgKFwiZm9ybVwiIGluIGVsZW0gfHwgXCJsYWJlbFwiIGluIGVsZW0pO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cblx0XHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHR9XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoIChtID0gbWF0Y2hbMV0pICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsyXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cblx0XHRcdFx0Ly8gcVNBIGxvb2tzIG91dHNpZGUgRWxlbWVudCBjb250ZXh0LCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50XG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHdvcmthcm91bmQgdGVjaG5pcXVlXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdGlmICggKG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSkgKSB7XG5cdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAobmlkID0gZXhwYW5kbykgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IFwiI1wiICsgbmlkICsgXCIgXCIgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggbmV3U2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuIChjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBlbGVtZW50IGFuZCByZXR1cm5zIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBlbC5wYXJlbnROb2RlICkge1xuXHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWwgKTtcblx0XHR9XG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KFwifFwiKSxcblx0XHRpID0gYXJyLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFycltpXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMVxuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0ZGlzYWJsZWRBbmNlc3RvciggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIGRvY3VtZW50RWxlbWVudCBpcyB2ZXJpZmllZCBmb3IgY2FzZXMgd2hlcmUgaXQgZG9lc24ndCB5ZXQgZXhpc3Rcblx0Ly8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpXG5cdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXHRyZXR1cm4gZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICE9PSBcIkhUTUxcIiA6IGZhbHNlO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2Vcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPT0gZG9jdW1lbnQgJiZcblx0XHQoc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuXHR9KTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpICk7XG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1zW2krK10pICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9KTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0aWYgKCBhID09PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGIgPT09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblx0XHRcdHJldHVybiBhID09PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHQvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWRcblx0ZXhwciA9IGV4cHIucmVwbGFjZSggcmF0dHJpYnV0ZVF1b3RlcywgXCI9JyQxJ11cIiApO1xuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhY29tcGlsZXJDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZSkge31cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuIChzZWwgKyBcIlwiKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHtcblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsyXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFszXSA9IFwiIFwiICsgbWF0Y2hbM10gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsxXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFszXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFs1XSA9ICsoICggbWF0Y2hbN10gKyBtYXRjaFs4XSApIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KCBtYXRjaFswXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkpICYmXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbMl0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApKSAmJlxuXHRcdFx0XHRjbGFzc0NhY2hlKCBjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoIHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiICk7XG5cdFx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbaV0gPSAhKG1hdGNoZXNbaV0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFswXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZWxlbS5pbm5lclRleHQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbXCJlbXB0eVwiXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9KSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9KSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQobWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkpKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHwgKG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0pICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWzBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwpICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sxXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbXCJuZWVkc0NvbnRleHRcIl0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbaV07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHRcdFx0XHQpKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSApICYgMTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG59KSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9KTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxudmFyIHJpc1NpbXBsZSA9IC9eLlteOiNcXFtcXC4sXSokLztcblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2ltcGxlIHNlbGVjdG9yIHRoYXQgY2FuIGJlIGZpbHRlcmVkIGRpcmVjdGx5LCByZW1vdmluZyBub24tRWxlbWVudHNcblx0aWYgKCByaXNTaW1wbGUudGVzdCggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xuXHR9XG5cblx0Ly8gQ29tcGxleCBzZWxlY3RvciwgY29tcGFyZSB0aGUgdHdvIHNldHMsIHJlbW92aW5nIG5vbi1FbGVtZW50c1xuXHRxdWFsaWZpZXIgPSBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzICk7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3QgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksIHJldCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggW10gKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggcmV0ICkgOiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQgfHwgalF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59ICk7XG52YXIgcm5vdGh0bWx3aGl0ZSA9ICggL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nICk7XG5cblxuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0gKTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHRjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xuXHRcdG1lbW9yeSxcblxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0bG9ja2VkLFxuXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cblx0XHQvLyBRdWV1ZSBvZiBleGVjdXRpb24gZGF0YSBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHF1ZXVlID0gW10sXG5cblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCA9IC0xLFxuXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuZm9yY2Ugc2luZ2xlLWZpcmluZ1xuXHRcdFx0bG9ja2VkID0gb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiBqUXVlcnkudHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUucHJvbWlzZSApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUgKS5kb25lKCByZXNvbHZlICkuZmFpbCggcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciB0aGVuYWJsZXNcblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdFx0cmVzb2x2ZS5jYWxsKCB1bmRlZmluZWQsIHZhbHVlICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmNhbGwoIHVuZGVmaW5lZCwgdmFsdWUgKTtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGNhbGxiYWNrcyxcblx0XHRcdFx0Ly8gLi4uIC50aGVuIGhhbmRsZXJzLCBhcmd1bWVudCBpbmRleCwgW2ZpbmFsIHN0YXRlXVxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSwgMiBdLFxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDAsIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMSwgXCJyZWplY3RlZFwiIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjYXRjaFwiOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHByb21pc2UudGhlbiggbnVsbCwgZm4gKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdHBpcGU6IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE1hcCB0dXBsZXMgKHByb2dyZXNzLCBkb25lLCBmYWlsKSB0byBhcmd1bWVudHMgKGRvbmUsIGZhaWwsIHByb2dyZXNzKVxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBqUXVlcnkuaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdGhlbiApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFNwZWNpYWwgcHJvY2Vzc29ycyAobm90aWZ5KSBqdXN0IHdhaXQgZm9yIHJlc29sdXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBhbHNvIGhvb2sgaW50byBwcm9ncmVzc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIGRpc3JlZ2FyZCBvbGRlciByZXNvbHV0aW9uIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1heERlcHRoKys7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYWxsIG90aGVyIHJldHVybmVkIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IElkZW50aXR5ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgcmV0dXJuZWQgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFByb2Nlc3MgdGhlIHZhbHVlKHMpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmF1bHQgcHJvY2VzcyBpcyByZXNvbHZlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggc3BlY2lhbCB8fCBkZWZlcnJlZC5yZXNvbHZlV2l0aCApKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgbm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGNhdGNoIGFuZCByZWplY3QgZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MgPSBzcGVjaWFsID9cblx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgOlxuXHRcdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayggZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTYxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIHBvc3QtcmVzb2x1dGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCArIDEgPj0gbWF4RGVwdGggKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBUaHJvd2VyICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyBlIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENhbGwgYW4gb3B0aW9uYWwgaG9vayB0byByZWNvcmQgdGhlIHN0YWNrLCBpbiBjYXNlIG9mIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNpbmNlIGl0J3Mgb3RoZXJ3aXNlIGxvc3Qgd2hlbiBleGVjdXRpb24gZ29lcyBhc3luY1xuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSA9IGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHByb2Nlc3MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggb25SZWplY3RlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUmVqZWN0ZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0VGhyb3dlclxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDUgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZS5wcm9ncmVzcyA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmRvbmUgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5mYWlsID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKFxuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVzb2x2ZWRcIiAoaS5lLiwgZnVsZmlsbGVkKVxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlamVjdGVkXCJcblx0XHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAyIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkXG5cdFx0XHRtYXN0ZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0bWFzdGVyLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBtYXN0ZXIuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgbWFzdGVyLnJlamVjdCApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIG1hc3Rlci5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG1hc3Rlci50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBtYXN0ZXIucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hc3Rlci5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhvbGQgKG9yIHJlbGVhc2UpIHRoZSByZWFkeSBldmVudFxuXHRob2xkUmVhZHk6IGZ1bmN0aW9uKCBob2xkICkge1xuXHRcdGlmICggaG9sZCApIHtcblx0XHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0XHR9IGVsc2Uge1xuXHRcdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCBqUXVlcnkudHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IHt9O1xuXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGpRdWVyeS5jYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBqUXVlcnkuY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgalF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggalF1ZXJ5LmNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0galF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFsga2V5IF0gOlxuXHRcdFx0XHRcdCgga2V5Lm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10gKTtcblx0XHRcdH1cblxuXHRcdFx0aSA9IGtleS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIGtleVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGdldERhdGEoIGRhdGEgKSB7XG5cdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwiZmFsc2VcIiApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwibnVsbFwiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0aWYgKCBkYXRhID09PSArZGF0YSArIFwiXCIgKSB7XG5cdFx0cmV0dXJuICtkYXRhO1xuXHR9XG5cblx0aWYgKCByYnJhY2UudGVzdCggZGF0YSApICkge1xuXHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBnZXREYXRhKCBkYXRhICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgalF1ZXJ5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG5cbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrLCBhcmdzICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suYXBwbHkoIGVsZW0sIGFyZ3MgfHwgW10gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCxcblx0XHRzY2FsZSA9IDEsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApO1xuXHRcdFx0fSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0ZG8ge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyBpdGVyYXRpb24gemVyb2VkIG91dCwgZG91YmxlIHVudGlsIHdlIGdldCAqc29tZXRoaW5nKi5cblx0XHRcdC8vIFVzZSBzdHJpbmcgZm9yIGRvdWJsaW5nIHNvIHdlIGRvbid0IGFjY2lkZW50YWxseSBzZWUgc2NhbGUgYXMgdW5jaGFuZ2VkIGJlbG93XG5cdFx0XHRzY2FsZSA9IHNjYWxlIHx8IFwiLjVcIjtcblxuXHRcdFx0Ly8gQWRqdXN0IGFuZCBhcHBseVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIFVwZGF0ZSBzY2FsZSwgdG9sZXJhdGluZyB6ZXJvIG9yIE5hTiBmcm9tIHR3ZWVuLmN1cigpXG5cdFx0Ly8gQnJlYWsgdGhlIGxvb3AgaWYgc2NhbGUgaXMgdW5jaGFuZ2VkIG9yIHBlcmZlY3QsIG9yIGlmIHdlJ3ZlIGp1c3QgaGFkIGVub3VnaC5cblx0XHR9IHdoaWxlIChcblx0XHRcdHNjYWxlICE9PSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsICkgJiYgc2NhbGUgIT09IDEgJiYgLS1tYXhJdGVyYXRpb25zXG5cdFx0KTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKykvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgalF1ZXJ5Lm5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgY29udGFpbnMsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCBqUXVlcnkudHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Y29udGFpbnMgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBjb250YWlucyApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xufSApKCk7XG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxudmFyXG5cdHJrZXlFdmVudCA9IC9ea2V5Lyxcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBTZWUgIzEzMzkzIGZvciBtb3JlIGluZm9cbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChidXQgYWxsb3cgcGxhaW4gb2JqZWN0cylcblx0XHRpZiAoICFlbGVtRGF0YSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHR2YXIgZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApO1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cdFx0XHRoYW5kbGVycyA9ICggZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gVHJpZ2dlcmVkIGV2ZW50IG11c3QgZWl0aGVyIDEpIGhhdmUgbm8gbmFtZXNwYWNlLCBvciAyKSBoYXZlIG5hbWVzcGFjZShzKVxuXHRcdFx0XHQvLyBhIHN1YnNldCBvciBlcXVhbCB0byB0aG9zZSBpbiB0aGUgYm91bmQgZXZlbnQgKGJvdGggY2FuIGhhdmUgbm8gbmFtZXNwYWNlKS5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgaGFuZGxlT2JqLCBzZWwsIG1hdGNoZWRIYW5kbGVycywgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKHRyYWMtMTMxODApXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQyXG5cdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0Y3VyID0gdGhpcztcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdGFkZFByb3A6IGZ1bmN0aW9uKCBuYW1lLCBob29rICkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0Z2V0OiBqUXVlcnkuaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGZvY3VzOiB7XG5cblx0XHRcdC8vIEZpcmUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyAhPT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmZvY3VzICkge1xuXHRcdFx0XHRcdHRoaXMuZm9jdXMoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNpblwiXG5cdFx0fSxcblx0XHRibHVyOiB7XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuYmx1ciApIHtcblx0XHRcdFx0XHR0aGlzLmJsdXIoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNvdXRcIlxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gRm9yIGNoZWNrYm94LCBmaXJlIG5hdGl2ZSBldmVudCBzbyBjaGVja2VkIHN0YXRlIHdpbGwgYmUgcmlnaHRcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMudHlwZSA9PT0gXCJjaGVja2JveFwiICYmIHRoaXMuY2xpY2sgJiYgalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR0aGlzLmNsaWNrKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgZG9uJ3QgZmlyZSBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubm9kZU5hbWUoIGV2ZW50LnRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcblx0XHRcdHNyYy50YXJnZXQ7XG5cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcblx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBqUXVlcnkubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IGpRdWVyeS5FdmVudCxcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzU2ltdWxhdGVkOiBmYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG59O1xuXG4vLyBJbmNsdWRlcyBhbGwgY29tbW9uIGV2ZW50IHByb3BzIGluY2x1ZGluZyBLZXlFdmVudCBhbmQgTW91c2VFdmVudCBzcGVjaWZpYyBwcm9wc1xualF1ZXJ5LmVhY2goIHtcblx0YWx0S2V5OiB0cnVlLFxuXHRidWJibGVzOiB0cnVlLFxuXHRjYW5jZWxhYmxlOiB0cnVlLFxuXHRjaGFuZ2VkVG91Y2hlczogdHJ1ZSxcblx0Y3RybEtleTogdHJ1ZSxcblx0ZGV0YWlsOiB0cnVlLFxuXHRldmVudFBoYXNlOiB0cnVlLFxuXHRtZXRhS2V5OiB0cnVlLFxuXHRwYWdlWDogdHJ1ZSxcblx0cGFnZVk6IHRydWUsXG5cdHNoaWZ0S2V5OiB0cnVlLFxuXHR2aWV3OiB0cnVlLFxuXHRcImNoYXJcIjogdHJ1ZSxcblx0Y2hhckNvZGU6IHRydWUsXG5cdGtleTogdHJ1ZSxcblx0a2V5Q29kZTogdHJ1ZSxcblx0YnV0dG9uOiB0cnVlLFxuXHRidXR0b25zOiB0cnVlLFxuXHRjbGllbnRYOiB0cnVlLFxuXHRjbGllbnRZOiB0cnVlLFxuXHRvZmZzZXRYOiB0cnVlLFxuXHRvZmZzZXRZOiB0cnVlLFxuXHRwb2ludGVySWQ6IHRydWUsXG5cdHBvaW50ZXJUeXBlOiB0cnVlLFxuXHRzY3JlZW5YOiB0cnVlLFxuXHRzY3JlZW5ZOiB0cnVlLFxuXHR0YXJnZXRUb3VjaGVzOiB0cnVlLFxuXHR0b0VsZW1lbnQ6IHRydWUsXG5cdHRvdWNoZXM6IHRydWUsXG5cblx0d2hpY2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgYnV0dG9uID0gZXZlbnQuYnV0dG9uO1xuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBrZXkgZXZlbnRzXG5cdFx0aWYgKCBldmVudC53aGljaCA9PSBudWxsICYmIHJrZXlFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRyZXR1cm4gZXZlbnQuY2hhckNvZGUgIT0gbnVsbCA/IGV2ZW50LmNoYXJDb2RlIDogZXZlbnQua2V5Q29kZTtcblx0XHR9XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XG5cdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgJiYgcm1vdXNlRXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0aWYgKCBidXR0b24gJiAxICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiAyICkge1xuXHRcdFx0XHRyZXR1cm4gMztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiA0ICkge1xuXHRcdFx0XHRyZXR1cm4gMjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LndoaWNoO1xuXHR9XG59LCBqUXVlcnkuZXZlbnQuYWRkUHJvcCApO1xuXG4vLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3Ncbi8vIHNvIHRoYXQgZXZlbnQgZGVsZWdhdGlvbiB3b3JrcyBpbiBqUXVlcnkuXG4vLyBEbyB0aGUgc2FtZSBmb3IgcG9pbnRlcmVudGVyL3BvaW50ZXJsZWF2ZSBhbmQgcG9pbnRlcm92ZXIvcG9pbnRlcm91dFxuLy9cbi8vIFN1cHBvcnQ6IFNhZmFyaSA3IG9ubHlcbi8vIFNhZmFyaSBzZW5kcyBtb3VzZWVudGVyIHRvbyBvZnRlbjsgc2VlOlxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxualF1ZXJ5LmVhY2goIHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdH0sXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUsXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbnZhclxuXG5cdC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cblxuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzMyMjlcblx0cnhodG1sVGFnID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKVtePl0qKVxcLz4vZ2ksXG5cblx0LyogZXNsaW50LWVuYWJsZSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSwgRWRnZSAxMiAtIDEzXG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJzY3JpcHRUeXBlTWFza2VkID0gL150cnVlXFwvKC4qKS8sXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRqUXVlcnkubm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4gZWxlbS5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJ0Ym9keVwiIClbIDAgXSB8fCBlbGVtO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9ICggZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdHZhciBtYXRjaCA9IHJzY3JpcHRUeXBlTWFza2VkLmV4ZWMoIGVsZW0udHlwZSApO1xuXG5cdGlmICggbWF0Y2ggKSB7XG5cdFx0ZWxlbS50eXBlID0gbWF0Y2hbIDEgXTtcblx0fSBlbHNlIHtcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggXCJ0eXBlXCIgKTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHBkYXRhQ3VyLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmFjY2Vzcyggc3JjICk7XG5cdFx0cGRhdGFDdXIgPSBkYXRhUHJpdi5zZXQoIGRlc3QsIHBkYXRhT2xkICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkZWxldGUgcGRhdGFDdXIuaGFuZGxlO1xuXHRcdFx0cGRhdGFDdXIuZXZlbnRzID0ge307XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBjb25jYXQuYXBwbHkoIFtdLCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0aWYgKCBpc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdERPTUV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICksIGRvYyApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoIGVsZW0sIHNlbGVjdG9yLCBrZWVwRGF0YSApIHtcblx0dmFyIG5vZGUsXG5cdFx0bm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBlbGVtICkgOiBlbGVtLFxuXHRcdGkgPSAwO1xuXG5cdGZvciAoIDsgKCBub2RlID0gbm9kZXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdGlmICgga2VlcERhdGEgJiYgalF1ZXJ5LmNvbnRhaW5zKCBub2RlLm93bmVyRG9jdW1lbnQsIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cHM6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XG5cdH0sXG5cblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlnbm9yZWQgPSBbXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIG5vbi1pZ25vcmVkIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cdFx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxuXHRcdH0sIGlnbm9yZWQgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCgge1xuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGVsZW1zLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSApO1xudmFyIHJtYXJnaW4gPSAoIC9ebWFyZ2luLyApO1xuXG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcblxuXHRcdC8vIFRoaXMgaXMgYSBzaW5nbGV0b24sIHdlIG5lZWQgdG8gZXhlY3V0ZSBpdCBvbmx5IG9uY2Vcblx0XHRpZiAoICFkaXYgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJib3gtc2l6aW5nOmJvcmRlci1ib3g7XCIgK1xuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO1wiICtcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXG5cdFx0XHRcInRvcDoxJTt3aWR0aDo1MCVcIjtcblx0XHRkaXYuaW5uZXJIVE1MID0gXCJcIjtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSBkaXZTdHlsZS5tYXJnaW5MZWZ0ID09PSBcIjJweFwiO1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gZGl2U3R5bGUud2lkdGggPT09IFwiNHB4XCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdFx0Ly8gU29tZSBzdHlsZXMgY29tZSBiYWNrIHdpdGggcGVyY2VudGFnZSB2YWx1ZXMsIGV2ZW4gdGhvdWdoIHRoZXkgc2hvdWxkbid0XG5cdFx0ZGl2LnN0eWxlLm1hcmdpblJpZ2h0ID0gXCI1MCVcIjtcblx0XHRwaXhlbE1hcmdpblJpZ2h0VmFsID0gZGl2U3R5bGUubWFyZ2luUmlnaHQgPT09IFwiNHB4XCI7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0Ly8gTnVsbGlmeSB0aGUgZGl2IHNvIGl0IHdvdWxkbid0IGJlIHN0b3JlZCBpbiB0aGUgbWVtb3J5IGFuZFxuXHRcdC8vIGl0IHdpbGwgYWxzbyBiZSBhIHNpZ24gdGhhdCBjaGVja3MgYWxyZWFkeSBwZXJmb3JtZWRcblx0XHRkaXYgPSBudWxsO1xuXHR9XG5cblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBwaXhlbE1hcmdpblJpZ2h0VmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyOjA7d2lkdGg6OHB4O2hlaWdodDowO3RvcDowO2xlZnQ6LTk5OTlweDtcIiArXG5cdFx0XCJwYWRkaW5nOjA7bWFyZ2luLXRvcDoxcHg7cG9zaXRpb246YWJzb2x1dGVcIjtcblx0Y29udGFpbmVyLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxNYXJnaW5SaWdodDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsTWFyZ2luUmlnaHRWYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgb25seSBuZWVkZWQgZm9yIC5jc3MoJ2ZpbHRlcicpICgjMTI1MzcpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggIXN1cHBvcnQucGl4ZWxNYXJnaW5SaWdodCgpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiBybWFyZ2luLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH0sXG5cblx0Y3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlO1xuXG4vLyBSZXR1cm4gYSBjc3MgcHJvcGVydHkgbWFwcGVkIHRvIGEgcG90ZW50aWFsbHkgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBTaG9ydGN1dCBmb3IgbmFtZXMgdGhhdCBhcmUgbm90IHZlbmRvciBwcmVmaXhlZFxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBhdWdtZW50V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEsIGlzQm9yZGVyQm94LCBzdHlsZXMgKSB7XG5cdHZhciBpLFxuXHRcdHZhbCA9IDA7XG5cblx0Ly8gSWYgd2UgYWxyZWFkeSBoYXZlIHRoZSByaWdodCBtZWFzdXJlbWVudCwgYXZvaWQgYXVnbWVudGF0aW9uXG5cdGlmICggZXh0cmEgPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRpID0gNDtcblxuXHQvLyBPdGhlcndpc2UgaW5pdGlhbGl6ZSBmb3IgaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbCBwcm9wZXJ0aWVzXG5cdH0gZWxzZSB7XG5cdFx0aSA9IG5hbWUgPT09IFwid2lkdGhcIiA/IDEgOiAwO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luLCBzbyBhZGQgaXQgaWYgd2Ugd2FudCBpdFxuXHRcdGlmICggZXh0cmEgPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgZXh0cmEgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gYm9yZGVyLWJveCBpbmNsdWRlcyBwYWRkaW5nLCBzbyByZW1vdmUgaXQgaWYgd2Ugd2FudCBjb250ZW50XG5cdFx0XHRpZiAoIGV4dHJhID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBib3JkZXIgbm9yIG1hcmdpbiwgc28gcmVtb3ZlIGJvcmRlclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCwgc28gYWRkIHBhZGRpbmdcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCBub3IgcGFkZGluZywgc28gYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB2YWw7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggb2Zmc2V0IHByb3BlcnR5LCB3aGljaCBpcyBlcXVpdmFsZW50IHRvIHRoZSBib3JkZXItYm94IHZhbHVlXG5cdHZhciB2YWwsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IHRydWUsXG5cdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0aWYgKCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdHZhbCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbIG5hbWUgXTtcblx0fVxuXG5cdC8vIFNvbWUgbm9uLWh0bWwgZWxlbWVudHMgcmV0dXJuIHVuZGVmaW5lZCBmb3Igb2Zmc2V0V2lkdGgsIHNvIGNoZWNrIGZvciBudWxsL3VuZGVmaW5lZFxuXHQvLyBzdmcgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02NDkyODVcblx0Ly8gTWF0aE1MIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NDkxNjY4XG5cdGlmICggdmFsIDw9IDAgfHwgdmFsID09IG51bGwgKSB7XG5cblx0XHQvLyBGYWxsIGJhY2sgdG8gY29tcHV0ZWQgdGhlbiB1bmNvbXB1dGVkIGNzcyBpZiBuZWNlc3Nhcnlcblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdGlmICggdmFsIDwgMCB8fCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdHZhbCA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBDb21wdXRlZCB1bml0IGlzIG5vdCBwaXhlbHMuIFN0b3AgaGVyZSBhbmQgcmV0dXJuLlxuXHRcdGlmICggcm51bW5vbnB4LnRlc3QoIHZhbCApICkge1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cblx0XHQvLyBDaGVjayBmb3Igc3R5bGUgaW4gY2FzZSBhIGJyb3dzZXIgd2hpY2ggcmV0dXJucyB1bnJlbGlhYmxlIHZhbHVlc1xuXHRcdC8vIGZvciBnZXRDb21wdXRlZFN0eWxlIHNpbGVudGx5IGZhbGxzIGJhY2sgdG8gdGhlIHJlbGlhYmxlIGVsZW0uc3R5bGVcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3ggJiZcblx0XHRcdCggc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IHZhbCA9PT0gZWxlbS5zdHlsZVsgbmFtZSBdICk7XG5cblx0XHQvLyBOb3JtYWxpemUgXCJcIiwgYXV0bywgYW5kIHByZXBhcmUgZm9yIGV4dHJhXG5cdFx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblx0fVxuXG5cdC8vIFVzZSB0aGUgYWN0aXZlIGJveC1zaXppbmcgbW9kZWwgdG8gYWRkL3N1YnRyYWN0IGlycmVsZXZhbnQgc3R5bGVzXG5cdHJldHVybiAoIHZhbCArXG5cdFx0YXVnbWVudFdpZHRoT3JIZWlnaHQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0bmFtZSxcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXNcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdHJ1ZSxcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7XG5cdFx0XCJmbG9hdFwiOiBcImNzc0Zsb2F0XCJcblx0fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHRuYW1lID0galF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdIHx8XG5cdFx0XHQoIGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBvcmlnTmFtZSApIHx8IG9yaWdOYW1lICk7XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHxcblx0XHRcdCggalF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG9yaWdOYW1lICkgfHwgb3JpZ05hbWUgKTtcblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrXG5cdFx0XHRcdFx0Ly8gVGFibGUgY29sdW1ucyBpbiBTYWZhcmkgaGF2ZSBub24temVybyBvZmZzZXRXaWR0aCAmIHplcm9cblx0XHRcdFx0XHQvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB1bmxlc3MgZGlzcGxheSBpcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdFx0XHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGVcblx0XHRcdFx0XHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdFx0XHRcdFx0KCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCB8fCAhZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCApID9cblx0XHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0c3R5bGVzID0gZXh0cmEgJiYgZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgJiYgYXVnbWVudFdpZHRoT3JIZWlnaHQoXG5cdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRuYW1lLFxuXHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdCk7XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggIXJtYXJnaW4udGVzdCggcHJlZml4ICkgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIHRpbWVySWQsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gcmFmKCkge1xuXHRpZiAoIHRpbWVySWQgKSB7XG5cdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggcmFmICk7XG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0galF1ZXJ5Lm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0gKSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xuXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0fSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRqUXVlcnkucHJveHkoIHJlc3VsdC5zdG9wLCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHQvLyBhdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRyZXR1cm4gYW5pbWF0aW9uLnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblxuXHR0d2VlbmVyczoge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XG5cdFx0XHRhZGp1c3RDU1MoIHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyggdmFsdWUgKSwgdHdlZW4gKTtcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9IF1cblx0fSxcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHQvLyBHbyB0byB0aGUgZW5kIHN0YXRlIGlmIGZ4IGFyZSBvZmYgb3IgaWYgZG9jdW1lbnQgaXMgaGlkZGVuXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiB8fCBkb2N1bWVudC5oaWRkZW4gKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuV2l0aGluVHJlZSApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICYmIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IGpRdWVyeS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIENoZWNrcyB0aGUgdGltZXIgaGFzIG5vdCBhbHJlYWR5IGJlZW4gcmVtb3ZlZFxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGlmICggdGltZXIoKSApIHtcblx0XHRqUXVlcnkuZnguc3RhcnQoKTtcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkudGltZXJzLnBvcCgpO1xuXHR9XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoICF0aW1lcklkICkge1xuXHRcdHRpbWVySWQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID9cblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHJhZiApIDpcblx0XHRcdHdpbmRvdy5zZXRJbnRlcnZhbCggalF1ZXJ5LmZ4LnRpY2ssIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHR9XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSApIHtcblx0XHR3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoIHRpbWVySWQgKTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xlYXJJbnRlcnZhbCggdGltZXJJZCApO1xuXHR9XG5cblx0dGltZXJJZCA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0alF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZSxcblx0XHRcdGxvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRsb3dlcmNhc2VOYW1lIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE0MTExNjIzMzM0Ny9odHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuLy8gZXNsaW50IHJ1bGUgXCJuby11bnVzZWQtZXhwcmVzc2lvbnNcIiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjb2RlXG4vLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3BcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW5mcmFzdHJ1Y3R1cmUuaHRtbCNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSApIHtcblx0XHRcdGNsYXNzZXMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlICkge1xuXHRcdFx0Y2xhc3NlcyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiB0eXBlID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRcdFx0d2hpbGUgKCAoIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCBpc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhalF1ZXJ5Lm5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cblxuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvO1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxualF1ZXJ5LmVhY2goICggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggaSwgbmFtZSApIHtcblxuXHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxuXG5cblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxuLy8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuLy9cbi8vIFN1cHBvcnQ6IENocm9tZSA8PTQ4IC0gNDksIFNhZmFyaSA8PTkuMCAtIDkuMVxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG4vLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IGpRdWVyeS5ub3coKTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggalF1ZXJ5LmlzQXJyYXkoIG9iaiApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoXG5cdFx0XHRcdFx0cHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiICkgKyBcIl1cIixcblx0XHRcdFx0XHR2LFxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxuXHRcdFx0XHRcdGFkZFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgalF1ZXJ5LnR5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlT3JGdW5jdGlvbiApID9cblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uKCkgOlxuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb247XG5cblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgK1xuXHRcdFx0XHRlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHR9O1xuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggalF1ZXJ5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApXG5cdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKVxuXHRcdC5tYXAoIGZ1bmN0aW9uKCBpLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblx0b3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgXSA9IG1hdGNoWyAyIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBvbiBhY2Nlc3NpbmcgdGhlIGhyZWYgcHJvcGVydHkgaWYgdXJsIGlzIG1hbGZvcm1lZCxcblx0XHRcdC8vIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZSsrICkgKyB1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cdFx0XCJ0aHJvd3NcIjogdHJ1ZVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBpc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxuXHRcdFx0XHRcdFx0XHRcdFx0KCB4aHIucmVzcG9uc2VUeXBlIHx8IFwidGV4dFwiICkgIT09IFwidGV4dFwiICB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IHRleHQ6IHhoci5yZXNwb25zZVRleHQgfSxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2sgPSB4aHIub25lcnJvciA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKS5wcm9wKCB7XG5cdFx0XHRcdFx0Y2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LFxuXHRcdFx0XHRcdHNyYzogcy51cmxcblx0XHRcdFx0fSApLm9uKFxuXHRcdFx0XHRcdFwibG9hZCBlcnJvclwiLFxuXHRcdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZSsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0gKTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0galF1ZXJ5LmlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBqUXVlcnkuaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuXHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2Rcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuXHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG4vLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIGksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9ICkubGVuZ3RoO1xufTtcblxuXG5cblxuLyoqXG4gKiBHZXRzIGEgd2luZG93IGZyb20gYW4gZWxlbWVudFxuICovXG5mdW5jdGlvbiBnZXRXaW5kb3coIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSA/IGVsZW0gOiBlbGVtLm5vZGVUeXBlID09PSA5ICYmIGVsZW0uZGVmYXVsdFZpZXc7XG59XG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciBkb2NFbGVtLCB3aW4sIHJlY3QsIGRvYyxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHQvLyBNYWtlIHN1cmUgZWxlbWVudCBpcyBub3QgaGlkZGVuIChkaXNwbGF5OiBub25lKVxuXHRcdGlmICggcmVjdC53aWR0aCB8fCByZWN0LmhlaWdodCApIHtcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdHdpbiA9IGdldFdpbmRvdyggZG9jICk7XG5cdFx0XHRkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCAtIGRvY0VsZW0uY2xpZW50VG9wLFxuXHRcdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXQgLSBkb2NFbGVtLmNsaWVudExlZnRcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHRyZXR1cm4gcmVjdDtcblx0fSxcblxuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gRml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHdpbmRvdyAocGFyZW50T2Zmc2V0ID0ge3RvcDowLCBsZWZ0OiAwfSxcblx0XHQvLyBiZWNhdXNlIGl0IGlzIGl0cyBvbmx5IG9mZnNldCBwYXJlbnRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaXMgdGhlcmUgd2hlbiBjb21wdXRlZCBwb3NpdGlvbiBpcyBmaXhlZFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEdldCAqcmVhbCogb2Zmc2V0UGFyZW50XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCgpO1xuXG5cdFx0XHQvLyBHZXQgY29ycmVjdCBvZmZzZXRzXG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXHRcdFx0aWYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJodG1sXCIgKSApIHtcblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0gb2Zmc2V0UGFyZW50Lm9mZnNldCgpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb2Zmc2V0UGFyZW50IGJvcmRlcnNcblx0XHRcdHBhcmVudE9mZnNldCA9IHtcblx0XHRcdFx0dG9wOiBwYXJlbnRPZmZzZXQudG9wICsgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApLFxuXHRcdFx0XHRsZWZ0OiBwYXJlbnRPZmZzZXQubGVmdCArIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlIClcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cdFx0XHR2YXIgd2luID0gZ2V0V2luZG93KCBlbGVtICk7XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xuXG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcbn1cblxuXG5cblxudmFyXG5cblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxuLy8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuaWYgKCAhbm9HbG9iYWwgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xufSApO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgZmFjdG9yeSByZXR1cm5pbmcgYSBmdW5jdGlvbiB0aGF0IGNvbnZlcnRzIGEgZ2l2ZW4gc3RyaW5nIHRvIG4tZ3JhbXMuXG4gKlxuICogQGV4YW1wbGVcbiAqICAgbkdyYW0oMikgLy8gW0Z1bmN0aW9uXVxuICpcbiAqIEBleGFtcGxlXG4gKiAgIG5HcmFtKDQpIC8vIFtGdW5jdGlvbl1cbiAqXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IG4gLSBUaGUgYG5gIGluIG4tZ3JhbS5cbiAqIEB0aHJvd3Mge0Vycm9yfSBXaGVuIGBuYCBpcyBub3QgYSBudW1iZXIgKGluY2wuIE5hTiksIEluZmluaXR5LCBvciBsdCAxLlxuICogQHJldHVybiB7RnVuY3Rpb259IEEgZnVuY3Rpb24gY3JlYXRpbmcgbi1ncmFtcyBmcm9tIGEgZ2l2ZW4gdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG5HcmFtKG4pIHtcbiAgICBpZiAoXG4gICAgICAgIHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fFxuICAgICAgICBuIDwgMSB8fFxuICAgICAgICBuICE9PSBuIHx8XG4gICAgICAgIG4gPT09IEluZmluaXR5XG4gICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICdUeXBlIGVycm9yOiBgJyArIG4gKyAnYCBpcyBub3QgYSB2YWxpZCBhcmd1bWVudCBmb3Igbi1ncmFtJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qXG4gICAgICogQ3JlYXRlIG4tZ3JhbXMgZnJvbSBhIGdpdmVuIHZhbHVlLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgIG5HcmFtKDQpKCduLWdyYW0nKVxuICAgICAqICAgLy8gWyduLWdyJywgJy1ncmEnLCAnZ3JhbSddXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIHN0cmluZ2lmeSBhbmQgY29udmVydCBpbnRvIG4tZ3JhbXMuXG4gICAgICogQHJldHVybiB7QXJyYXkuPHN0cmluZz59IG4tZ3JhbXNcbiAgICAgKi9cblxuICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIG5HcmFtcyxcbiAgICAgICAgICAgIGluZGV4O1xuXG4gICAgICAgIG5HcmFtcyA9IFtdO1xuXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbkdyYW1zO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpO1xuXG4gICAgICAgIGluZGV4ID0gdmFsdWUubGVuZ3RoIC0gbiArIDE7XG5cbiAgICAgICAgaWYgKGluZGV4IDwgMSkge1xuICAgICAgICAgICAgcmV0dXJuIG5HcmFtcztcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgICBuR3JhbXNbaW5kZXhdID0gdmFsdWUuc3Vic3RyKGluZGV4LCBuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuR3JhbXM7XG4gICAgfTtcbn1cblxuLypcbiAqIEV4cG9ydCBgbi1ncmFtYC5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5HcmFtO1xuXG4vKlxuICogQ3JlYXRlIGJpZ3JhbXMgZnJvbSBhIGdpdmVuIHZhbHVlLlxuICpcbiAqIEBleGFtcGxlXG4gKiAgIGJpZ3JhbSgnbi1ncmFtJylcbiAqICAgLy8gW1wibi1cIiwgXCItZ1wiLCBcImdyXCIsIFwicmFcIiwgXCJhbVwiXVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gc3RyaW5naWZ5IGFuZCBjb252ZXJ0IGludG8gYmlncmFtcy5cbiAqIEByZXR1cm4ge0FycmF5LjxzdHJpbmc+fSBiaWdyYW1zXG4gKi9cblxubkdyYW0uYmlncmFtID0gbkdyYW0oMik7XG5cbi8qXG4gKiBDcmVhdGUgdHJpZ3JhbXMgZnJvbSBhIGdpdmVuIHZhbHVlLlxuICpcbiAqIEBleGFtcGxlXG4gKiAgIHRyaWdyYW0oJ24tZ3JhbScpXG4gKiAgIC8vIFtcIm4tZ1wiLCBcIi1nclwiLCBcImdyYVwiLCBcInJhbVwiXVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gc3RyaW5naWZ5IGFuZCBjb252ZXJ0IGludG8gdHJpZ3JhbXMuXG4gKiBAcmV0dXJuIHtBcnJheS48c3RyaW5nPn0gdHJpZ3JhbXNcbiAqL1xuXG5uR3JhbS50cmlncmFtID0gbkdyYW0oMyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBnZXRUcmlncmFtcyxcbiAgICBFWFBSRVNTSU9OX1NZTUJPTFMsXG4gICAgaGFzO1xuXG4vKipcbiAqIERlcGVuZGVuY2llcy5cbiAqL1xuXG5nZXRUcmlncmFtcyA9IHJlcXVpcmUoJ24tZ3JhbScpLnRyaWdyYW07XG5cbi8qKlxuICogQ2FjaGUuXG4gKi9cblxuaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBbiBleHByZXNzaW9uIG1hdGNoaW5nIGdlbmVyYWwgbm9uLWltcG9ydGFudCAoYXMgaW4sIGZvclxuICogbGFuZ3VhZ2UgZGV0ZWN0aW9uKSBwdW5jdHVhdGlvbiBtYXJrcywgc3ltYm9scywgYW5kIG51bWJlcnMuXG4gKlxuICogfCBVbmljb2RlIHwgQ2hhcmFjdGVyIHwgTmFtZSAgICAgICAgICAgICAgIHxcbiAqIHwgLS0tLS0tOiB8IDotLS0tLS0tOiB8IDotLS0tLS0tLS0tLS0tLS0tLSB8XG4gKiB8ICBcXHUwMDIxIHwgICAgICEgICAgIHwgRVhDTEFNQVRJT04gTUFSSyAgIHxcbiAqIHwgIFxcdTAwMjIgfCAgICAgXCIgICAgIHwgUVVPVEFUSU9OIE1BUksgICAgIHxcbiAqIHwgIFxcdTAwMjMgfCAgICAgIyAgICAgfCBOVU1CRVIgU0lHTiAgICAgICAgfFxuICogfCAgXFx1MDAyNCB8ICAgICAkICAgICB8IERPTExBUiBTSUdOICAgICAgICB8XG4gKiB8ICBcXHUwMDI1IHwgICAgICUgICAgIHwgUEVSQ0VOVCBTSUdOICAgICAgIHxcbiAqIHwgIFxcdTAwMjYgfCAgICAgJiAgICAgfCBBTVBFUlNBTkQgICAgICAgICAgfFxuICogfCAgXFx1MDAyNyB8ICAgICAnICAgICB8IEFQT1NUUk9QSEUgICAgICAgICB8XG4gKiB8ICBcXHUwMDI4IHwgICAgICggICAgIHwgTEVGVCBQQVJFTlRIRVNJUyAgIHxcbiAqIHwgIFxcdTAwMjkgfCAgICAgKSAgICAgfCBSSUdIVCBQQVJFTlRIRVNJUyAgfFxuICogfCAgXFx1MDAyQSB8ICAgICAqICAgICB8IEFTVEVSSVNLICAgICAgICAgICB8XG4gKiB8ICBcXHUwMDJCIHwgICAgICsgICAgIHwgUExVUyBTSUdOICAgICAgICAgIHxcbiAqIHwgIFxcdTAwMkMgfCAgICAgLCAgICAgfCBDT01NQSAgICAgICAgICAgICAgfFxuICogfCAgXFx1MDAyRCB8ICAgICAtICAgICB8IEhZUEhFTi1NSU5VUyAgICAgICB8XG4gKiB8ICBcXHUwMDJFIHwgICAgIC4gICAgIHwgRlVMTCBTVE9QICAgICAgICAgIHxcbiAqIHwgIFxcdTAwMkYgfCAgICAgLyAgICAgfCBTT0xJRFVTICAgICAgICAgICAgfFxuICogfCAgXFx1MDAzMCB8ICAgICAwICAgICB8IERJR0lUIFpFUk8gICAgICAgICB8XG4gKiB8ICBcXHUwMDMxIHwgICAgIDEgICAgIHwgRElHSVQgT05FICAgICAgICAgIHxcbiAqIHwgIFxcdTAwMzIgfCAgICAgMiAgICAgfCBESUdJVCBUV08gICAgICAgICAgfFxuICogfCAgXFx1MDAzMyB8ICAgICAzICAgICB8IERJR0lUIFRIUkVFICAgICAgICB8XG4gKiB8ICBcXHUwMDM0IHwgICAgIDQgICAgIHwgRElHSVQgRk9VUiAgICAgICAgIHxcbiAqIHwgIFxcdTAwMzUgfCAgICAgNSAgICAgfCBESUdJVCBGSVZFICAgICAgICAgfFxuICogfCAgXFx1MDAzNiB8ICAgICA2ICAgICB8IERJR0lUIFNJWCAgICAgICAgICB8XG4gKiB8ICBcXHUwMDM3IHwgICAgIDcgICAgIHwgRElHSVQgU0VWRU4gICAgICAgIHxcbiAqIHwgIFxcdTAwMzggfCAgICAgOCAgICAgfCBESUdJVCBFSUdIVCAgICAgICAgfFxuICogfCAgXFx1MDAzOSB8ICAgICA5ICAgICB8IERJR0lUIE5JTkUgICAgICAgICB8XG4gKiB8ICBcXHUwMDNBIHwgICAgIDogICAgIHwgQ09MT04gICAgICAgICAgICAgIHxcbiAqIHwgIFxcdTAwM0IgfCAgICAgOyAgICAgfCBTRU1JQ09MT04gICAgICAgICAgfFxuICogfCAgXFx1MDAzQyB8ICAgICA8ICAgICB8IExFU1MtVEhBTiBTSUdOICAgICB8XG4gKiB8ICBcXHUwMDNEIHwgICAgID0gICAgIHwgRVFVQUxTIFNJR04gICAgICAgIHxcbiAqIHwgIFxcdTAwM0UgfCAgICAgPiAgICAgfCBHUkVBVEVSLVRIQU4gU0lHTiAgfFxuICogfCAgXFx1MDAzRiB8ICAgICA/ICAgICB8IFFVRVNUSU9OIE1BUksgICAgICB8XG4gKiB8ICBcXHUwMDQwIHwgICAgIEAgICAgIHwgQ09NTUVSQ0lBTCBBVCAgICAgIHxcbiAqL1xuXG5FWFBSRVNTSU9OX1NZTUJPTFMgPSAvW1xcdTAwMjEtXFx1MDA0MF0rL2c7XG5cbi8qKlxuICogQ2xlYW4gYHZhbHVlYC5cbiAqXG4gKiBAZXhhbXBsZVxuICogICA+IGNsZWFuKCdTb21lIGRpcnR5ICB0ZXh0LicpXG4gKiAgIC8vICdzb21lIGRpcnR5IHRleHQnXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cblxuZnVuY3Rpb24gY2xlYW4odmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YWx1ZSA9ICcnO1xuICAgIH1cblxuICAgIHJldHVybiBTdHJpbmcodmFsdWUpXG4gICAgICAgIC5yZXBsYWNlKEVYUFJFU1NJT05fU1lNQk9MUywgJyAnKVxuICAgICAgICAucmVwbGFjZSgvXFxzKy9nLCAnICcpXG4gICAgICAgIC50cmltKClcbiAgICAgICAgLnRvTG93ZXJDYXNlKCk7XG59XG5cbi8qKlxuICogRGVlcCByZWd1bGFyIHNvcnQgb24gaXRlbSBhdCBgMWAgaW4gYm90aCBgT2JqZWN0YHMuXG4gKlxuICogQGV4YW1wbGVcbiAqICAgPiBbWzAsIDIwXSwgWzAsIDFdLCBbMCwgNV1dLnNvcnQoc29ydCk7XG4gKiAgIC8vIFtbMCwgMV0sIFswLCA1XSwgWzAsIDIwXV1cbiAqXG4gKiBAcGFyYW0ge3sxOiBudW1iZXJ9fSBhXG4gKiBAcGFyYW0ge3sxOiBudW1iZXJ9fSBiXG4gKi9cblxuZnVuY3Rpb24gc29ydChhLCBiKSB7XG4gICAgcmV0dXJuIGFbMV0gLSBiWzFdO1xufVxuXG4vKipcbiAqIEdldCBjbGVhbiwgcGFkZGVkLCB0cmlncmFtcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge0FycmF5LjxzdHJpbmc+fVxuICovXG5cbmZ1bmN0aW9uIGdldENsZWFuVHJpZ3JhbXModmFsdWUpIHtcbiAgICByZXR1cm4gZ2V0VHJpZ3JhbXMoJyAnICsgY2xlYW4odmFsdWUpICsgJyAnKTtcbn1cblxuLyoqXG4gKiBHZXQgYW4gYE9iamVjdGAgd2l0aCB0cmlncmFtcyBhcyBpdHMgYXR0cmlidXRlcywgYW5kXG4gKiB0aGVpciBvY2N1cmVuY2UgY291bnQgYXMgdGhlaXIgdmFsdWVzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtPYmplY3QuPHN0cmluZywgbnVtYmVyPn0gLSBgT2JqZWN0YCBjb250YWluaW5nXG4gKiAgIHdlaWdodGVkIHRyaWdyYW1zLlxuICovXG5cbmZ1bmN0aW9uIGdldENsZWFuVHJpZ3JhbXNBc0RpY3Rpb25hcnkodmFsdWUpIHtcbiAgICB2YXIgdHJpZ3JhbXMsXG4gICAgICAgIGRpY3Rpb25hcnksXG4gICAgICAgIGluZGV4LFxuICAgICAgICB0cmlncmFtO1xuXG4gICAgdHJpZ3JhbXMgPSBnZXRDbGVhblRyaWdyYW1zKHZhbHVlKTtcbiAgICBkaWN0aW9uYXJ5ID0ge307XG4gICAgaW5kZXggPSB0cmlncmFtcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB0cmlncmFtID0gdHJpZ3JhbXNbaW5kZXhdO1xuXG4gICAgICAgIGlmIChoYXMuY2FsbChkaWN0aW9uYXJ5LCB0cmlncmFtKSkge1xuICAgICAgICAgICAgZGljdGlvbmFyeVt0cmlncmFtXSsrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGljdGlvbmFyeVt0cmlncmFtXSA9IDE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGljdGlvbmFyeTtcbn1cblxuLyoqXG4gKiBHZXQgYW4gYEFycmF5YCBjb250YWluaW5nIHRyaWdyYW0tLWNvdW50IHR1cGxlcyBmcm9tIGFcbiAqIGdpdmVuIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7QXJyYXkuPEFycmF5LjxzdHJpbmcsIG51bWJlcj4+fSBgQXJyYXlgXG4gKiAgIGNvbnRhaW5pbmcgdHJpZ3JhbS0tY291bnQgdHVwcGxlcywgc29ydGVkIGJ5XG4gKiAgIGNvdW50IChsb3cgdG8gaGlnaCkuXG4gKi9cblxuZnVuY3Rpb24gZ2V0Q2xlYW5UcmlncmFtc0FzVHVwbGVzKHZhbHVlKSB7XG4gICAgdmFyIGRpY3Rpb25hcnksXG4gICAgICAgIHR1cGxlcyxcbiAgICAgICAgdHJpZ3JhbTtcblxuICAgIGRpY3Rpb25hcnkgPSBnZXRDbGVhblRyaWdyYW1zQXNEaWN0aW9uYXJ5KHZhbHVlKTtcbiAgICB0dXBsZXMgPSBbXTtcblxuICAgIGZvciAodHJpZ3JhbSBpbiBkaWN0aW9uYXJ5KSB7XG4gICAgICAgIHR1cGxlcy5wdXNoKFt0cmlncmFtLCBkaWN0aW9uYXJ5W3RyaWdyYW1dXSk7XG4gICAgfVxuXG4gICAgdHVwbGVzLnNvcnQoc29ydCk7XG5cbiAgICByZXR1cm4gdHVwbGVzO1xufVxuXG4vKipcbiAqIEdldCBhbiBgQXJyYXlgIGNvbnRhaW5pbmcgdHJpZ3JhbS0tY291bnQgdHVwbGVzIGZyb20gYVxuICogZ2l2ZW4gdmFsdWUuXG4gKlxuICogQHBhcmFtIHtBcnJheS48QXJyYXkuPHN0cmluZywgbnVtYmVyPj59IHR1cGxlcyAtIFR1cGxlc1xuICogICB0byB0cmFuc2Zvcm0gaW50byBhIGRpY3Rpb25hcnkuXG4gKiBAcmV0dXJuIHtPYmplY3QuPHN0cmluZywgbnVtYmVyPn1cbiAqL1xuXG5mdW5jdGlvbiBnZXRDbGVhblRyaWdyYW1UdXBsZXNBc0RpY3Rpb25hcnkodHVwbGVzKSB7XG4gICAgdmFyIGRpY3Rpb25hcnksXG4gICAgICAgIGluZGV4LFxuICAgICAgICB0dXBsZTtcblxuICAgIGRpY3Rpb25hcnkgPSB7fTtcbiAgICBpbmRleCA9IHR1cGxlcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB0dXBsZSA9IHR1cGxlc1tpbmRleF07XG4gICAgICAgIGRpY3Rpb25hcnlbdHVwbGVbMF1dID0gdHVwbGVbMV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGRpY3Rpb25hcnk7XG59XG5cbi8qKlxuICogRXhwb3NlIHV0aWxpdGllcy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAnY2xlYW4nOiBjbGVhbixcbiAgICAndHJpZ3JhbXMnOiBnZXRDbGVhblRyaWdyYW1zLFxuICAgICdhc0RpY3Rpb25hcnknOiBnZXRDbGVhblRyaWdyYW1zQXNEaWN0aW9uYXJ5LFxuICAgICdhc1R1cGxlcyc6IGdldENsZWFuVHJpZ3JhbXNBc1R1cGxlcyxcbiAgICAndHVwbGVzQXNEaWN0aW9uYXJ5JzogZ2V0Q2xlYW5UcmlncmFtVHVwbGVzQXNEaWN0aW9uYXJ5XG59O1xuIiwiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjYuM1xudmFyIGRlZXBDbG9uZSwgZGVlcERlbGV0ZSwgZGVlcEV4dGVuZCwgZGVlcEZyb21GbGF0LCBkZWVwS2V5cywgZGVlcE1hcFZhbHVlcywgaXNQbGFpbk9iamVjdCwgbWFwS2V5cywgbWFwVmFsdWVzLCBfO1xuXG5fID0gcmVxdWlyZSgndW5kZXJzY29yZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVlcEtleXM6IGRlZXBLZXlzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KG9iaikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImRlZXBLZXlzIG11c3QgYmUgY2FsbGVkIG9uIGFuIG9iamVjdCwgbm90ICdcIiArIG9iaiArIFwiJ1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIF8uZmxhdHRlbihfLm1hcChvYmosIGZ1bmN0aW9uKHYsIGspIHtcbiAgICAgIGlmIChpc1BsYWluT2JqZWN0KHYpICYmICFfLmlzRW1wdHkodikpIHtcbiAgICAgICAgcmV0dXJuIF8ubWFwKGRlZXBLZXlzKHYpLCBmdW5jdGlvbihzdWJrZXkpIHtcbiAgICAgICAgICByZXR1cm4gXCJcIiArIGsgKyBcIi5cIiArIHN1YmtleTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gW2tdO1xuICAgICAgfVxuICAgIH0pKTtcbiAgfSxcbiAgZGVlcENsb25lOiBkZWVwQ2xvbmUgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIgdHlwZSwgX2ksIF9sZW4sIF9yZWY7XG4gICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cbiAgICBfcmVmID0gW0RhdGUsIE51bWJlciwgU3RyaW5nLCBCb29sZWFuXTtcbiAgICBmb3IgKF9pID0gMCwgX2xlbiA9IF9yZWYubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgIHR5cGUgPSBfcmVmW19pXTtcbiAgICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiB0eXBlKSB7XG4gICAgICAgIHJldHVybiBuZXcgdHlwZShvYmplY3QpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoXyhvYmplY3QpLmlzQXJyYXkoKSkge1xuICAgICAgcmV0dXJuIF8ob2JqZWN0KS5tYXAoZGVlcENsb25lKTtcbiAgICB9XG4gICAgaWYgKCFfKG9iamVjdCkuaXNPYmplY3QoKSkge1xuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG4gICAgaWYgKG9iamVjdC5ub2RlVHlwZSAmJiBfKG9iamVjdC5jbG9uZU5vZGUpLmlzRnVuY3Rpb24oKSkge1xuICAgICAgcmV0dXJuIG9iamVjdC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgfVxuICAgIGlmIChvYmplY3QuY29uc3RydWN0b3IgIT09IHt9LmNvbnN0cnVjdG9yKSB7XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cbiAgICByZXR1cm4gbWFwVmFsdWVzKG9iamVjdCwgZGVlcENsb25lKTtcbiAgfSxcbiAgZGVlcEhhczogZnVuY3Rpb24ob2JqLCBrZXlzKSB7XG4gICAgdmFyIGhlbHBlcjtcbiAgICBoZWxwZXIgPSBmdW5jdGlvbihvYmosIGtleXMpIHtcbiAgICAgIGlmICgoa2V5cy5sZW5ndGggPT09IDApIHx8ICghXy5pc09iamVjdChvYmopKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKGtleXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBfLmZpcnN0KGtleXMpIGluIG9iajtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBoZWxwZXIob2JqW18uZmlyc3Qoa2V5cyldLCBfLnJlc3Qoa2V5cykpO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIGhlbHBlcihvYmosIF8uaXNBcnJheShrZXlzKSA/IGtleXMgOiBrZXlzLnNwbGl0KCcuJykpO1xuICB9LFxuICBkZWVwT21pdDogZnVuY3Rpb24ob2JqLCBrZXlzKSB7XG4gICAgdmFyIGRlZXBPbWl0T25lO1xuICAgIGlmICghaXNQbGFpbk9iamVjdChvYmopKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJkZWVwT21pdCBtdXN0IGJlIGNhbGxlZCBvbiBhbiBvYmplY3QsIG5vdCAnXCIgKyBvYmogKyBcIidcIik7XG4gICAgfVxuICAgIGRlZXBPbWl0T25lID0gZnVuY3Rpb24ob2JqLCBrZXkpIHtcbiAgICAgIHZhciBoZWxwZXI7XG4gICAgICBoZWxwZXIgPSBmdW5jdGlvbihvYmosIGtleV9hcnIpIHtcbiAgICAgICAgc3dpdGNoIChmYWxzZSkge1xuICAgICAgICAgIGNhc2UgIV8uaXNFbXB0eShrZXlfYXJyKTpcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgICAgY2FzZSBrZXlfYXJyLmxlbmd0aCAhPT0gMTpcbiAgICAgICAgICAgIHJldHVybiBfLm9taXQob2JqLCBfLmZpcnN0KGtleV9hcnIpKTtcbiAgICAgICAgICBjYXNlICEhaXNQbGFpbk9iamVjdChvYmpbXy5maXJzdChrZXlfYXJyKV0pOlxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIF8uZXh0ZW5kKHt9LCBvYmosIF8ub2JqZWN0KFtfLmZpcnN0KGtleV9hcnIpXSwgW2hlbHBlcihvYmpbXy5maXJzdChrZXlfYXJyKV0sIF8ucmVzdChrZXlfYXJyKSldKSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICByZXR1cm4gaGVscGVyKG9iaiwga2V5LnNwbGl0KCcuJykpO1xuICAgIH07XG4gICAgcmV0dXJuIF8ucmVkdWNlKGtleXMsIGRlZXBPbWl0T25lLCBvYmopO1xuICB9LFxuICBkZWVwUGljazogKGZ1bmN0aW9uKCkge1xuICAgIHZhciBkZWVwR2V0O1xuICAgIGRlZXBHZXQgPSBmdW5jdGlvbihvYmosIGtleSkge1xuICAgICAgdmFyIGhlbHBlcjtcbiAgICAgIGhlbHBlciA9IGZ1bmN0aW9uKG9iaiwga2V5X2Fycikge1xuICAgICAgICBpZiAoa2V5X2Fyci5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICByZXR1cm4gb2JqICE9IG51bGwgPyBvYmpbXy5maXJzdChrZXlfYXJyKV0gOiB2b2lkIDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGhlbHBlcihvYmpbXy5maXJzdChrZXlfYXJyKV0sIF8ucmVzdChrZXlfYXJyKSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICByZXR1cm4gaGVscGVyKG9iaiwga2V5LnNwbGl0KCcuJykpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaiwga2V5cykge1xuICAgICAgdmFyIGZsYXRfbmV3X29iajtcbiAgICAgIGlmICghaXNQbGFpbk9iamVjdChvYmopKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImRlZXBQaWNrIG11c3QgYmUgY2FsbGVkIG9uIGFuIG9iamVjdCwgbm90ICdcIiArIG9iaiArIFwiJ1wiKTtcbiAgICAgIH1cbiAgICAgIGZsYXRfbmV3X29iaiA9IF8ucmVkdWNlKGtleXMsIGZ1bmN0aW9uKG5ld19vYmosIGtleSkge1xuICAgICAgICB2YXIgdmFsO1xuICAgICAgICB2YWwgPSBkZWVwR2V0KG9iaiwga2V5KTtcbiAgICAgICAgaWYgKHZhbCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgbmV3X29ialtrZXldID0gdmFsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdfb2JqO1xuICAgICAgfSwge30pO1xuICAgICAgcmV0dXJuIGRlZXBGcm9tRmxhdChmbGF0X25ld19vYmopO1xuICAgIH07XG4gIH0pKCksXG4gIGRlZXBEZWxldGU6IGRlZXBEZWxldGUgPSBmdW5jdGlvbihvYmosIGtleSkge1xuICAgIGlmICgoa2V5ID09IG51bGwpIHx8IChvYmogPT0gbnVsbCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFfKGtleSkuaXNBcnJheSgpKSB7XG4gICAgICBrZXkgPSBrZXkuc3BsaXQoJy4nKTtcbiAgICB9XG4gICAgaWYgKGtleS5sZW5ndGggPT09IDEpIHtcbiAgICAgIGRlbGV0ZSBvYmpba2V5XTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIGRlZXBEZWxldGUob2JqW2tleVswXV0sIGtleS5zbGljZSgxLCBrZXkubGVuZ3RoKSk7XG4gIH0sXG4gIGRlZXBFeHRlbmQ6IGRlZXBFeHRlbmQgPSBmdW5jdGlvbihvYmosIGV4dCwgbXV0YXRlKSB7XG4gICAgcmV0dXJuIF8ucmVkdWNlKGV4dCwgZnVuY3Rpb24oYWNjLCB2YWwsIGtleSkge1xuICAgICAgYWNjW2tleV0gPSAoa2V5IGluIG9iaikgJiYgaXNQbGFpbk9iamVjdChvYmpba2V5XSkgJiYgaXNQbGFpbk9iamVjdCh2YWwpID8gZGVlcEV4dGVuZChvYmpba2V5XSwgdmFsKSA6IHZhbDtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgbXV0YXRlID8gb2JqIDogXy5jbG9uZShvYmopKTtcbiAgfSxcbiAgaXNQbGFpbk9iamVjdDogaXNQbGFpbk9iamVjdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSAhPSBudWxsID8gdmFsdWUuY29uc3RydWN0b3IgOiB2b2lkIDApID09PSB7fS5jb25zdHJ1Y3RvcjtcbiAgfSxcbiAgZGVlcFRvRmxhdDogZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIHJlY3Vyc2UsIHJlcztcbiAgICByZXMgPSB7fTtcbiAgICByZWN1cnNlID0gZnVuY3Rpb24ob2JqLCBjdXJyZW50KSB7XG4gICAgICB2YXIga2V5LCBuZXdLZXksIHZhbHVlLCBfcmVzdWx0cztcbiAgICAgIF9yZXN1bHRzID0gW107XG4gICAgICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICAgICAgdmFsdWUgPSBvYmpba2V5XTtcbiAgICAgICAgbmV3S2V5ID0gKGN1cnJlbnQgPyBjdXJyZW50ICsgXCIuXCIgKyBrZXkgOiBrZXkpO1xuICAgICAgICBpZiAodmFsdWUgJiYgaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgICBfcmVzdWx0cy5wdXNoKHJlY3Vyc2UodmFsdWUsIG5ld0tleSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF9yZXN1bHRzLnB1c2gocmVzW25ld0tleV0gPSB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBfcmVzdWx0cztcbiAgICB9O1xuICAgIHJlY3Vyc2Uob2JqKTtcbiAgICByZXR1cm4gcmVzO1xuICB9LFxuICBkZWVwRnJvbUZsYXQ6IGRlZXBGcm9tRmxhdCA9IGZ1bmN0aW9uKG8pIHtcbiAgICB2YXIgaywga2V5LCBvbywgcGFydCwgcGFydHMsIHQ7XG4gICAgb28gPSB7fTtcbiAgICB0ID0gdm9pZCAwO1xuICAgIHBhcnRzID0gdm9pZCAwO1xuICAgIHBhcnQgPSB2b2lkIDA7XG4gICAgZm9yIChrIGluIG8pIHtcbiAgICAgIHQgPSBvbztcbiAgICAgIHBhcnRzID0gay5zcGxpdChcIi5cIik7XG4gICAgICBrZXkgPSBwYXJ0cy5wb3AoKTtcbiAgICAgIHdoaWxlIChwYXJ0cy5sZW5ndGgpIHtcbiAgICAgICAgcGFydCA9IHBhcnRzLnNoaWZ0KCk7XG4gICAgICAgIHQgPSB0W3BhcnRdID0gdFtwYXJ0XSB8fCB7fTtcbiAgICAgIH1cbiAgICAgIHRba2V5XSA9IG9ba107XG4gICAgfVxuICAgIHJldHVybiBvbztcbiAgfSxcbiAgbWFwVmFsdWVzOiBtYXBWYWx1ZXMgPSBmdW5jdGlvbihvYmosIGZfdmFsKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KG9iaikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIm1hcFZhbHVlcyBtdXN0IGJlIGNhbGxlZCBvbiBhbiBvYmplY3QsIG5vdCAnXCIgKyBvYmogKyBcIidcIik7XG4gICAgfVxuICAgIHJldHVybiBfLm9iamVjdChfLmtleXMob2JqKSwgXy5tYXAob2JqLCBmX3ZhbCkpO1xuICB9LFxuICBkZWVwTWFwVmFsdWVzOiBkZWVwTWFwVmFsdWVzID0gZnVuY3Rpb24ob2JqLCBmKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KG9iaikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImRlZXBNYXBWYWx1ZXMgbXVzdCBiZSBjYWxsZWQgb24gYW4gb2JqZWN0LCBub3QgJ1wiICsgb2JqICsgXCInXCIpO1xuICAgIH1cbiAgICByZXR1cm4gbWFwVmFsdWVzKG9iaiwgZnVuY3Rpb24odiwgaykge1xuICAgICAgaWYgKGlzUGxhaW5PYmplY3QodikpIHtcbiAgICAgICAgcmV0dXJuIGRlZXBNYXBWYWx1ZXModiwgZnVuY3Rpb24oc3Vidiwgc3Viaykge1xuICAgICAgICAgIHJldHVybiBmKHN1YnYsIFwiXCIgKyBrICsgXCIuXCIgKyBzdWJrKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZih2LCBrKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgbWFwS2V5czogbWFwS2V5cyA9IGZ1bmN0aW9uKG9iaiwgZl92YWwpIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3Qob2JqKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwibWFwS2V5cyBtdXN0IGJlIGNhbGxlZCBvbiBhbiBvYmplY3QsIG5vdCAnXCIgKyBvYmogKyBcIidcIik7XG4gICAgfVxuICAgIHJldHVybiBfLm9iamVjdChfLm1hcChvYmosIGZ1bmN0aW9uKHYsIGspIHtcbiAgICAgIHJldHVybiBmX3ZhbChrLCB2KTtcbiAgICB9KSwgXy52YWx1ZXMob2JqKSk7XG4gIH1cbn07XG4iLCIvLyAgICAgVW5kZXJzY29yZS5qcyAxLjcuMFxuLy8gICAgIGh0dHA6Ly91bmRlcnNjb3JlanMub3JnXG4vLyAgICAgKGMpIDIwMDktMjAxNCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuLy8gICAgIFVuZGVyc2NvcmUgbWF5IGJlIGZyZWVseSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5cbihmdW5jdGlvbigpIHtcblxuICAvLyBCYXNlbGluZSBzZXR1cFxuICAvLyAtLS0tLS0tLS0tLS0tLVxuXG4gIC8vIEVzdGFibGlzaCB0aGUgcm9vdCBvYmplY3QsIGB3aW5kb3dgIGluIHRoZSBicm93c2VyLCBvciBgZXhwb3J0c2Agb24gdGhlIHNlcnZlci5cbiAgdmFyIHJvb3QgPSB0aGlzO1xuXG4gIC8vIFNhdmUgdGhlIHByZXZpb3VzIHZhbHVlIG9mIHRoZSBgX2AgdmFyaWFibGUuXG4gIHZhciBwcmV2aW91c1VuZGVyc2NvcmUgPSByb290Ll87XG5cbiAgLy8gU2F2ZSBieXRlcyBpbiB0aGUgbWluaWZpZWQgKGJ1dCBub3QgZ3ppcHBlZCkgdmVyc2lvbjpcbiAgdmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsIE9ialByb3RvID0gT2JqZWN0LnByb3RvdHlwZSwgRnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4gIC8vIENyZWF0ZSBxdWljayByZWZlcmVuY2UgdmFyaWFibGVzIGZvciBzcGVlZCBhY2Nlc3MgdG8gY29yZSBwcm90b3R5cGVzLlxuICB2YXJcbiAgICBwdXNoICAgICAgICAgICAgID0gQXJyYXlQcm90by5wdXNoLFxuICAgIHNsaWNlICAgICAgICAgICAgPSBBcnJheVByb3RvLnNsaWNlLFxuICAgIGNvbmNhdCAgICAgICAgICAgPSBBcnJheVByb3RvLmNvbmNhdCxcbiAgICB0b1N0cmluZyAgICAgICAgID0gT2JqUHJvdG8udG9TdHJpbmcsXG4gICAgaGFzT3duUHJvcGVydHkgICA9IE9ialByb3RvLmhhc093blByb3BlcnR5O1xuXG4gIC8vIEFsbCAqKkVDTUFTY3JpcHQgNSoqIG5hdGl2ZSBmdW5jdGlvbiBpbXBsZW1lbnRhdGlvbnMgdGhhdCB3ZSBob3BlIHRvIHVzZVxuICAvLyBhcmUgZGVjbGFyZWQgaGVyZS5cbiAgdmFyXG4gICAgbmF0aXZlSXNBcnJheSAgICAgID0gQXJyYXkuaXNBcnJheSxcbiAgICBuYXRpdmVLZXlzICAgICAgICAgPSBPYmplY3Qua2V5cyxcbiAgICBuYXRpdmVCaW5kICAgICAgICAgPSBGdW5jUHJvdG8uYmluZDtcblxuICAvLyBDcmVhdGUgYSBzYWZlIHJlZmVyZW5jZSB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QgZm9yIHVzZSBiZWxvdy5cbiAgdmFyIF8gPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAob2JqIGluc3RhbmNlb2YgXykgcmV0dXJuIG9iajtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgXykpIHJldHVybiBuZXcgXyhvYmopO1xuICAgIHRoaXMuX3dyYXBwZWQgPSBvYmo7XG4gIH07XG5cbiAgLy8gRXhwb3J0IHRoZSBVbmRlcnNjb3JlIG9iamVjdCBmb3IgKipOb2RlLmpzKiosIHdpdGhcbiAgLy8gYmFja3dhcmRzLWNvbXBhdGliaWxpdHkgZm9yIHRoZSBvbGQgYHJlcXVpcmUoKWAgQVBJLiBJZiB3ZSdyZSBpblxuICAvLyB0aGUgYnJvd3NlciwgYWRkIGBfYCBhcyBhIGdsb2JhbCBvYmplY3QuXG4gIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IF87XG4gICAgfVxuICAgIGV4cG9ydHMuXyA9IF87XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5fID0gXztcbiAgfVxuXG4gIC8vIEN1cnJlbnQgdmVyc2lvbi5cbiAgXy5WRVJTSU9OID0gJzEuNy4wJztcblxuICAvLyBJbnRlcm5hbCBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gZWZmaWNpZW50IChmb3IgY3VycmVudCBlbmdpbmVzKSB2ZXJzaW9uXG4gIC8vIG9mIHRoZSBwYXNzZWQtaW4gY2FsbGJhY2ssIHRvIGJlIHJlcGVhdGVkbHkgYXBwbGllZCBpbiBvdGhlciBVbmRlcnNjb3JlXG4gIC8vIGZ1bmN0aW9ucy5cbiAgdmFyIGNyZWF0ZUNhbGxiYWNrID0gZnVuY3Rpb24oZnVuYywgY29udGV4dCwgYXJnQ291bnQpIHtcbiAgICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSByZXR1cm4gZnVuYztcbiAgICBzd2l0Y2ggKGFyZ0NvdW50ID09IG51bGwgPyAzIDogYXJnQ291bnQpIHtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmNhbGwoY29udGV4dCwgdmFsdWUpO1xuICAgICAgfTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgICByZXR1cm4gZnVuYy5jYWxsKGNvbnRleHQsIHZhbHVlLCBvdGhlcik7XG4gICAgICB9O1xuICAgICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgIH07XG4gICAgICBjYXNlIDQ6IHJldHVybiBmdW5jdGlvbihhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmNhbGwoY29udGV4dCwgYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZnVuYy5hcHBseShjb250ZXh0LCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gQSBtb3N0bHktaW50ZXJuYWwgZnVuY3Rpb24gdG8gZ2VuZXJhdGUgY2FsbGJhY2tzIHRoYXQgY2FuIGJlIGFwcGxpZWRcbiAgLy8gdG8gZWFjaCBlbGVtZW50IGluIGEgY29sbGVjdGlvbiwgcmV0dXJuaW5nIHRoZSBkZXNpcmVkIHJlc3VsdCDigJQgZWl0aGVyXG4gIC8vIGlkZW50aXR5LCBhbiBhcmJpdHJhcnkgY2FsbGJhY2ssIGEgcHJvcGVydHkgbWF0Y2hlciwgb3IgYSBwcm9wZXJ0eSBhY2Nlc3Nvci5cbiAgXy5pdGVyYXRlZSA9IGZ1bmN0aW9uKHZhbHVlLCBjb250ZXh0LCBhcmdDb3VudCkge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gXy5pZGVudGl0eTtcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKHZhbHVlKSkgcmV0dXJuIGNyZWF0ZUNhbGxiYWNrKHZhbHVlLCBjb250ZXh0LCBhcmdDb3VudCk7XG4gICAgaWYgKF8uaXNPYmplY3QodmFsdWUpKSByZXR1cm4gXy5tYXRjaGVzKHZhbHVlKTtcbiAgICByZXR1cm4gXy5wcm9wZXJ0eSh2YWx1ZSk7XG4gIH07XG5cbiAgLy8gQ29sbGVjdGlvbiBGdW5jdGlvbnNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBUaGUgY29ybmVyc3RvbmUsIGFuIGBlYWNoYCBpbXBsZW1lbnRhdGlvbiwgYWthIGBmb3JFYWNoYC5cbiAgLy8gSGFuZGxlcyByYXcgb2JqZWN0cyBpbiBhZGRpdGlvbiB0byBhcnJheS1saWtlcy4gVHJlYXRzIGFsbFxuICAvLyBzcGFyc2UgYXJyYXktbGlrZXMgYXMgaWYgdGhleSB3ZXJlIGRlbnNlLlxuICBfLmVhY2ggPSBfLmZvckVhY2ggPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gb2JqO1xuICAgIGl0ZXJhdGVlID0gY3JlYXRlQ2FsbGJhY2soaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIHZhciBpLCBsZW5ndGggPSBvYmoubGVuZ3RoO1xuICAgIGlmIChsZW5ndGggPT09ICtsZW5ndGgpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpdGVyYXRlZShvYmpbaV0sIGksIG9iaik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGl0ZXJhdGVlKG9ialtrZXlzW2ldXSwga2V5c1tpXSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIHJlc3VsdHMgb2YgYXBwbHlpbmcgdGhlIGl0ZXJhdGVlIHRvIGVhY2ggZWxlbWVudC5cbiAgXy5tYXAgPSBfLmNvbGxlY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gW107XG4gICAgaXRlcmF0ZWUgPSBfLml0ZXJhdGVlKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICB2YXIga2V5cyA9IG9iai5sZW5ndGggIT09ICtvYmoubGVuZ3RoICYmIF8ua2V5cyhvYmopLFxuICAgICAgICBsZW5ndGggPSAoa2V5cyB8fCBvYmopLmxlbmd0aCxcbiAgICAgICAgcmVzdWx0cyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgIGN1cnJlbnRLZXk7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgY3VycmVudEtleSA9IGtleXMgPyBrZXlzW2luZGV4XSA6IGluZGV4O1xuICAgICAgcmVzdWx0c1tpbmRleF0gPSBpdGVyYXRlZShvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaik7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIHZhciByZWR1Y2VFcnJvciA9ICdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJztcblxuICAvLyAqKlJlZHVjZSoqIGJ1aWxkcyB1cCBhIHNpbmdsZSByZXN1bHQgZnJvbSBhIGxpc3Qgb2YgdmFsdWVzLCBha2EgYGluamVjdGAsXG4gIC8vIG9yIGBmb2xkbGAuXG4gIF8ucmVkdWNlID0gXy5mb2xkbCA9IF8uaW5qZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgbWVtbywgY29udGV4dCkge1xuICAgIGlmIChvYmogPT0gbnVsbCkgb2JqID0gW107XG4gICAgaXRlcmF0ZWUgPSBjcmVhdGVDYWxsYmFjayhpdGVyYXRlZSwgY29udGV4dCwgNCk7XG4gICAgdmFyIGtleXMgPSBvYmoubGVuZ3RoICE9PSArb2JqLmxlbmd0aCAmJiBfLmtleXMob2JqKSxcbiAgICAgICAgbGVuZ3RoID0gKGtleXMgfHwgb2JqKS5sZW5ndGgsXG4gICAgICAgIGluZGV4ID0gMCwgY3VycmVudEtleTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIHtcbiAgICAgIGlmICghbGVuZ3RoKSB0aHJvdyBuZXcgVHlwZUVycm9yKHJlZHVjZUVycm9yKTtcbiAgICAgIG1lbW8gPSBvYmpba2V5cyA/IGtleXNbaW5kZXgrK10gOiBpbmRleCsrXTtcbiAgICB9XG4gICAgZm9yICg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICBtZW1vID0gaXRlcmF0ZWUobWVtbywgb2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopO1xuICAgIH1cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcblxuICAvLyBUaGUgcmlnaHQtYXNzb2NpYXRpdmUgdmVyc2lvbiBvZiByZWR1Y2UsIGFsc28ga25vd24gYXMgYGZvbGRyYC5cbiAgXy5yZWR1Y2VSaWdodCA9IF8uZm9sZHIgPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBtZW1vLCBjb250ZXh0KSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSBvYmogPSBbXTtcbiAgICBpdGVyYXRlZSA9IGNyZWF0ZUNhbGxiYWNrKGl0ZXJhdGVlLCBjb250ZXh0LCA0KTtcbiAgICB2YXIga2V5cyA9IG9iai5sZW5ndGggIT09ICsgb2JqLmxlbmd0aCAmJiBfLmtleXMob2JqKSxcbiAgICAgICAgaW5kZXggPSAoa2V5cyB8fCBvYmopLmxlbmd0aCxcbiAgICAgICAgY3VycmVudEtleTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIHtcbiAgICAgIGlmICghaW5kZXgpIHRocm93IG5ldyBUeXBlRXJyb3IocmVkdWNlRXJyb3IpO1xuICAgICAgbWVtbyA9IG9ialtrZXlzID8ga2V5c1stLWluZGV4XSA6IC0taW5kZXhdO1xuICAgIH1cbiAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgY3VycmVudEtleSA9IGtleXMgPyBrZXlzW2luZGV4XSA6IGluZGV4O1xuICAgICAgbWVtbyA9IGl0ZXJhdGVlKG1lbW8sIG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBmaXJzdCB2YWx1ZSB3aGljaCBwYXNzZXMgYSB0cnV0aCB0ZXN0LiBBbGlhc2VkIGFzIGBkZXRlY3RgLlxuICBfLmZpbmQgPSBfLmRldGVjdCA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBwcmVkaWNhdGUgPSBfLml0ZXJhdGVlKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgXy5zb21lKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgbGlzdCkpIHtcbiAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgdGhhdCBwYXNzIGEgdHJ1dGggdGVzdC5cbiAgLy8gQWxpYXNlZCBhcyBgc2VsZWN0YC5cbiAgXy5maWx0ZXIgPSBfLnNlbGVjdCA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiByZXN1bHRzO1xuICAgIHByZWRpY2F0ZSA9IF8uaXRlcmF0ZWUocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICBfLmVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBsaXN0KSkgcmVzdWx0cy5wdXNoKHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICAvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBmb3Igd2hpY2ggYSB0cnV0aCB0ZXN0IGZhaWxzLlxuICBfLnJlamVjdCA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIF8uZmlsdGVyKG9iaiwgXy5uZWdhdGUoXy5pdGVyYXRlZShwcmVkaWNhdGUpKSwgY29udGV4dCk7XG4gIH07XG5cbiAgLy8gRGV0ZXJtaW5lIHdoZXRoZXIgYWxsIG9mIHRoZSBlbGVtZW50cyBtYXRjaCBhIHRydXRoIHRlc3QuXG4gIC8vIEFsaWFzZWQgYXMgYGFsbGAuXG4gIF8uZXZlcnkgPSBfLmFsbCA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgICBwcmVkaWNhdGUgPSBfLml0ZXJhdGVlKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgdmFyIGtleXMgPSBvYmoubGVuZ3RoICE9PSArb2JqLmxlbmd0aCAmJiBfLmtleXMob2JqKSxcbiAgICAgICAgbGVuZ3RoID0gKGtleXMgfHwgb2JqKS5sZW5ndGgsXG4gICAgICAgIGluZGV4LCBjdXJyZW50S2V5O1xuICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgY3VycmVudEtleSA9IGtleXMgPyBrZXlzW2luZGV4XSA6IGluZGV4O1xuICAgICAgaWYgKCFwcmVkaWNhdGUob2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIC8vIERldGVybWluZSBpZiBhdCBsZWFzdCBvbmUgZWxlbWVudCBpbiB0aGUgb2JqZWN0IG1hdGNoZXMgYSB0cnV0aCB0ZXN0LlxuICAvLyBBbGlhc2VkIGFzIGBhbnlgLlxuICBfLnNvbWUgPSBfLmFueSA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gICAgcHJlZGljYXRlID0gXy5pdGVyYXRlZShwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gb2JqLmxlbmd0aCAhPT0gK29iai5sZW5ndGggJiYgXy5rZXlzKG9iaiksXG4gICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoLFxuICAgICAgICBpbmRleCwgY3VycmVudEtleTtcbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGN1cnJlbnRLZXkgPSBrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleDtcbiAgICAgIGlmIChwcmVkaWNhdGUob2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIC8vIERldGVybWluZSBpZiB0aGUgYXJyYXkgb3Igb2JqZWN0IGNvbnRhaW5zIGEgZ2l2ZW4gdmFsdWUgKHVzaW5nIGA9PT1gKS5cbiAgLy8gQWxpYXNlZCBhcyBgaW5jbHVkZWAuXG4gIF8uY29udGFpbnMgPSBfLmluY2x1ZGUgPSBmdW5jdGlvbihvYmosIHRhcmdldCkge1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChvYmoubGVuZ3RoICE9PSArb2JqLmxlbmd0aCkgb2JqID0gXy52YWx1ZXMob2JqKTtcbiAgICByZXR1cm4gXy5pbmRleE9mKG9iaiwgdGFyZ2V0KSA+PSAwO1xuICB9O1xuXG4gIC8vIEludm9rZSBhIG1ldGhvZCAod2l0aCBhcmd1bWVudHMpIG9uIGV2ZXJ5IGl0ZW0gaW4gYSBjb2xsZWN0aW9uLlxuICBfLmludm9rZSA9IGZ1bmN0aW9uKG9iaiwgbWV0aG9kKSB7XG4gICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XG4gICAgdmFyIGlzRnVuYyA9IF8uaXNGdW5jdGlvbihtZXRob2QpO1xuICAgIHJldHVybiBfLm1hcChvYmosIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gKGlzRnVuYyA/IG1ldGhvZCA6IHZhbHVlW21ldGhvZF0pLmFwcGx5KHZhbHVlLCBhcmdzKTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBtYXBgOiBmZXRjaGluZyBhIHByb3BlcnR5LlxuICBfLnBsdWNrID0gZnVuY3Rpb24ob2JqLCBrZXkpIHtcbiAgICByZXR1cm4gXy5tYXAob2JqLCBfLnByb3BlcnR5KGtleSkpO1xuICB9O1xuXG4gIC8vIENvbnZlbmllbmNlIHZlcnNpb24gb2YgYSBjb21tb24gdXNlIGNhc2Ugb2YgYGZpbHRlcmA6IHNlbGVjdGluZyBvbmx5IG9iamVjdHNcbiAgLy8gY29udGFpbmluZyBzcGVjaWZpYyBga2V5OnZhbHVlYCBwYWlycy5cbiAgXy53aGVyZSA9IGZ1bmN0aW9uKG9iaiwgYXR0cnMpIHtcbiAgICByZXR1cm4gXy5maWx0ZXIob2JqLCBfLm1hdGNoZXMoYXR0cnMpKTtcbiAgfTtcblxuICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBmaW5kYDogZ2V0dGluZyB0aGUgZmlyc3Qgb2JqZWN0XG4gIC8vIGNvbnRhaW5pbmcgc3BlY2lmaWMgYGtleTp2YWx1ZWAgcGFpcnMuXG4gIF8uZmluZFdoZXJlID0gZnVuY3Rpb24ob2JqLCBhdHRycykge1xuICAgIHJldHVybiBfLmZpbmQob2JqLCBfLm1hdGNoZXMoYXR0cnMpKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIG1heGltdW0gZWxlbWVudCAob3IgZWxlbWVudC1iYXNlZCBjb21wdXRhdGlvbikuXG4gIF8ubWF4ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHQgPSAtSW5maW5pdHksIGxhc3RDb21wdXRlZCA9IC1JbmZpbml0eSxcbiAgICAgICAgdmFsdWUsIGNvbXB1dGVkO1xuICAgIGlmIChpdGVyYXRlZSA9PSBudWxsICYmIG9iaiAhPSBudWxsKSB7XG4gICAgICBvYmogPSBvYmoubGVuZ3RoID09PSArb2JqLmxlbmd0aCA/IG9iaiA6IF8udmFsdWVzKG9iaik7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gb2JqLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbHVlID0gb2JqW2ldO1xuICAgICAgICBpZiAodmFsdWUgPiByZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpdGVyYXRlZSA9IF8uaXRlcmF0ZWUoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodmFsdWUsIGluZGV4LCBsaXN0KTtcbiAgICAgICAgaWYgKGNvbXB1dGVkID4gbGFzdENvbXB1dGVkIHx8IGNvbXB1dGVkID09PSAtSW5maW5pdHkgJiYgcmVzdWx0ID09PSAtSW5maW5pdHkpIHtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBsYXN0Q29tcHV0ZWQgPSBjb21wdXRlZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBtaW5pbXVtIGVsZW1lbnQgKG9yIGVsZW1lbnQtYmFzZWQgY29tcHV0YXRpb24pLlxuICBfLm1pbiA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0ID0gSW5maW5pdHksIGxhc3RDb21wdXRlZCA9IEluZmluaXR5LFxuICAgICAgICB2YWx1ZSwgY29tcHV0ZWQ7XG4gICAgaWYgKGl0ZXJhdGVlID09IG51bGwgJiYgb2JqICE9IG51bGwpIHtcbiAgICAgIG9iaiA9IG9iai5sZW5ndGggPT09ICtvYmoubGVuZ3RoID8gb2JqIDogXy52YWx1ZXMob2JqKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsdWUgPSBvYmpbaV07XG4gICAgICAgIGlmICh2YWx1ZSA8IHJlc3VsdCkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZXJhdGVlID0gXy5pdGVyYXRlZShpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgICBfLmVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSh2YWx1ZSwgaW5kZXgsIGxpc3QpO1xuICAgICAgICBpZiAoY29tcHV0ZWQgPCBsYXN0Q29tcHV0ZWQgfHwgY29tcHV0ZWQgPT09IEluZmluaXR5ICYmIHJlc3VsdCA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBsYXN0Q29tcHV0ZWQgPSBjb21wdXRlZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gU2h1ZmZsZSBhIGNvbGxlY3Rpb24sIHVzaW5nIHRoZSBtb2Rlcm4gdmVyc2lvbiBvZiB0aGVcbiAgLy8gW0Zpc2hlci1ZYXRlcyBzaHVmZmxlXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zpc2hlcuKAk1lhdGVzX3NodWZmbGUpLlxuICBfLnNodWZmbGUgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgc2V0ID0gb2JqICYmIG9iai5sZW5ndGggPT09ICtvYmoubGVuZ3RoID8gb2JqIDogXy52YWx1ZXMob2JqKTtcbiAgICB2YXIgbGVuZ3RoID0gc2V0Lmxlbmd0aDtcbiAgICB2YXIgc2h1ZmZsZWQgPSBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGluZGV4ID0gMCwgcmFuZDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHJhbmQgPSBfLnJhbmRvbSgwLCBpbmRleCk7XG4gICAgICBpZiAocmFuZCAhPT0gaW5kZXgpIHNodWZmbGVkW2luZGV4XSA9IHNodWZmbGVkW3JhbmRdO1xuICAgICAgc2h1ZmZsZWRbcmFuZF0gPSBzZXRbaW5kZXhdO1xuICAgIH1cbiAgICByZXR1cm4gc2h1ZmZsZWQ7XG4gIH07XG5cbiAgLy8gU2FtcGxlICoqbioqIHJhbmRvbSB2YWx1ZXMgZnJvbSBhIGNvbGxlY3Rpb24uXG4gIC8vIElmICoqbioqIGlzIG5vdCBzcGVjaWZpZWQsIHJldHVybnMgYSBzaW5nbGUgcmFuZG9tIGVsZW1lbnQuXG4gIC8vIFRoZSBpbnRlcm5hbCBgZ3VhcmRgIGFyZ3VtZW50IGFsbG93cyBpdCB0byB3b3JrIHdpdGggYG1hcGAuXG4gIF8uc2FtcGxlID0gZnVuY3Rpb24ob2JqLCBuLCBndWFyZCkge1xuICAgIGlmIChuID09IG51bGwgfHwgZ3VhcmQpIHtcbiAgICAgIGlmIChvYmoubGVuZ3RoICE9PSArb2JqLmxlbmd0aCkgb2JqID0gXy52YWx1ZXMob2JqKTtcbiAgICAgIHJldHVybiBvYmpbXy5yYW5kb20ob2JqLmxlbmd0aCAtIDEpXTtcbiAgICB9XG4gICAgcmV0dXJuIF8uc2h1ZmZsZShvYmopLnNsaWNlKDAsIE1hdGgubWF4KDAsIG4pKTtcbiAgfTtcblxuICAvLyBTb3J0IHRoZSBvYmplY3QncyB2YWx1ZXMgYnkgYSBjcml0ZXJpb24gcHJvZHVjZWQgYnkgYW4gaXRlcmF0ZWUuXG4gIF8uc29ydEJ5ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIGl0ZXJhdGVlID0gXy5pdGVyYXRlZShpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgcmV0dXJuIF8ucGx1Y2soXy5tYXAob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICBjcml0ZXJpYTogaXRlcmF0ZWUodmFsdWUsIGluZGV4LCBsaXN0KVxuICAgICAgfTtcbiAgICB9KS5zb3J0KGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7XG4gICAgICB2YXIgYSA9IGxlZnQuY3JpdGVyaWE7XG4gICAgICB2YXIgYiA9IHJpZ2h0LmNyaXRlcmlhO1xuICAgICAgaWYgKGEgIT09IGIpIHtcbiAgICAgICAgaWYgKGEgPiBiIHx8IGEgPT09IHZvaWQgMCkgcmV0dXJuIDE7XG4gICAgICAgIGlmIChhIDwgYiB8fCBiID09PSB2b2lkIDApIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsZWZ0LmluZGV4IC0gcmlnaHQuaW5kZXg7XG4gICAgfSksICd2YWx1ZScpO1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIHVzZWQgZm9yIGFnZ3JlZ2F0ZSBcImdyb3VwIGJ5XCIgb3BlcmF0aW9ucy5cbiAgdmFyIGdyb3VwID0gZnVuY3Rpb24oYmVoYXZpb3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaXRlcmF0ZWUgPSBfLml0ZXJhdGVlKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICAgIF8uZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkge1xuICAgICAgICB2YXIga2V5ID0gaXRlcmF0ZWUodmFsdWUsIGluZGV4LCBvYmopO1xuICAgICAgICBiZWhhdmlvcihyZXN1bHQsIHZhbHVlLCBrZXkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH07XG5cbiAgLy8gR3JvdXBzIHRoZSBvYmplY3QncyB2YWx1ZXMgYnkgYSBjcml0ZXJpb24uIFBhc3MgZWl0aGVyIGEgc3RyaW5nIGF0dHJpYnV0ZVxuICAvLyB0byBncm91cCBieSwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGNyaXRlcmlvbi5cbiAgXy5ncm91cEJ5ID0gZ3JvdXAoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgaWYgKF8uaGFzKHJlc3VsdCwga2V5KSkgcmVzdWx0W2tleV0ucHVzaCh2YWx1ZSk7IGVsc2UgcmVzdWx0W2tleV0gPSBbdmFsdWVdO1xuICB9KTtcblxuICAvLyBJbmRleGVzIHRoZSBvYmplY3QncyB2YWx1ZXMgYnkgYSBjcml0ZXJpb24sIHNpbWlsYXIgdG8gYGdyb3VwQnlgLCBidXQgZm9yXG4gIC8vIHdoZW4geW91IGtub3cgdGhhdCB5b3VyIGluZGV4IHZhbHVlcyB3aWxsIGJlIHVuaXF1ZS5cbiAgXy5pbmRleEJ5ID0gZ3JvdXAoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgfSk7XG5cbiAgLy8gQ291bnRzIGluc3RhbmNlcyBvZiBhbiBvYmplY3QgdGhhdCBncm91cCBieSBhIGNlcnRhaW4gY3JpdGVyaW9uLiBQYXNzXG4gIC8vIGVpdGhlciBhIHN0cmluZyBhdHRyaWJ1dGUgdG8gY291bnQgYnksIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZVxuICAvLyBjcml0ZXJpb24uXG4gIF8uY291bnRCeSA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgIGlmIChfLmhhcyhyZXN1bHQsIGtleSkpIHJlc3VsdFtrZXldKys7IGVsc2UgcmVzdWx0W2tleV0gPSAxO1xuICB9KTtcblxuICAvLyBVc2UgYSBjb21wYXJhdG9yIGZ1bmN0aW9uIHRvIGZpZ3VyZSBvdXQgdGhlIHNtYWxsZXN0IGluZGV4IGF0IHdoaWNoXG4gIC8vIGFuIG9iamVjdCBzaG91bGQgYmUgaW5zZXJ0ZWQgc28gYXMgdG8gbWFpbnRhaW4gb3JkZXIuIFVzZXMgYmluYXJ5IHNlYXJjaC5cbiAgXy5zb3J0ZWRJbmRleCA9IGZ1bmN0aW9uKGFycmF5LCBvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0ZWUgPSBfLml0ZXJhdGVlKGl0ZXJhdGVlLCBjb250ZXh0LCAxKTtcbiAgICB2YXIgdmFsdWUgPSBpdGVyYXRlZShvYmopO1xuICAgIHZhciBsb3cgPSAwLCBoaWdoID0gYXJyYXkubGVuZ3RoO1xuICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICB2YXIgbWlkID0gbG93ICsgaGlnaCA+Pj4gMTtcbiAgICAgIGlmIChpdGVyYXRlZShhcnJheVttaWRdKSA8IHZhbHVlKSBsb3cgPSBtaWQgKyAxOyBlbHNlIGhpZ2ggPSBtaWQ7XG4gICAgfVxuICAgIHJldHVybiBsb3c7XG4gIH07XG5cbiAgLy8gU2FmZWx5IGNyZWF0ZSBhIHJlYWwsIGxpdmUgYXJyYXkgZnJvbSBhbnl0aGluZyBpdGVyYWJsZS5cbiAgXy50b0FycmF5ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFvYmopIHJldHVybiBbXTtcbiAgICBpZiAoXy5pc0FycmF5KG9iaikpIHJldHVybiBzbGljZS5jYWxsKG9iaik7XG4gICAgaWYgKG9iai5sZW5ndGggPT09ICtvYmoubGVuZ3RoKSByZXR1cm4gXy5tYXAob2JqLCBfLmlkZW50aXR5KTtcbiAgICByZXR1cm4gXy52YWx1ZXMob2JqKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIG51bWJlciBvZiBlbGVtZW50cyBpbiBhbiBvYmplY3QuXG4gIF8uc2l6ZSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIDA7XG4gICAgcmV0dXJuIG9iai5sZW5ndGggPT09ICtvYmoubGVuZ3RoID8gb2JqLmxlbmd0aCA6IF8ua2V5cyhvYmopLmxlbmd0aDtcbiAgfTtcblxuICAvLyBTcGxpdCBhIGNvbGxlY3Rpb24gaW50byB0d28gYXJyYXlzOiBvbmUgd2hvc2UgZWxlbWVudHMgYWxsIHNhdGlzZnkgdGhlIGdpdmVuXG4gIC8vIHByZWRpY2F0ZSwgYW5kIG9uZSB3aG9zZSBlbGVtZW50cyBhbGwgZG8gbm90IHNhdGlzZnkgdGhlIHByZWRpY2F0ZS5cbiAgXy5wYXJ0aXRpb24gPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHByZWRpY2F0ZSA9IF8uaXRlcmF0ZWUocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICB2YXIgcGFzcyA9IFtdLCBmYWlsID0gW107XG4gICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqKSB7XG4gICAgICAocHJlZGljYXRlKHZhbHVlLCBrZXksIG9iaikgPyBwYXNzIDogZmFpbCkucHVzaCh2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtwYXNzLCBmYWlsXTtcbiAgfTtcblxuICAvLyBBcnJheSBGdW5jdGlvbnNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gR2V0IHRoZSBmaXJzdCBlbGVtZW50IG9mIGFuIGFycmF5LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIHRoZSBmaXJzdCBOXG4gIC8vIHZhbHVlcyBpbiB0aGUgYXJyYXkuIEFsaWFzZWQgYXMgYGhlYWRgIGFuZCBgdGFrZWAuIFRoZSAqKmd1YXJkKiogY2hlY2tcbiAgLy8gYWxsb3dzIGl0IHRvIHdvcmsgd2l0aCBgXy5tYXBgLlxuICBfLmZpcnN0ID0gXy5oZWFkID0gXy50YWtlID0gZnVuY3Rpb24oYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgaWYgKGFycmF5ID09IG51bGwpIHJldHVybiB2b2lkIDA7XG4gICAgaWYgKG4gPT0gbnVsbCB8fCBndWFyZCkgcmV0dXJuIGFycmF5WzBdO1xuICAgIGlmIChuIDwgMCkgcmV0dXJuIFtdO1xuICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCAwLCBuKTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGV2ZXJ5dGhpbmcgYnV0IHRoZSBsYXN0IGVudHJ5IG9mIHRoZSBhcnJheS4gRXNwZWNpYWxseSB1c2VmdWwgb25cbiAgLy8gdGhlIGFyZ3VtZW50cyBvYmplY3QuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gYWxsIHRoZSB2YWx1ZXMgaW5cbiAgLy8gdGhlIGFycmF5LCBleGNsdWRpbmcgdGhlIGxhc3QgTi4gVGhlICoqZ3VhcmQqKiBjaGVjayBhbGxvd3MgaXQgdG8gd29yayB3aXRoXG4gIC8vIGBfLm1hcGAuXG4gIF8uaW5pdGlhbCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCAwLCBNYXRoLm1heCgwLCBhcnJheS5sZW5ndGggLSAobiA9PSBudWxsIHx8IGd1YXJkID8gMSA6IG4pKSk7XG4gIH07XG5cbiAgLy8gR2V0IHRoZSBsYXN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gdGhlIGxhc3QgTlxuICAvLyB2YWx1ZXMgaW4gdGhlIGFycmF5LiBUaGUgKipndWFyZCoqIGNoZWNrIGFsbG93cyBpdCB0byB3b3JrIHdpdGggYF8ubWFwYC5cbiAgXy5sYXN0ID0gZnVuY3Rpb24oYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgaWYgKGFycmF5ID09IG51bGwpIHJldHVybiB2b2lkIDA7XG4gICAgaWYgKG4gPT0gbnVsbCB8fCBndWFyZCkgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdO1xuICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCBNYXRoLm1heChhcnJheS5sZW5ndGggLSBuLCAwKSk7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBldmVyeXRoaW5nIGJ1dCB0aGUgZmlyc3QgZW50cnkgb2YgdGhlIGFycmF5LiBBbGlhc2VkIGFzIGB0YWlsYCBhbmQgYGRyb3BgLlxuICAvLyBFc3BlY2lhbGx5IHVzZWZ1bCBvbiB0aGUgYXJndW1lbnRzIG9iamVjdC4gUGFzc2luZyBhbiAqKm4qKiB3aWxsIHJldHVyblxuICAvLyB0aGUgcmVzdCBOIHZhbHVlcyBpbiB0aGUgYXJyYXkuIFRoZSAqKmd1YXJkKipcbiAgLy8gY2hlY2sgYWxsb3dzIGl0IHRvIHdvcmsgd2l0aCBgXy5tYXBgLlxuICBfLnJlc3QgPSBfLnRhaWwgPSBfLmRyb3AgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheSwgbiA9PSBudWxsIHx8IGd1YXJkID8gMSA6IG4pO1xuICB9O1xuXG4gIC8vIFRyaW0gb3V0IGFsbCBmYWxzeSB2YWx1ZXMgZnJvbSBhbiBhcnJheS5cbiAgXy5jb21wYWN0ID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICByZXR1cm4gXy5maWx0ZXIoYXJyYXksIF8uaWRlbnRpdHkpO1xuICB9O1xuXG4gIC8vIEludGVybmFsIGltcGxlbWVudGF0aW9uIG9mIGEgcmVjdXJzaXZlIGBmbGF0dGVuYCBmdW5jdGlvbi5cbiAgdmFyIGZsYXR0ZW4gPSBmdW5jdGlvbihpbnB1dCwgc2hhbGxvdywgc3RyaWN0LCBvdXRwdXQpIHtcbiAgICBpZiAoc2hhbGxvdyAmJiBfLmV2ZXJ5KGlucHV0LCBfLmlzQXJyYXkpKSB7XG4gICAgICByZXR1cm4gY29uY2F0LmFwcGx5KG91dHB1dCwgaW5wdXQpO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gaW5wdXQubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB2YWx1ZSA9IGlucHV0W2ldO1xuICAgICAgaWYgKCFfLmlzQXJyYXkodmFsdWUpICYmICFfLmlzQXJndW1lbnRzKHZhbHVlKSkge1xuICAgICAgICBpZiAoIXN0cmljdCkgb3V0cHV0LnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChzaGFsbG93KSB7XG4gICAgICAgIHB1c2guYXBwbHkob3V0cHV0LCB2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmbGF0dGVuKHZhbHVlLCBzaGFsbG93LCBzdHJpY3QsIG91dHB1dCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH07XG5cbiAgLy8gRmxhdHRlbiBvdXQgYW4gYXJyYXksIGVpdGhlciByZWN1cnNpdmVseSAoYnkgZGVmYXVsdCksIG9yIGp1c3Qgb25lIGxldmVsLlxuICBfLmZsYXR0ZW4gPSBmdW5jdGlvbihhcnJheSwgc2hhbGxvdykge1xuICAgIHJldHVybiBmbGF0dGVuKGFycmF5LCBzaGFsbG93LCBmYWxzZSwgW10pO1xuICB9O1xuXG4gIC8vIFJldHVybiBhIHZlcnNpb24gb2YgdGhlIGFycmF5IHRoYXQgZG9lcyBub3QgY29udGFpbiB0aGUgc3BlY2lmaWVkIHZhbHVlKHMpLlxuICBfLndpdGhvdXQgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHJldHVybiBfLmRpZmZlcmVuY2UoYXJyYXksIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gIH07XG5cbiAgLy8gUHJvZHVjZSBhIGR1cGxpY2F0ZS1mcmVlIHZlcnNpb24gb2YgdGhlIGFycmF5LiBJZiB0aGUgYXJyYXkgaGFzIGFscmVhZHlcbiAgLy8gYmVlbiBzb3J0ZWQsIHlvdSBoYXZlIHRoZSBvcHRpb24gb2YgdXNpbmcgYSBmYXN0ZXIgYWxnb3JpdGhtLlxuICAvLyBBbGlhc2VkIGFzIGB1bmlxdWVgLlxuICBfLnVuaXEgPSBfLnVuaXF1ZSA9IGZ1bmN0aW9uKGFycmF5LCBpc1NvcnRlZCwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIFtdO1xuICAgIGlmICghXy5pc0Jvb2xlYW4oaXNTb3J0ZWQpKSB7XG4gICAgICBjb250ZXh0ID0gaXRlcmF0ZWU7XG4gICAgICBpdGVyYXRlZSA9IGlzU29ydGVkO1xuICAgICAgaXNTb3J0ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGl0ZXJhdGVlICE9IG51bGwpIGl0ZXJhdGVlID0gXy5pdGVyYXRlZShpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBzZWVuID0gW107XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpXTtcbiAgICAgIGlmIChpc1NvcnRlZCkge1xuICAgICAgICBpZiAoIWkgfHwgc2VlbiAhPT0gdmFsdWUpIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgc2VlbiA9IHZhbHVlO1xuICAgICAgfSBlbHNlIGlmIChpdGVyYXRlZSkge1xuICAgICAgICB2YXIgY29tcHV0ZWQgPSBpdGVyYXRlZSh2YWx1ZSwgaSwgYXJyYXkpO1xuICAgICAgICBpZiAoXy5pbmRleE9mKHNlZW4sIGNvbXB1dGVkKSA8IDApIHtcbiAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChfLmluZGV4T2YocmVzdWx0LCB2YWx1ZSkgPCAwKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBQcm9kdWNlIGFuIGFycmF5IHRoYXQgY29udGFpbnMgdGhlIHVuaW9uOiBlYWNoIGRpc3RpbmN0IGVsZW1lbnQgZnJvbSBhbGwgb2ZcbiAgLy8gdGhlIHBhc3NlZC1pbiBhcnJheXMuXG4gIF8udW5pb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXy51bmlxKGZsYXR0ZW4oYXJndW1lbnRzLCB0cnVlLCB0cnVlLCBbXSkpO1xuICB9O1xuXG4gIC8vIFByb2R1Y2UgYW4gYXJyYXkgdGhhdCBjb250YWlucyBldmVyeSBpdGVtIHNoYXJlZCBiZXR3ZWVuIGFsbCB0aGVcbiAgLy8gcGFzc2VkLWluIGFycmF5cy5cbiAgXy5pbnRlcnNlY3Rpb24gPSBmdW5jdGlvbihhcnJheSkge1xuICAgIGlmIChhcnJheSA9PSBudWxsKSByZXR1cm4gW107XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBhcmdzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gYXJyYXlbaV07XG4gICAgICBpZiAoXy5jb250YWlucyhyZXN1bHQsIGl0ZW0pKSBjb250aW51ZTtcbiAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgYXJnc0xlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmICghXy5jb250YWlucyhhcmd1bWVudHNbal0sIGl0ZW0pKSBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChqID09PSBhcmdzTGVuZ3RoKSByZXN1bHQucHVzaChpdGVtKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBUYWtlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gb25lIGFycmF5IGFuZCBhIG51bWJlciBvZiBvdGhlciBhcnJheXMuXG4gIC8vIE9ubHkgdGhlIGVsZW1lbnRzIHByZXNlbnQgaW4ganVzdCB0aGUgZmlyc3QgYXJyYXkgd2lsbCByZW1haW4uXG4gIF8uZGlmZmVyZW5jZSA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgdmFyIHJlc3QgPSBmbGF0dGVuKHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSwgdHJ1ZSwgdHJ1ZSwgW10pO1xuICAgIHJldHVybiBfLmZpbHRlcihhcnJheSwgZnVuY3Rpb24odmFsdWUpe1xuICAgICAgcmV0dXJuICFfLmNvbnRhaW5zKHJlc3QsIHZhbHVlKTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBaaXAgdG9nZXRoZXIgbXVsdGlwbGUgbGlzdHMgaW50byBhIHNpbmdsZSBhcnJheSAtLSBlbGVtZW50cyB0aGF0IHNoYXJlXG4gIC8vIGFuIGluZGV4IGdvIHRvZ2V0aGVyLlxuICBfLnppcCA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgaWYgKGFycmF5ID09IG51bGwpIHJldHVybiBbXTtcbiAgICB2YXIgbGVuZ3RoID0gXy5tYXgoYXJndW1lbnRzLCAnbGVuZ3RoJykubGVuZ3RoO1xuICAgIHZhciByZXN1bHRzID0gQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICByZXN1bHRzW2ldID0gXy5wbHVjayhhcmd1bWVudHMsIGkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICAvLyBDb252ZXJ0cyBsaXN0cyBpbnRvIG9iamVjdHMuIFBhc3MgZWl0aGVyIGEgc2luZ2xlIGFycmF5IG9mIGBba2V5LCB2YWx1ZV1gXG4gIC8vIHBhaXJzLCBvciB0d28gcGFyYWxsZWwgYXJyYXlzIG9mIHRoZSBzYW1lIGxlbmd0aCAtLSBvbmUgb2Yga2V5cywgYW5kIG9uZSBvZlxuICAvLyB0aGUgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gIF8ub2JqZWN0ID0gZnVuY3Rpb24obGlzdCwgdmFsdWVzKSB7XG4gICAgaWYgKGxpc3QgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gbGlzdC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHZhbHVlcykge1xuICAgICAgICByZXN1bHRbbGlzdFtpXV0gPSB2YWx1ZXNbaV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbbGlzdFtpXVswXV0gPSBsaXN0W2ldWzFdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgcG9zaXRpb24gb2YgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYW4gaXRlbSBpbiBhbiBhcnJheSxcbiAgLy8gb3IgLTEgaWYgdGhlIGl0ZW0gaXMgbm90IGluY2x1ZGVkIGluIHRoZSBhcnJheS5cbiAgLy8gSWYgdGhlIGFycmF5IGlzIGxhcmdlIGFuZCBhbHJlYWR5IGluIHNvcnQgb3JkZXIsIHBhc3MgYHRydWVgXG4gIC8vIGZvciAqKmlzU29ydGVkKiogdG8gdXNlIGJpbmFyeSBzZWFyY2guXG4gIF8uaW5kZXhPZiA9IGZ1bmN0aW9uKGFycmF5LCBpdGVtLCBpc1NvcnRlZCkge1xuICAgIGlmIChhcnJheSA9PSBudWxsKSByZXR1cm4gLTE7XG4gICAgdmFyIGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgaWYgKGlzU29ydGVkKSB7XG4gICAgICBpZiAodHlwZW9mIGlzU29ydGVkID09ICdudW1iZXInKSB7XG4gICAgICAgIGkgPSBpc1NvcnRlZCA8IDAgPyBNYXRoLm1heCgwLCBsZW5ndGggKyBpc1NvcnRlZCkgOiBpc1NvcnRlZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGkgPSBfLnNvcnRlZEluZGV4KGFycmF5LCBpdGVtKTtcbiAgICAgICAgcmV0dXJuIGFycmF5W2ldID09PSBpdGVtID8gaSA6IC0xO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSBpZiAoYXJyYXlbaV0gPT09IGl0ZW0pIHJldHVybiBpO1xuICAgIHJldHVybiAtMTtcbiAgfTtcblxuICBfLmxhc3RJbmRleE9mID0gZnVuY3Rpb24oYXJyYXksIGl0ZW0sIGZyb20pIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIC0xO1xuICAgIHZhciBpZHggPSBhcnJheS5sZW5ndGg7XG4gICAgaWYgKHR5cGVvZiBmcm9tID09ICdudW1iZXInKSB7XG4gICAgICBpZHggPSBmcm9tIDwgMCA/IGlkeCArIGZyb20gKyAxIDogTWF0aC5taW4oaWR4LCBmcm9tICsgMSk7XG4gICAgfVxuICAgIHdoaWxlICgtLWlkeCA+PSAwKSBpZiAoYXJyYXlbaWR4XSA9PT0gaXRlbSkgcmV0dXJuIGlkeDtcbiAgICByZXR1cm4gLTE7XG4gIH07XG5cbiAgLy8gR2VuZXJhdGUgYW4gaW50ZWdlciBBcnJheSBjb250YWluaW5nIGFuIGFyaXRobWV0aWMgcHJvZ3Jlc3Npb24uIEEgcG9ydCBvZlxuICAvLyB0aGUgbmF0aXZlIFB5dGhvbiBgcmFuZ2UoKWAgZnVuY3Rpb24uIFNlZVxuICAvLyBbdGhlIFB5dGhvbiBkb2N1bWVudGF0aW9uXShodHRwOi8vZG9jcy5weXRob24ub3JnL2xpYnJhcnkvZnVuY3Rpb25zLmh0bWwjcmFuZ2UpLlxuICBfLnJhbmdlID0gZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8PSAxKSB7XG4gICAgICBzdG9wID0gc3RhcnQgfHwgMDtcbiAgICAgIHN0YXJ0ID0gMDtcbiAgICB9XG4gICAgc3RlcCA9IHN0ZXAgfHwgMTtcblxuICAgIHZhciBsZW5ndGggPSBNYXRoLm1heChNYXRoLmNlaWwoKHN0b3AgLSBzdGFydCkgLyBzdGVwKSwgMCk7XG4gICAgdmFyIHJhbmdlID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IGxlbmd0aDsgaWR4KyssIHN0YXJ0ICs9IHN0ZXApIHtcbiAgICAgIHJhbmdlW2lkeF0gPSBzdGFydDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmFuZ2U7XG4gIH07XG5cbiAgLy8gRnVuY3Rpb24gKGFoZW0pIEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBSZXVzYWJsZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiBmb3IgcHJvdG90eXBlIHNldHRpbmcuXG4gIHZhciBDdG9yID0gZnVuY3Rpb24oKXt9O1xuXG4gIC8vIENyZWF0ZSBhIGZ1bmN0aW9uIGJvdW5kIHRvIGEgZ2l2ZW4gb2JqZWN0IChhc3NpZ25pbmcgYHRoaXNgLCBhbmQgYXJndW1lbnRzLFxuICAvLyBvcHRpb25hbGx5KS4gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYEZ1bmN0aW9uLmJpbmRgIGlmXG4gIC8vIGF2YWlsYWJsZS5cbiAgXy5iaW5kID0gZnVuY3Rpb24oZnVuYywgY29udGV4dCkge1xuICAgIHZhciBhcmdzLCBib3VuZDtcbiAgICBpZiAobmF0aXZlQmluZCAmJiBmdW5jLmJpbmQgPT09IG5hdGl2ZUJpbmQpIHJldHVybiBuYXRpdmVCaW5kLmFwcGx5KGZ1bmMsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgaWYgKCFfLmlzRnVuY3Rpb24oZnVuYykpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JpbmQgbXVzdCBiZSBjYWxsZWQgb24gYSBmdW5jdGlvbicpO1xuICAgIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XG4gICAgYm91bmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBib3VuZCkpIHJldHVybiBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICAgICAgQ3Rvci5wcm90b3R5cGUgPSBmdW5jLnByb3RvdHlwZTtcbiAgICAgIHZhciBzZWxmID0gbmV3IEN0b3I7XG4gICAgICBDdG9yLnByb3RvdHlwZSA9IG51bGw7XG4gICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseShzZWxmLCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgICAgIGlmIChfLmlzT2JqZWN0KHJlc3VsdCkpIHJldHVybiByZXN1bHQ7XG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9O1xuICAgIHJldHVybiBib3VuZDtcbiAgfTtcblxuICAvLyBQYXJ0aWFsbHkgYXBwbHkgYSBmdW5jdGlvbiBieSBjcmVhdGluZyBhIHZlcnNpb24gdGhhdCBoYXMgaGFkIHNvbWUgb2YgaXRzXG4gIC8vIGFyZ3VtZW50cyBwcmUtZmlsbGVkLCB3aXRob3V0IGNoYW5naW5nIGl0cyBkeW5hbWljIGB0aGlzYCBjb250ZXh0LiBfIGFjdHNcbiAgLy8gYXMgYSBwbGFjZWhvbGRlciwgYWxsb3dpbmcgYW55IGNvbWJpbmF0aW9uIG9mIGFyZ3VtZW50cyB0byBiZSBwcmUtZmlsbGVkLlxuICBfLnBhcnRpYWwgPSBmdW5jdGlvbihmdW5jKSB7XG4gICAgdmFyIGJvdW5kQXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcG9zaXRpb24gPSAwO1xuICAgICAgdmFyIGFyZ3MgPSBib3VuZEFyZ3Muc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBhcmdzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChhcmdzW2ldID09PSBfKSBhcmdzW2ldID0gYXJndW1lbnRzW3Bvc2l0aW9uKytdO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHBvc2l0aW9uIDwgYXJndW1lbnRzLmxlbmd0aCkgYXJncy5wdXNoKGFyZ3VtZW50c1twb3NpdGlvbisrXSk7XG4gICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIEJpbmQgYSBudW1iZXIgb2YgYW4gb2JqZWN0J3MgbWV0aG9kcyB0byB0aGF0IG9iamVjdC4gUmVtYWluaW5nIGFyZ3VtZW50c1xuICAvLyBhcmUgdGhlIG1ldGhvZCBuYW1lcyB0byBiZSBib3VuZC4gVXNlZnVsIGZvciBlbnN1cmluZyB0aGF0IGFsbCBjYWxsYmFja3NcbiAgLy8gZGVmaW5lZCBvbiBhbiBvYmplY3QgYmVsb25nIHRvIGl0LlxuICBfLmJpbmRBbGwgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgaSwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCwga2V5O1xuICAgIGlmIChsZW5ndGggPD0gMSkgdGhyb3cgbmV3IEVycm9yKCdiaW5kQWxsIG11c3QgYmUgcGFzc2VkIGZ1bmN0aW9uIG5hbWVzJyk7XG4gICAgZm9yIChpID0gMTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBhcmd1bWVudHNbaV07XG4gICAgICBvYmpba2V5XSA9IF8uYmluZChvYmpba2V5XSwgb2JqKTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcblxuICAvLyBNZW1vaXplIGFuIGV4cGVuc2l2ZSBmdW5jdGlvbiBieSBzdG9yaW5nIGl0cyByZXN1bHRzLlxuICBfLm1lbW9pemUgPSBmdW5jdGlvbihmdW5jLCBoYXNoZXIpIHtcbiAgICB2YXIgbWVtb2l6ZSA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgdmFyIGNhY2hlID0gbWVtb2l6ZS5jYWNoZTtcbiAgICAgIHZhciBhZGRyZXNzID0gaGFzaGVyID8gaGFzaGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBrZXk7XG4gICAgICBpZiAoIV8uaGFzKGNhY2hlLCBhZGRyZXNzKSkgY2FjaGVbYWRkcmVzc10gPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gY2FjaGVbYWRkcmVzc107XG4gICAgfTtcbiAgICBtZW1vaXplLmNhY2hlID0ge307XG4gICAgcmV0dXJuIG1lbW9pemU7XG4gIH07XG5cbiAgLy8gRGVsYXlzIGEgZnVuY3Rpb24gZm9yIHRoZSBnaXZlbiBudW1iZXIgb2YgbWlsbGlzZWNvbmRzLCBhbmQgdGhlbiBjYWxsc1xuICAvLyBpdCB3aXRoIHRoZSBhcmd1bWVudHMgc3VwcGxpZWQuXG4gIF8uZGVsYXkgPSBmdW5jdGlvbihmdW5jLCB3YWl0KSB7XG4gICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJldHVybiBmdW5jLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH0sIHdhaXQpO1xuICB9O1xuXG4gIC8vIERlZmVycyBhIGZ1bmN0aW9uLCBzY2hlZHVsaW5nIGl0IHRvIHJ1biBhZnRlciB0aGUgY3VycmVudCBjYWxsIHN0YWNrIGhhc1xuICAvLyBjbGVhcmVkLlxuICBfLmRlZmVyID0gZnVuY3Rpb24oZnVuYykge1xuICAgIHJldHVybiBfLmRlbGF5LmFwcGx5KF8sIFtmdW5jLCAxXS5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKSk7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCB3aGVuIGludm9rZWQsIHdpbGwgb25seSBiZSB0cmlnZ2VyZWQgYXQgbW9zdCBvbmNlXG4gIC8vIGR1cmluZyBhIGdpdmVuIHdpbmRvdyBvZiB0aW1lLiBOb3JtYWxseSwgdGhlIHRocm90dGxlZCBmdW5jdGlvbiB3aWxsIHJ1blxuICAvLyBhcyBtdWNoIGFzIGl0IGNhbiwgd2l0aG91dCBldmVyIGdvaW5nIG1vcmUgdGhhbiBvbmNlIHBlciBgd2FpdGAgZHVyYXRpb247XG4gIC8vIGJ1dCBpZiB5b3UnZCBsaWtlIHRvIGRpc2FibGUgdGhlIGV4ZWN1dGlvbiBvbiB0aGUgbGVhZGluZyBlZGdlLCBwYXNzXG4gIC8vIGB7bGVhZGluZzogZmFsc2V9YC4gVG8gZGlzYWJsZSBleGVjdXRpb24gb24gdGhlIHRyYWlsaW5nIGVkZ2UsIGRpdHRvLlxuICBfLnRocm90dGxlID0gZnVuY3Rpb24oZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgIHZhciBjb250ZXh0LCBhcmdzLCByZXN1bHQ7XG4gICAgdmFyIHRpbWVvdXQgPSBudWxsO1xuICAgIHZhciBwcmV2aW91cyA9IDA7XG4gICAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge307XG4gICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICBwcmV2aW91cyA9IG9wdGlvbnMubGVhZGluZyA9PT0gZmFsc2UgPyAwIDogXy5ub3coKTtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG5vdyA9IF8ubm93KCk7XG4gICAgICBpZiAoIXByZXZpb3VzICYmIG9wdGlvbnMubGVhZGluZyA9PT0gZmFsc2UpIHByZXZpb3VzID0gbm93O1xuICAgICAgdmFyIHJlbWFpbmluZyA9IHdhaXQgLSAobm93IC0gcHJldmlvdXMpO1xuICAgICAgY29udGV4dCA9IHRoaXM7XG4gICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgaWYgKHJlbWFpbmluZyA8PSAwIHx8IHJlbWFpbmluZyA+IHdhaXQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgcHJldmlvdXMgPSBub3c7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgICAgfSBlbHNlIGlmICghdGltZW91dCAmJiBvcHRpb25zLnRyYWlsaW5nICE9PSBmYWxzZSkge1xuICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgcmVtYWluaW5nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIGFzIGxvbmcgYXMgaXQgY29udGludWVzIHRvIGJlIGludm9rZWQsIHdpbGwgbm90XG4gIC8vIGJlIHRyaWdnZXJlZC4gVGhlIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGFmdGVyIGl0IHN0b3BzIGJlaW5nIGNhbGxlZCBmb3JcbiAgLy8gTiBtaWxsaXNlY29uZHMuIElmIGBpbW1lZGlhdGVgIGlzIHBhc3NlZCwgdHJpZ2dlciB0aGUgZnVuY3Rpb24gb24gdGhlXG4gIC8vIGxlYWRpbmcgZWRnZSwgaW5zdGVhZCBvZiB0aGUgdHJhaWxpbmcuXG4gIF8uZGVib3VuY2UgPSBmdW5jdGlvbihmdW5jLCB3YWl0LCBpbW1lZGlhdGUpIHtcbiAgICB2YXIgdGltZW91dCwgYXJncywgY29udGV4dCwgdGltZXN0YW1wLCByZXN1bHQ7XG5cbiAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBsYXN0ID0gXy5ub3coKSAtIHRpbWVzdGFtcDtcblxuICAgICAgaWYgKGxhc3QgPCB3YWl0ICYmIGxhc3QgPiAwKSB7XG4gICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0IC0gbGFzdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgaWYgKCFpbW1lZGlhdGUpIHtcbiAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnRleHQgPSB0aGlzO1xuICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIHRpbWVzdGFtcCA9IF8ubm93KCk7XG4gICAgICB2YXIgY2FsbE5vdyA9IGltbWVkaWF0ZSAmJiAhdGltZW91dDtcbiAgICAgIGlmICghdGltZW91dCkgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICAgICAgaWYgKGNhbGxOb3cpIHtcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyB0aGUgZmlyc3QgZnVuY3Rpb24gcGFzc2VkIGFzIGFuIGFyZ3VtZW50IHRvIHRoZSBzZWNvbmQsXG4gIC8vIGFsbG93aW5nIHlvdSB0byBhZGp1c3QgYXJndW1lbnRzLCBydW4gY29kZSBiZWZvcmUgYW5kIGFmdGVyLCBhbmRcbiAgLy8gY29uZGl0aW9uYWxseSBleGVjdXRlIHRoZSBvcmlnaW5hbCBmdW5jdGlvbi5cbiAgXy53cmFwID0gZnVuY3Rpb24oZnVuYywgd3JhcHBlcikge1xuICAgIHJldHVybiBfLnBhcnRpYWwod3JhcHBlciwgZnVuYyk7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIG5lZ2F0ZWQgdmVyc2lvbiBvZiB0aGUgcGFzc2VkLWluIHByZWRpY2F0ZS5cbiAgXy5uZWdhdGUgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gIXByZWRpY2F0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgaXMgdGhlIGNvbXBvc2l0aW9uIG9mIGEgbGlzdCBvZiBmdW5jdGlvbnMsIGVhY2hcbiAgLy8gY29uc3VtaW5nIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZ1bmN0aW9uIHRoYXQgZm9sbG93cy5cbiAgXy5jb21wb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgdmFyIHN0YXJ0ID0gYXJncy5sZW5ndGggLSAxO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpID0gc3RhcnQ7XG4gICAgICB2YXIgcmVzdWx0ID0gYXJnc1tzdGFydF0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHdoaWxlIChpLS0pIHJlc3VsdCA9IGFyZ3NbaV0uY2FsbCh0aGlzLCByZXN1bHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgb25seSBiZSBleGVjdXRlZCBhZnRlciBiZWluZyBjYWxsZWQgTiB0aW1lcy5cbiAgXy5hZnRlciA9IGZ1bmN0aW9uKHRpbWVzLCBmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC0tdGltZXMgPCAxKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIG9ubHkgYmUgZXhlY3V0ZWQgYmVmb3JlIGJlaW5nIGNhbGxlZCBOIHRpbWVzLlxuICBfLmJlZm9yZSA9IGZ1bmN0aW9uKHRpbWVzLCBmdW5jKSB7XG4gICAgdmFyIG1lbW87XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC0tdGltZXMgPiAwKSB7XG4gICAgICAgIG1lbW8gPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmdW5jID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBleGVjdXRlZCBhdCBtb3N0IG9uZSB0aW1lLCBubyBtYXR0ZXIgaG93XG4gIC8vIG9mdGVuIHlvdSBjYWxsIGl0LiBVc2VmdWwgZm9yIGxhenkgaW5pdGlhbGl6YXRpb24uXG4gIF8ub25jZSA9IF8ucGFydGlhbChfLmJlZm9yZSwgMik7XG5cbiAgLy8gT2JqZWN0IEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gUmV0cmlldmUgdGhlIG5hbWVzIG9mIGFuIG9iamVjdCdzIHByb3BlcnRpZXMuXG4gIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBPYmplY3Qua2V5c2BcbiAgXy5rZXlzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KG9iaikpIHJldHVybiBbXTtcbiAgICBpZiAobmF0aXZlS2V5cykgcmV0dXJuIG5hdGl2ZUtleXMob2JqKTtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIGlmIChfLmhhcyhvYmosIGtleSkpIGtleXMucHVzaChrZXkpO1xuICAgIHJldHVybiBrZXlzO1xuICB9O1xuXG4gIC8vIFJldHJpZXZlIHRoZSB2YWx1ZXMgb2YgYW4gb2JqZWN0J3MgcHJvcGVydGllcy5cbiAgXy52YWx1ZXMgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgdmFsdWVzID0gQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWx1ZXNbaV0gPSBvYmpba2V5c1tpXV07XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH07XG5cbiAgLy8gQ29udmVydCBhbiBvYmplY3QgaW50byBhIGxpc3Qgb2YgYFtrZXksIHZhbHVlXWAgcGFpcnMuXG4gIF8ucGFpcnMgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgcGFpcnMgPSBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHBhaXJzW2ldID0gW2tleXNbaV0sIG9ialtrZXlzW2ldXV07XG4gICAgfVxuICAgIHJldHVybiBwYWlycztcbiAgfTtcblxuICAvLyBJbnZlcnQgdGhlIGtleXMgYW5kIHZhbHVlcyBvZiBhbiBvYmplY3QuIFRoZSB2YWx1ZXMgbXVzdCBiZSBzZXJpYWxpemFibGUuXG4gIF8uaW52ZXJ0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3VsdFtvYmpba2V5c1tpXV1dID0ga2V5c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSBzb3J0ZWQgbGlzdCBvZiB0aGUgZnVuY3Rpb24gbmFtZXMgYXZhaWxhYmxlIG9uIHRoZSBvYmplY3QuXG4gIC8vIEFsaWFzZWQgYXMgYG1ldGhvZHNgXG4gIF8uZnVuY3Rpb25zID0gXy5tZXRob2RzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIG5hbWVzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKF8uaXNGdW5jdGlvbihvYmpba2V5XSkpIG5hbWVzLnB1c2goa2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIG5hbWVzLnNvcnQoKTtcbiAgfTtcblxuICAvLyBFeHRlbmQgYSBnaXZlbiBvYmplY3Qgd2l0aCBhbGwgdGhlIHByb3BlcnRpZXMgaW4gcGFzc2VkLWluIG9iamVjdChzKS5cbiAgXy5leHRlbmQgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIV8uaXNPYmplY3Qob2JqKSkgcmV0dXJuIG9iajtcbiAgICB2YXIgc291cmNlLCBwcm9wO1xuICAgIGZvciAodmFyIGkgPSAxLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGZvciAocHJvcCBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBwcm9wKSkge1xuICAgICAgICAgICAgb2JqW3Byb3BdID0gc291cmNlW3Byb3BdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgb2JqZWN0IG9ubHkgY29udGFpbmluZyB0aGUgd2hpdGVsaXN0ZWQgcHJvcGVydGllcy5cbiAgXy5waWNrID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHQgPSB7fSwga2V5O1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHJlc3VsdDtcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKGl0ZXJhdGVlKSkge1xuICAgICAgaXRlcmF0ZWUgPSBjcmVhdGVDYWxsYmFjayhpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICAgICAgdmFyIHZhbHVlID0gb2JqW2tleV07XG4gICAgICAgIGlmIChpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmopKSByZXN1bHRba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIga2V5cyA9IGNvbmNhdC5hcHBseShbXSwgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgICAgIG9iaiA9IG5ldyBPYmplY3Qob2JqKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgIGlmIChrZXkgaW4gb2JqKSByZXN1bHRba2V5XSA9IG9ialtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gICAvLyBSZXR1cm4gYSBjb3B5IG9mIHRoZSBvYmplY3Qgd2l0aG91dCB0aGUgYmxhY2tsaXN0ZWQgcHJvcGVydGllcy5cbiAgXy5vbWl0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIGlmIChfLmlzRnVuY3Rpb24oaXRlcmF0ZWUpKSB7XG4gICAgICBpdGVyYXRlZSA9IF8ubmVnYXRlKGl0ZXJhdGVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGtleXMgPSBfLm1hcChjb25jYXQuYXBwbHkoW10sIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSksIFN0cmluZyk7XG4gICAgICBpdGVyYXRlZSA9IGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgcmV0dXJuICFfLmNvbnRhaW5zKGtleXMsIGtleSk7XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gXy5waWNrKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpO1xuICB9O1xuXG4gIC8vIEZpbGwgaW4gYSBnaXZlbiBvYmplY3Qgd2l0aCBkZWZhdWx0IHByb3BlcnRpZXMuXG4gIF8uZGVmYXVsdHMgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIV8uaXNPYmplY3Qob2JqKSkgcmV0dXJuIG9iajtcbiAgICBmb3IgKHZhciBpID0gMSwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIgcHJvcCBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKG9ialtwcm9wXSA9PT0gdm9pZCAwKSBvYmpbcHJvcF0gPSBzb3VyY2VbcHJvcF07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gQ3JlYXRlIGEgKHNoYWxsb3ctY2xvbmVkKSBkdXBsaWNhdGUgb2YgYW4gb2JqZWN0LlxuICBfLmNsb25lID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KG9iaikpIHJldHVybiBvYmo7XG4gICAgcmV0dXJuIF8uaXNBcnJheShvYmopID8gb2JqLnNsaWNlKCkgOiBfLmV4dGVuZCh7fSwgb2JqKTtcbiAgfTtcblxuICAvLyBJbnZva2VzIGludGVyY2VwdG9yIHdpdGggdGhlIG9iaiwgYW5kIHRoZW4gcmV0dXJucyBvYmouXG4gIC8vIFRoZSBwcmltYXJ5IHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG8gXCJ0YXAgaW50b1wiIGEgbWV0aG9kIGNoYWluLCBpblxuICAvLyBvcmRlciB0byBwZXJmb3JtIG9wZXJhdGlvbnMgb24gaW50ZXJtZWRpYXRlIHJlc3VsdHMgd2l0aGluIHRoZSBjaGFpbi5cbiAgXy50YXAgPSBmdW5jdGlvbihvYmosIGludGVyY2VwdG9yKSB7XG4gICAgaW50ZXJjZXB0b3Iob2JqKTtcbiAgICByZXR1cm4gb2JqO1xuICB9O1xuXG4gIC8vIEludGVybmFsIHJlY3Vyc2l2ZSBjb21wYXJpc29uIGZ1bmN0aW9uIGZvciBgaXNFcXVhbGAuXG4gIHZhciBlcSA9IGZ1bmN0aW9uKGEsIGIsIGFTdGFjaywgYlN0YWNrKSB7XG4gICAgLy8gSWRlbnRpY2FsIG9iamVjdHMgYXJlIGVxdWFsLiBgMCA9PT0gLTBgLCBidXQgdGhleSBhcmVuJ3QgaWRlbnRpY2FsLlxuICAgIC8vIFNlZSB0aGUgW0hhcm1vbnkgYGVnYWxgIHByb3Bvc2FsXShodHRwOi8vd2lraS5lY21hc2NyaXB0Lm9yZy9kb2t1LnBocD9pZD1oYXJtb255OmVnYWwpLlxuICAgIGlmIChhID09PSBiKSByZXR1cm4gYSAhPT0gMCB8fCAxIC8gYSA9PT0gMSAvIGI7XG4gICAgLy8gQSBzdHJpY3QgY29tcGFyaXNvbiBpcyBuZWNlc3NhcnkgYmVjYXVzZSBgbnVsbCA9PSB1bmRlZmluZWRgLlxuICAgIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSByZXR1cm4gYSA9PT0gYjtcbiAgICAvLyBVbndyYXAgYW55IHdyYXBwZWQgb2JqZWN0cy5cbiAgICBpZiAoYSBpbnN0YW5jZW9mIF8pIGEgPSBhLl93cmFwcGVkO1xuICAgIGlmIChiIGluc3RhbmNlb2YgXykgYiA9IGIuX3dyYXBwZWQ7XG4gICAgLy8gQ29tcGFyZSBgW1tDbGFzc11dYCBuYW1lcy5cbiAgICB2YXIgY2xhc3NOYW1lID0gdG9TdHJpbmcuY2FsbChhKTtcbiAgICBpZiAoY2xhc3NOYW1lICE9PSB0b1N0cmluZy5jYWxsKGIpKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpdGNoIChjbGFzc05hbWUpIHtcbiAgICAgIC8vIFN0cmluZ3MsIG51bWJlcnMsIHJlZ3VsYXIgZXhwcmVzc2lvbnMsIGRhdGVzLCBhbmQgYm9vbGVhbnMgYXJlIGNvbXBhcmVkIGJ5IHZhbHVlLlxuICAgICAgY2FzZSAnW29iamVjdCBSZWdFeHBdJzpcbiAgICAgIC8vIFJlZ0V4cHMgYXJlIGNvZXJjZWQgdG8gc3RyaW5ncyBmb3IgY29tcGFyaXNvbiAoTm90ZTogJycgKyAvYS9pID09PSAnL2EvaScpXG4gICAgICBjYXNlICdbb2JqZWN0IFN0cmluZ10nOlxuICAgICAgICAvLyBQcmltaXRpdmVzIGFuZCB0aGVpciBjb3JyZXNwb25kaW5nIG9iamVjdCB3cmFwcGVycyBhcmUgZXF1aXZhbGVudDsgdGh1cywgYFwiNVwiYCBpc1xuICAgICAgICAvLyBlcXVpdmFsZW50IHRvIGBuZXcgU3RyaW5nKFwiNVwiKWAuXG4gICAgICAgIHJldHVybiAnJyArIGEgPT09ICcnICsgYjtcbiAgICAgIGNhc2UgJ1tvYmplY3QgTnVtYmVyXSc6XG4gICAgICAgIC8vIGBOYU5gcyBhcmUgZXF1aXZhbGVudCwgYnV0IG5vbi1yZWZsZXhpdmUuXG4gICAgICAgIC8vIE9iamVjdChOYU4pIGlzIGVxdWl2YWxlbnQgdG8gTmFOXG4gICAgICAgIGlmICgrYSAhPT0gK2EpIHJldHVybiArYiAhPT0gK2I7XG4gICAgICAgIC8vIEFuIGBlZ2FsYCBjb21wYXJpc29uIGlzIHBlcmZvcm1lZCBmb3Igb3RoZXIgbnVtZXJpYyB2YWx1ZXMuXG4gICAgICAgIHJldHVybiArYSA9PT0gMCA/IDEgLyArYSA9PT0gMSAvIGIgOiArYSA9PT0gK2I7XG4gICAgICBjYXNlICdbb2JqZWN0IERhdGVdJzpcbiAgICAgIGNhc2UgJ1tvYmplY3QgQm9vbGVhbl0nOlxuICAgICAgICAvLyBDb2VyY2UgZGF0ZXMgYW5kIGJvb2xlYW5zIHRvIG51bWVyaWMgcHJpbWl0aXZlIHZhbHVlcy4gRGF0ZXMgYXJlIGNvbXBhcmVkIGJ5IHRoZWlyXG4gICAgICAgIC8vIG1pbGxpc2Vjb25kIHJlcHJlc2VudGF0aW9ucy4gTm90ZSB0aGF0IGludmFsaWQgZGF0ZXMgd2l0aCBtaWxsaXNlY29uZCByZXByZXNlbnRhdGlvbnNcbiAgICAgICAgLy8gb2YgYE5hTmAgYXJlIG5vdCBlcXVpdmFsZW50LlxuICAgICAgICByZXR1cm4gK2EgPT09ICtiO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGEgIT0gJ29iamVjdCcgfHwgdHlwZW9mIGIgIT0gJ29iamVjdCcpIHJldHVybiBmYWxzZTtcbiAgICAvLyBBc3N1bWUgZXF1YWxpdHkgZm9yIGN5Y2xpYyBzdHJ1Y3R1cmVzLiBUaGUgYWxnb3JpdGhtIGZvciBkZXRlY3RpbmcgY3ljbGljXG4gICAgLy8gc3RydWN0dXJlcyBpcyBhZGFwdGVkIGZyb20gRVMgNS4xIHNlY3Rpb24gMTUuMTIuMywgYWJzdHJhY3Qgb3BlcmF0aW9uIGBKT2AuXG4gICAgdmFyIGxlbmd0aCA9IGFTdGFjay5sZW5ndGg7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAvLyBMaW5lYXIgc2VhcmNoLiBQZXJmb3JtYW5jZSBpcyBpbnZlcnNlbHkgcHJvcG9ydGlvbmFsIHRvIHRoZSBudW1iZXIgb2ZcbiAgICAgIC8vIHVuaXF1ZSBuZXN0ZWQgc3RydWN0dXJlcy5cbiAgICAgIGlmIChhU3RhY2tbbGVuZ3RoXSA9PT0gYSkgcmV0dXJuIGJTdGFja1tsZW5ndGhdID09PSBiO1xuICAgIH1cbiAgICAvLyBPYmplY3RzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWl2YWxlbnQsIGJ1dCBgT2JqZWN0YHNcbiAgICAvLyBmcm9tIGRpZmZlcmVudCBmcmFtZXMgYXJlLlxuICAgIHZhciBhQ3RvciA9IGEuY29uc3RydWN0b3IsIGJDdG9yID0gYi5jb25zdHJ1Y3RvcjtcbiAgICBpZiAoXG4gICAgICBhQ3RvciAhPT0gYkN0b3IgJiZcbiAgICAgIC8vIEhhbmRsZSBPYmplY3QuY3JlYXRlKHgpIGNhc2VzXG4gICAgICAnY29uc3RydWN0b3InIGluIGEgJiYgJ2NvbnN0cnVjdG9yJyBpbiBiICYmXG4gICAgICAhKF8uaXNGdW5jdGlvbihhQ3RvcikgJiYgYUN0b3IgaW5zdGFuY2VvZiBhQ3RvciAmJlxuICAgICAgICBfLmlzRnVuY3Rpb24oYkN0b3IpICYmIGJDdG9yIGluc3RhbmNlb2YgYkN0b3IpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIEFkZCB0aGUgZmlyc3Qgb2JqZWN0IHRvIHRoZSBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICBhU3RhY2sucHVzaChhKTtcbiAgICBiU3RhY2sucHVzaChiKTtcbiAgICB2YXIgc2l6ZSwgcmVzdWx0O1xuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyBhbmQgYXJyYXlzLlxuICAgIGlmIChjbGFzc05hbWUgPT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIC8vIENvbXBhcmUgYXJyYXkgbGVuZ3RocyB0byBkZXRlcm1pbmUgaWYgYSBkZWVwIGNvbXBhcmlzb24gaXMgbmVjZXNzYXJ5LlxuICAgICAgc2l6ZSA9IGEubGVuZ3RoO1xuICAgICAgcmVzdWx0ID0gc2l6ZSA9PT0gYi5sZW5ndGg7XG4gICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIC8vIERlZXAgY29tcGFyZSB0aGUgY29udGVudHMsIGlnbm9yaW5nIG5vbi1udW1lcmljIHByb3BlcnRpZXMuXG4gICAgICAgIHdoaWxlIChzaXplLS0pIHtcbiAgICAgICAgICBpZiAoIShyZXN1bHQgPSBlcShhW3NpemVdLCBiW3NpemVdLCBhU3RhY2ssIGJTdGFjaykpKSBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBEZWVwIGNvbXBhcmUgb2JqZWN0cy5cbiAgICAgIHZhciBrZXlzID0gXy5rZXlzKGEpLCBrZXk7XG4gICAgICBzaXplID0ga2V5cy5sZW5ndGg7XG4gICAgICAvLyBFbnN1cmUgdGhhdCBib3RoIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBudW1iZXIgb2YgcHJvcGVydGllcyBiZWZvcmUgY29tcGFyaW5nIGRlZXAgZXF1YWxpdHkuXG4gICAgICByZXN1bHQgPSBfLmtleXMoYikubGVuZ3RoID09PSBzaXplO1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICB3aGlsZSAoc2l6ZS0tKSB7XG4gICAgICAgICAgLy8gRGVlcCBjb21wYXJlIGVhY2ggbWVtYmVyXG4gICAgICAgICAga2V5ID0ga2V5c1tzaXplXTtcbiAgICAgICAgICBpZiAoIShyZXN1bHQgPSBfLmhhcyhiLCBrZXkpICYmIGVxKGFba2V5XSwgYltrZXldLCBhU3RhY2ssIGJTdGFjaykpKSBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBSZW1vdmUgdGhlIGZpcnN0IG9iamVjdCBmcm9tIHRoZSBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICBhU3RhY2sucG9wKCk7XG4gICAgYlN0YWNrLnBvcCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gUGVyZm9ybSBhIGRlZXAgY29tcGFyaXNvbiB0byBjaGVjayBpZiB0d28gb2JqZWN0cyBhcmUgZXF1YWwuXG4gIF8uaXNFcXVhbCA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gZXEoYSwgYiwgW10sIFtdKTtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIGFycmF5LCBzdHJpbmcsIG9yIG9iamVjdCBlbXB0eT9cbiAgLy8gQW4gXCJlbXB0eVwiIG9iamVjdCBoYXMgbm8gZW51bWVyYWJsZSBvd24tcHJvcGVydGllcy5cbiAgXy5pc0VtcHR5ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoXy5pc0FycmF5KG9iaikgfHwgXy5pc1N0cmluZyhvYmopIHx8IF8uaXNBcmd1bWVudHMob2JqKSkgcmV0dXJuIG9iai5sZW5ndGggPT09IDA7XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikgaWYgKF8uaGFzKG9iaiwga2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYSBET00gZWxlbWVudD9cbiAgXy5pc0VsZW1lbnQgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gISEob2JqICYmIG9iai5ub2RlVHlwZSA9PT0gMSk7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhbiBhcnJheT9cbiAgLy8gRGVsZWdhdGVzIHRvIEVDTUE1J3MgbmF0aXZlIEFycmF5LmlzQXJyYXlcbiAgXy5pc0FycmF5ID0gbmF0aXZlSXNBcnJheSB8fCBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBBcnJheV0nO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFyaWFibGUgYW4gb2JqZWN0P1xuICBfLmlzT2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIHR5cGUgPSB0eXBlb2Ygb2JqO1xuICAgIHJldHVybiB0eXBlID09PSAnZnVuY3Rpb24nIHx8IHR5cGUgPT09ICdvYmplY3QnICYmICEhb2JqO1xuICB9O1xuXG4gIC8vIEFkZCBzb21lIGlzVHlwZSBtZXRob2RzOiBpc0FyZ3VtZW50cywgaXNGdW5jdGlvbiwgaXNTdHJpbmcsIGlzTnVtYmVyLCBpc0RhdGUsIGlzUmVnRXhwLlxuICBfLmVhY2goWydBcmd1bWVudHMnLCAnRnVuY3Rpb24nLCAnU3RyaW5nJywgJ051bWJlcicsICdEYXRlJywgJ1JlZ0V4cCddLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgX1snaXMnICsgbmFtZV0gPSBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0ICcgKyBuYW1lICsgJ10nO1xuICAgIH07XG4gIH0pO1xuXG4gIC8vIERlZmluZSBhIGZhbGxiYWNrIHZlcnNpb24gb2YgdGhlIG1ldGhvZCBpbiBicm93c2VycyAoYWhlbSwgSUUpLCB3aGVyZVxuICAvLyB0aGVyZSBpc24ndCBhbnkgaW5zcGVjdGFibGUgXCJBcmd1bWVudHNcIiB0eXBlLlxuICBpZiAoIV8uaXNBcmd1bWVudHMoYXJndW1lbnRzKSkge1xuICAgIF8uaXNBcmd1bWVudHMgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBfLmhhcyhvYmosICdjYWxsZWUnKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gT3B0aW1pemUgYGlzRnVuY3Rpb25gIGlmIGFwcHJvcHJpYXRlLiBXb3JrIGFyb3VuZCBhbiBJRSAxMSBidWcuXG4gIGlmICh0eXBlb2YgLy4vICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgXy5pc0Z1bmN0aW9uID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PSAnZnVuY3Rpb24nIHx8IGZhbHNlO1xuICAgIH07XG4gIH1cblxuICAvLyBJcyBhIGdpdmVuIG9iamVjdCBhIGZpbml0ZSBudW1iZXI/XG4gIF8uaXNGaW5pdGUgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gaXNGaW5pdGUob2JqKSAmJiAhaXNOYU4ocGFyc2VGbG9hdChvYmopKTtcbiAgfTtcblxuICAvLyBJcyB0aGUgZ2l2ZW4gdmFsdWUgYE5hTmA/IChOYU4gaXMgdGhlIG9ubHkgbnVtYmVyIHdoaWNoIGRvZXMgbm90IGVxdWFsIGl0c2VsZikuXG4gIF8uaXNOYU4gPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gXy5pc051bWJlcihvYmopICYmIG9iaiAhPT0gK29iajtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGEgYm9vbGVhbj9cbiAgXy5pc0Jvb2xlYW4gPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqID09PSB0cnVlIHx8IG9iaiA9PT0gZmFsc2UgfHwgdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBCb29sZWFuXSc7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBlcXVhbCB0byBudWxsP1xuICBfLmlzTnVsbCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogPT09IG51bGw7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YXJpYWJsZSB1bmRlZmluZWQ/XG4gIF8uaXNVbmRlZmluZWQgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqID09PSB2b2lkIDA7XG4gIH07XG5cbiAgLy8gU2hvcnRjdXQgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGFuIG9iamVjdCBoYXMgYSBnaXZlbiBwcm9wZXJ0eSBkaXJlY3RseVxuICAvLyBvbiBpdHNlbGYgKGluIG90aGVyIHdvcmRzLCBub3Qgb24gYSBwcm90b3R5cGUpLlxuICBfLmhhcyA9IGZ1bmN0aW9uKG9iaiwga2V5KSB7XG4gICAgcmV0dXJuIG9iaiAhPSBudWxsICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpO1xuICB9O1xuXG4gIC8vIFV0aWxpdHkgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gUnVuIFVuZGVyc2NvcmUuanMgaW4gKm5vQ29uZmxpY3QqIG1vZGUsIHJldHVybmluZyB0aGUgYF9gIHZhcmlhYmxlIHRvIGl0c1xuICAvLyBwcmV2aW91cyBvd25lci4gUmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QuXG4gIF8ubm9Db25mbGljdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJvb3QuXyA9IHByZXZpb3VzVW5kZXJzY29yZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBLZWVwIHRoZSBpZGVudGl0eSBmdW5jdGlvbiBhcm91bmQgZm9yIGRlZmF1bHQgaXRlcmF0ZWVzLlxuICBfLmlkZW50aXR5ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgXy5jb25zdGFudCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gIH07XG5cbiAgXy5ub29wID0gZnVuY3Rpb24oKXt9O1xuXG4gIF8ucHJvcGVydHkgPSBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gb2JqW2tleV07XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgcHJlZGljYXRlIGZvciBjaGVja2luZyB3aGV0aGVyIGFuIG9iamVjdCBoYXMgYSBnaXZlbiBzZXQgb2YgYGtleTp2YWx1ZWAgcGFpcnMuXG4gIF8ubWF0Y2hlcyA9IGZ1bmN0aW9uKGF0dHJzKSB7XG4gICAgdmFyIHBhaXJzID0gXy5wYWlycyhhdHRycyksIGxlbmd0aCA9IHBhaXJzLmxlbmd0aDtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7XG4gICAgICBpZiAob2JqID09IG51bGwpIHJldHVybiAhbGVuZ3RoO1xuICAgICAgb2JqID0gbmV3IE9iamVjdChvYmopO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2ldLCBrZXkgPSBwYWlyWzBdO1xuICAgICAgICBpZiAocGFpclsxXSAhPT0gb2JqW2tleV0gfHwgIShrZXkgaW4gb2JqKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSdW4gYSBmdW5jdGlvbiAqKm4qKiB0aW1lcy5cbiAgXy50aW1lcyA9IGZ1bmN0aW9uKG4sIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgdmFyIGFjY3VtID0gQXJyYXkoTWF0aC5tYXgoMCwgbikpO1xuICAgIGl0ZXJhdGVlID0gY3JlYXRlQ2FsbGJhY2soaXRlcmF0ZWUsIGNvbnRleHQsIDEpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSBhY2N1bVtpXSA9IGl0ZXJhdGVlKGkpO1xuICAgIHJldHVybiBhY2N1bTtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSByYW5kb20gaW50ZWdlciBiZXR3ZWVuIG1pbiBhbmQgbWF4IChpbmNsdXNpdmUpLlxuICBfLnJhbmRvbSA9IGZ1bmN0aW9uKG1pbiwgbWF4KSB7XG4gICAgaWYgKG1heCA9PSBudWxsKSB7XG4gICAgICBtYXggPSBtaW47XG4gICAgICBtaW4gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gbWluICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKTtcbiAgfTtcblxuICAvLyBBIChwb3NzaWJseSBmYXN0ZXIpIHdheSB0byBnZXQgdGhlIGN1cnJlbnQgdGltZXN0YW1wIGFzIGFuIGludGVnZXIuXG4gIF8ubm93ID0gRGF0ZS5ub3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICB9O1xuXG4gICAvLyBMaXN0IG9mIEhUTUwgZW50aXRpZXMgZm9yIGVzY2FwaW5nLlxuICB2YXIgZXNjYXBlTWFwID0ge1xuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjeDI3OycsXG4gICAgJ2AnOiAnJiN4NjA7J1xuICB9O1xuICB2YXIgdW5lc2NhcGVNYXAgPSBfLmludmVydChlc2NhcGVNYXApO1xuXG4gIC8vIEZ1bmN0aW9ucyBmb3IgZXNjYXBpbmcgYW5kIHVuZXNjYXBpbmcgc3RyaW5ncyB0by9mcm9tIEhUTUwgaW50ZXJwb2xhdGlvbi5cbiAgdmFyIGNyZWF0ZUVzY2FwZXIgPSBmdW5jdGlvbihtYXApIHtcbiAgICB2YXIgZXNjYXBlciA9IGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgICByZXR1cm4gbWFwW21hdGNoXTtcbiAgICB9O1xuICAgIC8vIFJlZ2V4ZXMgZm9yIGlkZW50aWZ5aW5nIGEga2V5IHRoYXQgbmVlZHMgdG8gYmUgZXNjYXBlZFxuICAgIHZhciBzb3VyY2UgPSAnKD86JyArIF8ua2V5cyhtYXApLmpvaW4oJ3wnKSArICcpJztcbiAgICB2YXIgdGVzdFJlZ2V4cCA9IFJlZ0V4cChzb3VyY2UpO1xuICAgIHZhciByZXBsYWNlUmVnZXhwID0gUmVnRXhwKHNvdXJjZSwgJ2cnKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSBzdHJpbmcgPT0gbnVsbCA/ICcnIDogJycgKyBzdHJpbmc7XG4gICAgICByZXR1cm4gdGVzdFJlZ2V4cC50ZXN0KHN0cmluZykgPyBzdHJpbmcucmVwbGFjZShyZXBsYWNlUmVnZXhwLCBlc2NhcGVyKSA6IHN0cmluZztcbiAgICB9O1xuICB9O1xuICBfLmVzY2FwZSA9IGNyZWF0ZUVzY2FwZXIoZXNjYXBlTWFwKTtcbiAgXy51bmVzY2FwZSA9IGNyZWF0ZUVzY2FwZXIodW5lc2NhcGVNYXApO1xuXG4gIC8vIElmIHRoZSB2YWx1ZSBvZiB0aGUgbmFtZWQgYHByb3BlcnR5YCBpcyBhIGZ1bmN0aW9uIHRoZW4gaW52b2tlIGl0IHdpdGggdGhlXG4gIC8vIGBvYmplY3RgIGFzIGNvbnRleHQ7IG90aGVyd2lzZSwgcmV0dXJuIGl0LlxuICBfLnJlc3VsdCA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHtcbiAgICBpZiAob2JqZWN0ID09IG51bGwpIHJldHVybiB2b2lkIDA7XG4gICAgdmFyIHZhbHVlID0gb2JqZWN0W3Byb3BlcnR5XTtcbiAgICByZXR1cm4gXy5pc0Z1bmN0aW9uKHZhbHVlKSA/IG9iamVjdFtwcm9wZXJ0eV0oKSA6IHZhbHVlO1xuICB9O1xuXG4gIC8vIEdlbmVyYXRlIGEgdW5pcXVlIGludGVnZXIgaWQgKHVuaXF1ZSB3aXRoaW4gdGhlIGVudGlyZSBjbGllbnQgc2Vzc2lvbikuXG4gIC8vIFVzZWZ1bCBmb3IgdGVtcG9yYXJ5IERPTSBpZHMuXG4gIHZhciBpZENvdW50ZXIgPSAwO1xuICBfLnVuaXF1ZUlkID0gZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgdmFyIGlkID0gKytpZENvdW50ZXIgKyAnJztcbiAgICByZXR1cm4gcHJlZml4ID8gcHJlZml4ICsgaWQgOiBpZDtcbiAgfTtcblxuICAvLyBCeSBkZWZhdWx0LCBVbmRlcnNjb3JlIHVzZXMgRVJCLXN0eWxlIHRlbXBsYXRlIGRlbGltaXRlcnMsIGNoYW5nZSB0aGVcbiAgLy8gZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZSBkZWxpbWl0ZXJzLlxuICBfLnRlbXBsYXRlU2V0dGluZ3MgPSB7XG4gICAgZXZhbHVhdGUgICAgOiAvPCUoW1xcc1xcU10rPyklPi9nLFxuICAgIGludGVycG9sYXRlIDogLzwlPShbXFxzXFxTXSs/KSU+L2csXG4gICAgZXNjYXBlICAgICAgOiAvPCUtKFtcXHNcXFNdKz8pJT4vZ1xuICB9O1xuXG4gIC8vIFdoZW4gY3VzdG9taXppbmcgYHRlbXBsYXRlU2V0dGluZ3NgLCBpZiB5b3UgZG9uJ3Qgd2FudCB0byBkZWZpbmUgYW5cbiAgLy8gaW50ZXJwb2xhdGlvbiwgZXZhbHVhdGlvbiBvciBlc2NhcGluZyByZWdleCwgd2UgbmVlZCBvbmUgdGhhdCBpc1xuICAvLyBndWFyYW50ZWVkIG5vdCB0byBtYXRjaC5cbiAgdmFyIG5vTWF0Y2ggPSAvKC4pXi87XG5cbiAgLy8gQ2VydGFpbiBjaGFyYWN0ZXJzIG5lZWQgdG8gYmUgZXNjYXBlZCBzbyB0aGF0IHRoZXkgY2FuIGJlIHB1dCBpbnRvIGFcbiAgLy8gc3RyaW5nIGxpdGVyYWwuXG4gIHZhciBlc2NhcGVzID0ge1xuICAgIFwiJ1wiOiAgICAgIFwiJ1wiLFxuICAgICdcXFxcJzogICAgICdcXFxcJyxcbiAgICAnXFxyJzogICAgICdyJyxcbiAgICAnXFxuJzogICAgICduJyxcbiAgICAnXFx1MjAyOCc6ICd1MjAyOCcsXG4gICAgJ1xcdTIwMjknOiAndTIwMjknXG4gIH07XG5cbiAgdmFyIGVzY2FwZXIgPSAvXFxcXHwnfFxccnxcXG58XFx1MjAyOHxcXHUyMDI5L2c7XG5cbiAgdmFyIGVzY2FwZUNoYXIgPSBmdW5jdGlvbihtYXRjaCkge1xuICAgIHJldHVybiAnXFxcXCcgKyBlc2NhcGVzW21hdGNoXTtcbiAgfTtcblxuICAvLyBKYXZhU2NyaXB0IG1pY3JvLXRlbXBsYXRpbmcsIHNpbWlsYXIgdG8gSm9obiBSZXNpZydzIGltcGxlbWVudGF0aW9uLlxuICAvLyBVbmRlcnNjb3JlIHRlbXBsYXRpbmcgaGFuZGxlcyBhcmJpdHJhcnkgZGVsaW1pdGVycywgcHJlc2VydmVzIHdoaXRlc3BhY2UsXG4gIC8vIGFuZCBjb3JyZWN0bHkgZXNjYXBlcyBxdW90ZXMgd2l0aGluIGludGVycG9sYXRlZCBjb2RlLlxuICAvLyBOQjogYG9sZFNldHRpbmdzYCBvbmx5IGV4aXN0cyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gIF8udGVtcGxhdGUgPSBmdW5jdGlvbih0ZXh0LCBzZXR0aW5ncywgb2xkU2V0dGluZ3MpIHtcbiAgICBpZiAoIXNldHRpbmdzICYmIG9sZFNldHRpbmdzKSBzZXR0aW5ncyA9IG9sZFNldHRpbmdzO1xuICAgIHNldHRpbmdzID0gXy5kZWZhdWx0cyh7fSwgc2V0dGluZ3MsIF8udGVtcGxhdGVTZXR0aW5ncyk7XG5cbiAgICAvLyBDb21iaW5lIGRlbGltaXRlcnMgaW50byBvbmUgcmVndWxhciBleHByZXNzaW9uIHZpYSBhbHRlcm5hdGlvbi5cbiAgICB2YXIgbWF0Y2hlciA9IFJlZ0V4cChbXG4gICAgICAoc2V0dGluZ3MuZXNjYXBlIHx8IG5vTWF0Y2gpLnNvdXJjZSxcbiAgICAgIChzZXR0aW5ncy5pbnRlcnBvbGF0ZSB8fCBub01hdGNoKS5zb3VyY2UsXG4gICAgICAoc2V0dGluZ3MuZXZhbHVhdGUgfHwgbm9NYXRjaCkuc291cmNlXG4gICAgXS5qb2luKCd8JykgKyAnfCQnLCAnZycpO1xuXG4gICAgLy8gQ29tcGlsZSB0aGUgdGVtcGxhdGUgc291cmNlLCBlc2NhcGluZyBzdHJpbmcgbGl0ZXJhbHMgYXBwcm9wcmlhdGVseS5cbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBzb3VyY2UgPSBcIl9fcCs9J1wiO1xuICAgIHRleHQucmVwbGFjZShtYXRjaGVyLCBmdW5jdGlvbihtYXRjaCwgZXNjYXBlLCBpbnRlcnBvbGF0ZSwgZXZhbHVhdGUsIG9mZnNldCkge1xuICAgICAgc291cmNlICs9IHRleHQuc2xpY2UoaW5kZXgsIG9mZnNldCkucmVwbGFjZShlc2NhcGVyLCBlc2NhcGVDaGFyKTtcbiAgICAgIGluZGV4ID0gb2Zmc2V0ICsgbWF0Y2gubGVuZ3RoO1xuXG4gICAgICBpZiAoZXNjYXBlKSB7XG4gICAgICAgIHNvdXJjZSArPSBcIicrXFxuKChfX3Q9KFwiICsgZXNjYXBlICsgXCIpKT09bnVsbD8nJzpfLmVzY2FwZShfX3QpKStcXG4nXCI7XG4gICAgICB9IGVsc2UgaWYgKGludGVycG9sYXRlKSB7XG4gICAgICAgIHNvdXJjZSArPSBcIicrXFxuKChfX3Q9KFwiICsgaW50ZXJwb2xhdGUgKyBcIikpPT1udWxsPycnOl9fdCkrXFxuJ1wiO1xuICAgICAgfSBlbHNlIGlmIChldmFsdWF0ZSkge1xuICAgICAgICBzb3VyY2UgKz0gXCInO1xcblwiICsgZXZhbHVhdGUgKyBcIlxcbl9fcCs9J1wiO1xuICAgICAgfVxuXG4gICAgICAvLyBBZG9iZSBWTXMgbmVlZCB0aGUgbWF0Y2ggcmV0dXJuZWQgdG8gcHJvZHVjZSB0aGUgY29ycmVjdCBvZmZlc3QuXG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG4gICAgc291cmNlICs9IFwiJztcXG5cIjtcblxuICAgIC8vIElmIGEgdmFyaWFibGUgaXMgbm90IHNwZWNpZmllZCwgcGxhY2UgZGF0YSB2YWx1ZXMgaW4gbG9jYWwgc2NvcGUuXG4gICAgaWYgKCFzZXR0aW5ncy52YXJpYWJsZSkgc291cmNlID0gJ3dpdGgob2JqfHx7fSl7XFxuJyArIHNvdXJjZSArICd9XFxuJztcblxuICAgIHNvdXJjZSA9IFwidmFyIF9fdCxfX3A9JycsX19qPUFycmF5LnByb3RvdHlwZS5qb2luLFwiICtcbiAgICAgIFwicHJpbnQ9ZnVuY3Rpb24oKXtfX3ArPV9fai5jYWxsKGFyZ3VtZW50cywnJyk7fTtcXG5cIiArXG4gICAgICBzb3VyY2UgKyAncmV0dXJuIF9fcDtcXG4nO1xuXG4gICAgdHJ5IHtcbiAgICAgIHZhciByZW5kZXIgPSBuZXcgRnVuY3Rpb24oc2V0dGluZ3MudmFyaWFibGUgfHwgJ29iaicsICdfJywgc291cmNlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBlLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuXG4gICAgdmFyIHRlbXBsYXRlID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIHJlbmRlci5jYWxsKHRoaXMsIGRhdGEsIF8pO1xuICAgIH07XG5cbiAgICAvLyBQcm92aWRlIHRoZSBjb21waWxlZCBzb3VyY2UgYXMgYSBjb252ZW5pZW5jZSBmb3IgcHJlY29tcGlsYXRpb24uXG4gICAgdmFyIGFyZ3VtZW50ID0gc2V0dGluZ3MudmFyaWFibGUgfHwgJ29iaic7XG4gICAgdGVtcGxhdGUuc291cmNlID0gJ2Z1bmN0aW9uKCcgKyBhcmd1bWVudCArICcpe1xcbicgKyBzb3VyY2UgKyAnfSc7XG5cbiAgICByZXR1cm4gdGVtcGxhdGU7XG4gIH07XG5cbiAgLy8gQWRkIGEgXCJjaGFpblwiIGZ1bmN0aW9uLiBTdGFydCBjaGFpbmluZyBhIHdyYXBwZWQgVW5kZXJzY29yZSBvYmplY3QuXG4gIF8uY2hhaW4gPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBfKG9iaik7XG4gICAgaW5zdGFuY2UuX2NoYWluID0gdHJ1ZTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH07XG5cbiAgLy8gT09QXG4gIC8vIC0tLS0tLS0tLS0tLS0tLVxuICAvLyBJZiBVbmRlcnNjb3JlIGlzIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLCBpdCByZXR1cm5zIGEgd3JhcHBlZCBvYmplY3QgdGhhdFxuICAvLyBjYW4gYmUgdXNlZCBPTy1zdHlsZS4gVGhpcyB3cmFwcGVyIGhvbGRzIGFsdGVyZWQgdmVyc2lvbnMgb2YgYWxsIHRoZVxuICAvLyB1bmRlcnNjb3JlIGZ1bmN0aW9ucy4gV3JhcHBlZCBvYmplY3RzIG1heSBiZSBjaGFpbmVkLlxuXG4gIC8vIEhlbHBlciBmdW5jdGlvbiB0byBjb250aW51ZSBjaGFpbmluZyBpbnRlcm1lZGlhdGUgcmVzdWx0cy5cbiAgdmFyIHJlc3VsdCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiB0aGlzLl9jaGFpbiA/IF8ob2JqKS5jaGFpbigpIDogb2JqO1xuICB9O1xuXG4gIC8vIEFkZCB5b3VyIG93biBjdXN0b20gZnVuY3Rpb25zIHRvIHRoZSBVbmRlcnNjb3JlIG9iamVjdC5cbiAgXy5taXhpbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIF8uZWFjaChfLmZ1bmN0aW9ucyhvYmopLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgICB2YXIgZnVuYyA9IF9bbmFtZV0gPSBvYmpbbmFtZV07XG4gICAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IFt0aGlzLl93cmFwcGVkXTtcbiAgICAgICAgcHVzaC5hcHBseShhcmdzLCBhcmd1bWVudHMpO1xuICAgICAgICByZXR1cm4gcmVzdWx0LmNhbGwodGhpcywgZnVuYy5hcHBseShfLCBhcmdzKSk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIEFkZCBhbGwgb2YgdGhlIFVuZGVyc2NvcmUgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyIG9iamVjdC5cbiAgXy5taXhpbihfKTtcblxuICAvLyBBZGQgYWxsIG11dGF0b3IgQXJyYXkgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyLlxuICBfLmVhY2goWydwb3AnLCAncHVzaCcsICdyZXZlcnNlJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBtZXRob2QgPSBBcnJheVByb3RvW25hbWVdO1xuICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgb2JqID0gdGhpcy5fd3JhcHBlZDtcbiAgICAgIG1ldGhvZC5hcHBseShvYmosIGFyZ3VtZW50cyk7XG4gICAgICBpZiAoKG5hbWUgPT09ICdzaGlmdCcgfHwgbmFtZSA9PT0gJ3NwbGljZScpICYmIG9iai5sZW5ndGggPT09IDApIGRlbGV0ZSBvYmpbMF07XG4gICAgICByZXR1cm4gcmVzdWx0LmNhbGwodGhpcywgb2JqKTtcbiAgICB9O1xuICB9KTtcblxuICAvLyBBZGQgYWxsIGFjY2Vzc29yIEFycmF5IGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlci5cbiAgXy5lYWNoKFsnY29uY2F0JywgJ2pvaW4nLCAnc2xpY2UnXSwgZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBtZXRob2QgPSBBcnJheVByb3RvW25hbWVdO1xuICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmVzdWx0LmNhbGwodGhpcywgbWV0aG9kLmFwcGx5KHRoaXMuX3dyYXBwZWQsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xuXG4gIC8vIEV4dHJhY3RzIHRoZSByZXN1bHQgZnJvbSBhIHdyYXBwZWQgYW5kIGNoYWluZWQgb2JqZWN0LlxuICBfLnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl93cmFwcGVkO1xuICB9O1xuXG4gIC8vIEFNRCByZWdpc3RyYXRpb24gaGFwcGVucyBhdCB0aGUgZW5kIGZvciBjb21wYXRpYmlsaXR5IHdpdGggQU1EIGxvYWRlcnNcbiAgLy8gdGhhdCBtYXkgbm90IGVuZm9yY2UgbmV4dC10dXJuIHNlbWFudGljcyBvbiBtb2R1bGVzLiBFdmVuIHRob3VnaCBnZW5lcmFsXG4gIC8vIHByYWN0aWNlIGZvciBBTUQgcmVnaXN0cmF0aW9uIGlzIHRvIGJlIGFub255bW91cywgdW5kZXJzY29yZSByZWdpc3RlcnNcbiAgLy8gYXMgYSBuYW1lZCBtb2R1bGUgYmVjYXVzZSwgbGlrZSBqUXVlcnksIGl0IGlzIGEgYmFzZSBsaWJyYXJ5IHRoYXQgaXNcbiAgLy8gcG9wdWxhciBlbm91Z2ggdG8gYmUgYnVuZGxlZCBpbiBhIHRoaXJkIHBhcnR5IGxpYiwgYnV0IG5vdCBiZSBwYXJ0IG9mXG4gIC8vIGFuIEFNRCBsb2FkIHJlcXVlc3QuIFRob3NlIGNhc2VzIGNvdWxkIGdlbmVyYXRlIGFuIGVycm9yIHdoZW4gYW5cbiAgLy8gYW5vbnltb3VzIGRlZmluZSgpIGlzIGNhbGxlZCBvdXRzaWRlIG9mIGEgbG9hZGVyIHJlcXVlc3QuXG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoJ3VuZGVyc2NvcmUnLCBbXSwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gXztcbiAgICB9KTtcbiAgfVxufS5jYWxsKHRoaXMpKTtcbiJdfQ==
